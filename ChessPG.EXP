0001   0000             .title ChessY2K_PGN_module
0002   0000             
0003   0000             ;=======================================
0004   0000             ;
0005   0000             ; CHESS PGN GAMES PART
0006   0000             ;
0007   0000             ;
0008   0000             ;=======================================
0009   0000             ;
0010   0000             ; ChessMN.ASM calls directly to this address
0011   0000             ;
0012   8000                         .org $8000
0013   8000             ;
0014   8000             ; Defines labels to access chess logic.
0015   8000             ; This was genereated by "export" operator of tasm
0016   8000             ; in ChessY2K.ASM
0017   8000             ; REPLACE THESE AFTER EACH RECOMPILE OF CHESSY2K.COM
0018   8000             ;
0019   8000             BOARD            .EQU  $0140
0020   8000             BKSQ             .EQU  $0185
0021   8000             BoardOut         .EQU  $145d
0022   8000             CASTLES          .EQU  $0182
0023   8000             CaptPiece        .EQU  $10f7
0024   8000             CastlMove        .EQU  $10f9
0025   8000             DEBUGs           .EQU  $1e48
0026   8000             DEC_I            .EQU  $1eda
0027   8000             ENPSQ            .EQU  $0183
0028   8000             GenMovesAndString .EQU  $0a74
0029   8000             GenMoves         .EQU  $0af8
0030   8000             GetFEN           .EQU  $135c
0031   8000             IsEmpty          .EQU  $10a3
0032   8000             IsOccupied       .EQU  $10ae
0033   8000             IsWhite          .EQU  $10b9
0034   8000             IsBlack          .EQU  $10d8
0035   8000             IsCheck          .EQU  $1522
0036   8000             LD_Ix            .EQU  $1ed1
0037   8000             MOVE_CNT         .EQU  $0673
0038   8000             MOVE_HIST        .EQU  $0674
0039   8000             MOVE_byString    .EQU  $0a7b
0040   8000             MbyStrMove       .EQU  $0a98
0041   8000             MovesToStr       .EQU  $11ae
0042   8000             MovesOut         .EQU  $128f
0043   8000             MakeMove         .EQU  $1907
0044   8000             MOVE_str         .EQU  $393e
0045   8000             NEXT_MVSTR       .EQU  $0186
0046   8000             NEXT_MVCNT       .EQU  $0492
0047   8000             NEXT_MOVES       .EQU  $0493
0048   8000             PromoPcId        .EQU  $10f8
0049   8000             SIDE             .EQU  $0181
0050   8000             SQi              .EQU  $0af5
0051   8000             SQt              .EQU  $0af6
0052   8000             SetFEN           .EQU  $1298
0053   8000             ScanSqC          .EQU  $14de
0054   8000             SetSqScan        .EQU  $14df
0055   8000             ScanSqNxt        .EQU  $14e8
0056   8000             Swap_Sides       .EQU  $1a6a
0057   8000             UndoAllMoves     .EQU  $0ae6
0058   8000             UnMakeMove       .EQU  $1cde
0059   8000             WKSQ             .EQU  $0184
0060   8000             printBOARD       .EQU  $14af
0061   8000             startFEN         .EQU  $0107
0062   8000                                         
0063   8000                                                 
0064   8000             start_PG_Module:
0065   8000             
0066   8000             ; File selection starts here
0067   8000             FSelSubMenu:         
0068   8000 F5                      push af            
0069   8001 D5                      push de
0070   8002 E5                      push hl
0071   8003                         
0072   8003 CD 86 A7                call MoveStrClear      ; clear moves to replay after returning
0073   8006                                              
0074   8006 3A 3C 8C                ld a,(FDir_)
0075   8009 FE 00                   cp 0
0076   800B 20 09                   jr nz,FDirOv
0077   800D                                                ;Read disk directory of pgn-files
0078   800D 11 3D 8C                ld de,DirOfPGNs        ; datas will be written here
0079   8010 21 1D 8E                ld hl,filesPGN
0080   8013 CD 3F 85                call dirload           ; uses DISKs library
0081   8016             FDirOv:
0082   8016 11 3D 8C                ld de,DirOfPGNs
0083   8019 1A                      ld a,(de)
0084   801A FE 24                   cp '$'
0085   801C 28 33                   jr z,noPGNfiles
0086   801E 3E 01                   ld a,1
0087   8020 32 62 80                ld (_fileI),a
0088   8023 3E 00                   ld a,0
0089   8025 32 63 80                ld (_exitFs),a
0090   8028                         
0091   8028 CD DC 86                call InkeyKeyBy30h      ; keypress detect
0092   802B 32 61 80                ld (_keymnbf),a         ; saves last key
0093   802E                         
0094   802E             LoopFileSel:            
0095   802E CD 8F 8A                call DrawFileSelection           
0096   8031                         
0097   8031 CD DC 86                call InkeyKeyBy30h      ; keypress detect
0098   8034 CD 2C 8B                call FsKeyPress
0099   8037 3A 63 80                ld a,(_exitFs)
0100   803A FE 01                   cp 1
0101   803C 28 02                   jr z,FileSelExit
0102   803E 18 EE                   jr LoopFileSel
0103   8040             FileSelExit:                
0104   8040 CD F6 86                call ClearScreenBy30h
0105   8043 3A 62 80                ld a,(_fileI)
0106   8046 FE 00                   cp 0
0107   8048 20 02                   jr nz,FileSelctd
0108   804A 18 11                   jr Fselover        ; It exits all menus anyway after ESC on fast emulator
0109   804C             
0110   804C             FileSelctd:  
0111   804C CD A5 8B                call FilePGNtoOpen ; use PGN file           
0112   804F             
0113   804F 18 0C                   jr Fselover
0114   8051             noPGNfiles:
0115   8051 21 12 01                ld hl,$0112
0116   8054 CD 18 87                call LocatePosBy30h
0117   8057 11 FF 8B                ld de,MnNoFiles
0118   805A CD 27 87                call PrintString   ; print out that no files found
0119   805D             Fselover:   
0120   805D E1                      pop hl          
0121   805E D1                      pop de
0122   805F F1                      pop af            
0123   8060 C9                      ret         
0124   8061             
0125   8061                   
0126   8061 00          _keymnbf:   .byte 0  ; key pressed before
0127   8062             
0128   8062 00          _fileI:     .byte 0      ; file selected
0129   8063 00          _exitFs:    .byte 0      ; internal to know that exit
0130   8064             
0131   8064             
0132   8064                       #include "String.ASM"      ; most common string functions
0001+  8064             ;-------------------------------------
0002+  8064             ;
0003+  8064             ; Most common String functions (MSX asm)
0004+  8064             ; String can be 256 characters long maximum
0005+  8064             ; 
0006+  8064             ;
0007+  8064             ; String ends with 0, 
0008+  8064             ;  should be reserved bytes if string becomes longer,
0009+  8064             ;   of course.
0010+  8064             ;
0011+  8064             ;-------------------------------------
0012+  8064             ; 
0013+  8064             
0014+  8064             ; returns length of DE string in A, also sets Z
0015+  8064             Str_Len:
0016+  8064 C5                  push bc
0017+  8065 D5                  push de
0018+  8066 0E 00               ld c,0
0019+  8068             Str_LnScn:        
0020+  8068 1A                  ld a,(de)
0021+  8069 FE 00               cp 0
0022+  806B 28 04               jr z,Str_LnEx
0023+  806D 13                  inc de
0024+  806E 0C                  inc c
0025+  806F 18 F7               jr Str_LnScn
0026+  8071             Str_LnEx:
0027+  8071 79                  ld a,c
0028+  8072 D1                  pop de        
0029+  8073 C1                  pop bc
0030+  8074 FE 00               cp 0
0031+  8076 C9                  ret
0032+  8077                     
0033+  8077             ; set empty string
0034+  8077             Str_Clear:
0035+  8077 F5                  push af
0036+  8078 3E 00               ld a,0
0037+  807A 12                  ld (de),a
0038+  807B F1                  pop af
0039+  807C C9                  ret
0040+  807D             
0041+  807D             
0042+  807D             
0043+  807D             ; Cuts string of DE at length=A [0..254]
0044+  807D             ;     (label+nn  is much faster)
0045+  807D             ;
0046+  807D             Str_Cut:
0047+  807D F5                   push af
0048+  807E C5                   push bc
0049+  807F E5                   push hl
0050+  8080 06 00                ld b,0
0051+  8082 4F                   ld c,a
0052+  8083 D5                   push de
0053+  8084 E1                   pop hl
0054+  8085 09                   add hl,bc
0055+  8086 3E 00                ld a,0
0056+  8088 77                   ld (hl),a
0057+  8089 E1                   pop hl
0058+  808A C1                   pop bc
0059+  808B F1                   pop af
0060+  808C C9                   ret
0061+  808D                      
0062+  808D             ; compares string of DE with string of IX
0063+  808D             ; Returns: A=0 - strings are equal
0064+  808D             ;          A=1 - IX string starts with DE str.
0065+  808D             ;          A=2 - not equal
0066+  808D             ; 
0067+  808D             Str_Compare:
0068+  808D C5                   push bc
0069+  808E D5                   push de
0070+  808F DD E5                push ix
0071+  8091             Str_compScn:         
0072+  8091 DD 7E 00             ld a,(ix)
0073+  8094 FE 00                cp 0
0074+  8096 28 0E                jr z,Str_compL0   
0075+  8098 47                   ld b,a
0076+  8099 1A                   ld a,(de)
0077+  809A FE 00                cp 0
0078+  809C 28 17                jr z,Str_compN1
0079+  809E B8                   cp b
0080+  809F 20 10                jr nz,Str_compNEq
0081+  80A1 13                   inc de
0082+  80A2 DD 23                inc ix
0083+  80A4 18 EB                jr Str_compScn
0084+  80A6             Str_compL0:
0085+  80A6 1A                   ld a,(de)
0086+  80A7 FE 00                cp 0
0087+  80A9 28 02                jr z,Str_compEq
0088+  80AB 18 04                jr Str_compNEq
0089+  80AD             Str_compEq:
0090+  80AD 3E 00                ld a,0
0091+  80AF 18 06                jr Str_compEx
0092+  80B1             Str_compNEq:
0093+  80B1 3E 02                ld a,2
0094+  80B3 18 02                jr Str_compEx         
0095+  80B5             Str_compN1:
0096+  80B5 3E 01                ld a,1
0097+  80B7             Str_compEx:
0098+  80B7 DD E1                pop ix
0099+  80B9 D1                   pop de
0100+  80BA C1                   pop bc
0101+  80BB C9                   ret
0102+  80BC             
0103+  80BC             ; Copies string DE to IX
0104+  80BC             Str_Copy:
0105+  80BC F5                   push af
0106+  80BD D5                   push de
0107+  80BE DD E5                push ix
0108+  80C0             Str_CpyScn:
0109+  80C0 1A                   ld a,(de)
0110+  80C1 DD 77 00             ld (ix),a
0111+  80C4 FE 00                cp 0
0112+  80C6 28 05                jr z,StrCpyEx
0113+  80C8 13                   inc de
0114+  80C9 DD 23                inc ix
0115+  80CB 18 F3                jr Str_CpyScn
0116+  80CD             StrCpyEx:                  
0117+  80CD DD E1                pop ix
0118+  80CF D1                   pop de
0119+  80D0 F1                   pop af
0120+  80D1 C9                   ret
0121+  80D2             
0122+  80D2             ; Converts string DE to UpperCase
0123+  80D2             Str_Upper:
0124+  80D2 F5                   push af
0125+  80D3 D5                   push de
0126+  80D4             Str_UppScn:
0127+  80D4 1A                   ld a,(de)
0128+  80D5 FE 00                cp 0
0129+  80D7 28 0E                jr z,Str_UppEx
0130+  80D9 FE 61                cp 'a'
0131+  80DB 38 07                jr c,Str_UppNCnv
0132+  80DD FE 7A                cp 'z'
0133+  80DF 30 03                jr nc,Str_UppNCnv
0134+  80E1 D6 20                sub 32
0135+  80E3 12                   ld (de),a
0136+  80E4             Str_UppNCnv:
0137+  80E4 13                   inc de         
0138+  80E5 18 ED                jr Str_UppScn
0139+  80E7             Str_UppEx:         
0140+  80E7 D1                   pop de
0141+  80E8 F1                   pop af
0142+  80E9 C9                   ret
0143+  80EA             
0144+  80EA             ; Converts string DE to LowerCase
0145+  80EA             Str_Lower:
0146+  80EA F5                   push af
0147+  80EB D5                   push de
0148+  80EC             Str_LwrScn:
0149+  80EC 1A                   ld a,(de)
0150+  80ED FE 00                cp 0
0151+  80EF 28 0E                jr z,Str_LwrEx
0152+  80F1 FE 41                cp 'A'
0153+  80F3 38 07                jr c,Str_LwrNCnv
0154+  80F5 FE 5A                cp 'Z'
0155+  80F7 30 03                jr nc,Str_LwrNCnv
0156+  80F9 C6 20                add a,32
0157+  80FB 12                   ld (de),a
0158+  80FC             Str_LwrNCnv:
0159+  80FC 13                   inc de         
0160+  80FD 18 ED                jr Str_LwrScn
0161+  80FF             Str_LwrEx:         
0162+  80FF D1                   pop de
0163+  8100 F1                   pop af
0164+  8101 C9                   ret
0165+  8102             
0166+  8102             ; Finds string DE in string IX first 254 bytes
0167+  8102             ; On return: A=position, starting from 0
0168+  8102             ; If not found then A=$ff                 
0169+  8102             Str_IndexOf:
0170+  8102 C5                   push bc
0171+  8103 D5                   push de
0172+  8104 DD E5                push ix
0173+  8106             
0174+  8106 06 00                ld b,0
0175+  8108             Str_InxScn:
0176+  8108 DD 7E 00             ld a,(ix)
0177+  810B FE 00                cp 0
0178+  810D 20 04                jr nz,Str_InxCompr
0179+  810F 3E FF                ld a,$ff
0180+  8111 18 12                jr Str_InxEx
0181+  8113             Str_InxCompr:
0182+  8113 CD 8D 80             call Str_Compare
0183+  8116 FE 02                cp 2
0184+  8118 20 0A                jr nz,Str_InxFound
0185+  811A 04                   inc b
0186+  811B 3E FF                ld a,$ff
0187+  811D B8                   cp b
0188+  811E 28 05                jr z,Str_InxEx
0189+  8120 DD 23                inc ix
0190+  8122 18 E4                jr Str_InxScn
0191+  8124             Str_InxFound:
0192+  8124 78                   ld a,b 
0193+  8125             Str_InxEx:                  
0194+  8125 DD E1                pop ix
0195+  8127 D1                   pop de
0196+  8128 C1                   pop bc
0197+  8129 C9                   ret
0198+  812A             
0199+  812A             ;returns a=0 and Z flag set if string IX contains substring DE
0200+  812A             ; (length not limited)
0201+  812A             Str_Contains:
0202+  812A DD E5                push ix
0203+  812C             Str_Contai_Scn:
0204+  812C DD 7E 00             ld a,(ix)
0205+  812F FE 00                cp 0
0206+  8131 20 04                jr nz,Str_Contai_Cont
0207+  8133 3E 02                ld a,2
0208+  8135 18 0D                jr Str_Contai_ex
0209+  8137             Str_Contai_Cont:      
0210+  8137 CD 8D 80             call Str_Compare
0211+  813A FE 02                cp 2
0212+  813C 20 04                jr nz,Str_Contai_found
0213+  813E DD 23                inc ix
0214+  8140 18 EA                jr Str_Contai_Scn
0215+  8142             Str_Contai_found:
0216+  8142 3E 00                ld a,0
0217+  8144             Str_Contai_ex:          
0218+  8144 DD E1                pop ix
0219+  8146 FE 00                cp 0
0220+  8148 C9                   ret
0221+  8149             
0222+  8149             ;
0223+  8149             ; Places substring of IX into DE
0224+  8149             ; c=starting char in IX, b-length in chars
0225+  8149             ;
0226+  8149             Str_Substr:
0227+  8149 F5                   push af
0228+  814A C5                   push bc
0229+  814B D5                   push de
0230+  814C E5                   push hl       
0231+  814D             
0232+  814D DD E5                push ix
0233+  814F E1                   pop hl
0234+  8150 79                   ld a,c
0235+  8151 FE 00                cp 0
0236+  8153 28 05                jr z,Str_SubAt0
0237+  8155 C5                   push bc
0238+  8156 06 00                ld b,0
0239+  8158 09                   add hl,bc   ; offset
0240+  8159 C1                   pop bc
0241+  815A             Str_SubAt0:         
0242+  815A 48                   ld c,b
0243+  815B 06 00                ld b,0
0244+  815D ED B0                ldir        ; copy bc bytes from HL to DE addrs.
0245+  815F 3E 00                ld a,0
0246+  8161 12                   ld (de),a
0247+  8162                      
0248+  8162 E1                   pop hl
0249+  8163 D1                   pop de
0250+  8164 C1                   pop bc
0251+  8165 F1                   pop af
0252+  8166 C9                   ret
0253+  8167             
0254+  8167             ;
0255+  8167             ; Removes left spaces for string in DE
0256+  8167             ;
0257+  8167             Str_Ltrim:
0258+  8167 F5                   push af
0259+  8168 C5                   push bc
0260+  8169 D5                   push de
0261+  816A DD E5                push ix
0262+  816C                      
0263+  816C D5                   push de
0264+  816D DD E1                pop ix
0265+  816F 0E 00                ld c,0
0266+  8171             Str_LtrScn:         
0267+  8171 1A                   ld a,(de)
0268+  8172 FE 20                cp 32
0269+  8174 20 05                jr nz,Str_LtrNS
0270+  8176 13                   inc de
0271+  8177 0E 01                ld c,1
0272+  8179 18 F6                jr Str_LtrScn
0273+  817B             Str_LtrNS:
0274+  817B 79                   ld a,c
0275+  817C FE 00                cp 0
0276+  817E 28 03                jr z,Str_LtrEx
0277+  8180 CD BC 80             call Str_Copy
0278+  8183             Str_LtrEx:
0279+  8183 DD E1                pop ix
0280+  8185 D1                   pop de
0281+  8186 C1                   pop bc
0282+  8187 F1                   pop af
0283+  8188 C9                   ret
0284+  8189                      
0285+  8189             ;
0286+  8189             ; Removes right spaces for string in DE
0287+  8189             ;
0288+  8189             Str_Rtrim:
0289+  8189 F5                   push af
0290+  818A D5                   push de         
0291+  818B 1A                   ld a,(de)
0292+  818C FE 00                cp 0
0293+  818E 28 12                jr z,Str_RtrEx
0294+  8190             Str_RtrRscn:
0295+  8190 13                   inc de        
0296+  8191 1A                   ld a,(de)
0297+  8192 FE 00                cp 0
0298+  8194 28 02                jr z,Str_Rtr1
0299+  8196 18 F8                jr Str_RtrRscn
0300+  8198             Str_Rtr1:
0301+  8198 1B                   dec de
0302+  8199 FE 20                cp 32
0303+  819B 20 05                jr nz,Str_RtrEx
0304+  819D 3E 00                ld a,0
0305+  819F 12                   ld (de),a
0306+  81A0 18 F6                jr Str_Rtr1
0307+  81A2             Str_RtrEx:
0308+  81A2 D1                   pop de
0309+  81A3 F1                   pop af
0310+  81A4 C9                   ret
0311+  81A5             
0312+  81A5             ; both trims
0313+  81A5             Str_Alltrim:
0314+  81A5 CD 89 81             call Str_Rtrim
0315+  81A8 CD 67 81             call Str_Ltrim
0316+  81AB C9                   ret
0317+  81AC             
0318+  81AC             ;
0319+  81AC             ; Adds DE string at the end of IX string
0320+  81AC             ;
0321+  81AC             Str_Append:
0322+  81AC F5                   push af
0323+  81AD DD E5                push ix         
0324+  81AF DD 7E 00             ld a,(ix)
0325+  81B2 FE 00                cp 0
0326+  81B4 28 0B                jr z,Str_App1
0327+  81B6             Str_AppRscn:
0328+  81B6 DD 23                inc ix        
0329+  81B8 DD 7E 00             ld a,(ix)
0330+  81BB FE 00                cp 0
0331+  81BD 28 02                jr z,Str_App1
0332+  81BF 18 F5                jr Str_AppRscn
0333+  81C1             Str_App1:
0334+  81C1 CD BC 80             call Str_Copy
0335+  81C4 DD E1                pop ix
0336+  81C6 F1                   pop af
0337+  81C7 C9                   ret
0338+  81C8             
0339+  81C8             ;
0340+  81C8             ; Replaces all DE substrings in IX string with HL string
0341+  81C8             ;
0342+  81C8             Str_Replace:
0343+  81C8 F5                   push af
0344+  81C9 C5                   push bc
0345+  81CA E5                   push hl
0346+  81CB DD E5                push ix
0347+  81CD                      
0348+  81CD CD 64 80             call Str_Len
0349+  81D0 4F                   ld c,a           ;c=Len(de-string)
0350+  81D1 FE 00                cp 0
0351+  81D3 28 47                jr z,Str_ReplNo
0352+  81D5             Str_ReplLoop:        
0353+  81D5 CD 02 81             call Str_IndexOf
0354+  81D8 FE FF                cp $ff
0355+  81DA 28 40                jr z,Str_ReplNo
0356+  81DC                      
0357+  81DC D5                   push de
0358+  81DD 47                   ld b,a
0359+  81DE 11 22 82             ld de,Str_buf_
0360+  81E1                      
0361+  81E1 DD E5                push ix
0362+  81E3             Str_ReplIy0:                   ; copy till substr...
0363+  81E3 DD 7E 00             ld a,(ix)
0364+  81E6 12                   ld (de),a
0365+  81E7 78                   ld a,b
0366+  81E8 FE 00                cp 0
0367+  81EA 28 06                jr z,Str_ReplIx0
0368+  81EC DD 23                inc ix
0369+  81EE 13                   inc de
0370+  81EF 05                   dec b
0371+  81F0 18 F1                jr Str_ReplIy0
0372+  81F2             Str_ReplIx0:
0373+  81F2             
0374+  81F2 E5                   push hl
0375+  81F3             Str_ReplIy1:                   ; copy new substring...         
0376+  81F3 7E                   ld a,(hl)
0377+  81F4 12                   ld (de),a
0378+  81F5 FE 00                cp 0
0379+  81F7 28 04                jr z,Str_ReplHl0
0380+  81F9 23                   inc hl
0381+  81FA 13                   inc de
0382+  81FB 18 F6                jr Str_ReplIy1
0383+  81FD             Str_ReplHl0:
0384+  81FD E1                   pop hl
0385+  81FE                      
0386+  81FE 79                   ld a,c
0387+  81FF             Str_ReplSkp1:         
0388+  81FF DD 23                inc ix                 ; skip substr
0389+  8201 3D                   dec a
0390+  8202 20 FB                jr nz,Str_ReplSkp1
0391+  8204             Str_ReplIy3:                    ; copy all string after...
0392+  8204 DD 7E 00             ld a,(ix)
0393+  8207 12                   ld (de),a
0394+  8208 FE 00                cp 0
0395+  820A 28 05                jr z,Str_ReplIx3
0396+  820C DD 23                inc ix
0397+  820E 13                   inc de
0398+  820F 18 F3                jr Str_ReplIy3
0399+  8211             Str_ReplIx3:
0400+  8211 DD E1                pop ix
0401+  8213                      
0402+  8213 11 22 82             ld de,Str_buf_
0403+  8216 CD BC 80             call Str_Copy        ; copy new string to IX 
0404+  8219             
0405+  8219 D1                   pop de
0406+  821A 18 B9                jr Str_ReplLoop        ; to replace all occurrances
0407+  821C             Str_ReplNo:         
0408+  821C DD E1                pop ix
0409+  821E E1                   pop hl
0410+  821F C1                   pop bc
0411+  8220 F1                   pop af
0412+  8221 C9                   ret
0413+  8222                      
0414+  8222             Str_buf_ .ds $100
0415+  8322 00                   .byte 0
0416+  8323             
0417+  8323             
0418+  8323             ;
0419+  8323             ; This truncates DE string where new line (ascii 10 or 13)
0420+  8323             ; If string is longer 254 chars then truncates at space char.
0421+  8323             ; Sets IX as pointer to next line starting character
0422+  8323             ; This supposed to get safe-as-much-possible string opeations.
0423+  8323             
0424+  8323             Str_Line:
0425+  8323 F5                   push af
0426+  8324 C5                   push bc
0427+  8325 D5                   push de
0428+  8326             
0429+  8326 01 00 00             ld bc,0
0430+  8329             Str_Ln_Scn:
0431+  8329 1A                   ld a,(de)       ; find end of line
0432+  832A FE 00                cp 0
0433+  832C 28 28                jr z,Str_Ln_q1
0434+  832E FE 0D                cp 13
0435+  8330 28 24                jr z,Str_Ln_q1
0436+  8332 FE 0A                cp 10
0437+  8334 28 20                jr z,Str_Ln_q1
0438+  8336 13                   inc de
0439+  8337 0C                   inc c
0440+  8338 3E FF                ld a,$ff         ; reached 255?         
0441+  833A B9                   cp c
0442+  833B 20 EC                jr nz, Str_Ln_Scn
0443+  833D                      
0444+  833D             Str_Ln_fSpc:         
0445+  833D                                        
0446+  833D 1A                   ld a,(de)         ; if string too long then finds space near 254th position
0447+  833E FE 20                cp ' '
0448+  8340 28 14                jr z,Str_Ln_q1    ; use this position and truncate string
0449+  8342 1B                   dec de
0450+  8343 0D                   dec c
0451+  8344 20 F7                jr nz,Str_Ln_fSpc
0452+  8346                                 
0453+  8346             Str_Ln_cL:
0454+  8346 1A                   ld a,(de)          ; if cant find space then just searches for line end
0455+  8347 FE 00                cp 0               ; to obtain new IX anyway
0456+  8349 28 0B                jr z,Str_Ln_q1
0457+  834B FE 0D                cp 13
0458+  834D 28 07                jr z,Str_Ln_q1
0459+  834F FE 0A                cp 10
0460+  8351 28 03                jr z,Str_Ln_q1
0461+  8353 13                   inc de
0462+  8354 18 F0                jr Str_Ln_cL
0463+  8356                      
0464+  8356             Str_Ln_q1:
0465+  8356 3E 00                ld a,0          ; set to 0 till next line
0466+  8358 12                   ld (de),a
0467+  8359 13                   inc de
0468+  835A 1A                   ld a,(de)
0469+  835B FE 00                cp 0          
0470+  835D 28 F7                jr z,Str_Ln_q1
0471+  835F FE 0D                cp 13
0472+  8361 28 F3                jr z,Str_Ln_q1
0473+  8363 FE 0A                cp 10
0474+  8365 28 EF                jr z,Str_Ln_q1
0475+  8367                      
0476+  8367 D5                   push de
0477+  8368 DD E1                pop ix
0478+  836A                     
0479+  836A D1                   pop de
0480+  836B C1                   pop bc
0481+  836C F1                   pop af
0482+  836D C9                   ret
0483+  836E             
0484+  836E             ;
0485+  836E             ; This removes all non-character symbols and sets TABs as 3 spaces
0486+  836E             ; of string in DE.  Use after Str_Line not to lose line feeds.
0487+  836E             ;                  
0488+  836E             Str_CharsOnly:
0489+  836E             
0490+  836E F5                   push af
0491+  836F D5                   push de
0492+  8370 DD E5                push ix
0493+  8372 D5                   push de
0494+  8373 D5                   push de
0495+  8374 DD E1                pop ix
0496+  8376 11 22 82             ld de,Str_buf_
0497+  8379             Str_CharsO_loop:
0498+  8379 DD 7E 00             ld a,(ix)
0499+  837C FE 00                cp 0
0500+  837E 28 1A                jr z, Str_CharsO_Ex
0501+  8380 FE 09                cp 9
0502+  8382 20 0C                jr nz, Str_CharsO_nTb
0503+  8384 3E 20                ld a,' '
0504+  8386 12                   ld (de),a
0505+  8387 13                   inc de
0506+  8388 12                   ld (de),a
0507+  8389 13                   inc de
0508+  838A             Str_CharsO_cpy:         
0509+  838A 12                   ld (de),a
0510+  838B 13                   inc de
0511+  838C DD 23                inc ix
0512+  838E 18 E9                jr Str_CharsO_loop
0513+  8390             Str_CharsO_nTb:
0514+  8390 FE 20                cp ' '
0515+  8392 38 E5                jr c,Str_CharsO_loop
0516+  8394 FE FF                cp $ff
0517+  8396 28 E1                jr z,Str_CharsO_loop
0518+  8398 18 F0                jr Str_CharsO_cpy
0519+  839A             Str_CharsO_Ex:
0520+  839A 12                   ld (de),a
0521+  839B 11 22 82             ld de,Str_buf_
0522+  839E DD E1                pop ix
0523+  83A0 CD BC 80             call Str_Copy        ; copy new string to IX 
0524+  83A3 DD E1                pop ix
0525+  83A5 D1                   pop de
0526+  83A6 F1                   pop af
0527+  83A7 C9                   ret
0528+  83A8             
0529+  83A8             ;
0530+  83A8             ; places value of integer in reg-a into DE string
0531+  83A8             ;
0532+  83A8             Str_itoa:
0533+  83A8 F5                   push af
0534+  83A9 C5                   push bc
0535+  83AA D5                   push de
0536+  83AB FE 00                cp 0
0537+  83AD 28 3E                jr z,Str_i2_0
0538+  83AF FE C8                cp 200
0539+  83B1 30 26                jr nc,Str_i2a200
0540+  83B3 FE 64                cp 100
0541+  83B5 30 2C                jr nc,Str_i2a100
0542+  83B7 FE 0A                cp 10
0543+  83B9 30 03                jr nc,Str_i2a10
0544+  83BB 4F                   ld c,a
0545+  83BC 18 11                jr Str_i2q
0546+  83BE             Str_i2a10:
0547+  83BE 06 00                ld b,0
0548+  83C0             Str_i2a_l_10:         
0549+  83C0 FE 0A                cp 10
0550+  83C2 38 05                jr c,Str_i2a1
0551+  83C4 D6 0A                sub 10
0552+  83C6 04                   inc b
0553+  83C7 18 F7                jr Str_i2a_l_10
0554+  83C9             Str_i2a1:
0555+  83C9 4F                   ld c,a
0556+  83CA 3E 30                ld a,'0'
0557+  83CC 80                   add a,b
0558+  83CD 12                   ld (de),a
0559+  83CE 13                   inc de
0560+  83CF 3E 30       Str_i2q: ld a,'0'
0561+  83D1 81                   add a,c
0562+  83D2 12                   ld (de),a
0563+  83D3 13                   inc de
0564+  83D4 3E 00                ld a,0
0565+  83D6 12                   ld (de),a
0566+  83D7 18 18                jr Str_i2ex                  
0567+  83D9             Str_i2a200:
0568+  83D9 D6 C8                sub 200
0569+  83DB 4F                   ld c,a                 
0570+  83DC 3E 32                ld a,'2'
0571+  83DE 12                   ld (de),a
0572+  83DF 13                   inc de
0573+  83E0 79                   ld a,c         
0574+  83E1 18 DB                jr Str_i2a10
0575+  83E3             Str_i2a100:
0576+  83E3 D6 64                sub 100
0577+  83E5 4F                   ld c,a         
0578+  83E6 3E 31                ld a,'1'
0579+  83E8 12                   ld (de),a
0580+  83E9 13                   inc de
0581+  83EA 79                   ld a,c
0582+  83EB 18 D1                jr Str_i2a10
0583+  83ED             Str_i2_0:
0584+  83ED 0E 00                ld c,0
0585+  83EF 18 DE                jr Str_i2q        
0586+  83F1             Str_i2ex:
0587+  83F1 D1                   pop de
0588+  83F2 C1                   pop bc
0589+  83F3 F1                   pop af
0590+  83F4 C9                   ret
0591+  83F5                      
0592+  83F5             ;
0593+  83F5             ; places integer value of DE string into reg-a
0594+  83F5             ;
0595+  83F5             Str_atoi:
0596+  83F5 C5                   push bc
0597+  83F6 D5                   push de
0598+  83F7 E5                   push hl
0599+  83F8                      
0600+  83F8 EB                   ex de,hl ;hl=de
0601+  83F9 11 00 00             ld de,0
0602+  83FC 01 00 00             ld bc,0
0603+  83FF             Str_a2iLoop:         
0604+  83FF 7E                   ld a,(hl)
0605+  8400 23                   inc hl
0606+  8401 FE 00                cp 0
0607+  8403 28 1A                jr z, Str_a2ex
0608+  8405 FE 30                cp '0'
0609+  8407 38 16                jr c, Str_a2ex
0610+  8409 FE 3A                cp '9'+1
0611+  840B 30 12                jr nc, Str_a2ex
0612+  840D 18 00                jr Str_a2digit
0613+  840F             Str_a2digit:
0614+  840F D6 30                sub '0'
0615+  8411 4F                   ld c,a
0616+  8412 78                   ld a,b
0617+  8413 FE 00                cp 0
0618+  8415 28 0D                jr z,Str_a2ph1
0619+  8417 FE 01                cp 1
0620+  8419 28 0E                jr z,Str_a2ph2
0621+  841B FE 02                cp 2
0622+  841D 28 0A                jr z,Str_a2ph2   ; the same method  *10+a
0623+  841F             Str_a2ex:               
0624+  841F 7A                   ld a,d          ; store to A
0625+  8420 18 17                jr Str_a2iEx         
0626+  8422             Str_a2Lp:
0627+  8422 18 DB                jr Str_a2iLoop
0628+  8424                      
0629+  8424             Str_a2ph1:
0630+  8424 51                   ld d,c  ; ones, save
0631+  8425 06 01                ld b,1
0632+  8427 18 F9                jr Str_a2Lp
0633+  8429             
0634+  8429             Str_a2ph2:
0635+  8429 7A                   ld a,d           ;d*10 = (d*8)+(d*2)
0636+  842A CB 27                sla a   ; *2
0637+  842C                         
0638+  842C CB 22                sla d
0639+  842E CB 22                sla d
0640+  8430 CB 22                sla d   ;*8
0641+  8432 82                   add a,d  ;+ = become tens
0642+  8433 81                   add a,c  ; +ones
0643+  8434 57                   ld d,a   ;save
0644+  8435 06 02                ld b,2         
0645+  8437 18 E9                jr Str_a2Lp
0646+  8439                      
0647+  8439             Str_a2iEx:
0648+  8439 E1                   pop hl         
0649+  843A D1                   pop de
0650+  843B C1                   pop bc
0651+  843C C9                   ret
0652+  843D             
0653+  843D             ; finds tags in string IX and copies substring between them to DE address
0654+  843D             ; tags are strings addressed by hl (as left tag) and iy (as right tag)
0655+  843D             ; for example: <div>substring between</div>
0656+  843D             ; Separators should be at least 1char.
0657+  843D             ; If can't find left tag till 254th position then returns empty string.
0658+  843D             ; If can't find right tag then truncates substring at 255th position anyway. 
0659+  843D             ;
0660+  843D             Str_TagSubstr:
0661+  843D F5                   push af
0662+  843E C5                   push bc
0663+  843F D5                   push de
0664+  8440 E5                   push hl
0665+  8441 DD E5                push ix
0666+  8443                      
0667+  8443 D5                   push de
0668+  8444 EB                   ex de,hl   ; de=hl (left tag)
0669+  8445 0E 00                ld c,0
0670+  8447             Str_TagScn:
0671+  8447 0C                   inc c
0672+  8448 3E FF                ld a,$ff
0673+  844A B9                   cp c              ; if 255th reached
0674+  844B 28 15                jr z,Str_LTagNotFound
0675+  844D CD 8D 80             call Str_Compare
0676+  8450 DD 23                inc ix
0677+  8452 FE 02                cp 2
0678+  8454 28 F1                jr z,Str_TagScn
0679+  8456 CD 64 80             call Str_Len ;calculates length of left tag
0680+  8459             Str_TagSkp1:
0681+  8459 FE 01                cp 1
0682+  845B 28 08                jr z,Str_TagBr1
0683+  845D DD 23                inc ix
0684+  845F 3D                   dec a
0685+  8460 18 F7                jr Str_TagSkp1
0686+  8462                      
0687+  8462             Str_LTagNotFound:
0688+  8462 E1                   pop hl   ; hl = de where to store substring 
0689+  8463 18 1A                jr Str_TagBr2
0690+  8465                      
0691+  8465             Str_TagBr1:                  
0692+  8465                      
0693+  8465 FD E5                push iy
0694+  8467 D1                   pop de   ; de now = iy (right tag)
0695+  8468 E1                   pop hl   ; hl = de where to store substring
0696+  8469                      
0697+  8469 0E 00                ld c,0
0698+  846B             Str_TagSc2:
0699+  846B CD 8D 80             call Str_Compare
0700+  846E FE 02                cp 2
0701+  8470 20 0D                jr nz,Str_TagBr2
0702+  8472                       
0703+  8472 DD 7E 00             ld a,(ix)
0704+  8475 77                   ld (hl),a
0705+  8476 23                   inc hl
0706+  8477 DD 23                inc ix
0707+  8479 0C                   inc c
0708+  847A 3E FF                ld a,$ff
0709+  847C B9                   cp c              ; if 255th reached
0710+  847D 20 EC                jr nz,Str_TagSc2
0711+  847F             Str_TagBr2:
0712+  847F 3E 00                ld a,0
0713+  8481 77                   ld (hl),a   ; end of new string
0714+  8482 DD E1                pop ix
0715+  8484 E1                   pop hl
0716+  8485 D1                   pop de
0717+  8486 C1                   pop bc
0718+  8487 F1                   pop af         
0719+  8488 C9                   ret
0720+  8489                                 
0721+  8489             
0722+  8489             ;
0723+  8489             ; Faster copy from IX to DE length of A
0724+  8489             ;  (ignores 0)
0725+  8489             ;
0726+  8489             
0727+  8489             Block_Copy_:
0728+  8489 FE 00                cp 0
0729+  848B 28 10                jr z,Block_CpyExit
0730+  848D F5                   push af
0731+  848E C5                   push bc
0732+  848F D5                   push de
0733+  8490 E5                   push hl       
0734+  8491             
0735+  8491 DD E5                push ix
0736+  8493 E1                   pop hl
0737+  8494                      
0738+  8494 4F                   ld c,a
0739+  8495 06 00                ld b,0
0740+  8497 ED B0                ldir        ; copy bc bytes from HL to DE addrs.
0741+  8499                      
0742+  8499 E1                   pop hl
0743+  849A D1                   pop de
0744+  849B C1                   pop bc
0745+  849C F1                   pop af
0746+  849D             Block_CpyExit:         
0747+  849D C9                   ret
0748+  849E                      
0749+  849E             ; sets to 0 block in DE length of A
0750+  849E             Block_Clear_:
0751+  849E FE 00                cp 0
0752+  84A0 28 15                jr z,Block_ClrExit
0753+  84A2 F5                   push af
0754+  84A3 C5                   push bc
0755+  84A4 D5                   push de
0756+  84A5 E5                   push hl       
0757+  84A6             
0758+  84A6 4F                   ld c,a
0759+  84A7 0D                   dec c
0760+  84A8                      
0761+  84A8 D5                   push de
0762+  84A9 E1                   pop hl
0763+  84AA                      
0764+  84AA 3A B8 84             ld a,(Block_ch0)
0765+  84AD 77                   ld (hl),a
0766+  84AE 13                   inc de
0767+  84AF                      
0768+  84AF 06 00                ld b,0
0769+  84B1 ED B0                ldir        ; copy repeating 0 from HL to DE addrs.
0770+  84B3                              
0771+  84B3 E1                   pop hl
0772+  84B4 D1                   pop de
0773+  84B5 C1                   pop bc
0774+  84B6 F1                   pop af
0775+  84B7             Block_ClrExit:         
0776+  84B7 C9                   ret
0777+  84B8             
0778+  84B8 00          Block_ch0: .byte 0   ;uses this byte to set 0
0779+  84B9                                  ; (can set spaces or other)
0780+  84B9             
0133   84B9                       #include "DISKs.ASM"       ; disk functions
0001+  84B9             ;=======================================
0002+  84B9             ;
0003+  84B9             ; Disk functions (working)
0004+  84B9             ;
0005+  84B9             ;     diskload - to load small file into memory knowing that it works
0006+  84B9             ;     readFF - buffered reading of 255 bytes of file into memory
0007+  84B9             ;                (safe diskload for larger file)
0008+  84B9             ;     dirload - to load directory structure into memory as string
0009+  84B9             
0010+  84B9             ;=======================================
0011+  84B9             ;
0012+  84B9             ; Usage1:
0013+  84B9             ;        ld hl,filename_
0014+  84B9             ;        ld de,$2000
0015+  84B9             ;        call diskload
0016+  84B9             ;filename_:
0017+  84B9             ;        .byte 0,"myfile  com",0  
0018+  84B9             ;
0019+  84B9             ; (use exact file name space!)
0020+  84B9             ;
0021+  84B9             ;
0022+  84B9             ; Usage2:
0023+  84B9             ;        ld hl,filename_
0024+  84B9             ;scanfile_:
0025+  84B9             ;        call readFF
0026+  84B9             ;        cp 0
0027+  84B9             ;        jr z,scanover_
0028+  84B9             ;        ld b,a
0029+  84B9             ;        push de
0030+  84B9             ;scanrecord_:
0031+  84B9             ;        ld a,(de)   ;byte is here
0032+  84B9             ;        inc de
0033+  84B9             ;        djnz scanrecord_
0034+  84B9             ;        pop de
0035+  84B9             ;        jr scanfile_
0036+  84B9             ;scanover_: 
0037+  84B9             ;
0038+  84B9             ;
0039+  84B9             ; Usage3:
0040+  84B9             ;        ld hl,willcard_
0041+  84B9             ;        ld de,$2000
0042+  84B9             ;        call dirload 
0043+  84B9             ;willcard_:
0044+  84B9             ;        .byte 0,"??????? COM",0  ;
0045+  84B9             ;     
0046+  84B9             ;    
0047+  84B9             f_setdma:     .equ     26
0048+  84B9             f_read:       .equ     39
0049+  84B9             f_open:       .equ     15
0050+  84B9             f_close:      .equ     16
0051+  84B9             
0052+  84B9             f_search1     .equ     $11
0053+  84B9             f_search2     .equ     $12
0054+  84B9             
0055+  84B9             f_bdos:       .equ     $F37D   ; Call $5
0056+  84B9             
0057+  84B9             
0058+  84B9             ; load file in address de
0059+  84B9             diskload:
0060+  84B9 F5                  push af
0061+  84BA C5                  push bc
0062+  84BB D5                  push de
0063+  84BC E5                  push hl
0064+  84BD DD E5               push ix
0065+  84BF FD E5               push iy
0066+  84C1                     
0067+  84C1 3E 01               ld a,1
0068+  84C3 32 E0 84            ld (loadflag),a
0069+  84C6                     
0070+  84C6 D5                  push de
0071+  84C7 CD EA 85            call f_setfcb
0072+  84CA CD 01 86            call f_openf
0073+  84CD 2A 43 86            ld hl,(f_bleng)
0074+  84D0 D1                  pop de
0075+  84D1 CD 17 86            call f_loadf
0076+  84D4 CD 2A 86            call f_closef
0077+  84D7                     
0078+  84D7 FD E1               pop iy
0079+  84D9 DD E1               pop ix
0080+  84DB E1                  pop hl
0081+  84DC D1                  pop de
0082+  84DD C1                  pop bc
0083+  84DE F1                  pop af
0084+  84DF C9                  ret
0085+  84E0                     
0086+  84E0 01          loadflag: .byte   1   ; should be 0 on return if loaded
0087+  84E1             
0088+  84E1 00          stop_rdFF .byte   0   ; set 1 to stop reading
0089+  84E2             ; scan file, buffer in address de
0090+  84E2             readFF:
0091+  84E2 C5                  push bc
0092+  84E3 D5                  push de
0093+  84E4 E5                  push hl
0094+  84E5 DD E5               push ix
0095+  84E7 FD E5               push iy
0096+  84E9                     
0097+  84E9 3A 3D 85            ld a,(rd_opn)
0098+  84EC FE 00               cp 0
0099+  84EE 20 08               jr nz,rd_overOpnFile
0100+  84F0                     
0101+  84F0 D5                  push de
0102+  84F1 CD EA 85            call f_setfcb
0103+  84F4 CD 01 86            call f_openf
0104+  84F7 D1                  pop de
0105+  84F8                 
0106+  84F8             rd_overOpnFile:
0107+  84F8             
0108+  84F8 3E 00               ld a,0
0109+  84FA 32 42 86            ld (f_groot+1),a
0110+  84FD 67                  ld h,a
0111+  84FE 3E 01               ld a,$1   ; read 255 bytes only
0112+  8500 32 41 86            ld (f_groot),a
0113+  8503 2E FF               ld l,$ff
0114+  8505                     
0115+  8505 3A 3D 85            ld a,(rd_opn)
0116+  8508 FE 00               cp 0
0117+  850A 20 08               jr nz,rd_over2
0118+  850C 32 E1 84            ld (stop_rdFF),a                        
0119+  850F CD 17 86            call f_loadf
0120+  8512 18 0D               jr rd_over3
0121+  8514             rd_over2:
0122+  8514 3A E1 84            ld a,(stop_rdFF)
0123+  8517 FE 00               cp 0
0124+  8519 20 10               jr nz,rd_StopRd
0125+  851B 11 33 86            ld de,f_fcb
0126+  851E CD 21 86            call f_rdit
0127+  8521             rd_over3:
0128+  8521 3E 01               ld a,1
0129+  8523 32 3D 85            ld (rd_opn),a
0130+  8526                     
0131+  8526 7D                  ld a,l
0132+  8527 FE 00               cp 0
0133+  8529 20 0A               jr nz,rd_outExit
0134+  852B             rd_StopRd:
0135+  852B CD 2A 86            call f_closef
0136+  852E 3E 00               ld a,0
0137+  8530 32 3D 85            ld (rd_opn),a
0138+  8533 FE 00               cp 0
0139+  8535                           
0140+  8535             rd_outExit:        
0141+  8535 FD E1               pop iy
0142+  8537 DD E1               pop ix
0143+  8539 E1                  pop hl
0144+  853A D1                  pop de
0145+  853B C1                  pop bc
0146+  853C C9                  ret
0147+  853D             
0148+  853D 00          rd_opn: .byte 0
0149+  853E                  
0150+  853E             ;
0151+  853E             ; searches directory files
0152+  853E             ;   that match hl willcard
0153+  853E             ;   and stores result in address de
0154+  853E             ;
0155+  853E             ; separator ","
0156+  853E             ; ends with "$"
0157+  853E             ;
0158+  853E             ;  So, print the directory structure after by simple:
0159+  853E             ;         ld c, 9
0160+  853E             ;         call 5
0161+  853E             ;
0162+  853E 00          f_found .byte 0   ; counter of files found
0163+  853F             
0164+  853F             dirload:
0165+  853F F5                  push af
0166+  8540 C5                  push bc
0167+  8541 D5                  push de
0168+  8542 E5                  push hl
0169+  8543 DD E5               push ix
0170+  8545 FD E5               push iy
0171+  8547                     
0172+  8547 3E 00               ld      a,0
0173+  8549 32 3E 85            ld      (f_found),a
0174+  854C                     
0175+  854C CD D2 85            call    f_sv_save ; save de
0176+  854F                     
0177+  854F CD EA 85            call    f_setfcb
0178+  8552 2A 43 86            ld      hl,(f_bleng)
0179+  8555             
0180+  8555 E5                  push    hl
0181+  8556 11 AA 85            ld      de,f_dma                                                                                                                                                                                          
0182+  8559 0E 1A               ld      c,f_setdma
0183+  855B CD 7D F3            call    f_bdos
0184+  855E 11 33 86            ld      de,f_fcb
0185+  8561 E1                  pop     hl                
0186+  8562                     
0187+  8562 0E 11               ld      c,f_search1  ; first search
0188+  8564 CD 7D F3            call    f_bdos
0189+  8567                     
0190+  8567             f_loopDirList:
0191+  8567             
0192+  8567 FE 00               cp 0
0193+  8569 20 28               jr nz,  f_errDirList
0194+  856B                     
0195+  856B                     ;----- save in list --|
0196+  856B F5                  push    af
0197+  856C C5                  push    bc
0198+  856D D5                  push    de
0199+  856E E5                  push    hl
0200+  856F                     
0201+  856F 3A 3E 85            ld      a,(f_found)
0202+  8572 3C                  inc     a
0203+  8573 32 3E 85            ld      (f_found),a
0204+  8576                             
0205+  8576 CD DD 85            call    f_sv_rest ; restore de
0206+  8579                             
0207+  8579 FD E5               push    iy
0208+  857B E1                  pop     hl   ; where file name is in DMA
0209+  857C 01 0B 00            ld      bc,11
0210+  857F ED B0               ldir         ; write 11 chars of filename
0211+  8581                     
0212+  8581 3E 2C               ld      a,','    ; separator
0213+  8583 12                  ld      (de),a
0214+  8584 13                  inc     de
0215+  8585             
0216+  8585 CD D2 85            call    f_sv_save ; save new de
0217+  8588                     
0218+  8588 E1                  pop     hl
0219+  8589 D1                  pop     de
0220+  858A C1                  pop     bc
0221+  858B F1                  pop     af
0222+  858C                     ;---------------------|
0223+  858C                     
0224+  858C 0E 12               ld      c,f_search2  ; continue searching
0225+  858E CD 7D F3            call    f_bdos
0226+  8591                     
0227+  8591 18 D4               jr      f_loopDirList
0228+  8593                     
0229+  8593             f_errDirList:
0230+  8593             
0231+  8593 CD DD 85            call    f_sv_rest ; restore de
0232+  8596             
0233+  8596 3A 3E 85            ld      a,(f_found)
0234+  8599 FE 00               cp      0
0235+  859B 28 01               jr      z, f_fxqx
0236+  859D 1B                  dec     de
0237+  859E 3E 24       f_fxqx: ld      a,'$'     ; it's over, put $
0238+  85A0 12                  ld      (de),a
0239+  85A1                     
0240+  85A1 FD E1               pop iy
0241+  85A3 DD E1               pop ix
0242+  85A5 E1                  pop hl
0243+  85A6 D1                  pop de
0244+  85A7 C1                  pop bc
0245+  85A8 F1                  pop af
0246+  85A9 C9                  ret
0247+  85AA             
0248+  85AA             f_dma:  .ds 40      ; to store searching results (a copy of fcb)
0249+  85D2             
0250+  85D2             ; need this crap because it uses all registers
0251+  85D2             f_sv_save:
0252+  85D2 F5                  push af
0253+  85D3 7A                  ld a,d
0254+  85D4 32 E8 85            ld (f_sv_w+0),a        
0255+  85D7 7B                  ld a,e
0256+  85D8 32 E9 85            ld (f_sv_w+1),a
0257+  85DB F1                  pop af
0258+  85DC C9                  ret
0259+  85DD             f_sv_rest:
0260+  85DD F5                  push af
0261+  85DE 3A E8 85            ld a,(f_sv_w+0)
0262+  85E1 57                  ld d,a        
0263+  85E2 3A E9 85            ld a,(f_sv_w+1)
0264+  85E5 5F                  ld e,a        
0265+  85E6 F1                  pop af
0266+  85E7 C9                  ret
0267+  85E8             
0268+  85E8 00 00       f_sv_w: .word 0
0269+  85EA                                
0270+  85EA             f_setfcb:
0271+  85EA E5                    push hl
0272+  85EB 21 33 86              ld hl,f_fcb+0
0273+  85EE 11 34 86              ld de,f_fcb+1
0274+  85F1 01 24 00              ld bc,36
0275+  85F4 70                    ld (hl),b
0276+  85F5 ED B0                 ldir
0277+  85F7 E1                    pop hl
0278+  85F8 11 33 86              ld de,f_fcb
0279+  85FB 01 0C 00              ld bc,12
0280+  85FE ED B0                 ldir
0281+  8600 C9                    ret
0282+  8601             
0283+  8601 11 33 86    f_openf:  ld      de,f_fcb
0284+  8604 0E 0F                 ld      c,f_open
0285+  8606 CD 7D F3              call    f_bdos
0286+  8609 21 01 00              ld      hl,1
0287+  860C 22 41 86              ld      (f_groot),hl
0288+  860F 2B                    dec     hl
0289+  8610 22 54 86              ld      (f_blok),hl
0290+  8613 22 56 86              ld      (f_blok+2),hl
0291+  8616 C9                    ret
0292+  8617                                 
0293+  8617 E5          f_loadf:  push    hl
0294+  8618 0E 1A                 ld      c,f_setdma
0295+  861A CD 7D F3              call    f_bdos
0296+  861D 11 33 86              ld      de,f_fcb
0297+  8620 E1                    pop     hl
0298+  8621 0E 27       f_rdit:   ld      c,f_read
0299+  8623 CD 7D F3              call    f_bdos    
0300+  8626 32 E0 84              ld      (loadflag),a  ;sets 0 if ok, 1 if can not load
0301+  8629 C9                    ret
0302+  862A 11 33 86    f_closef: ld      de,f_fcb
0303+  862D 0E 10                 ld      c,f_close
0304+  862F CD 7D F3              call    f_bdos
0305+  8632 C9                    ret
0306+  8633             
0307+  8633             
0308+  8633             ; Good tutorial on MSX files at
0309+  8633             ; http://fms.komkon.org/MSX/Handbook/th-3.txt
0310+  8633             
0311+  8633 00          f_fcb:    .byte    0
0312+  8634 3F 3F 3F 3F           .byte    "???????????"   ;11 chars          
0312+  8638 3F 3F 3F 3F 
0312+  863C 3F 3F 3F 
0313+  863F 00 00                 .word    0
0314+  8641 00 00       f_groot:  .word    0
0315+  8643 00 00       f_bleng:  .word    0
0316+  8645 00 00 00 00           .byte    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0316+  8649 00 00 00 00 
0316+  864D 00 00 00 00 
0316+  8651 00 00 00 
0317+  8654 00 00       f_blok:   .word    0
0318+  8656 00 00                 .word    0
0319+  8658             
0320+  8658                                     0134   8658                       #include "VDPs.ASM"        ; VDP functions
0001+  8658             ;=======================================
0002+  8658             ;
0003+  8658             ; VDP functions
0004+  8658             ;
0005+  8658             ;=======================================
0006+  8658             
0007+  8658             ; Provides:
0008+  8658             ;----------------------------------------------------------------------
0009+  8658             ; (1) Just working LAME part for Hello World of MSX VDP
0010+  8658             ;         (put pixels on screen)
0011+  8658             ;----------------------------------------------------------------------
0012+  8658             ;
0013+  8658             ; These functions provide MSX2 drawing from .COM module.
0014+  8658             ; LAME part can put pixels and that's all.
0015+  8658             ; Screen is 212 lines x 128 bytes per line of 2-pixels.
0016+  8658             ;
0017+  8658             ; In reality, prepare to spend days on MSX-hardcore:
0018+  8658             ; manuals, forums, not-working samples, no-hello-worlds, etc. 
0019+  8658             ; .BIN loaded from BASIC is not the same as .COM
0020+  8658             ; 64kb-s is less then Bios+DOS+BASIC+programs+etc. require -
0021+  8658             ; so it crashes silently by rewriting in the same memory addresses.
0022+  8658             ; Lots of functions described by techies just crash the emulator. 
0023+  8658             ; BASIC is for drawings!, not assembler.
0024+  8658             ; And video memory should be used as much possible (page 0-3, not LAME!),
0025+  8658             ; because MSX has lots of video memory compared to programmable RAM.
0026+  8658             ;
0027+  8658             ; Hello world .com that puts 2-pixels in left upper and right lower corner.
0028+  8658             ; 
0029+  8658             ;   org $100
0030+  8658             ;   call SetScreen5By30h
0031+  8658             ;   ld de,0
0032+  8658             ;   call LocateHL_byXY_inDE
0033+  8658             ;   ld a,$77
0034+  8658             ;   call VDPdraw2pixels    
0035+  8658             ;   ld d,127
0036+  8658             ;   ld e,211
0037+  8658             ;   call LocateHL_byXY_inDE
0038+  8658             ;   ld a,$88
0039+  8658             ;   call VDPdraw2pixels
0040+  8658             ;   call PressKeyBy30h
0041+  8658             ;   call SetScreen0By30h
0042+  8658             ;   ret
0043+  8658             ;         
0044+  8658             
0045+  8658             
0046+  8658             SetScreen5By30h:
0047+  8658 3E 05                ld    a,$05      ; Screen 5      
0048+  865A F7                   rst   30h
0049+  865B 80                   .byte $80        ; BIOS slot (when nothing is loaded)  
0050+  865C 5F 00                .word $005f      ; CHGMOD CALL 5Fh
0051+  865E C9                   ret
0052+  865F                      
0053+  865F             DisableScreenBy30h:       ; Before...
0054+  865F F7                   rst   30h
0055+  8660 80                   .byte $80        
0056+  8661 41 00                .word $0041      ; Disables screen display      
0057+  8663 C9                   ret
0058+  8664                      
0059+  8664             EnableScreenBy30h:        ; When drawings are finished... 
0060+  8664 F7                   rst   30h
0061+  8665 80                   .byte $80               
0062+  8666 44 00                .word $0044      ; Enables screen display  
0063+  8668 C9                   ret
0064+  8669             
0065+  8669             LocateHL_byXY_inDE:       ; Procedure calculates hl offset and sets VDP for writing
0066+  8669 F3                   di
0067+  866A F5                   push af
0068+  866B C5                   push bc
0069+  866C D5                   push de
0070+  866D E5                   push hl
0071+  866E DD E5                push ix
0072+  8670 6A                   ld l,d           ; regs d=x[0..127]
0073+  8671 7B                   ld a,e           ;      e=y[0..211]
0074+  8672 11 00 00             ld de,0
0075+  8675 CB 47                bit 0,a
0076+  8677 28 02                jr z,no2add128bits
0077+  8679 1E 80                ld e,$80
0078+  867B             no2add128bits:
0079+  867B 1F                   rra
0080+  867C 67                   ld h,a
0081+  867D 19                   add hl,de
0082+  867E AF                   xor a 
0083+  867F CD 8A 86             call SetVDPwriteBy30h  ; now will write at this position
0084+  8682 DD E1                pop ix
0085+  8684 E1                   pop hl
0086+  8685 D1                   pop de
0087+  8686 C1                   pop bc
0088+  8687 F1                   pop af
0089+  8688 FB                   ei
0090+  8689 C9                   ret                                          
0091+  868A                                       ; This prepares for "pixeling"
0092+  868A             SetVDPwriteBy30h:         ; hl,contains initial address
0093+  868A F7                   rst   30h
0094+  868B 80                   .byte $80 
0095+  868C 71 01                .word $0171      ; NSTWRT Sets up the VDP for writing wit full VRAM address
0096+  868E C9                   ret         
0097+  868F             
0098+  868F             VDPdraw2pixels:           ; Put 2 pixels by sending one byte with 2 colour Nr. (bits 0-3,4-7)
0099+  868F D3 98                out ($98),a      ; send this sequently
0100+  8691 C9                   ret
0101+  8692                      
0102+  8692                              
0103+  8692             SetPaletteByTable:        ; Sets colors by given RGB-table in HL-reg
0104+  8692 F5                   push af         
0105+  8693 C5                   push bc
0106+  8694 E5                   push hl
0107+  8695 06 10                ld b,$10             ; 16 colours
0108+  8697             SPcoLoop:
0109+  8697 F3                   di
0110+  8698 7E                   ld   a,(hl)
0111+  8699 23                   inc  hl
0112+  869A D3 99                out  ($99),a          ; colour Nr.
0113+  869C 3E 90                ld   a, 128+16
0114+  869E D3 99                out  ($99),a         
0115+  86A0 7E                   ld   a,(hl)            ; red
0116+  86A1 23                   inc  hl
0117+  86A2 23                   inc  hl
0118+  86A3 CB 27                sla  a
0119+  86A5 CB 27                sla  a
0120+  86A7 CB 27                sla  a
0121+  86A9 CB 27                sla  a                 ; bits 4-7
0122+  86AB 4F                   ld   c,a
0123+  86AC 7E                   ld   a,(hl)            ; blue bits 0-3
0124+  86AD 2B                   dec  hl
0125+  86AE B1                   or   c
0126+  86AF D3 9A                out  ($9A),a 
0127+  86B1 7E                   ld   a,(hl)            ; green bits 0-3
0128+  86B2 23                   inc  hl
0129+  86B3 23                   inc  hl
0130+  86B4 D3 9A                out  ($9A),a
0131+  86B6 FB                   ei 
0132+  86B7 10 DE                djnz SPcoLoop
0133+  86B9 E1                   pop  hl         
0134+  86BA C1                   pop  bc
0135+  86BB F1                   pop  af 
0136+  86BC C9                   ret
0137+  86BD                      
0138+  86BD             SetBackgrColor:               ; Sets background color by A=Nr.              
0139+  86BD F3                   di
0140+  86BE D3 99                out  ($99),a        ; a=[0..15]
0141+  86C0 3E 87                ld   a,128+7
0142+  86C2 D3 99                out  ($99),a        
0143+  86C4 FB                   ei
0144+  86C5 C9                   ret
0145+  86C6             
0146+  86C6             VDPfaster:                   ; working with memory only, no sprite collisions and other things slowing down VDP
0147+  86C6 F5                   push af
0148+  86C7 F3                   di
0149+  86C8 3E 0A                ld   a, %00001010 ; sprites off (bit1), VRAM quantity (bit3)- Affects how VDP performs refresh on DRAM chips   
0150+  86CA D3 99                out  ($99),a
0151+  86CC 3E 88                ld   a, 128+8     
0152+  86CE D3 99                out  ($99),a
0153+  86D0 FB                   ei
0154+  86D1 F1                   pop af
0155+  86D2 C9                   ret
0156+  86D3                                                                                                                      
0157+  86D3             PressKeyBy30h:               ; wait for keypress
0158+  86D3 F7                   rst   30h
0159+  86D4 80                   .byte $80 
0160+  86D5 9F 00                .word $009f
0161+  86D7             ClearKeyBy30h:
0162+  86D7 F7                   rst   30h
0163+  86D8 80                   .byte $80 
0164+  86D9 56 01                .word $0156         ; clear key buffer after             
0165+  86DB C9                   ret
0166+  86DC             
0167+  86DC             InkeyKeyBy30h:               ; detects if there is a keypress
0168+  86DC F7                   rst   30h
0169+  86DD 80                   .byte $80 
0170+  86DE 9C 00                .word $009c
0171+  86E0 28 05                jr z,InkeyK_none
0172+  86E2 CD D3 86             call PressKeyBy30h  ; if is then detects code
0173+  86E5 18 02                jr InkeyK_ret
0174+  86E7             InkeyK_none:
0175+  86E7 3E 00                ld a,0
0176+  86E9             InkeyK_ret:         
0177+  86E9 C9                   ret
0178+  86EA                                                 
0179+  86EA             SetScreen0By30h:             ; set back screen0
0180+  86EA 3E 00                ld    a,0      
0181+  86EC F7                   rst   30h
0182+  86ED 80                   .byte $80
0183+  86EE 5F 00                .word $005f
0184+  86F0 C9                   ret
0185+  86F1                      
0186+  86F1             SetScreenABy30h:             ; set screen by A-reg
0187+  86F1 F7                   rst   30h
0188+  86F2 80                   .byte $80
0189+  86F3 5F 00                .word $005f
0190+  86F5 C9                   ret 
0191+  86F6                      
0192+  86F6             ClearScreenBy30h:            ; clears screen
0193+  86F6 F5                   push af
0194+  86F7 C5                   push bc
0195+  86F8 D5                   push de
0196+  86F9 AF                   xor a          
0197+  86FA F7                   rst   30h
0198+  86FB 80                   .byte $80
0199+  86FC C3 00                .word $00c3
0200+  86FE D1                   pop de
0201+  86FF C1                   pop bc
0202+  8700 F1                   pop af
0203+  8701 C9                   ret
0204+  8702                      
0205+  8702             LINL40: .equ $F3AE
0206+  8702                             
0207+  8702             SetMode80:
0208+  8702 F5                  push af
0209+  8703 3E 50               ld a,80
0210+  8705 32 AE F3            ld (LINL40),a    ;width 80
0211+  8708 CD EA 86            call SetScreen0By30h
0212+  870B F1                  pop af
0213+  870C C9                  ret
0214+  870D             SetMode40:
0215+  870D F5                  push af
0216+  870E 3E 28               ld a,40
0217+  8710 32 AE F3            ld (LINL40),a    ;width 40
0218+  8713 CD EA 86            call SetScreen0By30h
0219+  8716 F1                  pop af
0220+  8717 C9                  ret 
0221+  8718                              
0222+  8718             LocatePosBy30h:              ; Locate at position H (column) L (row) on screen
0223+  8718 F7                   rst   30h
0224+  8719 80                   .byte $80
0225+  871A C6 00                .word $00c6
0226+  871C C9                   ret
0227+  871D             PutCharBy30h:                ; Put char reg-a = ascii code      
0228+  871D F7                   rst   30h
0229+  871E 80                   .byte $80
0230+  871F A2 00                .word $00a2
0231+  8721 C9                   ret
0232+  8722             PrintLineBy30h:
0233+  8722 F7                   rst   30h
0234+  8723 80                   .byte $80
0235+  8724 A2 00                .word $00a2
0236+  8726 C9                   ret
0237+  8727             
0238+  8727             CALL_5:   .equ $F37D         ;output string to screen
0239+  8727             ; prints string that ends with $
0240+  8727             ; de-reg points to string in address
0241+  8727             ; 
0242+  8727             PrintString:
0243+  8727 F5                   push af
0244+  8728 C5                   push bc
0245+  8729 D5                   push de
0246+  872A E5                   push hl
0247+  872B DD E5                push ix
0248+  872D FD E5                push iy
0249+  872F 0E 09                ld c, 9       ; function for CALL 5
0250+  8731 CD 7D F3             call CALL_5   ; MSX printing
0251+  8734 FD E1                pop iy
0252+  8736 DD E1                pop ix
0253+  8738 E1                   pop hl
0254+  8739 D1                   pop de
0255+  873A C1                   pop bc
0256+  873B F1                   pop af
0257+  873C C9                   ret
0258+  873D                                      
0259+  873D                      
0260+  873D             FORCLR:  .equ  $F3E9         ; foreground color 
0261+  873D             BAKCLR:  .equ  $F3EA         ; background color
0262+  873D             BDRCLR:  .equ  $F3EB         ; bordercolor
0263+  873D             SetColorBy30h:
0264+  873D F7                   rst   30h           ; set color scheme by using FORCLR,BAKCLR,BDRCLR
0265+  873E 80                   .byte $80
0266+  873F 62 00                .word $0062
0267+  8741 C9                   ret
0268+  8742                      
0269+  8742             CSRSW:   .equ $FCA9         ; to set cursor display switch (0-not to show)        
0270+  8742             CSTYLE:  .equ $FCAA         ; to set cursor style (0-full,2-underline)
0271+  8742                 
0272+  8742                             
0273+  8742                      
0274+  8742             ;--------------------------------------
0275+  8742             ; (2) ADVANCED functions, if You love VDP
0276+  8742             ;
0277+  8742             ; Use of pages,
0278+  8742             ; buffered copy of RAM->VRAM, RAM->RAM
0279+  8742             ;--------------------------------------
0280+  8742             ;
0281+  8742             ;
0282+  8742             ; Check if a v9958 is available (if so, return nz)
0283+  8742             ; Initialize address (v9958)
0284+  8742             ; (MSX+,MSXturboR video chip)
0285+  8742             ;
0286+  8742 00          v9958:        .byte      0             ;>1 = v9958 present
0287+  8743             
0288+  8743 F3          v9958_Check:  di                       ;Test for v9958
0289+  8744 3E 01                     ld    a,1                ;Set s$1
0290+  8746 D3 99                     out   ($99),a
0291+  8748 3E 8F                     ld    a,15+128
0292+  874A D3 99                     out   ($99),a
0293+  874C 1A                        ld    a,(de)             ;Waste some time...
0294+  874D DB 99                     in    a,($99)
0295+  874F F5                        push  af
0296+  8750 3E 00                     ld    a,0
0297+  8752 D3 99                     out   ($99),a
0298+  8754 3E 8F                     ld    a,15+128
0299+  8756 D3 99                     out   ($99),a            ;Set s$0
0300+  8758 FB                        ei
0301+  8759 F1                        pop   af
0302+  875A E6 3C                     and   %00111100          ;v9938? RET with Z
0303+  875C 32 42 87                  ld    (v9958),a
0304+  875F C9                        ret
0305+  8760             
0306+  8760             ;-----------------------------------------
0307+  8760             ;         
0308+  8760             ; These routines are the know-how scripts
0309+  8760             ; by VDP profies. In fact, dont use without
0310+  8760             ; knowing what is all about. Read manuals.
0311+  8760             ;
0312+  8760             ;-----------------------------------------
0313+  8760             
0314+  8760 00 00 00 00 VDP: .word  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0314+  8764 00 00 00 00 
0314+  8768 00 00 00 00 
0314+  876C 00 00 00 00 
0314+  8770 00 00 00 00 
0314+  8774 00 00 00 00 
0314+  8778 00 00 00 00 
0314+  877C 00 00 
0315+  877E             
0316+  877E             ;
0317+  877E             ;Copy the VDP-registers' settings to array VDP.
0318+  877E             ;Afterwards, read the VDP-registers with LD A,(VDP + r)
0319+  877E             ;(this should be placed at the start of a program)
0320+  877E             ;
0321+  877E 21 60 87    Copy_VdpRegs: ld      hl,VDP+0
0322+  8781 11 60 87                  ld      de,VDP+0
0323+  8784 01 08 00                  ld      bc,8
0324+  8787 ED B0                     ldir
0325+  8789 21 68 87                  ld      hl,VDP+8
0326+  878C 11 68 87                  ld      de,VDP+8
0327+  878F 01 11 00                  ld      bc,17
0328+  8792 ED B0                     ldir
0329+  8794 C9                        ret
0330+  8795             
0331+  8795             
0332+  8795             ;
0333+  8795             ;Restore the VDP-registers' settings.
0334+  8795             ;(this should be placed at the end of a program)
0335+  8795             ;
0336+  8795 01 00 08    Rest_VdpRegs: ld      bc,$0800
0337+  8798 21 60 87                  ld      hl,VDP+0
0338+  879B CD AD 87                  call    Rest_VdpSub
0339+  879E 01 08 10                  ld      bc,$1008
0340+  87A1 21 68 87                  ld      hl,VDP+8
0341+  87A4 CD AD 87                  call    Rest_VdpSub
0342+  87A7 01 19 03                  ld      bc,$0319
0343+  87AA 21 BC 87                  ld      hl,Vdp3zero    ;a jp Restore_Vdp_Sub is implied
0344+  87AD 7E          Rest_VdpSub:  ld      a,(hl)
0345+  87AE 23                        inc     hl
0346+  87AF F3                        di
0347+  87B0 D3 99                     out     ($99),a
0348+  87B2 79                        ld      a,c
0349+  87B3 F6 80                     or      128
0350+  87B5 FB                        ei
0351+  87B6 D3 99                     out     ($99),a
0352+  87B8 0C                        inc     c
0353+  87B9 10 F2                     djnz    Rest_VdpSub
0354+  87BB C9                        ret
0355+  87BC             
0356+  87BC 00 00 00    Vdp3zero:    .byte      0,0,0
0357+  87BF             
0358+  87BF             
0359+  87BF             ;
0360+  87BF             ;Set page = A [0..3] in screen 5.
0361+  87BF             ;
0362+  87BF             SetPage:
0363+  87BF 87                  add     a,a ;x32
0364+  87C0 87                  add     a,a
0365+  87C1 87                  add     a,a
0366+  87C2 87                  add     a,a
0367+  87C3 87                  add     a,a
0368+  87C4 C6 1F               add     a,31
0369+  87C6 32 62 87            ld      (VDP+2),a
0370+  87C9 F3                  di
0371+  87CA D3 99               out     ($99),a
0372+  87CC 3E 82               ld      a,2+128
0373+  87CE FB                  ei
0374+  87CF D3 99               out     ($99),a
0375+  87D1 C9                  ret
0376+  87D2                     
0377+  87D2             ;
0378+  87D2             ;Set VDP port $98 to start writing at address AHL (17-bit)
0379+  87D2             ;
0380+  87D2             ;
0381+  87D2             ; Left upper corner of each pages:
0382+  87D2             ;   0 -> A=0,HL=$0000
0383+  87D2             ;   1 -> A=0,HL=$8000
0384+  87D2             ;   2 -> A=1,HL=$0000
0385+  87D2             ;   3 -> A=1,HL=$8000
0386+  87D2             ;
0387+  87D2             
0388+  87D2             
0389+  87D2             Set_Vdp_Write:           ; A(1bit),HL(16bits) input
0390+  87D2                     
0391+  87D2 CB 04               rlc   h
0392+  87D4 17                  rla
0393+  87D5 CB 04               rlc   h
0394+  87D7 17                  rla
0395+  87D8 CB 3C               srl   h
0396+  87DA CB 3C               srl   h
0397+  87DC F3                  di
0398+  87DD D3 99               out   ($99),a
0399+  87DF 3E 8E               ld    a,14+128
0400+  87E1 D3 99               out   ($99),a
0401+  87E3 7D                  ld    a,l
0402+  87E4 00                  nop
0403+  87E5 D3 99               out   ($99),a
0404+  87E7 7C                  ld    a,h
0405+  87E8 F6 40               or    64
0406+  87EA FB                  ei
0407+  87EB D3 99               out   ($99),a
0408+  87ED C9                  ret
0409+  87EE             
0410+  87EE             ;
0411+  87EE             ;Set VDP port $98 to start reading at address AHL (17-bit)
0412+  87EE             ;
0413+  87EE             SetVdp_Read:
0414+  87EE CB 04               rlc     h
0415+  87F0 17                  rla
0416+  87F1 CB 04               rlc     h
0417+  87F3 17                  rla
0418+  87F4 CB 3C               srl     h
0419+  87F6 CB 3C               srl     h
0420+  87F8 F3                  di
0421+  87F9 D3 99               out     ($99),a       ;set bits 15-17
0422+  87FB 3E 8E               ld      a,128+14
0423+  87FD D3 99               out     ($99),a
0424+  87FF 7D                  ld      a,l           ;set bits 0-7
0425+  8800 00                  nop
0426+  8801 D3 99               out     ($99),a
0427+  8803 7C                  ld      a,h           ;set bits 8-14
0428+  8804 FB                  ei                    ; + read access
0429+  8805 D3 99               out     ($99),a
0430+  8807 C9                  ret
0431+  8808                     
0432+  8808             ;****************************************************************
0433+  8808             ; HMMC (High speed move CPU to VRAM)
0434+  8808             ; Screen size 256x212 dots, each byte is color Nr. for 2-pixels 
0435+  8808             ;
0436+  8808             ; Copies data from memory to block in VRAM
0437+  8808             ; The same as in basic COPY file.pic TO (x,y)-(x+D-1,y+E-1)
0438+  8808             ;
0439+  8808             ; RAM [IX] => VRAM (H,L)-(+D,+E)
0440+  8808             ;
0441+  8808             ; set ix = memory address of data to write to VRAM
0442+  8808             ; set h,l,d,e for rectangle to put in
0443+  8808             ; D,E mod 2 = 0 !
0444+  8808             ;****************************************************************
0445+  8808             
0446+  8808             HMMC:  
0447+  8808 F3                   di
0448+  8809 F5                   push af
0449+  880A C5                   push bc
0450+  880B E5                   push hl
0451+  880C DD E5                push ix      
0452+  880E 3E 00                ld a,0         
0453+  8810 CD 75 88             call hmmc_wait_VDP
0454+  8813 3E 24                ld a,36         ;command register R#36
0455+  8815 D3 99                out ($99),a
0456+  8817 3E 91                ld a,128+17     ;VDP(17)<=36
0457+  8819 D3 99                out ($99),a
0458+  881B AF                   xor a           ;ld a,0
0459+  881C 0E 9B                ld c,$9b
0460+  881E ED 61                out (c),h       ;X
0461+  8820 ED 79                out (c),a
0462+  8822 ED 69                out (c),l       ;Y
0463+  8824 ED 79                out (c),a
0464+  8826 ED 51                out (c),d       ;DX in dots
0465+  8828 ED 79                out (c),a       ;
0466+  882A ED 59                out (c),e       ;DY in dots
0467+  882C ED 79                out (c),a       ;
0468+  882E                         
0469+  882E DD 66 00             ld h,(ix)       ;first byte of data
0470+  8831 ED 61                out (c),h       
0471+  8833             
0472+  8833 ED 79                out (c),a       ;DIX and DIY = 0     
0473+  8835 3E F0                ld a,%11110000
0474+  8837 ED 79                out (c),a      ; command to do it
0475+  8839 3E AC                ld a,128+44
0476+  883B D3 99                out ($99),a
0477+  883D 3E 91                ld a,128+17
0478+  883F D3 99                out ($99),a    ; VDP(17)<=44                        
0479+  8841             hmmc_Loop:
0480+  8841 3E 02                ld a,2
0481+  8843 CD 63 88             call hmmc_Status
0482+  8846 CB 7F                bit 7,a        ; TR? transferring?
0483+  8848 28 F7                jr z, hmmc_Loop
0484+  884A CB 47                bit 0,a        ; CE? is over?
0485+  884C 28 09                jr z, hmmc_exit                       
0486+  884E DD 23                inc ix
0487+  8850 DD 7E 00             ld a,(ix)
0488+  8853 D3 9B                out ($9b),a
0489+  8855 18 EA                jr hmmc_Loop                                                      
0490+  8857             hmmc_exit:
0491+  8857 3E 00                ld a,0
0492+  8859 CD 63 88             call hmmc_Status
0493+  885C DD E1                pop ix
0494+  885E E1                   pop hl
0495+  885F C1                   pop bc
0496+  8860 F1                   pop af
0497+  8861 FB                   ei
0498+  8862 C9                   ret                                                                                                                                                                                                                  
0499+  8863                                                                                                                                                                                                                                                                                         
0500+  8863             hmmc_Status:
0501+  8863 D3 99                out ($99),a
0502+  8865 3E 8F                ld a,$8f
0503+  8867 D3 99                out ($99),a
0504+  8869 DB 99                in a,($99)
0505+  886B F5                   push af
0506+  886C AF                   xor a
0507+  886D D3 99                out ($99),a
0508+  886F 3E 8F                ld a,$8f
0509+  8871 D3 99                out ($99),a
0510+  8873 F1                   pop af
0511+  8874 C9                   ret
0512+  8875             hmmc_wait_VDP:
0513+  8875 3E 02                ld a,2
0514+  8877 CD 63 88             call hmmc_Status
0515+  887A E6 01                and 1
0516+  887C 20 F7                jr nz,hmmc_wait_VDP
0517+  887E AF                   xor a
0518+  887F CD 63 88             call hmmc_Status
0519+  8882 C9                   ret
0520+  8883             
0521+  8883             ;****************************************************************
0522+  8883             ;  HMMM (High speed move VRAM to VRAM)
0523+  8883             ;        to use, set H, L, D, E, B, C and go
0524+  8883             ;        VRAM (H,L)-(+D,+E) ---> VRAM (B,C)
0525+  8883             ; DE is difference -not absolute values
0526+  8883             ; byte DIX,DIY=0, explained:
0527+  8883             ; The 0 copies the block starting from the upper left, the 1 from right/bottom.
0528+  8883             ; what's the difference? when copying overlapping source/destination
0529+  8883             ; (a scroller for example)
0530+  8883             ; when scrolling from right to left DIX/DIY can both be 0
0531+  8883             ;  but copying from left to right DIX must be 1. just figure it out...
0532+  8883             ; Then give coord.positive from right upper corner to left.
0533+  8883             ;****************************************************************
0534+  8883             
0535+  8883             HMMM:
0536+  8883 F3                   di
0537+  8884 F5                   push af
0538+  8885 C5                   push bc              
0539+  8886 CD BF 88             call VDPready
0540+  8889 3E 20                ld  a,32
0541+  888B D3 99                out ($99),a
0542+  888D 3E 91                ld  a,128+17
0543+  888F D3 99                out ($99),a     ;R#17 := 32
0544+  8891 D5                   push de
0545+  8892 C5                   push bc
0546+  8893 AF                   xor a           ;ld a,0
0547+  8894 D1                   pop de          ;de = bc now
0548+  8895 0E 9B                ld c,$9b
0549+  8897 ED 61                out (c),h       ;X from
0550+  8899 ED 79                out (c),a
0551+  889B ED 69                out (c),l       ;Y from
0552+  889D ED 79                out (c),a
0553+  889F ED 51                out (c),d       ;X to
0554+  88A1 ED 79                out (c),a       ;
0555+  88A3 ED 59                out (c),e       ;Y to
0556+  88A5 ED 79                out (c),a
0557+  88A7 D1                   pop de          ;de = de now
0558+  88A8 ED 51                out (c),d       ;DX in dots
0559+  88AA ED 79                out (c),a       ;
0560+  88AC ED 59                out (c),e       ;DY in dots
0561+  88AE ED 79                out (c),a       ;
0562+  88B0 ED 79                out (c),a       ;dummy
0563+  88B2 ED 79                out (c),a       ;DIX and DIY = 0
0564+  88B4 3E D0                ld  a,%11010000 ;HMMM command
0565+  88B6 ED 79                out (c),a       ;do it
0566+  88B8 CD BF 88             call VDPready
0567+  88BB C1                   pop bc
0568+  88BC F1                   pop af
0569+  88BD FB                   ei
0570+  88BE C9                   ret
0571+  88BF                                             
0572+  88BF             VDPready:
0573+  88BF 3E 02               ld   a,2
0574+  88C1 F3                  di
0575+  88C2 D3 99               out  ($99),a          ;select status register 2
0576+  88C4 3E 8F               ld   a,128+15
0577+  88C6 D3 99               out  ($99),a
0578+  88C8 DB 99               in   a,($99)
0579+  88CA 1F                  rra
0580+  88CB 3E 00               ld   a,0
0581+  88CD D3 99               out  ($99),a
0582+  88CF 3E 8F               ld   a,128+15
0583+  88D1 D3 99               out  ($99),a
0584+  88D3 FB                  ei
0585+  88D4 38 E9               jr   c,VDPready    ;wait till previous VDP execution is over (CE)
0586+  88D6 C9                  ret
0587+  88D7             
0588+  88D7             ;
0589+  88D7             ; Sets display mode to width 80
0590+  88D7             ; Use then SetScreen0By30h to set back width 40
0591+  88D7             ;
0592+  88D7             VDPsetMode80:        
0593+  88D7             
0594+  88D7 F3                  di
0595+  88D8 3E 04               ld   a,%00000100
0596+  88DA D3 99               out  ($99),a
0597+  88DC 3E 80               ld   a,128+0
0598+  88DE D3 99               out  ($99),a
0599+  88E0 3E 70               ld   a,%01110000
0600+  88E2 D3 99               out  ($99),a
0601+  88E4 3E 81               ld   a,128+1
0602+  88E6 D3 99               out  ($99),a
0603+  88E8 AF                  xor a
0604+  88E9 D3 99               out  ($99),a
0605+  88EB 3E 88               ld   a,128+8
0606+  88ED D3 99               out  ($99),a
0607+  88EF AF                  xor a
0608+  88F0 D3 99               out  ($99),a
0609+  88F2 3E 89               ld   a,128+9
0610+  88F4 D3 99               out  ($99),a
0611+  88F6 FB                  ei
0612+  88F7 C9                  ret
0613+  88F8                                                     
0614+  88F8             ;        
0615+  88F8             ;Disable the screen.
0616+  88F8             ;
0617+  88F8             Disable_Scr:
0618+  88F8 3A 61 87            ld      a,(VDP+1)
0619+  88FB E6 BF               and     %10111111
0620+  88FD 32 61 87            ld      (VDP+1),a
0621+  8900 F3                  di
0622+  8901 D3 99               out     ($99),a
0623+  8903 3E 81               ld      a,128+1
0624+  8905 FB                  ei
0625+  8906 D3 99               out     ($99),a
0626+  8908 C9                  ret
0627+  8909             
0628+  8909             ;
0629+  8909             ;Enable the screen.
0630+  8909             ;
0631+  8909             Enable_Scr:
0632+  8909 3A 61 87            ld      a,(VDP+1)
0633+  890C F6 40               or      %01000000
0634+  890E 32 61 87            ld      (VDP+1),a
0635+  8911 F3                  di
0636+  8912 D3 99               out     ($99),a
0637+  8914 3E 81               ld      a,128+1
0638+  8916 FB                  ei
0639+  8917 D3 99               out     ($99),a
0640+  8919 C9                  ret
0641+  891A             
0642+  891A             ;
0643+  891A             ;Enable the sprites.
0644+  891A             ;
0645+  891A 3A 68 87    Sprites_On:   ld      a,(VDP+8)
0646+  891D E6 FD                     and     %11111101
0647+  891F 32 68 87                  ld      (VDP+8),a
0648+  8922 F3                        di
0649+  8923 D3 99                     out     ($99),a
0650+  8925 3E 88                     ld      a,8+128
0651+  8927 FB                        ei
0652+  8928 D3 99                     out     ($99),a
0653+  892A C9                        ret
0654+  892B             
0655+  892B             ;
0656+  892B             ;Disable the sprites.
0657+  892B             ;
0658+  892B 3A 68 87    Sprites_Off:  ld      a,(VDP+8)
0659+  892E F6 02                     or      %00000010
0660+  8930 32 68 87                  ld      (VDP+8),a
0661+  8933 F3                        di
0662+  8934 D3 99                     out     ($99),a
0663+  8936 3E 88                     ld      a,8+128
0664+  8938 FB                        ei
0665+  8939 D3 99                     out     ($99),a
0666+  893B C9                        ret
0667+  893C             ;
0668+  893C             ; set 16x16 sprites
0669+  893C             ;         
0670+  893C             VDPsprites16x16:
0671+  893C 3A 61 87                  ld      a,(VDP+1)
0672+  893F F6 02                     or      %00000010
0673+  8941 32 61 87                  ld      (VDP+1),a
0674+  8944 F3                        di
0675+  8945 D3 99                     out     ($99),a
0676+  8947 3E 81                     ld      a,1+128
0677+  8949 FB                        ei
0678+  894A D3 99                     out     ($99),a
0679+  894C C9                        ret
0680+  894D             
0681+  894D 00 00 00 00 ColPal_:    .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 
0681+  8951 00 00 00 00 
0681+  8955 00 00 00 00 
0681+  8959 00 00 00 00 
0681+  895D 00 00 00 00 
0681+  8961 00 00 00 00 
0681+  8965 00 00 00 00 
0681+  8969 00 00 00 00 
0682+  896D             
0683+  896D             Color16defaultPalettes:
0684+  896D                         ;table of colours Nr,R,G,B
0685+  896D 00 00 00 00         .byte $0,0,0,0
0686+  8971 01 00 00 00         .byte $1,0,0,0
0687+  8975 02 01 06 01         .byte $2,1,6,1
0688+  8979 03 03 07 03         .byte $3,3,7,3
0689+  897D 04 01 01 07         .byte $4,1,1,7
0690+  8981 05 02 03 07         .byte $5,2,3,7
0691+  8985 06 05 01 01         .byte $6,5,1,1
0692+  8989 07 02 06 07         .byte $7,2,6,7
0693+  898D 08 07 01 01         .byte $8,7,1,1
0694+  8991 09 07 03 03         .byte $9,7,3,3
0695+  8995 0A 06 06 01         .byte $A,6,6,1
0696+  8999 0B 06 06 04         .byte $B,6,6,4
0697+  899D 0C 01 04 01         .byte $C,1,4,1
0698+  89A1 0D 06 02 05         .byte $D,6,2,5
0699+  89A5 0E 05 05 05         .byte $E,5,5,5
0700+  89A9 0F 07 07 07         .byte $F,7,7,7
0701+  89AD                     
0702+  89AD             ;Restores default MSX color palettes
0703+  89AD             RestoreColors:
0704+  89AD E5                       push hl
0705+  89AE 21 6D 89                 ld hl, Color16defaultPalettes 
0706+  89B1 CD 92 86                 call SetPaletteByTable    ; defines 16colors
0707+  89B4 E1                       pop hl
0708+  89B5 C9                       ret
0709+  89B6             
0710+  89B6             ;****************************************************************
0711+  89B6             ; draws LINE 
0712+  89B6             ;        to use, set H, L, D, E, B, A and go
0713+  89B6             ;        draw LINE (H,L)-(D,E) with color B, log-op A
0714+  89B6             ; H,L,D,E absolute values
0715+  89B6             ;****************************************************************
0716+  89B6             
0717+  89B6             LINE:
0718+  89B6 F3                   di
0719+  89B7 F5                   push af
0720+  89B8 C5                   push bc
0721+  89B9 D5                   push de
0722+  89BA E5                   push hl
0723+  89BB                      
0724+  89BB F5                   push af          ;save LOGICAL OPERATION
0725+  89BC C5                   push bc          ;save COLOR            
0726+  89BD CD BF 88             call VDPready
0727+  89C0 3E 24                ld  a,36
0728+  89C2 D3 99                out ($99),a
0729+  89C4 3E 91                ld  a,128+17
0730+  89C6 D3 99                out ($99),a     ;R#17 := 36
0731+  89C8 AF                   xor a           ;ld a,0
0732+  89C9 0E 9B                ld c,$9b
0733+  89CB ED 61                out (c),h       ;X from
0734+  89CD ED 79                out (c),a
0735+  89CF ED 69                out (c),l       ;Y from
0736+  89D1 ED 79                out (c),a
0737+  89D3              
0738+  89D3 7C                   ld a,h          ;make DX and DIX
0739+  89D4 92                   sub d
0740+  89D5 16 04                ld  d,%00000100
0741+  89D7 30 04                jr nc,gLINE1
0742+  89D9 16 00                ld  d,%00000000
0743+  89DB ED 44                neg
0744+  89DD 67          gLINE1:  ld h,a          ;H := DX , D := DIX
0745+  89DE 7D                   ld a,l          ;make DY and DIY
0746+  89DF 93                   sub e
0747+  89E0 1E 08                ld  e,%00001000
0748+  89E2 30 04                jr nc,gLINE2
0749+  89E4 1E 00                ld  e,%00000000
0750+  89E6 ED 44                neg
0751+  89E8 6F          gLINE2:  ld l,a          ;L := DY , E := DIY
0752+  89E9 BC                   cp h            ;make Maj and Min
0753+  89EA 38 0D                jr c,gLINE3
0754+  89EC AF                   xor a
0755+  89ED ED 69                out (c),l           ;long side
0756+  89EF ED 79                out (c),a
0757+  89F1 ED 61                out (c),h           ;short side
0758+  89F3 ED 79                out (c),a
0759+  89F5 3E 01                ld  a,%00000001     ;MAJ := 1
0760+  89F7 18 0B                jr gLINE4
0761+  89F9             
0762+  89F9 AF          gLINE3:  xor a
0763+  89FA ED 61                out (c),h           ;NX
0764+  89FC ED 79                out (c),a
0765+  89FE ED 69                out (c),l           ;NY
0766+  8A00 ED 79                out (c),a
0767+  8A02 3E 00                ld  a,%00000000     ;MAJ := 0
0768+  8A04             
0769+  8A04 B2          gLINE4:  or d
0770+  8A05 B3                   or e           ;A := DIX , DIY , MAJ
0771+  8A06 E1                   pop hl         ;H := COLOR
0772+  8A07 ED 61                out (c),h
0773+  8A09 ED 79                out (c),a
0774+  8A0B F1                   pop af         ;A := LOGICAL OPERATION
0775+  8A0C F6 70                or  %01110000
0776+  8A0E ED 79                out (c),a
0777+  8A10 3E 8F                ld  a,$8F
0778+  8A12 ED 79                out (c),a
0779+  8A14                      
0780+  8A14 CD BF 88             call VDPready
0781+  8A17 E1                   pop hl         
0782+  8A18 D1                   pop de         
0783+  8A19 C1                   pop bc
0784+  8A1A F1                   pop af
0785+  8A1B FB                   ei
0786+  8A1C C9                   ret
0787+  8A1D              
0788+  8A1D             
0789+  8A1D             ;***************************************************************************
0790+  8A1D             ;  HMMM with 2byte addressing (far copy), for not simplest case
0791+  8A1D             ;  word size parameters for H, L, D, E, B, C, DIX/DIY byte
0792+  8A1D             ;***************************************************************************
0793+  8A1D             
0794+  8A1D 00 00 00 00 HC_p     .word 0,0,0,0,0,0
0794+  8A21 00 00 00 00 
0794+  8A25 00 00 00 00 
0795+  8A29 00                   .byte 0    ;DIX,DIY, just =0
0796+  8A2A             
0797+  8A2A             HMMMf:
0798+  8A2A F3                   di
0799+  8A2B F5                   push af
0800+  8A2C C5                   push bc
0801+  8A2D D5                   push de
0802+  8A2E E5                   push hl
0803+  8A2F                              
0804+  8A2F CD BF 88             call VDPready
0805+  8A32 3E 20                ld  a,32
0806+  8A34 D3 99                out ($99),a
0807+  8A36 3E 91                ld  a,128+17
0808+  8A38 D3 99                out ($99),a     ;R#17 := 32
0809+  8A3A 21 1D 8A             ld hl,HC_p
0810+  8A3D 0E 9B                ld c,$9b
0811+  8A3F 06 0C                ld b,12         ;6x2bytes
0812+  8A41 ED B3                otir
0813+  8A43 AF                   xor a     
0814+  8A44 ED 79                out (c),a       ;dummy
0815+  8A46 ED A3                outi            ;DIX and DIY
0816+  8A48 3E D0                ld  a,%11010000 ;HMMM command
0817+  8A4A ED 79                out (c),a       ;do it
0818+  8A4C CD BF 88             call VDPready
0819+  8A4F E1                   pop hl
0820+  8A50 D1                   pop de
0821+  8A51 C1                   pop bc
0822+  8A52 F1                   pop af
0823+  8A53 FB                   ei
0824+  8A54 C9                   ret
0825+  8A55             
0826+  8A55             ;***************************************************************************
0827+  8A55             ;  LMMM with 2byte addressing (far copy), for not simplest case
0828+  8A55             ;  VRAM (H,L)-(D,E) ---> VRAM (B,C)  with logical operation 
0829+  8A55             ;  word size parameters for H, L, D, E, B, C, DIX/DIY byte, Logical_A byte
0830+  8A55             ;***************************************************************************
0831+  8A55             
0832+  8A55 00 00 00 00 LM_p     .word 0,0,0,0,0,0
0832+  8A59 00 00 00 00 
0832+  8A5D 00 00 00 00 
0833+  8A61 00                   .byte 0    ;DIX,DIY, just =0
0834+  8A62 00                   .byte 0    ;LOGICAL IMP=0 (just copy), TIMP bit3=1 copy no transparents
0835+  8A63             LMMMf:
0836+  8A63 F3                   di
0837+  8A64 F5                   push af
0838+  8A65 C5                   push bc
0839+  8A66 D5                   push de
0840+  8A67 E5                   push hl
0841+  8A68                              
0842+  8A68 CD BF 88             call VDPready
0843+  8A6B 3E 20                ld  a,32
0844+  8A6D D3 99                out ($99),a
0845+  8A6F 3E 91                ld  a,128+17
0846+  8A71 D3 99                out ($99),a     ;R#17 := 32
0847+  8A73 21 55 8A             ld hl,LM_p
0848+  8A76 0E 9B                ld c,$9b
0849+  8A78 06 0C                ld b,12         ;6x2bytes
0850+  8A7A ED B3                otir
0851+  8A7C AF                   xor a     
0852+  8A7D ED 79                out (c),a       ;dummy
0853+  8A7F ED A3                outi            ;DIX and DIY
0854+  8A81 7E                   ld a,(hl)       ; +logical
0855+  8A82 F6 90                or %10010000    ;LMMM command
0856+  8A84 ED 79                out (c),a       ;do it
0857+  8A86 CD BF 88             call VDPready
0858+  8A89 E1                   pop hl
0859+  8A8A D1                   pop de
0860+  8A8B C1                   pop bc
0861+  8A8C F1                   pop af
0862+  8A8D FB                   ei
0863+  8A8E C9                   ret
0135   8A8F             
0136   8A8F             ;------------- draws file selection
0137   8A8F             DrawFileSelection:
0138   8A8F F5                      push af
0139   8A90 C5                      push bc
0140   8A91 D5                      push de
0141   8A92 E5                      push hl
0142   8A93 DD E5                   push ix
0143   8A95 FD E5                   push iy
0144   8A97                          
0145   8A97 26 01                   ld h,1
0146   8A99 2E 0F                   ld l,Fs_1Row-1
0147   8A9B CD 18 87                call LocatePosBy30h
0148   8A9E             
0149   8A9E 06 00                   ld b,0
0150   8AA0 FD 21 3D 8C             ld iy,DirOfPGNs     
0151   8AA4 FD 7E 00                ld a,(iy)          
0152   8AA7             Fs_chScan:  
0153   8AA7 FE 24                   cp '$'       ; end of file list?
0154   8AA9 28 59                   jr z,Fs_chExit
0155   8AAB                          
0156   8AAB 04                      inc b        ; counter
0157   8AAC C5                      push bc
0158   8AAD                            
0159   8AAD                         ;---------
0160   8AAD C5                      push bc
0161   8AAE E5                      push hl
0162   8AAF 11 12 8B                ld de, Fs_name
0163   8AB2 01 0B 00                ld bc,11
0164   8AB5 FD E5                   push iy      ; hl=iy
0165   8AB7 E1                      pop hl
0166   8AB8 ED B0                   ldir
0167   8ABA E5                      push hl
0168   8ABB FD E1                   pop iy       ; iy = iy+11
0169   8ABD 3E 2E                   ld a,'.'
0170   8ABF 32 19 8B                ld (Fs_name+7),a
0171   8AC2 E1                      pop hl
0172   8AC3 C1                      pop bc
0173   8AC4                         ;--------
0174   8AC4                         
0175   8AC4 FD E5                   push iy
0176   8AC6                                                         
0177   8AC6 2C                      inc l  ; next row
0178   8AC7 7D                      ld a,l
0179   8AC8 FE 18                   cp Fs_1Row+Fs_FperC ; per column
0180   8ACA 20 06                   jr nz,Fs_nxtC
0181   8ACC 7C                      ld a,h
0182   8ACD C6 10                   add a,16
0183   8ACF 67                      ld h,a
0184   8AD0 2E 10                   ld l,Fs_1Row
0185   8AD2             Fs_nxtC:             
0186   8AD2 CD 18 87                call LocatePosBy30h          
0187   8AD5                                       
0188   8AD5 3A 62 80                ld a,(_fileI)
0189   8AD8 B8                      cp b
0190   8AD9 20 09                   jr nz,Fs_chNotI
0191   8ADB 11 20 8B                ld de,Fs_Seltr1    ; selector1 char
0192   8ADE DD 21 24 8B             ld ix,Fs_Seltr2    ; selector2 char            
0193   8AE2 18 07                   jr Fs_chSelI
0194   8AE4 11 28 8B    Fs_chNotI:  ld de,Fs_Space     ; space
0195   8AE7 DD 21 28 8B             ld ix,Fs_Space 
0196   8AEB CD 27 87    Fs_chSelI:  call PrintString   ;print selector1
0197   8AEE                         
0198   8AEE 11 12 8B                ld de, Fs_name
0199   8AF1 CD 27 87                call PrintString   ;print FileName item
0200   8AF4 DD E5                   push ix
0201   8AF6 D1                      pop de    ;de=ix 
0202   8AF7 CD 27 87                call PrintString   ;print selector2
0203   8AFA                         
0204   8AFA FD E1                   pop iy
0205   8AFC                         
0206   8AFC FD 7E 00                ld a,(iy)
0207   8AFF FD 23                   inc iy
0208   8B01                         
0209   8B01 C1                      pop bc
0210   8B02                          
0211   8B02 18 A3                   jr Fs_chScan    ; next file        
0212   8B04             Fs_chExit:  
0213   8B04 78                      ld a,b
0214   8B05 32 3B 8C                ld (Fs_Items),a
0215   8B08                           
0216   8B08 FD E1                   pop iy
0217   8B0A DD E1                   pop ix
0218   8B0C E1                      pop hl
0219   8B0D D1                      pop de
0220   8B0E C1                      pop bc
0221   8B0F F1                      pop af
0222   8B10 C9                      ret
0223   8B11                         
0224   8B11 00          FNAME:     .byte 0
0225   8B12 3F 3F 3F 3F Fs_name:   .byte "???????.??? $",0
0225   8B16 3F 3F 3F 2E 
0225   8B1A 3F 3F 3F 20 
0225   8B1E 24 00 
0226   8B20             
0227   8B20             
0228   8B20 3E 20 24 00 Fs_Seltr1: .byte "> $",0
0229   8B24 3C 20 24 00 Fs_Seltr2: .byte "< $",0
0230   8B28 20 20 24 00 Fs_Space:  .byte "  $",0
0231   8B2C             
0232   8B2C             ;-------------------------- File selection keypress control
0233   8B2C             FsKeyPress:
0234   8B2C F5                      push af
0235   8B2D C5                      push bc
0236   8B2E                         
0237   8B2E FE 00                   cp 0
0238   8B30 28 70                   jr z,Fs_noAct
0239   8B32                         
0240   8B32 47                      ld b,a
0241   8B33 3A 61 80                ld a,(_keymnbf)
0242   8B36 B8                      cp b
0243   8B37 28 69                   jr z, Fs_noAct
0244   8B39 78                      ld a,b
0245   8B3A 32 61 80                ld (_keymnbf),a
0246   8B3D                         
0247   8B3D FE 1B                   cp 27
0248   8B3F 20 0C                   jr nz,Fs_noESC
0249   8B41                         
0250   8B41 3E 01                   ld a,1
0251   8B43 32 63 80                ld (_exitFs),a     ; exit menu with no action
0252   8B46 3E 00                   ld a,0
0253   8B48 32 62 80                ld (_fileI),a      ; no selection         
0254   8B4B 18 55                   jr Fs_noAct 
0255   8B4D             Fs_noESC:                
0256   8B4D FE 20                   cp 32
0257   8B4F 20 07                   jr nz,Fs_noSpace
0258   8B51             Fs_spaceKey:
0259   8B51 3E 01                   ld a,1
0260   8B53 32 63 80                ld (_exitFs),a     ; Item has been selected, exit menu and DO action
0261   8B56 18 4A                   jr Fs_noAct        ; use current selection   
0262   8B58 FE 0D       Fs_noSpace: cp 13
0263   8B5A 20 02                   jr nz,Fs_noEnter
0264   8B5C 18 F3                   jr Fs_spaceKey
0265   8B5E                ;         
0266   8B5E                ;--- try check Arrow keys
0267   8B5E                ;
0268   8B5E             Fs_noEnter:            
0269   8B5E F5                      push af
0270   8B5F 3A 62 80                ld a,(_fileI)
0271   8B62 47                      ld b,a
0272   8B63 3A 3B 8C                ld a,(Fs_Items)
0273   8B66 4F                      ld c,a
0274   8B67 F1                      pop af
0275   8B68                         
0276   8B68 FE 1D                   cp 29
0277   8B6A 20 0B                   jr nz, Fs_noLeft
0278   8B6C                         
0279   8B6C 78                      ld a,b                 ; LEFT pressed
0280   8B6D FE 09                   cp Fs_FperC+1          ; column-1
0281   8B6F 38 24                   jr c, Fs_itgo1
0282   8B71 D6 08                   sub Fs_FperC
0283   8B73 38 20                   jr c, Fs_itgo1
0284   8B75 18 28                   jr Fs_itm
0285   8B77             
0286   8B77             Fs_noLeft:  
0287   8B77 FE 1C                   cp 28
0288   8B79 20 0E                   jr nz, Fs_noRight                                   
0289   8B7B 78                      ld a,b                 ; RIGHT pressed
0290   8B7C C6 08                   add a, Fs_FperC        ; column+1
0291   8B7E B9                      cp c
0292   8B7F 38 1E                   jr c,Fs_itm
0293   8B81 78                      ld a,b
0294   8B82 3C                      inc a
0295   8B83 B9                      cp c
0296   8B84 38 19                   jr c,Fs_itm
0297   8B86 79                      ld a,c   
0298   8B87 18 16                   jr Fs_itm
0299   8B89                                                                                                                           
0300   8B89             Fs_noRight:
0301   8B89 FE 1E                   cp 30
0302   8B8B 20 0C                   jr nz, Fs_noUp                                       
0303   8B8D 78                      ld a,b                 ; UP pressed
0304   8B8E FE 01                   cp 1
0305   8B90 20 03                   jr nz,Fs_itgo1
0306   8B92 3D                      dec a                  ; item-1
0307   8B93 30 0A                   jr nc,Fs_itm 
0308   8B95 3E 01       Fs_itgo1:   ld a,1                                 
0309   8B97 18 06                   jr Fs_itm 
0310   8B99                                     
0311   8B99             Fs_noUp:
0312   8B99                         ;cp 31                 ; if DOWN pressed - the same
0313   8B99             
0314   8B99 78                      ld a,b                 ; other pressed
0315   8B9A 3C                      inc a                  ; item+1
0316   8B9B B9                      cp c
0317   8B9C 38 01                   jr c,Fs_itm
0318   8B9E 79                      ld a,c
0319   8B9F             
0320   8B9F             Fs_itm:
0321   8B9F 32 62 80                ld (_fileI),a
0322   8BA2                ;--- arrow keys         
0323   8BA2                             
0324   8BA2             Fs_noAct:            
0325   8BA2 C1                      pop bc
0326   8BA3 F1                      pop af
0327   8BA4 C9                      ret
0328   8BA5             
0329   8BA5             ;--------------------------- PGN file has been selected, load it
0330   8BA5             FilePGNtoOpen:
0331   8BA5                         
0332   8BA5 F5                      push af
0333   8BA6 CD 02 87                call SetMode80      ; set width 80
0334   8BA9 CD F6 86                call ClearScreenBy30h
0335   8BAC                         
0336   8BAC C5                      push bc
0337   8BAD D5                      push de
0338   8BAE E5                      push hl
0339   8BAF FD E5                   push iy
0340   8BB1 FD 21 3D 8C             ld iy,DirOfPGNs
0341   8BB5 47                      ld b,a             ; fileI selected
0342   8BB6             FileSelCopyFname:
0343   8BB6 C5                      push bc            
0344   8BB7 11 12 8B                ld de, Fs_name
0345   8BBA 01 0B 00                ld bc,11
0346   8BBD FD E5                   push iy      ; hl=iy
0347   8BBF E1                      pop hl
0348   8BC0 ED B0                   ldir            
0349   8BC2 E5                      push hl
0350   8BC3 FD E1                   pop iy       ; iy = iy+11
0351   8BC5 FD 23                   inc iy
0352   8BC7 C1                      pop bc
0353   8BC8 10 EC                   djnz FileSelCopyFname   ; copies file name to FNAME for file opening
0354   8BCA             
0355   8BCA                         ;--------
0356   8BCA                         
0357   8BCA CD CF 9C                call ClearGameData
0358   8BCD             
0359   8BCD                         ;Read disk directory of pgn-files
0360   8BCD 3E 00                   ld a,0                 ; Selector
0361   8BCF CD D7 9B                call ChessPGN          ; This calls game selector of PGN file
0362   8BD2                         
0363   8BD2                                     
0364   8BD2 3A 6A A1                ld a,(_chMenuI)
0365   8BD5 FE 00                   cp 0
0366   8BD7 28 19                   jr z,ChGmDontReadMoves
0367   8BD9                      
0368   8BD9                      
0369   8BD9 3E 00                   ld a,0
0370   8BDB 32 8A A3                ld (CommT1),a
0371   8BDE 32 8B A3                ld (CommT2),a          ; clear comment counters
0372   8BE1                         
0373   8BE1 3E 00                   ld a,0                 ; set default position
0374   8BE3 CD 98 12                call SetFEN 
0375   8BE6                         
0376   8BE6 3E 01                   ld a,1
0377   8BE8 CD D7 9B                call ChessPGN          ; This processes file again to obtain chess moves
0378   8BEB                         
0379   8BEB 3E 00                   ld a,0                 ; set default position
0380   8BED CD 98 12                call SetFEN
0381   8BF0 18 00                   jr ExitChPGN
0382   8BF2                         
0383   8BF2             ChGmDontReadMoves:
0384   8BF2                         
0385   8BF2                         
0386   8BF2             CantPGN:
0387   8BF2             ExitChPGN:
0388   8BF2 FD E1                   pop iy
0389   8BF4 E1                      pop hl
0390   8BF5 D1                      pop de
0391   8BF6 C1                      pop bc
0392   8BF7                         
0393   8BF7 CD 0D 87                call SetMode40        ; reset to width 40
0394   8BFA CD F6 86                call ClearScreenBy30h            
0395   8BFD F1                      pop af            
0396   8BFE C9                      ret
0397   8BFF             
0398   8BFF             
0399   8BFF             
0400   8BFF 4E 4F 20 50 MnNoFiles:  .byte "NO PGN FILES, OR TOO LARGE "
0400   8C03 47 4E 20 46 
0400   8C07 49 4C 45 53 
0400   8C0B 2C 20 4F 52 
0400   8C0F 20 54 4F 4F 
0400   8C13 20 4C 41 52 
0400   8C17 47 45 20 
0401   8C1A 0D 0A                   .byte 13,10,
0402   8C1C 54 52 59 20             .byte "TRY SHORTEN NAME (7char.PGN) $",0
0402   8C20 53 48 4F 52 
0402   8C24 54 45 4E 20 
0402   8C28 4E 41 4D 45 
0402   8C2C 20 28 37 63 
0402   8C30 68 61 72 2E 
0402   8C34 50 47 4E 29 
0402   8C38 20 24 00 
0403   8C3B             
0404   8C3B             Fs_1Row:    .equ $10     ; first row
0405   8C3B             Fs_FperC:   .equ  8      ; fileItems per column
0406   8C3B 00          Fs_Items:   .byte 0      ; count of items counted
0407   8C3C             
0408   8C3C 00          FDir_:       .byte 0      ; 1-to read list of files just once
0409   8C3D             DirOfPGNs: .ds 12*40
0410   8E1D             
0411   8E1D             filesPGN:
0412   8E1D 00 3F 3F 3F         .byte 0,"??????? PGN",0        ; willcard for pgn-files to search in disk
0412   8E21 3F 3F 3F 3F 
0412   8E25 20 50 47 4E 
0412   8E29 00 
0413   8E2A             
0414   8E2A             ;
0415   8E2A             ; Can not use diskload for larger files. So, we read 3 times per 255 bytes
0416   8E2A             ;  and store in buffers. Then separate in strings (ends with \n).
0417   8E2A             ;  When reading next 3 buffers, we insert the unprocessed last line before new data.
0418   8E2A             ;
0419   8E2A             
0420   8E2A             ; header datas of a Chess Game
0421   8E2A             dEvent:     .ds $ff
0422   8F29             dWhite:     .ds $a0
0423   8FC9             dBlack:     .ds $a0
0424   9069             dResult:    .ds $10
0425   9079             dRound:     .ds $10
0426   9089             dDate:      .ds $10
0427   9099             dEco:       .ds $10
0428   90A9             dEloWhite:  .ds $10
0429   90B9             dEloBlack:  .ds $10
0430   90C9             
0431   90C9             
0432   90C9             ; buffers for file processing
0433   90C9             DRff:       .ds $ff       ; read from file here
0434   91C8 00                      .byte 0
0435   91C9             DRffpre:    .ds $ff       ; here we put parts from previous buffer
0436   92C8             DRff0:      .ds $ff       ; 3 buffers for 255 bytes each -
0437   93C7             DRff1:      .ds $ff       ; data are copied here
0438   94C6             DRff2:      .ds $ff                                          
0439   95C5             DRff3:      .ds $10                                          
0440   95D5 00 01 00                .byte 0,1,0   ; to capture while scanning, chr(1) is indicator of last line
0441   95D8             DR1K:       .ds $ff       ; 1024 1Kb to operate with string
0442   96D7                         .ds $ff
0443   97D6                         .ds $ff
0444   98D5                         .ds $ff
0445   99D4             DRw2:       .ds $ff       ; 512 bytes additional working space for string
0446   9AD3                         .ds $ff  
0447   9BD2 24 00       DRdoll:     .byte "$",0
0448   9BD4             
0449   9BD4             _readinFF_over:
0450   9BD4 00                      .byte 0
0451   9BD5             
0452   9BD5             
0453   9BD5                                     
0454   9BD5 00          _pgn_cn    .byte 0     ; count of game keys
0455   9BD6                                                 
0456   9BD6             ;----------------------------------------------------------------------
0457   9BD6             ;
0458   9BD6             ; READS PGN FILE
0459   9BD6             ; Parameter in A is usage:
0460   9BD6             ;    0-read table of games
0461   9BD6             ;    1-read complete pgn of a game                        
0462   9BD6             ;           
0463   9BD6             ;----------------------------------------------------------------------
0464   9BD6                         
0465   9BD6 00          Usage_pgn:  .byte 0
0466   9BD7             
0467   9BD7             ChessPGN:
0468   9BD7 32 D6 9B                ld (Usage_pgn),a           
0469   9BDA             
0470   9BDA                           ; For large pgn-file read one screen, press key, read next... 
0471   9BDA F5                      push af
0472   9BDB C5                      push bc
0473   9BDC D5                      push de
0474   9BDD E5                      push hl
0475   9BDE DD E5                   push ix
0476   9BE0                         
0477   9BE0 3E 00                   ld a,0
0478   9BE2 32 91 A0                ld (GLs_),a      ; first screen
0479   9BE5 32 90 A0                ld (GLi_),a      ; first I
0480   9BE8 3E 01                   ld a,1
0481   9BEA 32 8D A0                ld (GLy_),a            
0482   9BED 3E 02                   ld a,2
0483   9BEF 32 8C A0                ld (GLx_),a   ; position y=1,x=2
0484   9BF2                                
0485   9BF2 21 01 01                ld hl,$0101
0486   9BF5 CD 18 87                call LocatePosBy30h
0487   9BF8                         
0488   9BF8 3E 00                   ld a,0
0489   9BFA 32 D4 9B                ld (_readinFF_over),a
0490   9BFD 32 02 9D                ld (GL_fpgn),a
0491   9C00 32 03 9D                ld (pgn_st),a
0492   9C03                         
0493   9C03 3A D6 9B                ld a,(Usage_pgn)
0494   9C06 FE 00                   cp 0
0495   9C08 28 08                   jr z,ChGmNoAhead
0496   9C0A                         
0497   9C0A 3E 00                   ld a,0
0498   9C0C CD F9 A7                call DispWait          ; display that searching game
0499   9C0F                         
0500   9C0F CD 37 9F                call Roll1GameAhead     ; if the first game then set flag before reading
0501   9C12             ChGmNoAhead:     
0502   9C12                     
0503   9C12 11 C9 91                ld de,DRffpre      ; clear pre-buffer
0504   9C15 3E FF                   ld a,$ff
0505   9C17 CD 9E 84                call Block_Clear_
0506   9C1A                         
0507   9C1A 21 11 8B                ld hl,FNAME
0508   9C1D                         
0509   9C1D             ChPgnScanNxt3buffers_:                            
0510   9C1D 06 03                   ld b,3              ; scan 3 buffers         
0511   9C1F             
0512   9C1F             ChPgnScanfile_:
0513   9C1F             
0514   9C1F 3E FF                   ld a,$ff
0515   9C21 11 C9 90                ld de,DRff        ; constantly for file reading
0516   9C24 CD 9E 84                call Block_Clear_
0517   9C27                         
0518   9C27 3A D4 9B                ld a,(_readinFF_over)
0519   9C2A FE 01                   cp 1
0520   9C2C 28 0C                   jr z,ChPgnSkipFF
0521   9C2E                         
0522   9C2E CD E2 84                call readFF            
0523   9C31 FE 00                   cp 0
0524   9C33 20 05                   jr nz,ChPgnRdNotOver
0525   9C35 3E 01                   ld a,1
0526   9C37 32 D4 9B                ld (_readinFF_over),a
0527   9C3A             ChPgnSkipFF:            
0528   9C3A             ChPgnRdNotOver:
0529   9C3A             
0530   9C3A D5                      push de
0531   9C3B DD E1                   pop ix            ; ix=de
0532   9C3D 78                      ld a,b            ; sets buffer to copy to
0533   9C3E FE 03                   cp 3
0534   9C40 28 06                   jr z,ChPgnB0
0535   9C42 FE 02                   cp 2
0536   9C44 28 07                   jr z,ChPgnB1
0537   9C46 18 0A                   jr ChPgnB2
0538   9C48             
0539   9C48 11 C8 92    ChPgnB0:    ld de,DRff0      ;first buffer
0540   9C4B 18 08                   jr ChPgnBset
0541   9C4D 11 C7 93    ChPgnB1:    ld de,DRff1      ;second buffer
0542   9C50 18 03                   jr ChPgnBset
0543   9C52 11 C6 94    ChPgnB2:    ld de,DRff2      ;third buffer
0544   9C55             ChPgnBset:  
0545   9C55 3E FF                   ld a,$ff
0546   9C57 CD 89 84                call Block_Copy_ ; simply copies 255 bytes
0547   9C5A 05                      dec b                ; 3 buffers per one reading
0548   9C5B 20 C2                   jr nz,ChPgnScanfile_ ; scan next bufer
0549   9C5D             
0550   9C5D             ;--- scanned all 3 buffers
0551   9C5D 11 C8 92                ld de,DRff0
0552   9C60             ChPgnBprLoop:                  ; previous line part finding
0553   9C60 1B                      dec de
0554   9C61 1A                      ld a,(de)
0555   9C62 FE 00                   cp 0
0556   9C64 20 FA                   jr nz,ChPgnBprLoop ; finds start of line placed in pre-buffer
0557   9C66 13                      inc de 
0558   9C67             ChPgnScanBl:                        
0559   9C67 CD 23 83                call Str_Line    ; finds line of string to process as GETS()
0560   9C6A                                     
0561   9C6A DD 7E 00                ld a,(ix)
0562   9C6D FE 01                   cp 1             ; if end of last buffer
0563   9C6F 28 0A                   jr z,ChPgnPartOfLineMayBe
0564   9C71                         
0565   9C71 DD E5                   push ix                ; save next string pointer
0566   9C73 CD BE 9C                call ProcessGETSLine   ; process the line           
0567   9C76 D1                      pop de                 ; de=next string from saved ix            
0568   9C77                         
0569   9C77 18 EE                   jr ChPgnScanBl   ; scan all 3-buffers
0570   9C79             
0571   9C79             ChPgnScanContinue:
0572   9C79 18 A2                   jr ChPgnScanNxt3buffers_ ; scan next 3 buffers with pre-buffer
0573   9C7B                                 
0574   9C7B             ChPgnPartOfLineMayBe:
0575   9C7B                             ;Should keep last line and process after
0576   9C7B                             ; part of line + buffers1,2,3 + chr(1)
0577   9C7B CD 64 80                call Str_Len
0578   9C7E 4F                      ld c,a           ;length of string
0579   9C7F                         
0580   9C7F 3A D4 9B                ld a,(_readinFF_over)
0581   9C82 FE 00                   cp 0
0582   9C84 28 05                   jr z,ChPgnNotLastLine
0583   9C86                         
0584   9C86 CD BE 9C                call ProcessGETSLine ; process the line   
0585   9C89                         
0586   9C89 18 24                   jr ChPgnScanFileOver ; if over then exit
0587   9C8B                         
0588   9C8B             ChPgnNotLastLine:            
0589   9C8B DD E5                   push ix
0590   9C8D E5                      push hl
0591   9C8E D5                      push de
0592   9C8F C5                      push bc
0593   9C90 11 C9 91                ld de,DRffpre    ; clears pre-buffer           
0594   9C93 3E FF                   ld a,$ff
0595   9C95 CD 9E 84                call Block_Clear_
0596   9C98 21 C8 92                ld hl,DRff0
0597   9C9B C1                      pop bc
0598   9C9C 06 00                   ld b,0
0599   9C9E 37                      scf
0600   9C9F 3F                      ccf
0601   9CA0 ED 42                   sbc hl,bc        ; finds starting address to put whole string part
0602   9CA2 E5                      push hl
0603   9CA3 D1                      pop de
0604   9CA4 79                      ld a,c
0605   9CA5 DD E1                   pop ix
0606   9CA7 CD 89 84                call Block_Copy_ ; simply copies in length of string
0607   9CAA E1                      pop hl
0608   9CAB DD E1                   pop ix
0609   9CAD 18 CA                   jr ChPgnScanContinue
0610   9CAF                         
0611   9CAF             ChPgnScanFileOver:
0612   9CAF CD 73 9F                call FinalizePgnReading
0613   9CB2 3E 00                   ld a,0
0614   9CB4 32 E1 84                ld (stop_rdFF),a ; restore stopflag
0615   9CB7                         
0616   9CB7 DD E1                   pop ix
0617   9CB9 E1                      pop hl
0618   9CBA D1                      pop de
0619   9CBB C1                      pop bc
0620   9CBC F1                      pop af          
0621   9CBD C9                      ret
0622   9CBE             ;
0623   9CBE             ; This processes line per line
0624   9CBE             ;
0625   9CBE                        
0626   9CBE             ProcessGETSLine:
0627   9CBE DD 21 D8 95             ld ix,DR1K
0628   9CC2 CD BC 80                call Str_Copy    ; copy string to 1K buffer
0629   9CC5 11 D8 95                ld de,DR1K
0630   9CC8 CD 6E 83                call Str_CharsOnly ; omitts special characters
0631   9CCB CD E5 9D                call GmTableRow
0632   9CCE C9                      ret
0633   9CCF             
0634   9CCF             ; This clears data fields for game header information
0635   9CCF             ClearGameData:
0636   9CCF D5                     push de
0637   9CD0 11 2A 8E               ld de, dEvent
0638   9CD3 CD 77 80               call Str_Clear
0639   9CD6 11 29 8F               ld de, dWhite
0640   9CD9 CD 77 80               call Str_Clear
0641   9CDC 11 C9 8F               ld de, dBlack
0642   9CDF CD 77 80               call Str_Clear
0643   9CE2 11 69 90               ld de,dResult
0644   9CE5 CD 77 80               call Str_Clear
0645   9CE8 11 99 90               ld de,dEco
0646   9CEB CD 77 80               call Str_Clear
0647   9CEE 11 89 90               ld de,dDate
0648   9CF1 CD 77 80               call Str_Clear
0649   9CF4 11 A9 90               ld de,dEloWhite
0650   9CF7 CD 77 80               call Str_Clear
0651   9CFA 11 B9 90               ld de,dEloBlack
0652   9CFD CD 77 80               call Str_Clear
0653   9D00 D1                     pop de
0654   9D01 C9                     ret
0655   9D02                        
0656   9D02 00          GL_fpgn:   .byte 0      ;flag that indicates to read chess moves                                                                
0657   9D03 00          pgn_st:    .byte 0      ; status of reading
0658   9D04                                     ; 0-next comes header
0659   9D04                                     ; 1-now reading header tags
0660   9D04                                     ; 2-now reading chess moves
0661   9D04             
0662   9D04 45 56 45 4E sEvent:    .byte "EVENT ",0   ; name of event 
0662   9D08 54 20 00 
0663   9D0B 57 48 49 54 sWhite:    .byte "WHITE ",0   ; white player's name
0663   9D0F 45 20 00 
0664   9D12 42 4C 41 43 sBlack:    .byte "BLACK ",0   ; black player's name
0664   9D16 4B 20 00 
0665   9D19 52 4F 55 4E sRound:    .byte "ROUND ",0   ; round info 1 or 1.13
0665   9D1D 44 20 00 
0666   9D20 45 43 4F 20 sEco:      .byte "ECO ",0     ; openinc code Axx
0666   9D24 00 
0667   9D25 52 45 53 55 sResult:   .byte "RESULT ",0  ; result 1/2-1/2
0667   9D29 4C 54 20 00 
0668   9D2D 44 41 54 45 sDate:     .byte "DATE ",0    ; date when game was played
0668   9D31 20 00 
0669   9D33 57 48 49 54 sEloWhite: .byte "WHITEELO ",0 ; ELO rating of white player 2xxx
0669   9D37 45 45 4C 4F 
0669   9D3B 20 00 
0670   9D3D 42 4C 41 43 sEloBlack: .byte "BLACKELO ",0 ; ELO rating of black player
0670   9D41 4B 45 4C 4F 
0670   9D45 20 00 
0671   9D47             
0672   9D47             
0673   9D47 5B 00       sTgL:      .byte "[",0
0674   9D49 5D 00       sTgR:      .byte "]",0
0675   9D4B 22 00       sPeka:     .byte 34,0    ; ""
0676   9D4D 20 00       sSpc:      .byte " ",0   ;
0677   9D4F 2D 00       sTire:     .byte "-",0   ;
0678   9D51 52 00       sR_:       .byte "R",0
0679   9D53 00          sEmpty     .byte 0
0680   9D54 2E 00       sPt_:      .byte ".",0
0681   9D56             
0682   9D56 0D 0A       sDspSrch:  .byte 13,10  
0683   9D58 53 65 61 72            .byte "Searching for moves"
0683   9D5C 63 68 69 6E 
0683   9D60 67 20 66 6F 
0683   9D64 72 20 6D 6F 
0683   9D68 76 65 73 
0684   9D6B 0D 0A       sDspCR:    .byte 13,10
0685   9D6D 24 00                  .byte "$",0
0686   9D6F 0D 0A       sDspAnlz:  .byte 13,10
0687   9D71 41 6E 61 6C            .byte "Analyzing PGN moves"
0687   9D75 79 7A 69 6E 
0687   9D79 67 20 50 47 
0687   9D7D 4E 20 6D 6F 
0687   9D81 76 65 73 
0688   9D84 0D 0A                  .byte 13,10
0689   9D86 24 00                  .byte "$",0
0690   9D88 0D 0A       sDspGRpl:  .byte 13,10
0691   9D8A 47 6F 69 6E            .byte "Going to replay moves"
0691   9D8E 67 20 74 6F 
0691   9D92 20 72 65 70 
0691   9D96 6C 61 79 20 
0691   9D9A 6D 6F 76 65 
0691   9D9E 73 
0692   9D9F 0D 0A                  .byte 13,10
0693   9DA1 24 00                  .byte "$",0
0694   9DA3 0D 0A       sDspMKey:  .byte 13,10
0695   9DA5 50 72 65 73            .byte "Press key M to continue"
0695   9DA9 73 20 6B 65 
0695   9DAD 79 20 4D 20 
0695   9DB1 74 6F 20 63 
0695   9DB5 6F 6E 74 69 
0695   9DB9 6E 75 65 
0696   9DBC 0D 0A                  .byte 13,10
0697   9DBE 24 00                  .byte "$",0           
0698   9DC0 2E 24 00    sDspPt_:   .byte ".$",0         
0699   9DC3             
0700   9DC3             ; Draws choices of chess games for selection to replay
0701   9DC3             
0702   9DC3             GmHdTagGet:  
0703   9DC3 21 47 9D               ld hl,sTgL
0704   9DC6 FD 21 49 9D            ld iy,sTgR
0705   9DCA 11 D4 99               ld de,DRw2        ; place here substring between [..]
0706   9DCD CD 3D 84               call Str_TagSubstr
0707   9DD0 D5                     push de
0708   9DD1 DD E1                  pop ix            ; ix = DRw2
0709   9DD3 C9                     ret
0710   9DD4                        
0711   9DD4             GmHdItemGet:
0712   9DD4 21 4B 9D               ld hl,sPeka
0713   9DD7 FD 21 4B 9D            ld iy,sPeka
0714   9DDB 11 D8 95               ld de,DR1K          ; place here data
0715   9DDE CD 3D 84               call Str_TagSubstr  ; datas between "" are stored in DR1K
0716   9DE1 D5                     push de
0717   9DE2 DD E1                  pop ix            ; ix=DR1K                    
0718   9DE4 C9                     ret
0719   9DE5                                                       
0720   9DE5             GmTableRow:
0721   9DE5             
0722   9DE5 3A D6 9B               ld a,(Usage_pgn)
0723   9DE8 FE 00                  cp 0
0724   9DEA 20 03                  jr nz,ChNoUCase
0725   9DEC CD D2 80               call Str_Upper   ; to uppercase
0726   9DEF             ChNoUCase:           
0727   9DEF D5                     push de
0728   9DF0 E5                     push hl
0729   9DF1 DD E5                  push ix
0730   9DF3 FD E5                  push iy
0731   9DF5                                          ; de=ix=DR1K
0732   9DF5 CD C3 9D               call GmHdTagGet
0733   9DF8 CD 64 80               call Str_Len
0734   9DFB FE 00                  cp 0
0735   9DFD 28 1D                  jr z,GmNoTags
0736   9DFF                                
0737   9DFF 3A 03 9D               ld a,(pgn_st)
0738   9E02 FE 02                  cp 2
0739   9E04 20 03                  jr nz,noPrevGame
0740   9E06                        
0741   9E06 CD FD 9E               call PutOutGmRow   ; display row of game information
0742   9E09             noPrevGame:           
0743   9E09 3E 01                  ld a,1
0744   9E0B 32 03 9D               ld (pgn_st),a      ; reading header
0745   9E0E 3A D6 9B               ld a,(Usage_pgn)
0746   9E11 FE 00                  cp 0
0747   9E13 28 02                  jr z,GmHeadersAlz
0748   9E15 18 1F                  jr GmReadLnOver
0749   9E17             GmHeadersAlz:   
0750   9E17 CD 48 9E               call GmTagAnalyse  ; separate information in data fields
0751   9E1A 18 1A                  jr GmReadLnOver
0752   9E1C                        
0753   9E1C             GmNoTags:
0754   9E1C 3A 03 9D               ld a,(pgn_st)
0755   9E1F FE 00                  cp 0
0756   9E21 28 13                  jr z, GmReadingSkp ; if reading of any game not started jet
0757   9E23                        
0758   9E23 FE 01                  cp 1
0759   9E25 20 05                  jr nz,GmReadingMoves2
0760   9E27                        
0761   9E27 3E 02                  ld a,2
0762   9E29 32 03 9D               ld (pgn_st),a   ; should be 1.e4...
0763   9E2C                        
0764   9E2C             GmReadingMoves2:           ; if reading moves further
0765   9E2C 3A D6 9B               ld a,(Usage_pgn)
0766   9E2F FE 00                  cp 0
0767   9E31 28 03                  jr z,GmReadingSkp
0768   9E33                        
0769   9E33 CD 3D 9E               call GmReadMoves   ; read chess moves...         
0770   9E36             GmReadingSkp:
0771   9E36             
0772   9E36             GmReadLnOver:
0773   9E36 FD E1                  pop iy
0774   9E38 DD E1                  pop ix
0775   9E3A E1                     pop hl
0776   9E3B D1                     pop de
0777   9E3C C9                     ret
0778   9E3D             
0779   9E3D             ; Read chess moves line by line
0780   9E3D             GmReadMoves:
0781   9E3D 3A 02 9D               ld a,(GL_fpgn)
0782   9E40 FE 00                  cp 0
0783   9E42 28 03                  jr z,GmNoRdMv       ; if flag set then read
0784   9E44             
0785   9E44 CD 94 A3               call AppendWOcomments
0786   9E47             GmNoRdMv:           
0787   9E47 C9                     ret
0788   9E48             
0789   9E48             ; Separates datas for each tag
0790   9E48             GmTagAnalyse:
0791   9E48 11 04 9D               ld de, sEvent
0792   9E4B CD 2A 81               call Str_Contains ; Does it contain EVENTS substring?
0793   9E4E 20 0A                  jr nz,GmTbNotEv   ; if not this item
0794   9E50                        
0795   9E50 CD D4 9D               call GmHdItemGet  ; Get Item information between ""
0796   9E53 DD 21 2A 8E            ld ix, dEvent     ; Put in data field
0797   9E57 CD BC 80               call Str_Copy
0798   9E5A             GmTbNotEv:
0799   9E5A 11 0B 9D               ld de, sWhite     ; White 
0800   9E5D CD 2A 81               call Str_Contains
0801   9E60 20 0A                  jr nz,GmTbNotWh 
0802   9E62 CD D4 9D               call GmHdItemGet
0803   9E65 DD 21 29 8F            ld ix, dWhite
0804   9E69 CD BC 80               call Str_Copy
0805   9E6C             GmTbNotWh:       
0806   9E6C 11 12 9D               ld de, sBlack     ; Black
0807   9E6F CD 2A 81               call Str_Contains            
0808   9E72 20 0A                  jr nz,GmTbNotBl 
0809   9E74 CD D4 9D               call GmHdItemGet
0810   9E77 DD 21 C9 8F            ld ix, dBlack
0811   9E7B CD BC 80               call Str_Copy
0812   9E7E             GmTbNotBl:            
0813   9E7E 11 25 9D               ld de, sResult    ; Result 
0814   9E81 CD 2A 81               call Str_Contains
0815   9E84 20 0D                  jr nz,GmTbNotRs 
0816   9E86 CD D4 9D               call GmHdItemGet
0817   9E89 CD A5 81               call Str_Alltrim
0818   9E8C DD 21 69 90            ld ix, dResult
0819   9E90 CD BC 80               call Str_Copy
0820   9E93             GmTbNotRs:
0821   9E93 11 20 9D               ld de, sEco       ; Eco
0822   9E96 CD 2A 81               call Str_Contains
0823   9E99 20 0D                  jr nz,GmTbNotEco 
0824   9E9B CD D4 9D               call GmHdItemGet
0825   9E9E CD A5 81               call Str_Alltrim           
0826   9EA1 DD 21 99 90            ld ix, dEco
0827   9EA5 CD BC 80               call Str_Copy
0828   9EA8             GmTbNotEco:
0829   9EA8 11 2D 9D               ld de, sDate      ; Date 
0830   9EAB CD 2A 81               call Str_Contains
0831   9EAE 20 0D                  jr nz,GmTbNotDt 
0832   9EB0 CD D4 9D               call GmHdItemGet
0833   9EB3 CD A5 81               call Str_Alltrim           
0834   9EB6 DD 21 89 90            ld ix, dDate
0835   9EBA CD BC 80               call Str_Copy
0836   9EBD             GmTbNotDt:
0837   9EBD 11 33 9D               ld de, sEloWhite     ; WhiteElo 
0838   9EC0 CD 2A 81               call Str_Contains
0839   9EC3 20 0D                  jr nz,GmTbNotEloWh 
0840   9EC5 CD D4 9D               call GmHdItemGet
0841   9EC8 CD A5 81               call Str_Alltrim           
0842   9ECB DD 21 A9 90            ld ix, dEloWhite
0843   9ECF CD BC 80               call Str_Copy
0844   9ED2             GmTbNotEloWh:
0845   9ED2 11 3D 9D               ld de, sEloBlack     ; BlackElo
0846   9ED5 CD 2A 81               call Str_Contains            
0847   9ED8 20 0D                  jr nz,GmTbNotEloBl 
0848   9EDA CD D4 9D               call GmHdItemGet
0849   9EDD CD A5 81               call Str_Alltrim           
0850   9EE0 DD 21 B9 90            ld ix, dEloBlack
0851   9EE4 CD BC 80               call Str_Copy       
0852   9EE7             GmTbNotEloBl:
0853   9EE7 11 19 9D               ld de, sRound        ; Round
0854   9EEA CD 2A 81               call Str_Contains            
0855   9EED 20 0D                  jr nz,GmTbNotRn 
0856   9EEF CD D4 9D               call GmHdItemGet
0857   9EF2 CD A5 81               call Str_Alltrim           
0858   9EF5 DD 21 79 90            ld ix, dRound
0859   9EF9 CD BC 80               call Str_Copy 
0860   9EFC             GmTbNotRn:
0861   9EFC C9                     ret
0862   9EFD                        
0863   9EFD             ; resume last game processed
0864   9EFD             PutOutGmRow:
0865   9EFD F5                     push af           
0866   9EFE 3A E1 84               ld a,(stop_rdFF)
0867   9F01 FE 00                  cp 0
0868   9F03 20 30                  jr nz,noChGmOutp
0869   9F05             
0870   9F05 3A D6 9B               ld a,(Usage_pgn)
0871   9F08 FE 00                  cp 0
0872   9F0A 28 23                  jr z,ChGmOutp
0873   9F0C                        
0874   9F0C 3E 08                  ld a,8
0875   9F0E CD F9 A7               call DispWait    ; display activity indicator
0876   9F11                        
0877   9F11 3A 02 9D               ld a,(GL_fpgn)
0878   9F14 FE 00                  cp 0
0879   9F16 28 12                  jr z,ChGmImNext
0880   9F18                        
0881   9F18 3E 02                  ld a,2
0882   9F1A CD F9 A7               call DispWait    ; display that going to replay moves
0883   9F1D                        
0884   9F1D CD C4 A7               call PrintPgnGmMvList   
0885   9F20                        
0886   9F20 3E 01                  ld a,1
0887   9F22 32 E1 84               ld (stop_rdFF),a        ; stop reading file
0888   9F25                        
0889   9F25 3E 00                  ld a,0
0890   9F27 32 02 9D               ld (GL_fpgn),a         
0891   9F2A                                   
0892   9F2A             ChGmImNext:
0893   9F2A                                    
0894   9F2A CD 37 9F               call Roll1GameAhead
0895   9F2D                        
0896   9F2D 18 06                  jr noChGmOutp
0897   9F2F             ChGmOutp:                      
0898   9F2F CD 93 A0               call GmRowReady   ; display row of last game information
0899   9F32 CD CF 9C               call ClearGameData
0900   9F35             noChGmOutp:           
0901   9F35 F1                     pop af
0902   9F36 C9                     ret
0903   9F37             
0904   9F37             ; imitate reading table again (just counting)
0905   9F37             Roll1GameAhead:
0906   9F37 F5                     push af
0907   9F38 C5                     push bc           
0908   9F39                        
0909   9F39 3A 90 A0               ld a,(GLi_)
0910   9F3C 3C                     inc a
0911   9F3D 32 90 A0               ld (GLi_),a            ; next item in this screen
0912   9F40                        
0913   9F40 47                     ld b,a
0914   9F41 3A 6A A1               ld a,(_chMenuI)
0915   9F44 B8                     cp b
0916   9F45 20 16                  jr nz,notThisChGame
0917   9F47                        
0918   9F47 3A 92 A0               ld a,(GLs_I)
0919   9F4A 47                     ld b,a
0920   9F4B 3A 91 A0               ld a,(GLs_)
0921   9F4E B8                     cp b
0922   9F4F 20 0C                  jr nz,notThisChGame
0923   9F51                        
0924   9F51 3E 01                  ld a,1
0925   9F53 CD F9 A7               call DispWait    ; display that analyzing moves
0926   9F56                         
0927   9F56 3E 01                  ld a,1
0928   9F58 32 02 9D               ld (GL_fpgn),a   ;this is the right chess game, will read it
0929   9F5B                                  
0930   9F5B 18 13                  jr notNextScr2          
0931   9F5D             notThisChGame:
0932   9F5D             
0933   9F5D 3A 90 A0               ld a,(GLi_)
0934   9F60 FE 2E                  cp TB_RW*2
0935   9F62 20 0C                  jr nz,notNextScr2
0936   9F64                        
0937   9F64 3A 91 A0               ld a,(GLs_)
0938   9F67 3C                     inc a
0939   9F68 32 91 A0               ld (GLs_),a
0940   9F6B 3E 00                  ld a,0
0941   9F6D 32 90 A0               ld (GLi_),a      ; imitate next screen
0942   9F70                        
0943   9F70             notNextScr2:
0944   9F70 C1                     pop bc
0945   9F71 F1                     pop af
0946   9F72 C9                     ret
0947   9F73             
0948   9F73             ; to not forget the last game too after end-of-file reading
0949   9F73             FinalizePgnReading:
0950   9F73 3A 03 9D               ld a,(pgn_st)
0951   9F76 FE 00                  cp 0
0952   9F78 28 0F                  jr z,FnNoChGamesAtAll
0953   9F7A CD FD 9E               call PutOutGmRow  ; display row of game information
0954   9F7D 3A 90 A0               ld a,(GLi_)
0955   9F80 FE 00                  cp 0
0956   9F82 28 05                  jr z,FnNoSelChGm  ; if no games to select in current screen                    
0957   9F84 CD 6C A1               call MenuChGM     ; select game in last screen
0958   9F87 18 03                  jr FnNoChGm
0959   9F89             FnNoChGamesAtAll:
0960   9F89             FnNoSelChGm: 
0961   9F89 CD 41 A3               call ChMessNoGames ; Tell about no games               
0962   9F8C             FnNoChGm:
0963   9F8C C9                     ret
0964   9F8D             
0965   9F8D             GameRw:    .ds $ff
0966   A08C 00          GLx_:      .byte 0           ; contains x,y of selected item on screen
0967   A08D 00          GLy_:      .byte 0
0968   A08E 00          GLx_M:     .byte 0           ; max. x,y selectable
0969   A08F 00          GLy_M:     .byte 0
0970   A090 00          GLi_:      .byte 0           ; items in current screen
0971   A091 00          GLs_:      .byte 0           ; screen of selection
0972   A092 00          GLs_I:     .byte 0           ; screen for 2nd scan
0973   A093             
0974   A093             TB_RW:     .equ 23
0975   A093             TB_CL:     .equ 40            ; constants for positioning
0976   A093             
0977   A093                
0978   A093             ; Displays line of game to select after
0979   A093             GmRowReady:
0980   A093 F5                     push af
0981   A094 D5                     push de
0982   A095 E5                     push hl
0983   A096 DD E5                  push ix
0984   A098                        
0985   A098 11 8D 9F               ld de,GameRw
0986   A09B CD 77 80               call Str_Clear
0987   A09E D5                     push de
0988   A09F DD E1                  pop ix           ; ix=de
0989   A0A1 11 4D 9D               ld de,sSpc       ; space
0990   A0A4 CD AC 81               call Str_Append           
0991   A0A7 11 51 9D               ld de,sR_        ; R
0992   A0AA CD AC 81               call Str_Append
0993   A0AD 11 79 90               ld de,dRound     ; round
0994   A0B0 CD AC 81               call Str_Append
0995   A0B3 11 4D 9D               ld de,sSpc       ; space
0996   A0B6 CD AC 81               call Str_Append
0997   A0B9                         
0998   A0B9 11 6C 90               ld de,dResult+3  ; cut string at 3rd pos.anyway
0999   A0BC 3E 00                  ld a,0
1000   A0BE 12                     ld (de),a 
1001   A0BF 11 69 90               ld de,dResult    ; 1-0,0-1,1/2
1002   A0C2 CD AC 81               call Str_Append
1003   A0C5                        
1004   A0C5 11 4D 9D               ld de,sSpc
1005   A0C8 CD AC 81               call Str_Append
1006   A0CB                        
1007   A0CB 11 38 8F               ld de,dWhite+15   ; white player
1008   A0CE 3E 00                  ld a,0
1009   A0D0 12                     ld (de),a
1010   A0D1 11 29 8F               ld de,dWhite
1011   A0D4 CD AC 81               call Str_Append
1012   A0D7 11 4F 9D               ld de,sTire       ; - vs
1013   A0DA CD AC 81               call Str_Append
1014   A0DD 11 D8 8F               ld de,dBlack+15
1015   A0E0 3E 00                  ld a,0
1016   A0E2 12                     ld (de),a           
1017   A0E3 11 C9 8F               ld de,dBlack      ; black player
1018   A0E6 CD AC 81               call Str_Append
1019   A0E9             
1020   A0E9 11 B3 9F               ld de,GameRw+TB_CL-2  ; cut string at 38th pos.anyway
1021   A0EC 3E 00                  ld a,0
1022   A0EE 12                     ld (de),a        
1023   A0EF                     
1024   A0EF 11 D2 9B               ld de, DRdoll    ; add $
1025   A0F2 CD AC 81               call Str_Append
1026   A0F5 11 4D 9D               ld de, sSpc
1027   A0F8                        
1028   A0F8 3A 8C A0               ld a,(GLx_)
1029   A0FB 67                     ld h,a
1030   A0FC 3A 8D A0               ld a,(GLy_)
1031   A0FF 6F                     ld l,a
1032   A100 AF                     xor a
1033   A101                            
1034   A101                        ;ld h,40             ;corner at right
1035   A101                        ;ld l,25             ;          bottom
1036   A101 CD 18 87               call LocatePosBy30h  ; set position for game selection Item
1037   A104 11 8D 9F               ld de,GameRw
1038   A107 CD 27 87               call PrintString ; print
1039   A10A                        
1040   A10A 3A 90 A0               ld a,(GLi_)
1041   A10D 3C                     inc a
1042   A10E 32 90 A0               ld (GLi_),a            ; next item in this screen
1043   A111                        
1044   A111 3A 91 A0               ld a,(GLs_)
1045   A114 32 92 A0               ld (GLs_I),a           ; save current screen
1046   A117                                                         
1047   A117 2C                     inc l
1048   A118 7D                     ld a,l
1049   A119 FE 18                  cp TB_RW+1
1050   A11B 20 34                  jr nz,GmRowSkpNxtCol
1051   A11D 7C                     ld a,h
1052   A11E FE 27                  cp TB_CL-1
1053   A120 38 29                  jr c,GmNextCol
1054   A122                                    
1055   A122                        
1056   A122 3A 91 A0               ld a,(GLs_)
1057   A125 3C                     inc a
1058   A126 32 91 A0               ld (GLs_),a             ; next screen
1059   A129 3E 00                  ld a,0                  ; 1st item will be next 
1060   A12B 32 90 A0               ld (GLi_),a
1061   A12E                        
1062   A12E 7C                     ld a,h
1063   A12F 32 8C A0               ld (GLx_),a
1064   A132 7D                     ld a,l
1065   A133 32 8D A0               ld (GLy_),a
1066   A136                        
1067   A136 E5                     push hl
1068   A137 D5                     push de
1069   A138 21 19 33               ld hl,$3319
1070   A13B CD 18 87               call LocatePosBy30h
1071   A13E 11 5F A1               ld de,ChMoreGm          ; hint M-more
1072   A141 CD 27 87               call PrintString
1073   A144 D1                     pop de
1074   A145 E1                     pop hl
1075   A146                                                                    
1076   A146 CD 6C A1               call MenuChGM           ; select game
1077   A149                        
1078   A149 18 0E                  jr GmNextMore
1079   A14B             GmNextCol:                       
1080   A14B 2E 01                  ld l,1
1081   A14D 7C                     ld a,h
1082   A14E C6 28                  add a,TB_CL       ; next column
1083   A150 67                     ld h,a
1084   A151                        
1085   A151             GmRowSkpNxtCol:
1086   A151             
1087   A151 7C                     ld a,h
1088   A152 32 8C A0               ld (GLx_),a
1089   A155 7D                     ld a,l
1090   A156 32 8D A0               ld (GLy_),a
1091   A159             
1092   A159             GmNextMore:
1093   A159                         
1094   A159 DD E1                  pop ix
1095   A15B E1                     pop hl
1096   A15C D1                     pop de
1097   A15D F1                     pop af
1098   A15E C9                     ret
1099   A15F             
1100   A15F 4D 20 2D 20 ChMoreGm: .byte "M - more $",0
1100   A163 6D 6F 72 65 
1100   A167 20 24 00 
1101   A16A             
1102   A16A 00          _chMenuI:   .byte 0     ; menu selection for chess games
1103   A16B 00          _exitGmMn:  .byte 0     ; to exit game menu
1104   A16C             
1105   A16C             ; Menu for chess game selection 
1106   A16C             ; in current screen (after printing)
1107   A16C             ;
1108   A16C             MenuChGM:
1109   A16C             
1110   A16C 3A D6 9B             ld a,(Usage_pgn)
1111   A16F FE 00                cp 0
1112   A171 28 02                jr z,ChGmMenuShow
1113   A173                      
1114   A173 18 45                jr GM_MN_EX_   ; and process next when reading chess game
1115   A175             
1116   A175             ChGmMenuShow:
1117   A175 3E 00                ld a,0
1118   A177 32 6B A1             ld (_exitGmMn),a
1119   A17A                     
1120   A17A 3A 8C A0             ld a,(GLx_)             ; validator for keyboard controls
1121   A17D 32 8E A0             ld (GLx_M),a
1122   A180 3A 8D A0             ld a,(GLy_)
1123   A183 32 8F A0             ld (GLy_M),a
1124   A186 3E 01                ld a,1
1125   A188 32 6A A1             ld (_chMenuI),a         
1126   A18B 32 8D A0             ld (GLy_),a             ; stay on first item on position x=2,y=1
1127   A18E 3E 02                ld a,2
1128   A190 32 8C A0             ld (GLx_),a
1129   A193 AF                   xor a
1130   A194 CD BB A1             call ChGmPutFirstTimeSelector ; put selector
1131   A197                                                 
1132   A197 CD DC 86             call InkeyKeyBy30h      ; keypress detect
1133   A19A 32 61 80             ld (_keymnbf),a         ; saves last key
1134   A19D             
1135   A19D             GM_SEL_LOOP:
1136   A19D CD C8 A1             call ChGmMenu
1137   A1A0 3A 6B A1             ld a,(_exitGmMn)
1138   A1A3 FE 00                cp 0
1139   A1A5 28 02                jr z, ItemChNo0
1140   A1A7 18 02                jr GM_SEL_EXIT        
1141   A1A9             ItemChNo0:
1142   A1A9 18 F2                jr GM_SEL_LOOP
1143   A1AB                      
1144   A1AB             GM_SEL_EXIT:
1145   A1AB CD F6 86             call ClearScreenBy30h   ; clear the screen after
1146   A1AE 3A 6A A1             ld a,(_chMenuI)
1147   A1B1 FE FF                cp $ff
1148   A1B3 28 05                jr z,GM_SEL_MORE
1149   A1B5 3E 01                ld a,1
1150   A1B7 32 E1 84             ld (stop_rdFF),a        ; stop reading file (DISKs.ASM)
1151   A1BA             GM_SEL_MORE:
1152   A1BA             GM_MN_EX_:        
1153   A1BA C9                   ret
1154   A1BB             
1155   A1BB             
1156   A1BB             ChGmPutFirstTimeSelector:
1157   A1BB C5                  push bc
1158   A1BC 0E 00               ld c,0
1159   A1BE CD DB A1            call GmDrawSelector     ; inits selector (for not clearing)
1160   A1C1 0E 02               ld c,2
1161   A1C3 CD DB A1            call GmDrawSelector     ; draws selector         
1162   A1C6 C1                  pop bc
1163   A1C7 C9                  ret
1164   A1C8             
1165   A1C8             ; Select chess game by using cursor 
1166   A1C8             ChGmMenu:
1167   A1C8 C5                  push bc
1168   A1C9 CD DC 86            call InkeyKeyBy30h      ; keypress detect
1169   A1CC                     
1170   A1CC 0E 01               ld c,1
1171   A1CE CD DB A1            call GmDrawSelector     ; clears selector
1172   A1D1                     
1173   A1D1 CD 3B A2            call GhMnKey            ; choice or cursor
1174   A1D4                     
1175   A1D4 0E 02               ld c,2
1176   A1D6 CD DB A1            call GmDrawSelector     ; draws selector
1177   A1D9 C1                  pop bc
1178   A1DA C9                  ret
1179   A1DB             
1180   A1DB             ; parameter: c=0 for init, c=1 clears selector, c=2 draws selector
1181   A1DB             
1182   A1DB             GmDrawSelector:
1183   A1DB F5                      push af
1184   A1DC E5                      push hl
1185   A1DD                     
1186   A1DD 79                      ld a,c
1187   A1DE FE 00                   cp 0
1188   A1E0 20 0A                   jr nz,GmNoInits
1189   A1E2                         
1190   A1E2 3E 00                   ld a,0              ; inits
1191   A1E4 32 39 A2                ld (_toCl_x),a
1192   A1E7 32 3A A2                ld (_toCl_y),a
1193   A1EA 18 4A                   jr GmDrawEx
1194   A1EC                         
1195   A1EC             GmNoInits:  
1196   A1EC FE 01                   cp 1
1197   A1EE 20 0E                   jr nz,GmDrawCrs
1198   A1F0                         
1199   A1F0 3A 8C A0                ld a,(GLx_)
1200   A1F3 32 39 A2                ld (_toCl_x),a       ; saves where to clear next time and does nothing
1201   A1F6 3A 8D A0                ld a,(GLy_)  
1202   A1F9 32 3A A2                ld (_toCl_y),a
1203   A1FC 18 38                   jr GmDrawEx
1204   A1FE             GmDrawCrs:
1205   A1FE 3A 8C A0                ld a,(GLx_)
1206   A201 67                      ld h,a
1207   A202 3A 8D A0                ld a,(GLy_)
1208   A205 6F                      ld l,a
1209   A206 3A 39 A2                ld a,(_toCl_x)       ; other x?
1210   A209 FE 00                   cp 0
1211   A20B 28 0B                   jr z,GmMovedPos      ; if first draw
1212   A20D BC                      cp h
1213   A20E 20 08                   jr nz,GmMovedPos
1214   A210 3A 3A A2                ld a,(_toCl_y)       ; other y?
1215   A213 BD                      cp l
1216   A214 20 02                   jr nz,GmMovedPos
1217   A216 18 1E                   jr GmDrawEx          ; if nothing changed
1218   A218             GmMovedPos:
1219   A218 3A 39 A2                ld a,(_toCl_x)
1220   A21B FE 00                   cp 0
1221   A21D 28 0F                   jr z,GmNotCursClr
1222   A21F E5                      push hl
1223   A220 67                      ld h,a
1224   A221 3A 3A A2                ld a,(_toCl_y)
1225   A224 6F                      ld l,a
1226   A225 CD 18 87                call LocatePosBy30h  ; set position for cursor to clear game selector
1227   A228 3E 20                   ld a,' '
1228   A22A CD 1D 87                call PutCharBy30h  ; just print space (1 ascii character)
1229   A22D E1                      pop hl
1230   A22E             GmNotCursClr:
1231   A22E CD 18 87                call LocatePosBy30h  ; set position for cursor to set game selector
1232   A231 3E 3E                   ld a,'>'
1233   A233 CD 1D 87                call PutCharBy30h  ; just print 1 ascii character
1234   A236             GmDrawEx:
1235   A236 E1                      pop hl
1236   A237 F1                      pop af
1237   A238 C9                      ret
1238   A239                         
1239   A239 00          _toCl_x:    .byte 0    ; to know where to clear
1240   A23A 00          _toCl_y:    .byte 0
1241   A23B             
1242   A23B             
1243   A23B             ; this checks which key as been pressed
1244   A23B             GhMnKey:
1245   A23B F5                      push af
1246   A23C C5                      push bc
1247   A23D                         
1248   A23D FE 00                   cp 0
1249   A23F 28 4E                   jr z,GmMNnoAct
1250   A241                         
1251   A241 FE 5A                   cp 'Z'
1252   A243 28 3E                   jr z, GmCkeyZ
1253   A245 FE 2F                   cp '/'
1254   A247 28 3A                   jr z, GmCkeyZ
1255   A249 FE 7E                   cp '~'
1256   A24B 28 36                   jr z, GmCkeyZ
1257   A24D FE 7C                   cp '|'
1258   A24F 28 32                   jr z, GmCkeyZ     ; bunch of the same keys
1259   A251                      
1260   A251 47                      ld b,a
1261   A252 3A 61 80                ld a,(_keymnbf)
1262   A255 B8                      cp b
1263   A256 28 37                   jr z, GmMNnoAct
1264   A258 78                      ld a,b
1265   A259 32 61 80                ld (_keymnbf),a
1266   A25C                
1267   A25C FE 1B                   cp 27
1268   A25E 20 0A                   jr nz,GmMNnoEsc
1269   A260                         
1270   A260 3E 00                   ld a,0
1271   A262 32 6A A1                ld (_chMenuI),a      ; no item selected
1272   A265 3E 01                   ld a,1
1273   A267 32 6B A1                ld (_exitGmMn),a     ; exit menu
1274   A26A             GmMNnoEsc:
1275   A26A FE 20                   cp 32
1276   A26C 20 07                   jr nz,GmMNnoSpace
1277   A26E             GmMNspaceKey:
1278   A26E             
1279   A26E 3E 01                   ld a,1
1280   A270 32 6B A1                ld (_exitGmMn),a     ; Item has been selected, exit menu and DO action
1281   A273 18 1A                   jr GmMNnoAct             
1282   A275             GmMNnoSpace:
1283   A275 FE 0D                   cp 13
1284   A277 20 02                   jr nz,GmMNnoEnter
1285   A279 18 F3                   jr GmMNspaceKey
1286   A27B             GmMNnoEnter:
1287   A27B CD 92 A2                call IfGmMoreKeys    ; if MORE action
1288   A27E CD A9 A2                call IfGmCursKeys    ; process cursor keys
1289   A281 18 0C                   jr GmMNnoAct
1290   A283                         
1291   A283             GmCkeyZ:                    ; use the same key that was before
1292   A283 3A 61 80                ld a,(_keymnbf)
1293   A286 4F                      ld c,a
1294   A287 3E 00                   ld a,0
1295   A289 32 61 80                ld (_keymnbf),a
1296   A28C 79                      ld a,c
1297   A28D 18 DB                   jr GmMNnoEsc
1298   A28F                      
1299   A28F             GmMNnoAct:            
1300   A28F C1                      pop bc
1301   A290 F1                      pop af
1302   A291 C9                      ret 
1303   A292             
1304   A292             ;
1305   A292             ; If M-pressed then more games
1306   A292             ;                        
1307   A292             IfGmMoreKeys:
1308   A292 F5                     push af
1309   A293 FE 6D                  cp 'm'
1310   A295 28 06                  jr z,ChGmMore
1311   A297 FE 4D                  cp 'M'
1312   A299 28 02                  jr z,ChGmMore
1313   A29B 18 0A                  jr ChGmMoreEx
1314   A29D             ChGmMore:
1315   A29D 3E 01                  ld a,1
1316   A29F 32 6B A1               ld (_exitGmMn),a
1317   A2A2 3E FF                  ld a,$ff              ;indicate "more" action  
1318   A2A4 32 6A A1               ld (_chMenuI),a
1319   A2A7             ChGmMoreEx:
1320   A2A7 F1                     pop af
1321   A2A8 C9                     ret
1322   A2A9                        
1323   A2A9             ;---------------------------------
1324   A2A9             ; If cursor arrow keys pressed
1325   A2A9             ;
1326   A2A9             IfGmCursKeys:
1327   A2A9             
1328   A2A9 F5                   push af
1329   A2AA C5                   push bc   
1330   A2AB FE 1D                cp 29
1331   A2AD 20 16                jr nz, CkeyGmIfCurs2
1332   A2AF                                                ; LEFT pressed
1333   A2AF 3A 8C A0             ld a,(GLx_)
1334   A2B2 FE 02                cp 2
1335   A2B4 28 2C                jr z,CkeyGmCKex
1336   A2B6 D6 28                sub TB_CL
1337   A2B8 32 8C A0             ld (GLx_),a
1338   A2BB 3A 6A A1             ld a,(_chMenuI)
1339   A2BE D6 17                sub TB_RW
1340   A2C0 32 6A A1             ld (_chMenuI),a          
1341   A2C3 18 1D                jr CkeyGmCKex
1342   A2C5             
1343   A2C5             CkeyGmIfCurs2:  
1344   A2C5 FE 1C                cp 28
1345   A2C7 20 2D                jr nz, CkeyGmIfCurs3                                       
1346   A2C9                                                ; RIGHT pressed
1347   A2C9 3A 8E A0             ld a,(GLx_M)
1348   A2CC 47                   ld b,a
1349   A2CD 3A 8C A0             ld a,(GLx_) 
1350   A2D0 B8                   cp b
1351   A2D1 28 0F                jr z,CkeyGmCKex
1352   A2D3                      
1353   A2D3 3A 8F A0             ld a,(GLy_M)
1354   A2D6 47                   ld b,a
1355   A2D7 3A 8D A0             ld a,(GLy_)
1356   A2DA 3C                   inc a
1357   A2DB B8                   cp b
1358   A2DC 28 06                jr z,CkeyRightOk     ; will be last
1359   A2DE 30 02                jr nc,CkeyGmCKex     ; no move right by cursor
1360   A2E0 18 02                jr CkeyRightOk       ; otherwise move right
1361   A2E2                      
1362   A2E2             CkeyGmCKex:
1363   A2E2 18 5A                jr CkeyGmCKexit   
1364   A2E4                      
1365   A2E4             CkeyRightOk:                                                                                                                              
1366   A2E4 3A 8C A0             ld a,(GLx_)                           
1367   A2E7 C6 28                add a,TB_CL
1368   A2E9 32 8C A0             ld (GLx_),a
1369   A2EC 3A 6A A1             ld a,(_chMenuI)
1370   A2EF C6 17                add a,TB_RW
1371   A2F1 32 6A A1             ld (_chMenuI),a         
1372   A2F4 18 48                jr CkeyGmCKexit
1373   A2F6                                                                                                                           
1374   A2F6             CkeyGmIfCurs3:
1375   A2F6 FE 1E                cp 30
1376   A2F8 20 14                jr nz, CkeyGmIfCurs4                                       
1377   A2FA                                                ; UP pressed
1378   A2FA 3A 8D A0             ld a,(GLy_)
1379   A2FD FE 01                cp 1
1380   A2FF 28 3D                jr z,CkeyGmCKexit
1381   A301 3D                   dec a
1382   A302 32 8D A0             ld (GLy_),a
1383   A305 3A 6A A1             ld a,(_chMenuI)
1384   A308 3D                   dec a
1385   A309 32 6A A1             ld (_chMenuI),a
1386   A30C 18 D4                jr CkeyGmCKex                         
1387   A30E             CkeyGmIfCurs4:
1388   A30E FE 1F                cp 31
1389   A310 20 2C                jr nz, CkeyGmCKexit                                      
1390   A312                                                ; DOWN pressed 
1391   A312 3A 8D A0             ld a,(GLy_)
1392   A315 FE 17                cp TB_RW
1393   A317 28 25                jr z,CkeyGmCKexit
1394   A319                      
1395   A319 3A 8E A0             ld a,(GLx_M)
1396   A31C 47                   ld b,a
1397   A31D 3A 8C A0             ld a,(GLx_) 
1398   A320 B8                   cp b
1399   A321 20 0B                jr nz,GmCNotLast
1400   A323                      
1401   A323 3A 8F A0             ld a,(GLy_M)
1402   A326 47                   ld b,a
1403   A327 3A 8D A0             ld a,(GLy_)
1404   A32A 3C                   inc a
1405   A32B B8                   cp b
1406   A32C 28 10                jr z,CkeyGmCKexit     ; if the last item then do nothing
1407   A32E                            
1408   A32E             GmCNotLast:
1409   A32E 3A 8D A0             ld a,(GLy_)
1410   A331 3C                   inc a
1411   A332 32 8D A0             ld (GLy_),a
1412   A335 3A 6A A1             ld a,(_chMenuI)
1413   A338 3C                   inc a
1414   A339 32 6A A1             ld (_chMenuI),a         
1415   A33C 18 00                jr CkeyGmCKexit 
1416   A33E             CkeyGmCKexit:
1417   A33E C1                   pop bc
1418   A33F F1                   pop af         
1419   A340 C9                   ret
1420   A341             
1421   A341             
1422   A341             ; if there is no chess games then output message
1423   A341             ChMessNoGames:
1424   A341 F5                   push af
1425   A342 3A E1 84             ld a,(stop_rdFF)
1426   A345 FE 00                cp 0                     ; if selected or Esc (stopped)
1427   A347 20 2E                jr nz,ChMessNoGmNoOutp
1428   A349                        
1429   A349 E5                   push hl
1430   A34A D5                   push de
1431   A34B 21 01 01             ld hl, $0101
1432   A34E CD 18 87             call LocatePosBy30h
1433   A351 11 79 A3             ld de,ChNoGm
1434   A354 CD 27 87             call PrintString
1435   A357 CD D7 86             call ClearKeyBy30h
1436   A35A             ChMessNoGmLoop:         
1437   A35A CD DC 86             call InkeyKeyBy30h      ; keypress detect
1438   A35D FE 1B                cp 27
1439   A35F 28 0A                jr z,ChMessNoGmBrk
1440   A361 FE 20                cp 32
1441   A363 28 06                jr z,ChMessNoGmBrk
1442   A365 FE 0D                cp 13
1443   A367 28 02                jr z,ChMessNoGmBrk
1444   A369 18 EF                jr ChMessNoGmLoop
1445   A36B             ChMessNoGmBrk:
1446   A36B 3E 00                ld a,0
1447   A36D 32 6A A1             ld (_chMenuI),a      ; no item selected
1448   A370 3E 01                ld a,1
1449   A372 32 6B A1             ld (_exitGmMn),a     ; exit menu
1450   A375 D1                   pop de
1451   A376 E1                   pop hl
1452   A377             ChMessNoGmNoOutp:         
1453   A377 F1                   pop af
1454   A378 C9                   ret
1455   A379                         
1456   A379 4E 6F 20 63 ChNoGm: .byte "No chess games $",0
1456   A37D 68 65 73 73 
1456   A381 20 67 61 6D 
1456   A385 65 73 20 24 
1456   A389 00 
1457   A38A             
1458   A38A             
1459   A38A 00          CommT1: .byte 0      ; counter for open {}
1460   A38B 00          CommT2: .byte 0      ; counter for open ()
1461   A38C             
1462   A38C 7B 00       c_1_t1: .byte "{",0
1463   A38E 7D 00       c_2_t1: .byte "}",0
1464   A390 28 00       c_1_t2: .byte "(",0
1465   A392 29 00       c_2_t2: .byte ")",0
1466   A394             
1467   A394             ; comments should be ignored before inserting into buffer
1468   A394             AppendWOcomments:
1469   A394 C5                   push bc
1470   A395 D5                   push de
1471   A396 DD E5                push ix
1472   A398                      
1473   A398 DD 21 D8 95          ld ix,DR1K
1474   A39C DD E5                push ix
1475   A39E             ACloopAllstr:
1476   A39E DD 7E 00             ld a,(ix)
1477   A3A1 FE 00                cp 0
1478   A3A3 28 67                jr z, ACover3        
1479   A3A5                      
1480   A3A5 3A 8A A3             ld a,(CommT1)
1481   A3A8 FE 00                cp 0
1482   A3AA 20 27                jr nz, ACLook4CommT1
1483   A3AC             
1484   A3AC 3A 8B A3             ld a,(CommT2)
1485   A3AF FE 00                cp 0
1486   A3B1 20 30                jr nz, ACLook4CommT2
1487   A3B3                      
1488   A3B3 DD 7E 00             ld a,(ix)
1489   A3B6 FE 7B                cp '{'
1490   A3B8 20 09                jr nz,ACIfCommt2
1491   A3BA                      
1492   A3BA 3A 8A A3             ld a,(CommT1)
1493   A3BD 3C                   inc a
1494   A3BE 32 8A A3             ld (CommT1),a
1495   A3C1 18 30                jr ACLoopIX       
1496   A3C3                                              
1497   A3C3             ACIfCommt2:
1498   A3C3 DD 7E 00             ld a,(ix)
1499   A3C6 FE 28                cp '('
1500   A3C8 20 29                jr nz,ACLoopIX
1501   A3CA 3A 8B A3             ld a,(CommT2)
1502   A3CD 3C                   inc a
1503   A3CE 32 8B A3             ld (CommT2),a
1504   A3D1 18 20                jr ACLoopIX 
1505   A3D3                      
1506   A3D3             ACLook4CommT1:
1507   A3D3 DD 7E 00             ld a,(ix)
1508   A3D6 FE 7D                cp '}'
1509   A3D8 20 19                jr nz,ACLoopIX
1510   A3DA 3A 8A A3             ld a,(CommT1)
1511   A3DD 3D                   dec a
1512   A3DE 32 8A A3             ld (CommT1),a         
1513   A3E1 18 17                jr ACrepl0
1514   A3E3                      
1515   A3E3             ACLook4CommT2:
1516   A3E3 DD 7E 00             ld a,(ix)
1517   A3E6 FE 29                cp ')'
1518   A3E8 20 09                jr nz,ACLoopIX
1519   A3EA 3A 8B A3             ld a,(CommT2)
1520   A3ED 3D                   dec a
1521   A3EE 32 8B A3             ld (CommT2),a 
1522   A3F1 18 07                jr ACrepl0        
1523   A3F3             
1524   A3F3             ACLoopIX:
1525   A3F3 3A 8A A3             ld a,(CommT1)
1526   A3F6 FE 00                cp 0
1527   A3F8 28 07                jr z, ACmaybeT2
1528   A3FA                      
1529   A3FA 3E 20       ACrepl0: ld a,' '
1530   A3FC DD 77 00             ld (ix),a
1531   A3FF 18 07                jr ACLoop1
1532   A401                      
1533   A401             ACmaybeT2:
1534   A401 3A 8B A3             ld a,(CommT2)
1535   A404 FE 00                cp 0
1536   A406 20 F2                jr nz, ACrepl0
1537   A408             ACLoop1: 
1538   A408 DD 23                inc ix
1539   A40A 18 92                jr ACloopAllstr
1540   A40C                      
1541   A40C             ACover3:         
1542   A40C DD E1                pop ix              ; =DR1K
1543   A40E DD E5                push ix
1544   A410 11 4D 9D             ld de,sSpc
1545   A413 CD AC 81             call Str_Append     ; + 1space
1546   A416                      
1547   A416                      ; remove double spaces
1548   A416 D1                   pop de              ; =DR1K
1549   A417 D5                   push de
1550   A418 06 00                ld b,0              ; flag that space was found 
1551   A41A             ACLoopCopy:
1552   A41A 1A                   ld a,(de)
1553   A41B DD 77 00             ld (ix),a
1554   A41E 13                   inc de
1555   A41F DD 23                inc ix
1556   A421 FE 00                cp 0
1557   A423 28 15                jr z,ACnowAppend
1558   A425 FE 20                cp ' '
1559   A427 20 0D                jr nz,ACsetBto0
1560   A429 78                   ld a,b
1561   A42A FE 00                cp 0
1562   A42C 28 04                jr z,ACsetBfound
1563   A42E DD 2B                dec ix
1564   A430 18 E8                jr ACLoopCopy
1565   A432             ACsetBfound:         
1566   A432 06 01                ld b,1
1567   A434 18 E4                jr ACLoopCopy
1568   A436             ACsetBto0:
1569   A436 06 00                ld b,0
1570   A438 18 E0                jr ACLoopCopy
1571   A43A             ACnowAppend:
1572   A43A D1                   pop de              ; =DR1K
1573   A43B                      
1574   A43B CD 5F A4             call ChessNotatedMoves
1575   A43E                      
1576   A43E                      ;DR1K now contains PGN move sfring from PGN file
1577   A43E DD 21 D8 95          ld ix, DR1K
1578   A442 11 D2 9B             ld de, DRdoll    ; add $
1579   A445 CD AC 81             call Str_Append
1580   A448 DD E5                push ix
1581   A44A D1                   pop de
1582   A44B CD 27 87             call PrintString 
1583   A44E             
1584   A44E DD E1                pop ix
1585   A450 D1                   pop de
1586   A451 C1                   pop bc
1587   A452 C9                   ret
1588   A453             
1589   A453 20 20 20 20 _mv_str: .byte "           ",0         ; notated move in form: Rad1+
1589   A457 20 20 20 20 
1589   A45B 20 20 20 00 
1590   A45F             
1591   A45F             ; processes all moves to get MOVE_str
1592   A45F             ChessNotatedMoves:
1593   A45F F5                   push af
1594   A460 C5                   push bc
1595   A461                      
1596   A461             CNMskipSpaces:
1597   A461 1A                   ld a,(de)
1598   A462 13                   inc de
1599   A463 FE 20                cp ' '                ; skip leading spaces
1600   A465 28 FA                jr z,CNMskipSpaces
1601   A467 1B                   dec de
1602   A468             
1603   A468             CNMnextMv:
1604   A468 DD 21 53 A4          ld ix,_mv_str
1605   A46C 0E 00                ld c,0
1606   A46E             CNMloopMv:
1607   A46E 0C                   inc c
1608   A46F 3E 0A                ld a,10
1609   A471 B9                   cp c
1610   A472 28 51                jr z,CNMexit_   ;10symbols too long for chess move
1611   A474                               
1612   A474 1A                   ld a,(de)
1613   A475 FE 00                cp 0
1614   A477 28 4C                jr z,CNMexit_
1615   A479                      
1616   A479 DD 77 00             ld (ix),a
1617   A47C DD 23                inc ix
1618   A47E FE 20                cp ' '
1619   A480 28 03                jr z,CNMmoveTry
1620   A482 13                   inc de         
1621   A483 18 E9                jr CNMloopMv
1622   A485                               
1623   A485             CNMmoveTry:
1624   A485                      
1625   A485             CNMdoSpcer:
1626   A485 3E 0A                ld a,10
1627   A487 B9                   cp c
1628   A488 28 0C                jr z,CNMexitSpcer
1629   A48A 3E 20                ld a,' '                   ; some clearing stuff (not long)
1630   A48C DD 77 00             ld (ix),a
1631   A48F DD 23                inc ix
1632   A491 0C                   inc c
1633   A492 18 F1                jr CNMdoSpcer
1634   A494                      
1635   A494             CNMnextMv_:   
1636   A494 18 D2                jr CNMnextMv               ; hate far jumps in small procedures
1637   A496                      
1638   A496             CNMexitSpcer:
1639   A496                                                 ; now word is separated
1640   A496 D5                   push de
1641   A497 DD 21 53 A4          ld ix,_mv_str
1642   A49B                               
1643   A49B 11 54 9D             ld de,sPt_
1644   A49E CD 02 81             call Str_IndexOf
1645   A4A1 FE FF                cp $ff
1646   A4A3 28 22                jr z,CNMnoPt
1647   A4A5                               
1648   A4A5             CNMptLoop:
1649   A4A5 47                   ld b,a                     ; remove move numbers
1650   A4A6 3E 20                ld a,' '
1651   A4A8 DD 77 00             ld (ix),a
1652   A4AB DD 23                inc ix
1653   A4AD 78                   ld a,b
1654   A4AE FE 00                cp 0
1655   A4B0 28 03                jr z,CNMnoPt1
1656   A4B2 3D                   dec a
1657   A4B3 18 F0                jr CNMptLoop
1658   A4B5             CNMnoPt1:
1659   A4B5 DD 7E 00             ld a,(ix)                  ; removes ...
1660   A4B8 FE 2E                cp '.'
1661   A4BA 20 0B                jr nz,CNMnoPt
1662   A4BC 3E 20                ld a,' '
1663   A4BE DD 77 00             ld (ix),a
1664   A4C1 DD 23                inc ix
1665   A4C3 18 F0                jr CNMnoPt1
1666   A4C5                      
1667   A4C5             CNMexit_:
1668   A4C5 18 35                jr CNMexit
1669   A4C7             
1670   A4C7             CNMnoPt:
1671   A4C7 CD 0D A5             call CNdontNeedResults
1672   A4CA              
1673   A4CA 11 53 A4             ld de,_mv_str
1674   A4CD DD 21 53 A4          ld ix,_mv_str
1675   A4D1 CD A5 81             call Str_Alltrim        
1676   A4D4 CD 64 80             call Str_Len
1677   A4D7 28 19                jr z,CNMnoMove              ; Only moves should remain
1678   A4D9                        
1679   A4D9 CD 74 0A             call GenMovesAndString     ; generate all valid chess moves
1680   A4DC                               
1681   A4DC CD 51 A5             call CNReplCastles
1682   A4DF 20 05                jr nz,CN_AlreadyCst
1683   A4E1                      
1684   A4E1 CD FA A5             call CNM_Move               ; analyse notated chess move by components
1685   A4E4 28 0C                jr z,CNMnoMove              ; if can't parse then skip and sorry
1686   A4E6                      
1687   A4E6             CN_AlreadyCst:
1688   A4E6             
1689   A4E6 11 AA A5             ld de,_mv_UCI
1690   A4E9 CD 98 0A             call MbyStrMove             ; make one move by using string in DE
1691   A4EC                      
1692   A4EC 11 AA A5             ld de,_mv_UCI
1693   A4EF CD 9D A7             call MoveStrAppend
1694   A4F2                      
1695   A4F2             CNMnoMove:      
1696   A4F2 D1                   pop de
1697   A4F3 1B                   dec de
1698   A4F4             CNMloopSpc:
1699   A4F4 13                   inc de
1700   A4F5 1A                   ld a,(de)
1701   A4F6 FE 20                cp ' '                      ; find next move or move nr.         
1702   A4F8 28 FA                jr z,CNMloopSpc
1703   A4FA 18 98                jr CNMnextMv_
1704   A4FC                           
1705   A4FC             CNMexit:
1706   A4FC C1                   pop bc
1707   A4FD F1                   pop af
1708   A4FE C9                   ret
1709   A4FF             
1710   A4FF 31 2D 30 00 _sRes1:  .byte "1-0",0
1711   A503 30 2D 31 00 _sRes2:  .byte "0-1",0
1712   A507 31 2F 32 00 _sRes3:  .byte "1/2",0
1713   A50B 24 00       _sPosEv: .byte "$",0          ; sometimes happen that position evaluations are inside PGN
1714   A50D             
1715   A50D             ; no need to analyse result string at end of PGN
1716   A50D             CNdontNeedResults:
1717   A50D D5                   push de
1718   A50E DD E5                push ix
1719   A510 DD 21 53 A4          ld ix,_mv_str
1720   A514 11 FF A4             ld de,_sRes1
1721   A517 CD 2A 81             call Str_Contains
1722   A51A 28 18                jr z,CNemptyRStr
1723   A51C 11 03 A5             ld de,_sRes2
1724   A51F CD 2A 81             call Str_Contains
1725   A522 28 10                jr z,CNemptyRStr
1726   A524 11 07 A5             ld de,_sRes3
1727   A527 CD 2A 81             call Str_Contains
1728   A52A 28 08                jr z,CNemptyRStr
1729   A52C 11 0B A5             ld de,_sPosEv 
1730   A52F CD 2A 81             call Str_Contains         
1731   A532 20 05                jr nz,CNNoResEx
1732   A534             CNemptyRStr:
1733   A534 3E 00                ld a,0
1734   A536 DD 77 00             ld (ix),a
1735   A539             CNNoResEx:
1736   A539 DD E1                pop ix
1737   A53B D1                   pop de
1738   A53C C9                   ret
1739   A53D             
1740   A53D 30 2D 30 2D _castlT0001:  .byte "0-0-0",0
1740   A541 30 00 
1741   A543 4F 2D 4F 2D _castlT0002:  .byte "O-O-O",0
1741   A547 4F 00 
1742   A549 30 2D 30 00 _castlT001:   .byte "0-0",0
1743   A54D 4F 2D 4F 00 _castlT002:   .byte "O-O",0
1744   A551             
1745   A551             ; converts move to castling e1g1 or e1c1 or e8g8 or e8c8
1746   A551             ; returns Z and A=0 if this was not castling move
1747   A551             ; to process as usual move                
1748   A551             CNReplCastles:
1749   A551 D5                   push de
1750   A552 DD E5                push ix         
1751   A554 DD 21 53 A4          ld ix,_mv_str
1752   A558 11 3D A5             ld de,_castlT0001
1753   A55B CD 2A 81             call Str_Contains
1754   A55E 28 1C                jr z,CNemptyC000Str
1755   A560 11 43 A5             ld de,_castlT0002
1756   A563 CD 2A 81             call Str_Contains
1757   A566 28 14                jr z,CNemptyC000Str
1758   A568 11 49 A5             ld de,_castlT001
1759   A56B CD 2A 81             call Str_Contains
1760   A56E 28 10                jr z,CNemptyC00Str
1761   A570 11 4D A5             ld de,_castlT002
1762   A573 CD 2A 81             call Str_Contains
1763   A576 28 08                jr z,CNemptyC00Str
1764   A578 3E 00                ld a,0
1765   A57A 18 28                jr CNNoCastlEx
1766   A57C             CNemptyC000Str:
1767   A57C 3E 63                ld a,'c'
1768   A57E 18 02                jr CNcstlStore1
1769   A580             CNemptyC00Str:
1770   A580 3E 67                ld a,'g'
1771   A582             CNcstlStore1:
1772   A582 32 AC A5             ld (_mv_tA),a
1773   A585 3E 65                ld a,'e'
1774   A587 32 AA A5             ld (_mv_fA),a
1775   A58A                      
1776   A58A 3A 81 01             ld a,(SIDE)
1777   A58D FE 00                cp 0
1778   A58F 20 04                jr nz,CNcastlBlack
1779   A591 3E 31                ld a,'1'
1780   A593 18 02                jr CNcstlStore2
1781   A595             CNcastlBlack:
1782   A595 3E 38                ld a,'8'
1783   A597             CNcstlStore2:
1784   A597 32 AB A5             ld (_mv_f8),a
1785   A59A 32 AD A5             ld (_mv_t8),a
1786   A59D 3E 20                ld a,' '
1787   A59F 32 AE A5             ld (_mv_pr),a
1788   A5A2 3E 01                ld a,1
1789   A5A4             CNNoCastlEx:
1790   A5A4 DD E1                pop ix
1791   A5A6 D1                   pop de
1792   A5A7 FE 00                cp 0         
1793   A5A9 C9                   ret
1794   A5AA             
1795   A5AA             
1796   A5AA             _mv_UCI:                      ; UCI move in form: a7a8q
1797   A5AA 00          _mv_fA:   .byte 0
1798   A5AB 00          _mv_f8:   .byte 0             ; from 
1799   A5AC 00          _mv_tA:   .byte 0
1800   A5AD 00          _mv_t8:   .byte 0             ; to
1801   A5AE 00          _mv_pr:   .byte 0             ; promoted
1802   A5AF 20 00                 .byte ' ',0         ; blank separator
1803   A5B1             
1804   A5B1 00 00       _pc2find: .byte 0,0
1805   A5B3 4E 42 52 51 _notPawn: .byte "NBRQK",0
1805   A5B7 4B 00 
1806   A5B9 6E 72 71 4E _PromPcs: .byte "nrqNRQ",0    ; no bishop, should be = 
1806   A5BD 52 51 00 
1807   A5C0             
1808   A5C0             ; finds position for hl on the separator after the current move  
1809   A5C0             CNMhlRR: 
1810   A5C0 F5                 push af
1811   A5C1             CNMhlRloop:  
1812   A5C1 7E                 ld a,(hl)    ; separator?
1813   A5C2 FE 00              cp 0
1814   A5C4 28 06              jr z,CNMhlR0
1815   A5C6 FE 2C              cp ','
1816   A5C8 28 02              jr z,CNMhlR0
1817   A5CA FE 24              cp '$'
1818   A5CC             CNMhlR0:       
1819   A5CC                    ; Z if separator
1820   A5CC 28 03              jr z,CNMhlRfound  ; then stop on it
1821   A5CE 23                 inc hl
1822   A5CF 18 F0              jr CNMhlRloop
1823   A5D1             CNMhlRfound:
1824   A5D1 F1                 pop af
1825   A5D2 C9                 ret
1826   A5D3                                 
1827   A5D3 78 78 78 78 _mv_wrk:  .byte "xxxxx",0
1827   A5D7 78 00 
1828   A5D9             
1829   A5D9             CNMpcIsPawn:             ; sets z if not pawn in A
1830   A5D9 11 B1 A5             ld de,_pc2find
1831   A5DC 12                   ld (de),a
1832   A5DD DD 21 B3 A5          ld ix,_notPawn
1833   A5E1 CD 2A 81             call Str_Contains
1834   A5E4 C9                   ret
1835   A5E5                      
1836   A5E5             CNMpcIsPromo:            ; sets z if promopiece in (HL)
1837   A5E5 D5                   push de
1838   A5E6 DD E5                push ix
1839   A5E8 11 B1 A5             ld de,_pc2find
1840   A5EB 7E                   ld a,(hl)
1841   A5EC 12                   ld (de),a
1842   A5ED DD 21 B9 A5          ld ix,_PromPcs
1843   A5F1 CD 2A 81             call Str_Contains
1844   A5F4 DD E1                pop ix
1845   A5F6 D1                   pop de
1846   A5F7 FE 00                cp 0
1847   A5F9 C9                   ret
1848   A5FA                      
1849   A5FA             ; Generates UCI move
1850   A5FA             ; compares move of PGN-file to valid moves in current position
1851   A5FA             ; returns Z flag and A=0 if move not found,
1852   A5FA             ; container contains move otherwise
1853   A5FA             ;
1854   A5FA             CNM_Move:
1855   A5FA C5                   push bc
1856   A5FB D5                   push de
1857   A5FC E5                   push hl
1858   A5FD DD E5                push ix
1859   A5FF                      
1860   A5FF 3E 05                ld a,5
1861   A601 11 AA A5             ld de,_mv_UCI     ; clear container
1862   A604 CD 9E 84             call Block_Clear_
1863   A607                      
1864   A607 21 53 A4             ld hl,_mv_str
1865   A60A CD C0 A5             call CNMhlRR      ; to analyse backwards
1866   A60D 2B                   dec hl
1867   A60E                      
1868   A60E CD CD A6             call CNMPrepFrTo  ; prepares mask in _mv_UCI
1869   A611                      
1870   A611 21 86 01             ld hl,NEXT_MVSTR
1871   A614             
1872   A614 DD 21 53 A4          ld ix,_mv_str         
1873   A618 DD 7E 00             ld a, (ix)   ; notated piece (from PGN-file)
1874   A61B 4F                   ld c,a
1875   A61C CD D9 A5             call CNMpcIsPawn ; is pawn in A?
1876   A61F 28 02                jr z,CNMnotPawn
1877   A621 0E 50                ld c,'P'    ; if seems pawn move
1878   A623             CNMnotPawn:
1879   A623             
1880   A623             CNMloopMoves:
1881   A623 79                   ld a,c
1882   A624 FE 50                cp 'P'
1883   A626 20 07                jr nz,CNMnotPiecePawn
1884   A628 CD 75 A6             call CNMisAH           ; should be a-h for pawn
1885   A62B 38 06                jr c,CNMgoodPiece         
1886   A62D 18 20                jr CNMnotThisMv
1887   A62F                                        
1888   A62F             CNMnotPiecePawn:
1889   A62F                
1890   A62F 7E                   ld a,(hl)   ; notated piece for this move
1891   A630 B9                   cp c
1892   A631 20 1C                jr nz,CNMnotThisMv   ; if other piece
1893   A633                               
1894   A633             CNMgoodPiece:        
1895   A633             
1896   A633 7E                   ld a,(hl)
1897   A634 CD D9 A5             call CNMpcIsPawn ; is pawn in A?
1898   A637 20 01                jr nz,CNMPawnSkip
1899   A639 23                   inc hl               ; skip piece 
1900   A63A             CNMPawnSkip:
1901   A63A                      
1902   A63A CD 0D A7             call CNMCmpFrTo      ; compare to mask
1903   A63D 28 10                jr z,CNMnotThisMv
1904   A63F             
1905   A63F                      ; the same = ok
1906   A63F DD 21 D3 A5          ld ix,_mv_wrk
1907   A643 11 AA A5             ld de,_mv_UCI        ; complete move information
1908   A646 3E 05                ld a,5
1909   A648 CD 89 84             call Block_Copy_
1910   A64B                      
1911   A64B 3E 01                ld a,1    ; found
1912   A64D 18 0C                jr CNMCpExit
1913   A64F             
1914   A64F             CNMnotThisMv:
1915   A64F CD C0 A5             call CNMhlRR
1916   A652 FE 24                cp '$'
1917   A654 28 03                jr z,CNMCpBadExit
1918   A656 23                   inc hl               ; set position to next move
1919   A657 18 CA                jr CNMloopMoves
1920   A659                      
1921   A659             CNMCpBadExit:
1922   A659 3E 00                ld a,0    ;not found
1923   A65B             CNMCpExit:
1924   A65B DD E1                pop ix
1925   A65D E1                   pop hl
1926   A65E D1                   pop de
1927   A65F C1                   pop bc
1928   A660 FE 00                cp 0
1929   A662 C9                   ret                  
1930   A663                           
1931   A663             
1932   A663             ; sets C flag if A in ['1'..'8'] 
1933   A663             CNMis18:
1934   A663 CD A1 A6             call CNMskpPlus
1935   A666 7E                   ld a,(hl)         
1936   A667 FE 31                cp '1'
1937   A669 38 07                jr c,CNMnot18
1938   A66B FE 39                cp '8'+1
1939   A66D 30 03                jr nc,CNMnot18
1940   A66F 37                   scf
1941   A670 18 02                jr CMMex18
1942   A672             CNMnot18:
1943   A672 37                   scf      
1944   A673 3F                   ccf
1945   A674 C9          CMMex18: ret
1946   A675                      
1947   A675             ; sets C flag if A in ['a'..'h'] 
1948   A675             CNMisAH:
1949   A675 CD A1 A6             call CNMskpPlus
1950   A678 7E                   ld a,(hl)
1951   A679 FE 62                cp 'b'
1952   A67B 20 08                jr nz,CNM_noPromoCk
1953   A67D 2B                   dec hl
1954   A67E 7E                   ld a,(hl)
1955   A67F FE 3D                cp '='
1956   A681 28 0D                jr z,CNMnotAH    ; if bishop promotion
1957   A683 23                   inc hl
1958   A684 7E                   ld a,(hl)         
1959   A685             CNM_noPromoCk:         
1960   A685 FE 61                cp 'a'
1961   A687 38 07                jr c,CNMnotAH
1962   A689 FE 69                cp 'h'+1
1963   A68B 30 03                jr nc,CNMnotAH
1964   A68D 37                   scf
1965   A68E 18 02                jr CMMexAH
1966   A690             CNMnotAH:
1967   A690 37                   scf      
1968   A691 3F                   ccf
1969   A692 C9          CMMexAH: ret
1970   A693             
1971   A693 20 3D 2D 78 _skipSymb: .byte " =-x*:.+#?!;$",0
1971   A697 2A 3A 2E 2B 
1971   A69B 23 3F 21 3B 
1971   A69F 24 00 
1972   A6A1             
1973   A6A1             ; skips non a1-h8  symbols and reads promoted piece
1974   A6A1             CNMskpPlus:
1975   A6A1 F5                   push af
1976   A6A2 D5                   push de
1977   A6A3 DD E5                push ix
1978   A6A5             CNMskpPlLoop:
1979   A6A5 7E                   ld a,(hl)
1980   A6A6 FE 3D                cp '='
1981   A6A8 20 0E                jr nz,CNM_noPromo
1982   A6AA                      ;ld a,c
1983   A6AA                      ;cp 'P'
1984   A6AA                      ;jr nz,CNM_noPromo
1985   A6AA 23                   inc hl
1986   A6AB 7E                   ld a,(hl)
1987   A6AC 2B                   dec hl
1988   A6AD FE 5A                cp 'Z'
1989   A6AF 30 02                jr nc,CNM_prmUpC
1990   A6B1 C6 20                add a,32            ; to lowercase
1991   A6B3             CNM_prmUpC:         
1992   A6B3 32 AE A5             ld (_mv_pr),a
1993   A6B6 3E 3D                ld a,'='
1994   A6B8             CNM_noPromo:
1995   A6B8 11 B1 A5             ld de,_pc2find         
1996   A6BB 12                   ld (de),a
1997   A6BC DD 21 93 A6          ld ix,_skipSymb
1998   A6C0 CD 2A 81             call Str_Contains
1999   A6C3 20 03                jr nz, CNMskpPlusEx         
2000   A6C5 2B                   dec hl
2001   A6C6 18 DD                jr CNMskpPlLoop
2002   A6C8             CNMskpPlusEx:
2003   A6C8 DD E1                pop ix
2004   A6CA D1                   pop de
2005   A6CB F1                   pop af
2006   A6CC C9                   ret
2007   A6CD             
2008   A6CD             ; prepares mask to compare with 00e4 will match e2e4
2009   A6CD             CNMPrepFrTo:
2010   A6CD CD A1 A6             call CNMskpPlus
2011   A6D0 CD E5 A5             call CNMpcIsPromo
2012   A6D3 20 0B                jr nz,CNMPrepNoProm
2013   A6D5 7E                   ld a,(hl)
2014   A6D6 2B                   dec hl
2015   A6D7 FE 5A                cp 'Z'
2016   A6D9 30 02                jr nc,CNMPrep_prmUpC
2017   A6DB C6 20                add a,32            ; to lowercase
2018   A6DD             CNMPrep_prmUpC:         
2019   A6DD 32 AE A5             ld (_mv_pr),a        
2020   A6E0             CNMPrepNoProm:
2021   A6E0 CD 63 A6             call CNMis18
2022   A6E3 38 02                jr c,CNM_to8
2023   A6E5 18 04                jr CNMbkwt1              
2024   A6E7             CNM_to8:
2025   A6E7 32 AD A5             ld (_mv_t8),a       ;to 1..8
2026   A6EA 2B                   dec hl
2027   A6EB             CNMbkwt1:
2028   A6EB             
2029   A6EB CD 75 A6             call CNMisAH
2030   A6EE 38 02                jr c,CNM_toH
2031   A6F0 18 04                jr CNMbkwt2              
2032   A6F2             CNM_toH:
2033   A6F2 32 AC A5             ld (_mv_tA),a       ;to A..H
2034   A6F5 2B                   dec hl
2035   A6F6             CNMbkwt2:
2036   A6F6             
2037   A6F6 CD 63 A6             call CNMis18
2038   A6F9 38 02                jr c,CNM_fr8
2039   A6FB 18 04                jr CNMbkwf1              
2040   A6FD             CNM_fr8:
2041   A6FD 32 AB A5             ld (_mv_f8),a       ;from 1..8
2042   A700 2B                   dec hl
2043   A701             CNMbkwf1:
2044   A701                               
2045   A701 CD 75 A6             call CNMisAH
2046   A704 38 02                jr c,CNM_frH
2047   A706 18 04                jr CNMbkwf2              
2048   A708             CNM_frH:
2049   A708 32 AA A5             ld (_mv_fA),a       ;from A..H
2050   A70B 2B                   dec hl
2051   A70C             CNMbkwf2:
2052   A70C C9                  ret
2053   A70D             ; if piece the same then
2054   A70D             ; compares container (mask of known) with generatad valid move (like "Ng1-f3") 
2055   A70D             CNMCmpFrTo:
2056   A70D DD 21 D3 A5          ld ix,_mv_wrk         
2057   A711             
2058   A711 3A AA A5             ld a,(_mv_fA)
2059   A714 FE 00                cp 0
2060   A716 28 05                jr z,CNMokf1
2061   A718 47                   ld b,a
2062   A719 7E                   ld a,(hl)
2063   A71A B8                   cp b
2064   A71B 20 64                jr nz,CNMPnotThisMv
2065   A71D             CNMokf1: 
2066   A71D 7E                   ld a,(hl)
2067   A71E DD 77 00             ld (ix),a
2068   A721 DD 23                inc ix
2069   A723 23                   inc hl
2070   A724             
2071   A724 3A AB A5             ld a,(_mv_f8)
2072   A727 FE 00                cp 0
2073   A729 28 05                jr z,CNMokf2
2074   A72B 47                   ld b,a
2075   A72C 7E                   ld a,(hl)
2076   A72D B8                   cp b
2077   A72E 20 51                jr nz,CNMPnotThisMv
2078   A730             CNMokf2: 
2079   A730 7E                   ld a,(hl)
2080   A731 DD 77 00             ld (ix),a
2081   A734 DD 23                inc ix
2082   A736 23                   inc hl
2083   A737                      
2084   A737 23                   inc hl             ; skip symb. "-" or "x"
2085   A738             
2086   A738 3A AC A5             ld a,(_mv_tA)
2087   A73B FE 00                cp 0
2088   A73D 28 05                jr z,CNMokt1
2089   A73F 47                   ld b,a
2090   A740 7E                   ld a,(hl)
2091   A741 B8                   cp b
2092   A742 20 3D                jr nz,CNMPnotThisMv
2093   A744             CNMokt1: 
2094   A744 7E                   ld a,(hl)
2095   A745 DD 77 00             ld (ix),a
2096   A748 DD 23                inc ix
2097   A74A 23                   inc hl
2098   A74B             
2099   A74B 3A AD A5             ld a,(_mv_t8)
2100   A74E FE 00                cp 0
2101   A750 28 05                jr z,CNMokt2
2102   A752 47                   ld b,a
2103   A753 7E                   ld a,(hl)
2104   A754 B8                   cp b
2105   A755 20 2A                jr nz,CNMPnotThisMv
2106   A757             CNMokt2: 
2107   A757 7E                   ld a,(hl)
2108   A758 DD 77 00             ld (ix),a
2109   A75B DD 23                inc ix
2110   A75D 23                   inc hl
2111   A75E                      
2112   A75E 3E 20                ld a,' '
2113   A760 DD 77 00             ld (ix),a               ; clear promotion
2114   A763                                        
2115   A763 7E                   ld a,(hl)
2116   A764 FE 3D                cp '='
2117   A766 20 15                jr nz,CNMokPr
2118   A768 23                   inc hl
2119   A769                      
2120   A769 3A AE A5             ld a,(_mv_pr)
2121   A76C FE 00                cp 0
2122   A76E 28 0D                jr z,CNMokPr
2123   A770 D6 20                sub 32                  ; uppercase
2124   A772 47                   ld b,a
2125   A773 7E                   ld a,(hl)               ; queen comes first and default
2126   A774 B8                   cp b
2127   A775 20 0A                jr nz,CNMPnotThisMv
2128   A777 3A AE A5             ld a,(_mv_pr)
2129   A77A DD 77 00             ld (ix),a
2130   A77D             CNMokPr:
2131   A77D 3E 01                ld a,1
2132   A77F 18 02                jr CNCMPexit
2133   A781             CNMPnotThisMv:
2134   A781 3E 00                ld a,0
2135   A783             CNCMPexit:
2136   A783 FE 00                cp 0
2137   A785 C9                   ret
2138   A786             
2139   A786             ; clears move string for
2140   A786             ; UCI based chess movements MOVE_str
2141   A786             MoveStrClear:                            
2142   A786 F5                   push af                  
2143   A787 C5                   push bc
2144   A788 D5                   push de
2145   A789 E5                   push hl
2146   A78A 21 3E 39             ld hl,MOVE_str
2147   A78D E5                   push hl
2148   A78E D1                   pop de
2149   A78F 13                   inc de
2150   A790 3E 00                ld a,0
2151   A792 77                   ld (hl),a 
2152   A793 01 00 08             ld bc,$0800        ;2Kb scan with set=0
2153   A796 ED B0                ldir
2154   A798 E1                   pop hl
2155   A799 D1                   pop de
2156   A79A C1                   pop bc
2157   A79B F1                   pop af
2158   A79C C9                   ret
2159   A79D                      
2160   A79D             ; appends move from DE address to
2161   A79D             ; UCI based chess movements MOVE_str
2162   A79D             
2163   A79D             MoveStrAppend:
2164   A79D F5                   push af
2165   A79E C5                   push bc                  
2166   A79F D5                   push de
2167   A7A0 E5                   push hl
2168   A7A1 11 3E 39             ld de,MOVE_str
2169   A7A4             MVSTRApLoop:        
2170   A7A4 1A                   ld a,(de) 
2171   A7A5 FE 00                cp 0
2172   A7A7 28 03                jr z,MVSTRApDE
2173   A7A9 13                   inc de                
2174   A7AA 18 F8                jr MVSTRApLoop
2175   A7AC             MVSTRApDE:
2176   A7AC 01 06 00             ld bc,6
2177   A7AF 21 AA A5             ld hl,_mv_UCI
2178   A7B2 ED B0                ldir             ; copies UCI move
2179   A7B4 1B                   dec de
2180   A7B5 1B                   dec de
2181   A7B6 1A                   ld a,(de)
2182   A7B7 FE 20                cp ' '
2183   A7B9 20 04                jr nz,MVSTRApOk
2184   A7BB 13                   inc de
2185   A7BC 3E 00                ld a,0
2186   A7BE 12                   ld (de),a
2187   A7BF             MVSTRApOk:         
2188   A7BF E1                   pop hl
2189   A7C0 D1                   pop de
2190   A7C1 C1                   pop bc
2191   A7C2 F1                   pop af
2192   A7C3 C9                   ret
2193   A7C4             
2194   A7C4             ; prints chess moves ready for replaying
2195   A7C4             PrintPgnGmMvList:
2196   A7C4 F5                   push af
2197   A7C5 D5                   push de
2198   A7C6 DD E5                push ix
2199   A7C8                                    
2200   A7C8 DD 21 3E 39          ld ix, MOVE_str
2201   A7CC 11 D2 9B             ld de, DRdoll    ; add $
2202   A7CF CD AC 81             call Str_Append
2203   A7D2 DD E5                push ix
2204   A7D4 D1                   pop de
2205   A7D5 CD 27 87             call PrintString                    
2206   A7D8 DD E1                pop ix
2207   A7DA D1                   pop de
2208   A7DB F1                   pop af
2209   A7DC                      
2210   A7DC 3E 06                ld a,6
2211   A7DE CD F9 A7             call DispWait     ; press M key
2212   A7E1 CD D7 86             call ClearKeyBy30h
2213   A7E4             PrMvLsWait:         
2214   A7E4 CD D3 86             call PressKeyBy30h
2215   A7E7 FE 4D                cp 'M'
2216   A7E9 28 0D                jr z,PrMvLsEx
2217   A7EB FE 6D                cp 'm'
2218   A7ED 28 09                jr z,PrMvLsEx
2219   A7EF FE 1B                cp 27
2220   A7F1 28 02                jr z,PrMvLsESC         
2221   A7F3 18 EF                jr PrMvLsWait
2222   A7F5             PrMvLsESC:         
2223   A7F5 CD 86 A7             call MoveStrClear   ; cancel replay and exit to menu again
2224   A7F8             PrMvLsEx:              
2225   A7F8 C9                   ret
2226   A7F9             
2227   A7F9             ; displays current processing status
2228   A7F9             DispWait:
2229   A7F9 D5                   push de
2230   A7FA FE 00                cp 0
2231   A7FC 20 05                jr nz,DspWtNo0
2232   A7FE 11 56 9D             ld de,sDspSrch      ; Searching
2233   A801 18 2F                jr DspWtOutp
2234   A803             DspWtNo0:
2235   A803 FE 01                cp 1
2236   A805 20 05                jr nz,DspWtNo1
2237   A807 11 6F 9D             ld de,sDspAnlz      ; Analyzing
2238   A80A 18 26                jr DspWtOutp
2239   A80C             DspWtNo1:
2240   A80C FE 02                cp 2     
2241   A80E 20 05                jr nz,DspWtNo2
2242   A810 11 88 9D             ld de,sDspGRpl      ; Ready to replay
2243   A813 18 1D                jr DspWtOutp
2244   A815             DspWtNo2:         
2245   A815 FE 06                cp 6     
2246   A817 20 05                jr nz,DspWtNo6
2247   A819 11 A3 9D             ld de,sDspMKey      ; Press M-message
2248   A81C 18 14                jr DspWtOutp         
2249   A81E             DspWtNo6:
2250   A81E FE 07                cp 7     
2251   A820 20 05                jr nz,DspWtNo7
2252   A822 11 6B 9D             ld de,sDspCR        ; carriage return
2253   A825 18 0B                jr DspWtOutp
2254   A827             DspWtNo7:         
2255   A827 FE 08                cp 8
2256   A829 20 05                jr nz,DspWtNo8
2257   A82B 11 C0 9D             ld de,sDspPt_       ; Put point indicating activity
2258   A82E 18 02                jr DspWtOutp
2259   A830             DspWtNo8:                  
2260   A830 18 03                jr DspWtEx
2261   A832             DspWtOutp:
2262   A832 CD 27 87             call PrintString
2263   A835             DspWtEx:
2264   A835 D1                   pop de
2265   A836 C9                   ret
2266   A837                                
2267   A837             end_PG_Module:          
2268   A837             .end          tasm: Number of errors = 0
