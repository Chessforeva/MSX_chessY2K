0001   0000             .title ChessY2K
0002   0000             
0003   0000             ;
0004   0000             ; Chess assembler ASM code for MSX
0005   0000             ;
0006   0000             ;  MSDOS:
0007   0000             ;     TASM -80 -b ChessY2K.ASM ChessY2K.com
0008   0000             ;     TASM -80 -b ChessPG.ASM ChessPG.co2
0009   0000             ;     TASM -80 -b ChessPI.ASM ChessPI.co2
0010   0000             ;  Then run ChessY2K.com on MSX-DOS1
0011   0000             ;
0012   0000             ; Date: sep.,oct. 2012
0013   0000             ;  updated nov.2014
0014   0000             ;
0015   0000             ;Performance testing: 256 movement generations per minute on MSX machine -
0016   0000             ;                        not enaugh for chess but ok for pgn-viewer project.
0017   0000             
0018   0000             ;
0019   0000             ; Define PGN_COMPILE to compile separate module for pgn viewer replays
0020   0000             ; It can not be done in one .COM unfortunately - causes too much memory usage.
0021   0000             ; ChessPZ.COM is a compilation with no PGN version.
0022   0000             ; 
0023   0000             ;#define   PGN_COMPILE 1
0024   0000             
0025   0100                      .org $100      
0026   0100                                   
0027   0100             startProgram:
0028   0100 CD 4E 36             call ChessMN     ; process menu
0029   0103                                       ; chess logic is in this file
0030   0103                     
0031   0103 C3 EF F3             jp  JMP_0000     ; return to DOS
0032   0106 C9                   ret
0033   0107                             
0034   0107             startFEN:       
0035   0107 72 6E 62 71         .byte "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",0                       
0035   010B 6B 62 6E 72 
0035   010F 2F 70 70 70 
0035   0113 70 70 70 70 
0035   0117 70 2F 38 2F 
0035   011B 38 2F 38 2F 
0035   011F 38 2F 50 50 
0035   0123 50 50 50 50 
0035   0127 50 50 2F 52 
0035   012B 4E 42 51 4B 
0035   012F 42 4E 52 20 
0035   0133 77 20 4B 51 
0035   0137 6B 71 20 2D 
0035   013B 20 30 20 31 
0035   013F 00 
0036   0140             
0037   0140             
0038   0140             ; STATUSES OF CURRENT CHESS GAME 
0039   0140             
0040   0140             ; Current chess position
0041   0140             
0042   0140 61 31 20 20 BOARD:  .byte "a1    h1"        ;64 bytes of board
0042   0144 20 20 68 31 
0043   0148 61 32 20 20         .byte "a2    h2"
0043   014C 20 20 68 32 
0044   0150 20 20 20 20         .byte "        "
0044   0154 20 20 20 20 
0045   0158 20 20 20 20         .byte "        "
0045   015C 20 20 20 20 
0046   0160 20 20 20 20         .byte "        "
0046   0164 20 20 20 20 
0047   0168 20 20 20 20         .byte "        "
0047   016C 20 20 20 20 
0048   0170 20 20 20 20         .byte "        "
0048   0174 20 20 20 20 
0049   0178 61 38 20 20         .byte "a8    h8"
0049   017C 20 20 68 38 
0050   0180 00                  .byte 0
0051   0181                     
0052   0181 00          SIDE:     .byte 0       ; side to move 0-white, 1-black   
0053   0182 00          CASTLES:  .byte 0       ; castling allowance flags
0054   0183                                     ; if bits are set: 0 wK, 1 wQ, 2 bK, 3 bQ sides
0055   0183 FF          ENPSQ:    .byte $ff     ; en-passant square none
0056   0184 00          WKSQ:     .byte 0       ; square of white king
0057   0185 00          BKSQ:     .byte 0       ; square of black king
0058   0186             
0059   0186             ;
0060   0186             ; variables and arrays for next movement generation
0061   0186             ; (for printing and displaying)          
0062   0186 20 20 20 20 NEXT_MVSTR: .byte "                                                    "
0062   018A 20 20 20 20 
0062   018E 20 20 20 20 
0062   0192 20 20 20 20 
0062   0196 20 20 20 20 
0062   019A 20 20 20 20 
0062   019E 20 20 20 20 
0062   01A2 20 20 20 20 
0062   01A6 20 20 20 20 
0062   01AA 20 20 20 20 
0062   01AE 20 20 20 20 
0062   01B2 20 20 20 20 
0062   01B6 20 20 20 20 
0063   01BA 20 20 20 20             .byte "                                                    "
0063   01BE 20 20 20 20 
0063   01C2 20 20 20 20 
0063   01C6 20 20 20 20 
0063   01CA 20 20 20 20 
0063   01CE 20 20 20 20 
0063   01D2 20 20 20 20 
0063   01D6 20 20 20 20 
0063   01DA 20 20 20 20 
0063   01DE 20 20 20 20 
0063   01E2 20 20 20 20 
0063   01E6 20 20 20 20 
0063   01EA 20 20 20 20 
0064   01EE 20 20 20 20             .byte "                                                    "
0064   01F2 20 20 20 20 
0064   01F6 20 20 20 20 
0064   01FA 20 20 20 20 
0064   01FE 20 20 20 20 
0064   0202 20 20 20 20 
0064   0206 20 20 20 20 
0064   020A 20 20 20 20 
0064   020E 20 20 20 20 
0064   0212 20 20 20 20 
0064   0216 20 20 20 20 
0064   021A 20 20 20 20 
0064   021E 20 20 20 20 
0065   0222 20 20 20 20             .byte "                                                    "
0065   0226 20 20 20 20 
0065   022A 20 20 20 20 
0065   022E 20 20 20 20 
0065   0232 20 20 20 20 
0065   0236 20 20 20 20 
0065   023A 20 20 20 20 
0065   023E 20 20 20 20 
0065   0242 20 20 20 20 
0065   0246 20 20 20 20 
0065   024A 20 20 20 20 
0065   024E 20 20 20 20 
0065   0252 20 20 20 20 
0066   0256 20 20 20 20             .byte "                                                    "                      
0066   025A 20 20 20 20 
0066   025E 20 20 20 20 
0066   0262 20 20 20 20 
0066   0266 20 20 20 20 
0066   026A 20 20 20 20 
0066   026E 20 20 20 20 
0066   0272 20 20 20 20 
0066   0276 20 20 20 20 
0066   027A 20 20 20 20 
0066   027E 20 20 20 20 
0066   0282 20 20 20 20 
0066   0286 20 20 20 20 
0067   028A 20 20 20 20             .byte "                                                    "
0067   028E 20 20 20 20 
0067   0292 20 20 20 20 
0067   0296 20 20 20 20 
0067   029A 20 20 20 20 
0067   029E 20 20 20 20 
0067   02A2 20 20 20 20 
0067   02A6 20 20 20 20 
0067   02AA 20 20 20 20 
0067   02AE 20 20 20 20 
0067   02B2 20 20 20 20 
0067   02B6 20 20 20 20 
0067   02BA 20 20 20 20 
0068   02BE 20 20 20 20             .byte "                                                    "
0068   02C2 20 20 20 20 
0068   02C6 20 20 20 20 
0068   02CA 20 20 20 20 
0068   02CE 20 20 20 20 
0068   02D2 20 20 20 20 
0068   02D6 20 20 20 20 
0068   02DA 20 20 20 20 
0068   02DE 20 20 20 20 
0068   02E2 20 20 20 20 
0068   02E6 20 20 20 20 
0068   02EA 20 20 20 20 
0068   02EE 20 20 20 20 
0069   02F2 20 20 20 20             .byte "                                                    "
0069   02F6 20 20 20 20 
0069   02FA 20 20 20 20 
0069   02FE 20 20 20 20 
0069   0302 20 20 20 20 
0069   0306 20 20 20 20 
0069   030A 20 20 20 20 
0069   030E 20 20 20 20 
0069   0312 20 20 20 20 
0069   0316 20 20 20 20 
0069   031A 20 20 20 20 
0069   031E 20 20 20 20 
0069   0322 20 20 20 20 
0070   0326 20 20 20 20             .byte "                                                    "
0070   032A 20 20 20 20 
0070   032E 20 20 20 20 
0070   0332 20 20 20 20 
0070   0336 20 20 20 20 
0070   033A 20 20 20 20 
0070   033E 20 20 20 20 
0070   0342 20 20 20 20 
0070   0346 20 20 20 20 
0070   034A 20 20 20 20 
0070   034E 20 20 20 20 
0070   0352 20 20 20 20 
0070   0356 20 20 20 20 
0071   035A 20 20 20 20             .byte "                                                    "
0071   035E 20 20 20 20 
0071   0362 20 20 20 20 
0071   0366 20 20 20 20 
0071   036A 20 20 20 20 
0071   036E 20 20 20 20 
0071   0372 20 20 20 20 
0071   0376 20 20 20 20 
0071   037A 20 20 20 20 
0071   037E 20 20 20 20 
0071   0382 20 20 20 20 
0071   0386 20 20 20 20 
0071   038A 20 20 20 20 
0072   038E 20 20 20 20             .byte "                                                    "                      
0072   0392 20 20 20 20 
0072   0396 20 20 20 20 
0072   039A 20 20 20 20 
0072   039E 20 20 20 20 
0072   03A2 20 20 20 20 
0072   03A6 20 20 20 20 
0072   03AA 20 20 20 20 
0072   03AE 20 20 20 20 
0072   03B2 20 20 20 20 
0072   03B6 20 20 20 20 
0072   03BA 20 20 20 20 
0072   03BE 20 20 20 20 
0073   03C2 20 20 20 20             .byte "                                                    "
0073   03C6 20 20 20 20 
0073   03CA 20 20 20 20 
0073   03CE 20 20 20 20 
0073   03D2 20 20 20 20 
0073   03D6 20 20 20 20 
0073   03DA 20 20 20 20 
0073   03DE 20 20 20 20 
0073   03E2 20 20 20 20 
0073   03E6 20 20 20 20 
0073   03EA 20 20 20 20 
0073   03EE 20 20 20 20 
0073   03F2 20 20 20 20 
0074   03F6 20 20 20 20             .byte "                                                    "
0074   03FA 20 20 20 20 
0074   03FE 20 20 20 20 
0074   0402 20 20 20 20 
0074   0406 20 20 20 20 
0074   040A 20 20 20 20 
0074   040E 20 20 20 20 
0074   0412 20 20 20 20 
0074   0416 20 20 20 20 
0074   041A 20 20 20 20 
0074   041E 20 20 20 20 
0074   0422 20 20 20 20 
0074   0426 20 20 20 20 
0075   042A 20 20 20 20             .byte "                                                    "
0075   042E 20 20 20 20 
0075   0432 20 20 20 20 
0075   0436 20 20 20 20 
0075   043A 20 20 20 20 
0075   043E 20 20 20 20 
0075   0442 20 20 20 20 
0075   0446 20 20 20 20 
0075   044A 20 20 20 20 
0075   044E 20 20 20 20 
0075   0452 20 20 20 20 
0075   0456 20 20 20 20 
0075   045A 20 20 20 20 
0076   045E 20 20 20 20             .byte "                                                    "
0076   0462 20 20 20 20 
0076   0466 20 20 20 20 
0076   046A 20 20 20 20 
0076   046E 20 20 20 20 
0076   0472 20 20 20 20 
0076   0476 20 20 20 20 
0076   047A 20 20 20 20 
0076   047E 20 20 20 20 
0076   0482 20 20 20 20 
0076   0486 20 20 20 20 
0076   048A 20 20 20 20 
0076   048E 20 20 20 20 
0077   0492                         
0078   0492 00          NEXT_MVCNT: .byte 0      ;count, values, and string to output          
0079   0493 00 00 00 00 NEXT_MOVES: .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0079   0497 00 00 00 00 
0079   049B 00 00 00 00 
0079   049F 00 00 00 00 
0079   04A3 00 00 00 00 
0079   04A7 00 00 00 00 
0079   04AB 00 00 00 00 
0079   04AF 00 00 00 00 
0079   04B3 00 00 00 00 
0079   04B7 00 00 00 00 
0080   04BB 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0080   04BF 00 00 00 00 
0080   04C3 00 00 00 00 
0080   04C7 00 00 00 00 
0080   04CB 00 00 00 00 
0080   04CF 00 00 00 00 
0080   04D3 00 00 00 00 
0080   04D7 00 00 00 00 
0080   04DB 00 00 00 00 
0080   04DF 00 00 00 00 
0081   04E3 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0081   04E7 00 00 00 00 
0081   04EB 00 00 00 00 
0081   04EF 00 00 00 00 
0081   04F3 00 00 00 00 
0081   04F7 00 00 00 00 
0081   04FB 00 00 00 00 
0081   04FF 00 00 00 00 
0081   0503 00 00 00 00 
0081   0507 00 00 00 00 
0082   050B 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0082   050F 00 00 00 00 
0082   0513 00 00 00 00 
0082   0517 00 00 00 00 
0082   051B 00 00 00 00 
0082   051F 00 00 00 00 
0082   0523 00 00 00 00 
0082   0527 00 00 00 00 
0082   052B 00 00 00 00 
0082   052F 00 00 00 00 
0083   0533 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0083   0537 00 00 00 00 
0083   053B 00 00 00 00 
0083   053F 00 00 00 00 
0083   0543 00 00 00 00 
0083   0547 00 00 00 00 
0083   054B 00 00 00 00 
0083   054F 00 00 00 00 
0083   0553 00 00 00 00 
0083   0557 00 00 00 00 
0084   055B 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0084   055F 00 00 00 00 
0084   0563 00 00 00 00 
0084   0567 00 00 00 00 
0084   056B 00 00 00 00 
0084   056F 00 00 00 00 
0084   0573 00 00 00 00 
0084   0577 00 00 00 00 
0084   057B 00 00 00 00 
0084   057F 00 00 00 00 
0085   0583 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0085   0587 00 00 00 00 
0085   058B 00 00 00 00 
0085   058F 00 00 00 00 
0085   0593 00 00 00 00 
0085   0597 00 00 00 00 
0085   059B 00 00 00 00 
0085   059F 00 00 00 00 
0085   05A3 00 00 00 00 
0085   05A7 00 00 00 00 
0086   05AB 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0086   05AF 00 00 00 00 
0086   05B3 00 00 00 00 
0086   05B7 00 00 00 00 
0086   05BB 00 00 00 00 
0086   05BF 00 00 00 00 
0086   05C3 00 00 00 00 
0086   05C7 00 00 00 00 
0086   05CB 00 00 00 00 
0086   05CF 00 00 00 00 
0087   05D3 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0087   05D7 00 00 00 00 
0087   05DB 00 00 00 00 
0087   05DF 00 00 00 00 
0087   05E3 00 00 00 00 
0087   05E7 00 00 00 00 
0087   05EB 00 00 00 00 
0087   05EF 00 00 00 00 
0087   05F3 00 00 00 00 
0087   05F7 00 00 00 00 
0088   05FB 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0088   05FF 00 00 00 00 
0088   0603 00 00 00 00 
0088   0607 00 00 00 00 
0088   060B 00 00 00 00 
0088   060F 00 00 00 00 
0088   0613 00 00 00 00 
0088   0617 00 00 00 00 
0088   061B 00 00 00 00 
0088   061F 00 00 00 00 
0089   0623 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0089   0627 00 00 00 00 
0089   062B 00 00 00 00 
0089   062F 00 00 00 00 
0089   0633 00 00 00 00 
0089   0637 00 00 00 00 
0089   063B 00 00 00 00 
0089   063F 00 00 00 00 
0089   0643 00 00 00 00 
0089   0647 00 00 00 00 
0090   064B 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0090   064F 00 00 00 00 
0090   0653 00 00 00 00 
0090   0657 00 00 00 00 
0090   065B 00 00 00 00 
0090   065F 00 00 00 00 
0090   0663 00 00 00 00 
0090   0667 00 00 00 00 
0090   066B 00 00 00 00 
0090   066F 00 00 00 00 
0091   0673                                   
0092   0673             ; list of moves from the root
0093   0673             ; bytes:
0094   0673             ;  square from,
0095   0673             ;  square to,
0096   0673             ;  promoted piece with flags
0097   0673             ;  en-passant square move before
0098   0673             
0099   0673 00          MOVE_CNT   .byte 0   ; count of moves (below 127 chess both-side-moves) 
0100   0674             
0101   0674             MOVE_HIST  .ds 1024; Kb for history of chess moves (4bytes per 1-side-move)
0102   0A74                       
0103   0A74             ; Container for UCI-string-of-moves in form "e2e4 e7e5 ... e1g1 ... b7b8q ... "
0104   0A74             ; (set before MOVE_byString usage), it is for data passing
0105   0A74 20 20 20 20 MOVE_str: .byte "                                                                "          
0105   0A78 20 20 20 20 
0105   0A7C 20 20 20 20 
0105   0A80 20 20 20 20 
0105   0A84 20 20 20 20 
0105   0A88 20 20 20 20 
0105   0A8C 20 20 20 20 
0105   0A90 20 20 20 20 
0105   0A94 20 20 20 20 
0105   0A98 20 20 20 20 
0105   0A9C 20 20 20 20 
0105   0AA0 20 20 20 20 
0105   0AA4 20 20 20 20 
0105   0AA8 20 20 20 20 
0105   0AAC 20 20 20 20 
0105   0AB0 20 20 20 20 
0106   0AB4 20 20 20 20           .byte "                                                                " 
0106   0AB8 20 20 20 20 
0106   0ABC 20 20 20 20 
0106   0AC0 20 20 20 20 
0106   0AC4 20 20 20 20 
0106   0AC8 20 20 20 20 
0106   0ACC 20 20 20 20 
0106   0AD0 20 20 20 20 
0106   0AD4 20 20 20 20 
0106   0AD8 20 20 20 20 
0106   0ADC 20 20 20 20 
0106   0AE0 20 20 20 20 
0106   0AE4 20 20 20 20 
0106   0AE8 20 20 20 20 
0106   0AEC 20 20 20 20 
0106   0AF0 20 20 20 20 
0107   0AF4 20 20 20 20           .byte "                                                                "
0107   0AF8 20 20 20 20 
0107   0AFC 20 20 20 20 
0107   0B00 20 20 20 20 
0107   0B04 20 20 20 20 
0107   0B08 20 20 20 20 
0107   0B0C 20 20 20 20 
0107   0B10 20 20 20 20 
0107   0B14 20 20 20 20 
0107   0B18 20 20 20 20 
0107   0B1C 20 20 20 20 
0107   0B20 20 20 20 20 
0107   0B24 20 20 20 20 
0107   0B28 20 20 20 20 
0107   0B2C 20 20 20 20 
0107   0B30 20 20 20 20 
0108   0B34 20 20 20 20           .byte "                                                                "
0108   0B38 20 20 20 20 
0108   0B3C 20 20 20 20 
0108   0B40 20 20 20 20 
0108   0B44 20 20 20 20 
0108   0B48 20 20 20 20 
0108   0B4C 20 20 20 20 
0108   0B50 20 20 20 20 
0108   0B54 20 20 20 20 
0108   0B58 20 20 20 20 
0108   0B5C 20 20 20 20 
0108   0B60 20 20 20 20 
0108   0B64 20 20 20 20 
0108   0B68 20 20 20 20 
0108   0B6C 20 20 20 20 
0108   0B70 20 20 20 20 
0109   0B74 20 20 20 20           .byte "                                                                "
0109   0B78 20 20 20 20 
0109   0B7C 20 20 20 20 
0109   0B80 20 20 20 20 
0109   0B84 20 20 20 20 
0109   0B88 20 20 20 20 
0109   0B8C 20 20 20 20 
0109   0B90 20 20 20 20 
0109   0B94 20 20 20 20 
0109   0B98 20 20 20 20 
0109   0B9C 20 20 20 20 
0109   0BA0 20 20 20 20 
0109   0BA4 20 20 20 20 
0109   0BA8 20 20 20 20 
0109   0BAC 20 20 20 20 
0109   0BB0 20 20 20 20 
0110   0BB4                       .ds $700
0111   12B4                       ;above 2Kb of moves
0112   12B4             
0113   12B4             ; We use own memory of .COM file till now
0114   12B4             ;  
0115   12B4             ;  So, we are able to generate next chess moves, detect check and checkmate in 1.
0116   12B4             ;  And print it out. No reasonable chess evaluation searches possible here!
0117   12B4             
0118   12B4             GenMovesAndString:
0119   12B4 CD 38 13                call GenMoves            
0120   12B7 CD EE 19                call MovesToStr    ; to print after 
0121   12BA C9                      ret
0122   12BB                                                 
0123   12BB             ;BEGIN of ========== MAKE MOVES BY UCI-MOVE-STRING          
0124   12BB             ; use UndoAllMoves before or setFEN
0125   12BB             ;
0126   12BB                                                     
0127   12BB             MOVE_byString:
0128   12BB F5                  push af
0129   12BC C5                  push bc
0130   12BD D5                  push de
0131   12BE             
0132   12BE 11 74 0A            ld de, MOVE_str 
0133   12C1                     
0134   12C1             MbyStrLoop:
0135   12C1 CD 38 13            call GenMoves 
0136   12C4                                                  
0137   12C4 1A                  ld a,(de)          ; find separator
0138   12C5 FE 20               cp ' '
0139   12C7 28 0B               jr z,MbySover
0140   12C9 FE 00               cp 0
0141   12CB 28 07               jr z,MbySover
0142   12CD                     
0143   12CD CD D8 12            call MbyStrMove    ; single move
0144   12D0                     
0145   12D0 13                  inc de
0146   12D1 13                  inc de             ; skip promoted and blank too
0147   12D2 18 ED               jr MbyStrLoop      ; and process next move   
0148   12D4             MbySover:        
0149   12D4 D1                  pop de
0150   12D5 C1                  pop bc
0151   12D6 F1                  pop af
0152   12D7 C9                  ret
0153   12D8             
0154   12D8             ; "move by string" in DE register
0155   12D8             ; restore registers after
0156   12D8             MbyStrMove:
0157   12D8 CD 15 13            call MbySgetSQ
0158   12DB 32 35 13            ld (SQi),a
0159   12DE CD 15 13            call MbySgetSQ
0160   12E1 32 36 13            ld (SQt),a
0161   12E4 1A                  ld a,(de)
0162   12E5 FE 20               cp ' '
0163   12E7 20 03               jr nz,MbyPromPiece
0164   12E9 1B                  dec de
0165   12EA 18 20               jr MbyNoN        
0166   12EC             MbyPromPiece:
0167   12EC FE 71               cp 'q'
0168   12EE 20 04               jr nz,MbyNoQ
0169   12F0 3E 04               ld a,4
0170   12F2 18 1A               jr MbyProm
0171   12F4 FE 72       MbyNoQ: cp 'r'       
0172   12F6 20 04               jr nz,MbyNoR
0173   12F8 3E 03               ld a,3
0174   12FA 18 12               jr MbyProm
0175   12FC FE 62       MbyNoR: cp 'b'       
0176   12FE 20 04               jr nz,MbyNoB
0177   1300 3E 02               ld a,2
0178   1302 18 0A               jr MbyProm
0179   1304 FE 6E       MbyNoB: cp 'n'       
0180   1306 20 04               jr nz,MbyNoN
0181   1308 3E 01               ld a,1
0182   130A 18 02               jr MbyProm
0183   130C 3E 00       MbyNoN: ld a,0             ; not promoted       
0184   130E             MbyProm:
0185   130E 32 38 19            ld (PromoPcId),a
0186   1311 CD 8A 21            call MakeMove
0187   1314 C9                  ret
0188   1315             
0189   1315             MbySgetSQ:
0190   1315 1A                  ld a,(de)
0191   1316 13                  inc de
0192   1317 D6 61               sub 'a'
0193   1319 47                  ld b,a
0194   131A 1A                  ld a,(de)
0195   131B 13                  inc de
0196   131C D6 31               sub '1'
0197   131E CB 27               sla a
0198   1320 CB 27               sla a
0199   1322 CB 27               sla a
0200   1324 B0                  or b
0201   1325 C9                  ret                ; a-reg contains square on return
0202   1326             
0203   1326             ;END
0204   1326             
0205   1326             
0206   1326             ;BEGIN of ========== SIMPLY UNDO ALL MOVES
0207   1326             
0208   1326             UndoAllMoves:
0209   1326 F5                   push af
0210   1327             UndoAllLoop:
0211   1327 3A 73 06             ld a,(MOVE_CNT)
0212   132A FE 00                cp 0
0213   132C 28 05                jr z,UndoAllBrk
0214   132E CD 61 25             call UnMakeMove
0215   1331 18 F4                jr UndoAllLoop
0216   1333             UndoAllBrk:         
0217   1333 F1                   pop af
0218   1334 C9                   ret
0219   1335             ;END
0220   1335                   
0221   1335                                                               
0222   1335             ;BEGIN of ========== MOVE GEN - movement generation routine
0223   1335             ; Very proper - according to chess rules.
0224   1335             ; Scanning all board squares 0..63, trying to move pieces by type, then by directions.
0225   1335             ; If move seems good then adds to the list with verification on own king attacks after movement
0226   1335             ; to avoid illegal cases.
0227   1335             
0228   1335 00          SQi:         .byte 0    ;current square
0229   1336 00          SQt:         .byte 0    ;square to move to
0230   1337             
0231   1337 00          MateDetect:  .byte 0    ; if 1 then just find the first legal move and return
0232   1338             
0233   1338             GenMoves:
0234   1338 F5                   push af
0235   1339 C5                   push bc
0236   133A D5                   push de
0237   133B E5                   push hl
0238   133C DD E5                push ix
0239   133E FD E5                push iy
0240   1340                               
0241   1340 3E 00                ld a,0    
0242   1342 32 39 19             ld (CastlMove),a
0243   1345 32 38 19             ld (PromoPcId),a
0244   1348 32 37 19             ld (CaptPiece),a 
0245   134B                      
0246   134B 3A 37 13             ld a, (MateDetect)
0247   134E FE 01                cp 1
0248   1350 28 08                jr z,GenMvNoClr    ; if we are not gona save
0249   1352                               
0250   1352 DD 21 92 04          ld ix, NEXT_MVCNT
0251   1356 DD 36 00 00          ld (ix), 0
0252   135A                      
0253   135A             GenMvNoClr:         
0254   135A 3E 00                ld a, 0            ; square counter 0..63
0255   135C 32 35 13             ld (SQi), a
0256   135F 21 40 01             ld hl, BOARD
0257   1362             GenMvSqScan:
0258   1362 7E                   ld a, (hl)          ; piece
0259   1363                      
0260   1363 E5                   push hl
0261   1364 FD E1                pop iy    ; set to remember square-from
0262   1366                      
0263   1366 7E                   ld a, (hl)          ; get piece standing there
0264   1367 FE 00                cp 0
0265   1369 28 5F                jr z, OverMGSq      ; empty square
0266   136B                      
0267   136B FE 61                cp 'a'              ; pieces
0268   136D 30 0A                jr nc, BlackPiece
0269   136F             
0270   136F             WhitePiece:                  ; A-Z                    
0271   136F 3A 81 01             ld a,(SIDE)
0272   1372 FE 00                cp 0        
0273   1374 20 54                jr nz, OverMGSq     ; not turn
0274   1376 7E                   ld a, (hl)
0275   1377 18 0A                jr WhichPiece        
0276   1379             BlackPiece:       
0277   1379 3A 81 01             ld a,(SIDE)
0278   137C FE 01                cp 1 
0279   137E 20 4A                jr nz, OverMGSq     ; not turn
0280   1380 7E                   ld a, (hl)
0281   1381 D6 20                sub 32            ; to uppercase
0282   1383             WhichPiece: 
0283   1383 FE 50                cp 'P'
0284   1385 28 16                jr z, Pmoves
0285   1387 FE 4E                cp 'N'
0286   1389 28 23                jr z, Knmoves       
0287   138B FE 42                cp 'B'
0288   138D 28 24                jr z, Bsmoves
0289   138F FE 52                cp 'R'
0290   1391 28 25                jr z, Rkmoves
0291   1393 FE 51                cp 'Q'
0292   1395 28 26                jr z, Qnmoves
0293   1397 FE 4B                cp 'K'
0294   1399 28 2A                jr z, Kgmoves                                          
0295   139B 18 2D                jr OverMGSq                
0296   139D             Pmoves:
0297   139D 3A 81 01             ld a,(SIDE)
0298   13A0 FE 01                cp 1
0299   13A2 28 05                jr z, blackPmoves
0300   13A4 CD 25 14             call MoveGenWPawn
0301   13A7 18 21                jr OverMGSq
0302   13A9             blackPmoves:
0303   13A9 CD C6 14             call MoveGenBPawn
0304   13AC 18 1C                jr OverMGSq
0305   13AE             Knmoves:
0306   13AE CD FE 16             call MoveGenKnight
0307   13B1 18 17                jr OverMGSq
0308   13B3             Bsmoves:
0309   13B3 CD 3D 16             call MoveGenBishop
0310   13B6 18 12                jr OverMGSq
0311   13B8             Rkmoves:
0312   13B8 CD 84 15             call MoveGenRook
0313   13BB 18 0D                jr OverMGSq                                                           
0314   13BD             Qnmoves:
0315   13BD CD 3D 16             call MoveGenBishop   ; simply
0316   13C0 CD 84 15             call MoveGenRook     ; the same
0317   13C3 18 05                jr OverMGSq
0318   13C5             Kgmoves:
0319   13C5 CD C1 17             call MoveGenKing
0320   13C8 18 00                jr OverMGSq
0321   13CA                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
0322   13CA             OverMGSq:
0323   13CA 23                   inc hl
0324   13CB                      
0325   13CB 3A 37 13             ld a, (MateDetect)
0326   13CE FE 02                cp 2
0327   13D0 20 02                jr nz, GenMVscn
0328   13D2 18 0B                jr GenMVexit
0329   13D4             GenMVscn:         
0330   13D4 3A 35 13             ld a, (SQi)       
0331   13D7 3C                   inc a
0332   13D8 32 35 13             ld (SQi),a
0333   13DB D6 40                sub 64   ; Loop 0-63
0334   13DD 20 83                jr nz, GenMvSqScan
0335   13DF             GenMVexit:
0336   13DF             
0337   13DF CD C3 26             call LookForCheckmates   ; verifies checkmates
0338   13E2                                                  
0339   13E2 FD E1                pop iy
0340   13E4 DD E1                pop ix
0341   13E6 E1                   pop hl
0342   13E7 D1                   pop de
0343   13E8 C1                   pop bc
0344   13E9 F1                   pop af
0345   13EA C9                   ret
0346   13EB             
0347   13EB                               
0348   13EB             ; helping procedure to obtain current X,Y on board and store to d,e regs.
0349   13EB             StoreXYtoDE:
0350   13EB 3A 35 13             ld a, (SQi)
0351   13EE E6 07                and 7
0352   13F0 57                   ld d,a      ; X- a..h
0353   13F1 3A 35 13             ld a, (SQi)
0354   13F4 CB 3F                srl a
0355   13F6 CB 3F                srl a
0356   13F8 CB 3F                srl a
0357   13FA 5F                   ld e,a      ; Y- 1..8
0358   13FB C9                   ret
0359   13FC             
0360   13FC             ; sets new SQt to move and calculates new hl position          
0361   13FC             StoreSqToMove:                 
0362   13FC 7B                   ld a,e
0363   13FD CB 27                sla a
0364   13FF CB 27                sla a
0365   1401 CB 27                sla a
0366   1403 B2                   or d
0367   1404 32 36 13             ld (SQt),a              ;a-reg. contains the new square to jump
0368   1407                      
0369   1407 06 00                ld b,0
0370   1409 3A 35 13             ld a,(SQi)
0371   140C 4F                   ld c,a
0372   140D 3A 36 13             ld a,(SQt)
0373   1410 91                   sub c
0374   1411 38 04                jr c, StDistNeg
0375   1413 4F                   ld c,a
0376   1414 09                   add hl,bc              ;new hl position sq-forward
0377   1415 18 0D                jr StNSqOver
0378   1417             StDistNeg:
0379   1417 3A 36 13             ld a,(SQt)
0380   141A 4F                   ld c,a
0381   141B 3A 35 13             ld a,(SQi)         
0382   141E 91                   sub c
0383   141F 4F                   ld c,a                         
0384   1420 37                   scf
0385   1421 3F                   ccf
0386   1422 ED 42                sbc hl,bc              ;new hl position sq-backward
0387   1424             StNSqOver:         
0388   1424 C9                   ret
0389   1425             ;END
0390   1425             
0391   1425             
0392   1425             ;BEGIN of ========== MOVE GEN for WHITE PAWN goes up
0393   1425             
0394   1425             MoveGenWPawn:
0395   1425             
0396   1425 F5                   push af
0397   1426 D5                   push de
0398   1427                      
0399   1427 3E 00                ld a,0
0400   1429 32 37 19             ld (CaptPiece),a
0401   142C             
0402   142C 3A 83 01             ld a, (ENPSQ)
0403   142F 57                   ld d,a         
0404   1430                               
0405   1430 3A 35 13             ld a,(SQi)                  
0406   1433 C6 08                add a, 8
0407   1435 32 36 13             ld (SQt),a
0408   1438 01 08 00             ld bc,8         ;1-7 vert. try next sq forward        
0409   143B 09                   add hl, bc      ;new square-to
0410   143C                      
0411   143C CD E3 18             call IsEmpty
0412   143F 30 1B                jr nc, wpNoFWmoves
0413   1441 CD 3A 19             call AddMovPromo
0414   1444                      
0415   1444 3A 35 13             ld a, (SQi)
0416   1447 FE 10                cp 16          ;below row 3
0417   1449 30 11                jr nc, wpNoFWmoves
0418   144B C6 10                add a, 8+8
0419   144D 32 36 13             ld (SQt),a 
0420   1450 01 08 00             ld bc, 8        ;another (double) move
0421   1453 09                   add hl, bc      ;new square-to
0422   1454                      
0423   1454 CD E3 18             call IsEmpty
0424   1457 30 03                jr nc, wpNoFWmoves
0425   1459 CD 3F 19             call AddMove
0426   145C             
0427   145C             wpNoFWmoves:         
0428   145C FD E5                push iy
0429   145E E1                   pop hl    ; restore 
0430   145F                      
0431   145F 3E 01                ld a,1
0432   1461 32 37 19             ld (CaptPiece),a
0433   1464                      
0434   1464 3A 35 13             ld a, (SQi)
0435   1467 E6 07                and 7
0436   1469 FE 00                cp 0
0437   146B 28 21                jr z, wpTryCaptRight
0438   146D             
0439   146D 3A 35 13             ld a, (SQi)                  
0440   1470 C6 07                add a, 8-1 ; try capture left
0441   1472 32 36 13             ld (SQt),a
0442   1475 01 07 00             ld bc, 8-1
0443   1478 09                   add hl, bc
0444   1479             
0445   1479 CD 18 19             call IsBlack
0446   147C 30 05                jr nc, wpTryLeftEnPs
0447   147E                      
0448   147E CD 3A 19             call AddMovPromo
0449   1481 18 0B                jr wpTryCaptRight
0450   1483                      
0451   1483             wpTryLeftEnPs:              
0452   1483 3A 36 13             ld a,(SQt)
0453   1486 BA                   cp d
0454   1487 20 05                jr nz, wpTryCaptRight
0455   1489                                             
0456   1489 CD 3A 19             call AddMovPromo
0457   148C 18 00                jr wpTryCaptRight
0458   148E                                                                                            
0459   148E             wpTryCaptRight:
0460   148E FD E5                push iy
0461   1490 E1                   pop hl    ; restore 
0462   1491                      
0463   1491 3A 35 13             ld a, (SQi)
0464   1494 E6 07                and 7
0465   1496 FE 07                cp 7
0466   1498 28 21                jr z, wpMGend
0467   149A                               
0468   149A 3A 35 13             ld a, (SQi)
0469   149D C6 09                add a, 8+1 ; try capture right
0470   149F 32 36 13             ld (SQt),a
0471   14A2 01 09 00             ld bc, 8+1
0472   14A5 09                   add hl, bc
0473   14A6             
0474   14A6 CD 18 19             call IsBlack
0475   14A9 30 05                jr nc, wpTryRightEnPs
0476   14AB                      
0477   14AB CD 3A 19             call AddMovPromo
0478   14AE 18 0B                jr wpMGend
0479   14B0                      
0480   14B0             wpTryRightEnPs:              
0481   14B0 3A 36 13             ld a,(SQt)
0482   14B3 BA                   cp d
0483   14B4 20 05                jr nz, wpMGend
0484   14B6                                  
0485   14B6 CD 3A 19             call AddMovPromo
0486   14B9 18 00                jr wpMGend
0487   14BB                                                                                                                                                            
0488   14BB             wpMGend:
0489   14BB FD E5                push iy
0490   14BD E1                   pop hl    ; restore 
0491   14BE             
0492   14BE 3E 00                ld a,0
0493   14C0 32 38 19             ld (PromoPcId),a
0494   14C3                      
0495   14C3 D1                   pop de
0496   14C4 F1                   pop af
0497   14C5 C9                   ret
0498   14C6                  
0499   14C6             ;END
0500   14C6             
0501   14C6             ;BEGIN of ========== MOVE GEN for BLACK PAWN goes down
0502   14C6             
0503   14C6             MoveGenBPawn:
0504   14C6             
0505   14C6 F5                   push af
0506   14C7 D5                   push de
0507   14C8                      
0508   14C8 3E 00                ld a,0
0509   14CA 32 37 19             ld (CaptPiece),a
0510   14CD             
0511   14CD 3A 83 01             ld a, (ENPSQ)
0512   14D0 57                   ld d,a         
0513   14D1                               
0514   14D1 3A 35 13             ld a,(SQi)                  
0515   14D4 D6 08                sub 8
0516   14D6 32 36 13             ld (SQt),a
0517   14D9 37                   scf
0518   14DA 3F                   ccf
0519   14DB 01 08 00             ld bc,8         ;1-7 vert. try next sq forward        
0520   14DE ED 42                sbc hl, bc      ;new square-to
0521   14E0                      
0522   14E0 CD E3 18             call IsEmpty
0523   14E3 30 1E                jr nc, bpNoFWmoves
0524   14E5 CD 3A 19             call AddMovPromo
0525   14E8                      
0526   14E8 3A 35 13             ld a, (SQi)
0527   14EB FE 30                cp 48           ;above row 6
0528   14ED 38 14                jr c, bpNoFWmoves
0529   14EF D6 10                sub 8+8
0530   14F1 32 36 13             ld (SQt),a
0531   14F4 37                   scf
0532   14F5 3F                   ccf 
0533   14F6 01 08 00             ld bc, 8        ;another (double) move
0534   14F9 ED 42                sbc hl, bc      ;new square-to
0535   14FB                      
0536   14FB CD E3 18             call IsEmpty
0537   14FE 30 03                jr nc, bpNoFWmoves
0538   1500 CD 3F 19             call AddMove
0539   1503             
0540   1503             bpNoFWmoves:         
0541   1503 FD E5                push iy
0542   1505 E1                   pop hl    ; restore 
0543   1506                      
0544   1506 3E 01                ld a,1
0545   1508 32 37 19             ld (CaptPiece),a
0546   150B                      
0547   150B 3A 35 13             ld a, (SQi)
0548   150E E6 07                and 7
0549   1510 FE 07                cp 7
0550   1512 28 24                jr z, bpTryCaptRight
0551   1514             
0552   1514 3A 35 13             ld a, (SQi)                  
0553   1517 D6 07                sub 8-1 ; try capture left
0554   1519 32 36 13             ld (SQt),a
0555   151C 37                   scf
0556   151D 3F                   ccf
0557   151E 01 07 00             ld bc, 8-1
0558   1521 ED 42                sbc hl, bc
0559   1523             
0560   1523 CD F9 18             call IsWhite
0561   1526 30 05                jr nc, bpTryLeftEnPs
0562   1528                      
0563   1528 CD 3A 19             call AddMovPromo
0564   152B 18 0B                jr bpTryCaptRight
0565   152D                      
0566   152D             bpTryLeftEnPs:              
0567   152D 3A 36 13             ld a,(SQt)
0568   1530 BA                   cp d
0569   1531 20 05                jr nz, bpTryCaptRight
0570   1533                                             
0571   1533 CD 3A 19             call AddMovPromo
0572   1536 18 00                jr bpTryCaptRight
0573   1538                                                                                            
0574   1538             bpTryCaptRight:
0575   1538 FD E5                push iy
0576   153A E1                   pop hl    ; restore 
0577   153B                      
0578   153B 3A 35 13             ld a, (SQi)
0579   153E E6 07                and 7
0580   1540 FE 00                cp 0
0581   1542 28 24                jr z, bpMGend
0582   1544                               
0583   1544 3A 35 13             ld a, (SQi)
0584   1547 D6 09                sub 8+1 ; try capture right
0585   1549 32 36 13             ld (SQt),a
0586   154C 37                   scf
0587   154D 3F                   ccf
0588   154E 01 09 00             ld bc, 8+1
0589   1551 ED 42                sbc hl, bc
0590   1553             
0591   1553 CD F9 18             call IsWhite
0592   1556 30 05                jr nc, bpTryRightEnPs
0593   1558                      
0594   1558 CD 3A 19             call AddMovPromo      
0595   155B 18 0B                jr bpMGend
0596   155D                      
0597   155D             bpTryRightEnPs:              
0598   155D 3A 36 13             ld a,(SQt)
0599   1560 BA                   cp d
0600   1561 20 05                jr nz, bpMGend
0601   1563                                             
0602   1563 CD 3A 19             call AddMovPromo
0603   1566 18 00                jr bpMGend
0604   1568                                                                                                                                                            
0605   1568             bpMGend:
0606   1568 FD E5                push iy
0607   156A E1                   pop hl    ; restore 
0608   156B             
0609   156B 3E 00                ld a,0
0610   156D 32 38 19             ld (PromoPcId),a
0611   1570                      
0612   1570 D1                   pop de
0613   1571 F1                   pop af
0614   1572 C9                   ret
0615   1573                  
0616   1573             ;END
0617   1573             
0618   1573             
0619   1573             ;BEGIN of ========== MOVE GEN for ROOKS
0620   1573             
0621   1573 2B 01 3D 00 rookMoves: .byte '+',1,'=',0 ,'-',1,'=',0 ,'=',0,'+',1 ,'=',0,'-',1 ,
0621   1577 2D 01 3D 00 
0621   157B 3D 00 2B 01 
0621   157F 3D 00 2D 01 
0622   1583 00                     .byte 0
0623   1584                                       
0624   1584             MoveGenRook:
0625   1584             
0626   1584 F5                   push af
0627   1585 C5                   push bc
0628   1586 DD E5                push ix
0629   1588                      
0630   1588 CD EB 13             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
0631   158B                      
0632   158B DD 21 73 15          ld ix,rookMoves
0633   158F 06 04                ld b, 4
0634   1591                      
0635   1591             RookScan4directions:
0636   1591             
0637   1591 D5                   push de
0638   1592             RookLoop:
0639   1592 CD A9 15             call RookTryMove
0640   1595 FE 00                cp 0
0641   1597 28 F9                jr z,RookLoop
0642   1599 D1                   pop de
0643   159A                              
0644   159A DD 23                inc ix
0645   159C DD 23                inc ix
0646   159E DD 23                inc ix
0647   15A0 DD 23                inc ix
0648   15A2                      
0649   15A2 10 ED                djnz RookScan4directions
0650   15A4                    
0651   15A4 DD E1                pop ix
0652   15A6 C1                   pop bc
0653   15A7 F1                   pop af
0654   15A8 C9                   ret
0655   15A9                      
0656   15A9             ; try move to that direction
0657   15A9             RookTryMove:
0658   15A9             
0659   15A9 C5                   push bc
0660   15AA DD E5                push ix
0661   15AC                      
0662   15AC 3E 00                ld a,0
0663   15AE 32 37 19             ld (CaptPiece),a
0664   15B1                               
0665   15B1 DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,=0
0666   15B4 DD 23                inc ix
0667   15B6 FE 3D                cp '='
0668   15B8 28 16                jr z, RkZero1
0669   15BA FE 2D                cp '-'
0670   15BC 28 08                jr z, RkNegX      
0671   15BE 7A                   ld a,d
0672   15BF 3C                   inc a           ;a=direction +1 of X 
0673   15C0 FE 08                cp 8
0674   15C2 30 5F                jr nc, RkNo
0675   15C4 18 09                jr RkCanOk1  
0676   15C6             RkNegX:
0677   15C6 3E 00                ld a,0          ;a=direction -1 of X
0678   15C8 BA                   cp d
0679   15C9 38 02                jr c, RkCanSubtrX
0680   15CB 18 56                jr RkNo
0681   15CD             RkCanSubtrX:         
0682   15CD 7A                   ld a,d
0683   15CE 3D                   dec a 
0684   15CF             RkCanOk1:
0685   15CF 57                   ld d,a         
0686   15D0 DD 23       RkZero1: inc ix
0687   15D2                      
0688   15D2 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,=0
0689   15D5 DD 23                inc ix
0690   15D7 FE 3D                cp '='
0691   15D9 28 16                jr z, RkZero2        
0692   15DB FE 2D                cp '-'
0693   15DD 28 08                jr z, RkNegY
0694   15DF 7B                   ld a,e
0695   15E0 3C                   inc a          ;a=direction +1 of Y  
0696   15E1 FE 08                cp 8
0697   15E3 30 3E                jr nc, RkNo
0698   15E5 18 09                jr RkCanOk2   
0699   15E7             RkNegY:
0700   15E7 3E 00                ld a,0         ;a=direction -1 of Y
0701   15E9 BB                   cp e
0702   15EA 38 02                jr c, RkCanSubtrY
0703   15EC 18 35                jr RkNo
0704   15EE             RkCanSubtrY:         
0705   15EE 7B                   ld a, e
0706   15EF 3D                   dec a
0707   15F0             RkCanOk2:
0708   15F0 5F                   ld e,a
0709   15F1 DD 23       RkZero2: inc ix         
0710   15F3                      
0711   15F3 CD FC 13             call StoreSqToMove    ;new SQt,hl        
0712   15F6             
0713   15F6 3A 81 01             ld a, (SIDE)
0714   15F9 FE 01                cp 1
0715   15FB 28 0E                jr z,RkThisBlack
0716   15FD CD 18 19             call IsBlack           ; enemy?
0717   1600 38 17                jr c,RkCaptMove
0718   1602 CD F9 18             call IsWhite           ; our?
0719   1605 38 1C                jr c,RkNo
0720   1607 3E 00                ld a,0                 ; continue after to this direction
0721   1609 18 13                jr RkAdd        
0722   160B             RkThisBlack:         
0723   160B CD F9 18             call IsWhite           ; enemy?
0724   160E 38 09                jr c,RkCaptMove
0725   1610 CD 18 19             call IsBlack           ; our?                        
0726   1613 38 0E                jr c,RkNo
0727   1615 3E 00                ld a,0                 ; continue after to this direction
0728   1617 18 05                jr RkAdd
0729   1619             RkCaptMove:
0730   1619 3E 01                ld a,1
0731   161B 32 37 19             ld (CaptPiece),a       ; and stop to this direction  
0732   161E             RkAdd:
0733   161E CD 3F 19             call AddMove
0734   1621 18 02                jr RkOver        
0735   1623             
0736   1623 3E 01       RkNo:    ld a,1                 ; stop to this direction
0737   1625             
0738   1625             RkOver:
0739   1625 FD E5                push iy
0740   1627 E1                   pop hl
0741   1628                      
0742   1628 DD E1                pop ix
0743   162A C1                   pop bc
0744   162B C9                   ret 
0745   162C             
0746   162C             ;END
0747   162C             
0748   162C             
0749   162C             
0750   162C             ;BEGIN of ========== MOVE GEN for BISHOPS
0751   162C             
0752   162C 2B 01 2B 01 bishopMoves: .byte '+',1,'+',1 ,'+',1,'-',1 ,'-',1,'+',1 ,'-',1,'-',1 ,
0752   1630 2B 01 2D 01 
0752   1634 2D 01 2B 01 
0752   1638 2D 01 2D 01 
0753   163C 00                       .byte 0
0754   163D                                       
0755   163D             MoveGenBishop:
0756   163D             
0757   163D F5                   push af
0758   163E C5                   push bc
0759   163F DD E5                push ix
0760   1641                      
0761   1641 CD EB 13             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
0762   1644                      
0763   1644 DD 21 2C 16          ld ix,bishopMoves
0764   1648 06 04                ld b, 4
0765   164A                      
0766   164A             BishopScan4directions:
0767   164A             
0768   164A D5                   push de
0769   164B             BishopLoop:
0770   164B CD 62 16             call BishopTryMove
0771   164E FE 00                cp 0
0772   1650 28 F9                jr z,BishopLoop
0773   1652 D1                   pop de
0774   1653                              
0775   1653 DD 23                inc ix
0776   1655 DD 23                inc ix
0777   1657 DD 23                inc ix
0778   1659 DD 23                inc ix
0779   165B                      
0780   165B 10 ED                djnz BishopScan4directions
0781   165D                    
0782   165D DD E1                pop ix
0783   165F C1                   pop bc
0784   1660 F1                   pop af
0785   1661 C9                   ret
0786   1662                      
0787   1662             ; try move to that direction
0788   1662             BishopTryMove:
0789   1662             
0790   1662 C5                   push bc
0791   1663 DD E5                push ix
0792   1665                               
0793   1665 3E 00                ld a,0
0794   1667 32 37 19             ld (CaptPiece),a
0795   166A                      
0796   166A DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1
0797   166D DD 23                inc ix
0798   166F FE 2D                cp '-'
0799   1671 28 08                jr z, BsNegX      
0800   1673 7A                   ld a,d
0801   1674 3C                   inc a           ;a=direction +1 of X 
0802   1675 FE 08                cp 8
0803   1677 30 5B                jr nc, BsNo
0804   1679 18 09                jr BsCanOk1  
0805   167B             BsNegX:
0806   167B 3E 00                ld a,0          ;a=direction -1 of X
0807   167D BA                   cp d
0808   167E 38 02                jr c, BsCanSubtrX
0809   1680 18 52                jr BsNo
0810   1682             BsCanSubtrX:         
0811   1682 7A                   ld a,d
0812   1683 3D                   dec a 
0813   1684             BsCanOk1:
0814   1684 57                   ld d,a         
0815   1685 DD 23                inc ix
0816   1687                      
0817   1687 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1
0818   168A DD 23                inc ix
0819   168C FE 2D                cp '-'
0820   168E 28 08                jr z, BsNegY
0821   1690 7B                   ld a,e
0822   1691 3C                   inc a          ;a=direction +1 of Y  
0823   1692 FE 08                cp 8
0824   1694 30 3E                jr nc, BsNo
0825   1696 18 09                jr BsCanOk2   
0826   1698             BsNegY:
0827   1698 3E 00                ld a,0         ;a=direction -1 of Y
0828   169A BB                   cp e
0829   169B 38 02                jr c, BsCanSubtrY
0830   169D 18 35                jr BsNo
0831   169F             BsCanSubtrY:         
0832   169F 7B                   ld a, e
0833   16A0 3D                   dec a
0834   16A1             BsCanOk2:
0835   16A1 5F                   ld e,a
0836   16A2 DD 23                inc ix         
0837   16A4                      
0838   16A4 CD FC 13             call StoreSqToMove    ;new SQt,hl        
0839   16A7             
0840   16A7 3A 81 01             ld a, (SIDE)
0841   16AA FE 01                cp 1
0842   16AC 28 0E                jr z,BsThisBlack
0843   16AE CD 18 19             call IsBlack           ; enemy?
0844   16B1 38 17                jr c,BsCaptMove
0845   16B3 CD F9 18             call IsWhite           ; our?
0846   16B6 38 1C                jr c,BsNo
0847   16B8 3E 00                ld a,0                 ; continue after to this direction
0848   16BA 18 13                jr BsAdd        
0849   16BC             BsThisBlack:         
0850   16BC CD F9 18             call IsWhite           ; enemy?
0851   16BF 38 09                jr c,BsCaptMove
0852   16C1 CD 18 19             call IsBlack           ; our?                        
0853   16C4 38 0E                jr c,BsNo
0854   16C6 3E 00                ld a,0                 ; continue after to this direction
0855   16C8 18 05                jr BsAdd
0856   16CA             BsCaptMove:
0857   16CA 3E 01                ld a,1
0858   16CC 32 37 19             ld (CaptPiece),a       ; and stop to this direction  
0859   16CF             BsAdd:
0860   16CF CD 3F 19             call AddMove
0861   16D2 18 02                jr BsOver        
0862   16D4             
0863   16D4 3E 01       BsNo:    ld a,1                 ; stop to this direction
0864   16D6             
0865   16D6             BsOver:
0866   16D6 FD E5                push iy
0867   16D8 E1                   pop hl
0868   16D9                      
0869   16D9 DD E1                pop ix
0870   16DB C1                   pop bc
0871   16DC C9                   ret 
0872   16DD             
0873   16DD             ;END
0874   16DD             
0875   16DD             
0876   16DD             
0877   16DD             
0878   16DD             ;BEGIN of ========== MOVE GEN for KNIGHTS
0879   16DD             
0880   16DD 2B 01 2B 02 knightMoves: .byte '+',1,'+',2 ,'+',2,'+',1 ,'+',2,'-',1 ,'+',1,'-',2 ,
0880   16E1 2B 02 2B 01 
0880   16E5 2B 02 2D 01 
0880   16E9 2B 01 2D 02 
0881   16ED 2D 01 2D 02              .byte '-',1,'-',2 ,'-',2,'-',1 ,'-',2,'+',1 ,'-',1,'+',2 , 
0881   16F1 2D 02 2D 01 
0881   16F5 2D 02 2B 01 
0881   16F9 2D 01 2B 02 
0882   16FD 00                       .byte 0
0883   16FE                          
0884   16FE             
0885   16FE             MoveGenKnight:
0886   16FE             
0887   16FE F5                   push af
0888   16FF C5                   push bc
0889   1700 D5                   push de
0890   1701 DD E5                push ix
0891   1703                      
0892   1703 CD EB 13             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
0893   1706                      
0894   1706 DD 21 DD 16          ld ix, knightMoves
0895   170A 06 08                ld b, 8
0896   170C             KnightScan8moves:
0897   170C CD 1F 17             call KnightTryMove
0898   170F DD 23                inc ix
0899   1711 DD 23                inc ix
0900   1713 DD 23                inc ix
0901   1715 DD 23                inc ix
0902   1717 10 F3                djnz KnightScan8moves
0903   1719                    
0904   1719 DD E1                pop ix
0905   171B D1                   pop de
0906   171C C1                   pop bc
0907   171D F1                   pop af
0908   171E C9                   ret
0909   171F             
0910   171F             ; try move to that square
0911   171F             KnightTryMove:
0912   171F C5                   push bc
0913   1720 D5                   push de
0914   1721 DD E5                push ix
0915   1723                      
0916   1723 3E 00                ld a,0
0917   1725 32 37 19             ld (CaptPiece),a
0918   1728                      
0919   1728 DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,-2,+2
0920   172B DD 23                inc ix
0921   172D FE 2D                cp '-'
0922   172F 28 0A                jr z, KnNegX
0923   1731 DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of X      
0924   1734 82                   add a,d
0925   1735 FE 08                cp 8
0926   1737 30 5F                jr nc, KnNo
0927   1739 18 0D                jr KnCanOk1  
0928   173B             KnNegX:
0929   173B DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of X
0930   173E 3D                   dec a
0931   173F BA                   cp d
0932   1740 38 02                jr c, KnCanSubtrX
0933   1742 18 54                jr KnNo
0934   1744             KnCanSubtrX:         
0935   1744 7A                   ld a, d
0936   1745 DD 96 00             sub (ix)    
0937   1748             KnCanOk1:
0938   1748 57                   ld d,a         
0939   1749 DD 23                inc ix
0940   174B                      
0941   174B DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,-2,+2
0942   174E DD 23                inc ix
0943   1750 FE 2D                cp '-'
0944   1752 28 0A                jr z, KnNegY
0945   1754 DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of Y  
0946   1757 83                   add a,e
0947   1758 FE 08                cp 8
0948   175A 30 3C                jr nc, KnNo
0949   175C 18 0D                jr KnCanOk2   
0950   175E             KnNegY:
0951   175E DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of Y
0952   1761 3D                   dec a 
0953   1762 BB                   cp e
0954   1763 38 02                jr c, KnCanSubtrY
0955   1765 18 31                jr KnNo
0956   1767             KnCanSubtrY:         
0957   1767 7B                   ld a, e
0958   1768 DD 96 00             sub (ix)
0959   176B             KnCanOk2:
0960   176B 5F                   ld e, a
0961   176C DD 23                inc ix         
0962   176E                      
0963   176E CD FC 13             call StoreSqToMove    ;new SQt,hl        
0964   1771             
0965   1771 3A 81 01             ld a, (SIDE)
0966   1774 FE 01                cp 1
0967   1776 28 0C                jr z, KnThisBlack
0968   1778 CD 18 19             call IsBlack           ; enemy?
0969   177B 38 13                jr c,KnCaptMove
0970   177D CD F9 18             call IsWhite           ; our?
0971   1780 38 16                jr c,KnNo
0972   1782 18 11                jr KnAdd        
0973   1784             KnThisBlack:         
0974   1784 CD F9 18             call IsWhite           ; enemy?
0975   1787 38 07                jr c,KnCaptMove
0976   1789 CD 18 19             call IsBlack           ; our?                        
0977   178C 38 0A                jr c,KnNo
0978   178E 18 05                jr KnAdd
0979   1790             KnCaptMove:
0980   1790 3E 01                ld a,1
0981   1792 32 37 19             ld (CaptPiece),a           
0982   1795             KnAdd:
0983   1795 CD 3F 19             call AddMove         
0984   1798             
0985   1798             KnNo:
0986   1798 FD E5                push iy
0987   179A E1                   pop hl
0988   179B                      
0989   179B DD E1                pop ix
0990   179D D1                   pop de
0991   179E C1                   pop bc
0992   179F C9                   ret 
0993   17A0             
0994   17A0             ;END
0995   17A0             
0996   17A0             ;BEGIN of ========== MOVE GEN for KINGS
0997   17A0             
0998   17A0 2D 01 3D 00 kingMoves: .byte '-',1,'=',0 ,'-',1,'+',1 ,'=',0,'+',1 ,'+',1,'+',1 ,
0998   17A4 2D 01 2B 01 
0998   17A8 3D 00 2B 01 
0998   17AC 2B 01 2B 01 
0999   17B0 2B 01 3D 00            .byte '+',1,'=',0 ,'+',1,'-',1 ,'=',0,'-',1 ,'-',1,'-',1 ,
0999   17B4 2B 01 2D 01 
0999   17B8 3D 00 2D 01 
0999   17BC 2D 01 2D 01 
1000   17C0 00                     .byte 0
1001   17C1                                       
1002   17C1             MoveGenKing:
1003   17C1             
1004   17C1 F5                   push af
1005   17C2 C5                   push bc
1006   17C3 DD E5                push ix
1007   17C5                      
1008   17C5 CD EB 13             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
1009   17C8                      
1010   17C8 3E 04                ld a,4       ; on E?
1011   17CA BA                   cp d
1012   17CB 20 03                jr nz, CastleCantBe
1013   17CD CD 65 18             call CastleMOVES   ; add castling moves without check-verification
1014   17D0                      
1015   17D0             CastleCantBe:
1016   17D0                      
1017   17D0 DD 21 A0 17          ld ix,kingMoves
1018   17D4 06 08                ld b, 8
1019   17D6                      
1020   17D6             KingScan8moves:
1021   17D6 CD E8 17             call KingTryMove
1022   17D9 DD 23                inc ix
1023   17DB DD 23                inc ix
1024   17DD DD 23                inc ix
1025   17DF DD 23                inc ix
1026   17E1 10 F3                djnz KingScan8moves
1027   17E3                                    
1028   17E3 DD E1                pop ix
1029   17E5 C1                   pop bc
1030   17E6 F1                   pop af
1031   17E7 C9                   ret
1032   17E8                      
1033   17E8             ; try move to that square
1034   17E8             KingTryMove:
1035   17E8 C5                   push bc
1036   17E9 D5                   push de
1037   17EA DD E5                push ix
1038   17EC                      
1039   17EC 3E 00                ld a,0
1040   17EE 32 37 19             ld (CaptPiece),a
1041   17F1                               
1042   17F1 DD 7E 00             ld a, (ix)      ;given directions for a..h  -1,+1,=0
1043   17F4 DD 23                inc ix
1044   17F6 FE 3D                cp '='
1045   17F8 28 16                jr z, KgZero1
1046   17FA FE 2D                cp '-'
1047   17FC 28 08                jr z, KgNegX      
1048   17FE 7A                   ld a,d
1049   17FF 3C                   inc a           ;a=direction +1 of X 
1050   1800 FE 08                cp 8
1051   1802 30 59                jr nc, KgOver
1052   1804 18 09                jr KgCanOk1  
1053   1806             KgNegX:
1054   1806 3E 00                ld a,0          ;a=direction -1 of X
1055   1808 BA                   cp d
1056   1809 38 02                jr c, KgCanSubtrX
1057   180B 18 50                jr KgOver
1058   180D             KgCanSubtrX:         
1059   180D 7A                   ld a,d
1060   180E 3D                   dec a 
1061   180F             KgCanOk1:
1062   180F 57                   ld d,a         
1063   1810 DD 23       KgZero1: inc ix
1064   1812                      
1065   1812 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,=0
1066   1815 DD 23                inc ix
1067   1817 FE 3D                cp '='
1068   1819 28 16                jr z, KgZero2        
1069   181B FE 2D                cp '-'
1070   181D 28 08                jr z, KgNegY
1071   181F 7B                   ld a,e
1072   1820 3C                   inc a          ;a=direction +1 of Y  
1073   1821 FE 08                cp 8
1074   1823 30 38                jr nc, KgOver
1075   1825 18 09                jr KgCanOk2   
1076   1827             KgNegY:
1077   1827 3E 00                ld a,0         ;a=direction -1 of Y
1078   1829 BB                   cp e
1079   182A 38 02                jr c, KgCanSubtrY
1080   182C 18 2F                jr KgOver
1081   182E             KgCanSubtrY:         
1082   182E 7B                   ld a, e
1083   182F 3D                   dec a
1084   1830             KgCanOk2:
1085   1830 5F                   ld e,a
1086   1831 DD 23       KgZero2: inc ix         
1087   1833                      
1088   1833 CD FC 13             call StoreSqToMove    ;new SQt,hl        
1089   1836             
1090   1836 3A 81 01             ld a, (SIDE)
1091   1839 FE 01                cp 1
1092   183B 28 0C                jr z,KgThisBlack
1093   183D CD 18 19             call IsBlack           ; enemy?
1094   1840 38 13                jr c,KgCaptMove
1095   1842 CD F9 18             call IsWhite           ; our?
1096   1845 38 16                jr c,KgOver
1097   1847 18 11                jr KgAdd        
1098   1849             KgThisBlack:         
1099   1849 CD F9 18             call IsWhite           ; enemy?
1100   184C 38 07                jr c,KgCaptMove
1101   184E CD 18 19             call IsBlack           ; our?                        
1102   1851 38 0A                jr c,KgOver
1103   1853 18 05                jr KgAdd
1104   1855             KgCaptMove:
1105   1855 3E 01                ld a,1
1106   1857 32 37 19             ld (CaptPiece),a
1107   185A             KgAdd:
1108   185A CD 3F 19             call AddMove
1109   185D             KgOver:
1110   185D FD E5                push iy
1111   185F E1                   pop hl
1112   1860                      
1113   1860 DD E1                pop ix
1114   1862 D1                   pop de
1115   1863 C1                   pop bc
1116   1864 C9                   ret 
1117   1865             
1118   1865             ; Add castling moves to list
1119   1865             CastleMOVES:
1120   1865                                              
1121   1865 3E 00                ld a,0
1122   1867 32 37 19             ld (CaptPiece),a      
1123   186A 3E 01                ld a,1
1124   186C 32 39 19             ld (CastlMove),a
1125   186F                      
1126   186F 0E 01                ld c,1       ; directions 0-King side, 1-Queen side
1127   1871             CastleDirScan:       
1128   1871 3A 82 01             ld a, (CASTLES)
1129   1874 47                   ld b,a       ; b contains castlings flags
1130   1875 7B                   ld a,e
1131   1876 FE 07                cp 7         ; detect king
1132   1878 20 06                jr nz, CstlWhite
1133   187A CB 38                srl b        ; simply roll castling flags for black
1134   187C CB 38                srl b
1135   187E 18 04                jr CstlBegin
1136   1880             CstlWhite:
1137   1880 FE 00                cp 0
1138   1882 20 56                jr nz, CastleBrk    
1139   1884             CstlBegin:
1140   1884 D5                   push de
1141   1885 3E 00                ld a,0
1142   1887 B9                   cp c
1143   1888 28 22                jr z, CstlQside       
1144   188A 78                   ld a,b
1145   188B CB 47                bit 0,a
1146   188D 28 3F                jr z,CstlLoop
1147   188F             CstEmpty1:
1148   188F 14                   inc d
1149   1890 23                   inc hl
1150   1891 7A                   ld a,d
1151   1892 FE 07                cp 7
1152   1894 28 07                jr z, CstlGood1
1153   1896 CD E3 18             call IsEmpty
1154   1899 30 33                jr nc, CstlLoop
1155   189B 18 F2                jr CstEmpty1
1156   189D             CstlGood1:
1157   189D 15                   dec d              ; back h1->g1  or h8->g8
1158   189E 2B                   dec hl
1159   189F 3A 35 13             ld a,(SQi)
1160   18A2 3C                   inc a
1161   18A3 3C                   inc a
1162   18A4 32 36 13             ld (SQt),a
1163   18A7 CD 3F 19             call AddMove
1164   18AA 18 22                jr CstlLoop
1165   18AC             CstlQside:
1166   18AC 78                   ld a,b
1167   18AD CB 48                bit 1,b
1168   18AF 28 1D                jr z,CstlLoop
1169   18B1             CstEmpty2:          
1170   18B1 15                   dec d
1171   18B2 2B                   dec hl
1172   18B3 7A                   ld a,d
1173   18B4 FE 00                cp 0
1174   18B6 28 07                jr z, CstlGood2
1175   18B8 CD E3 18             call IsEmpty
1176   18BB 30 11                jr nc, CstlLoop
1177   18BD 18 F2                jr CstEmpty2
1178   18BF             CstlGood2:
1179   18BF 14                   inc d
1180   18C0 14                   inc d              ; back a1->c1  or a8->c8
1181   18C1 23                   inc hl
1182   18C2 23                   inc hl
1183   18C3 3A 35 13             ld a,(SQi)
1184   18C6 3D                   dec a
1185   18C7 3D                   dec a
1186   18C8 32 36 13             ld (SQt),a
1187   18CB CD 3F 19             call AddMove         
1188   18CE             CstlLoop:
1189   18CE D1                   pop de
1190   18CF 3E 00                ld a,0
1191   18D1 B9                   cp c
1192   18D2 28 06                jr z,CastleBrk
1193   18D4 0D                   dec c
1194   18D5                      
1195   18D5 FD E5                push iy
1196   18D7 E1                   pop hl   ; restore hl
1197   18D8                      
1198   18D8 18 97                jr CastleDirScan    ;Next direction
1199   18DA                      
1200   18DA             CastleBrk:         
1201   18DA FD E5                push iy
1202   18DC E1                   pop hl   ; restore hl
1203   18DD                      
1204   18DD 3E 00                ld a,0
1205   18DF 32 39 19             ld (CastlMove),a                    
1206   18E2             
1207   18E2 C9                   ret
1208   18E3             
1209   18E3             ;END
1210   18E3             
1211   18E3             ;BEGIN of ========== Is empty square?
1212   18E3             
1213   18E3             IsEmpty:
1214   18E3 7E                   ld a, (hl)
1215   18E4 FE 00                cp 0
1216   18E6 28 04                jr z, EmptySqIs
1217   18E8 37                   scf
1218   18E9 3F                   ccf
1219   18EA 18 01                jr EmptySqOver
1220   18EC             EmptySqIs:
1221   18EC 37                   scf
1222   18ED             EmptySqOver:
1223   18ED C9                   ret           
1224   18EE             ;END
1225   18EE             
1226   18EE             ;BEGIN of ========== Is square occupied?
1227   18EE             
1228   18EE             IsOccupied:
1229   18EE 7E                   ld a, (hl)
1230   18EF FE 00                cp 0
1231   18F1 28 04                jr z, OccupiedSqIs
1232   18F3 37                   scf
1233   18F4 3F                   ccf
1234   18F5 18 01                jr OccupiedSqOver
1235   18F7             OccupiedSqIs:
1236   18F7 37                   scf
1237   18F8             OccupiedSqOver:
1238   18F8 C9                   ret           
1239   18F9             ;END
1240   18F9             
1241   18F9             
1242   18F9             ;BEGIN of ========== Is piece white?
1243   18F9             
1244   18F9             IsWhite:
1245   18F9 7E                   ld a, (hl)
1246   18FA FE 50                cp 'P'
1247   18FC 28 18                jr z, WhitePcIs
1248   18FE FE 4E                cp 'N'
1249   1900 28 14                jr z, WhitePcIs
1250   1902 FE 42                cp 'B'
1251   1904 28 10                jr z, WhitePcIs
1252   1906 FE 52                cp 'R'
1253   1908 28 0C                jr z, WhitePcIs
1254   190A FE 51                cp 'Q'
1255   190C 28 08                jr z, WhitePcIs
1256   190E FE 4B                cp 'K'
1257   1910 28 04                jr z, WhitePcIs
1258   1912 37                   scf
1259   1913 3F                   ccf
1260   1914 18 01                jr WhitePcOver
1261   1916             WhitePcIs:
1262   1916 37                   scf
1263   1917             WhitePcOver:
1264   1917 C9                   ret    
1265   1918             
1266   1918             ;END
1267   1918             
1268   1918             ;BEGIN of ========== Is piece black?
1269   1918             
1270   1918             IsBlack:
1271   1918 7E                   ld a, (hl)
1272   1919 FE 70                cp 'p'
1273   191B 28 18                jr z, BlackPcIs
1274   191D FE 6E                cp 'n'
1275   191F 28 14                jr z, BlackPcIs
1276   1921 FE 62                cp 'b'
1277   1923 28 10                jr z, BlackPcIs
1278   1925 FE 72                cp 'r'
1279   1927 28 0C                jr z, BlackPcIs
1280   1929 FE 71                cp 'q'
1281   192B 28 08                jr z, BlackPcIs
1282   192D FE 6B                cp 'k'
1283   192F 28 04                jr z, BlackPcIs
1284   1931 37                   scf
1285   1932 3F                   ccf
1286   1933 18 01                jr BlackPcOver
1287   1935             BlackPcIs:
1288   1935 37                   scf
1289   1936             BlackPcOver:
1290   1936 C9                   ret    
1291   1937             
1292   1937             ;END
1293   1937             
1294   1937             ;BEGIN of ========== ADD NEW MOVE to the list with verification
1295   1937             
1296   1937             ;various flags
1297   1937 00          CaptPiece:  .byte 0
1298   1938 00          PromoPcId:  .byte 0
1299   1939 00          CastlMove:  .byte 0
1300   193A             
1301   193A             AddMovPromo:
1302   193A 3E 04                ld a,4
1303   193C 32 38 19             ld (PromoPcId),a        ; pawns may promote, so this counter is like promoted-piece-id of Q,R.B.N
1304   193F             AddMove:
1305   193F F5                   push af
1306   1940                      
1307   1940 CD D5 1D             call ValidateKingCheck  ; this verifies if king is attacked after movement, or can not castle
1308   1943 FE 00                cp 0
1309   1945 28 02                jr z,AddMLegal          ; if valid move
1310   1947                      
1311   1947 18 59                jr fAddMVover
1312   1949                      
1313   1949             AddMLegal:
1314   1949 3A 37 13             ld a, (MateDetect)
1315   194C FE 00                cp 0
1316   194E 28 07                jr z, AddMNormalCase
1317   1950                     
1318   1950 3E 02                ld a,2                  ; we found a legal move, so not checkmate
1319   1952 32 37 13             ld (MateDetect),a
1320   1955 18 4B                jr fAddMVover   
1321   1957                      
1322   1957             AddMNormalCase:         
1323   1957                               
1324   1957 C5                   push bc
1325   1958 DD E5                push ix
1326   195A DD 21 92 04          ld ix, NEXT_MVCNT
1327   195E DD 4E 00             ld c, (ix)     ;n
1328   1961 06 00                ld b, 0
1329   1963 DD 34 00             inc (ix)       ;n=n+1
1330   1966 DD 21 93 04          ld ix, NEXT_MOVES
1331   196A CB 21                sla c
1332   196C CB 21                sla c
1333   196E DD 09                add ix, bc     ;n*(piece,from,to,flags)
1334   1970 FD 7E 00             ld a, (iy)     ;piece
1335   1973 FE 61                cp 'a'
1336   1975 38 02                jr c, addMVupperAlready
1337   1977 D6 20                sub 32         ;to uppercase
1338   1979                      
1339   1979             addMVupperAlready:         
1340   1979 DD 77 00             ld (ix), a
1341   197C DD 23                inc ix
1342   197E                              
1343   197E 3A 35 13             ld a, (SQi)    ;from square
1344   1981 DD 77 00             ld (ix), a
1345   1984 DD 23                inc ix
1346   1986                              
1347   1986 3A 36 13             ld a, (SQt)    ;to square
1348   1989 DD 77 00             ld (ix), a
1349   198C DD 23                inc ix
1350   198E                      
1351   198E                      ; and add one byte for flags
1352   198E                      
1353   198E 3A 37 19             ld a, (CaptPiece)
1354   1991 47                   ld b, a                ; bit 0 - captured a piece
1355   1992             
1356   1992 3A 38 19             ld a, (PromoPcId)
1357   1995 FE 00                cp 0
1358   1997 28 25                jr z, addMVnoprom
1359   1999                               
1360   1999 3A 36 13             ld a, (SQt)    ;to
1361   199C FE 38                cp 64-8        ;row 8?
1362   199E 38 04                jr c, addMVq
1363   19A0 18 06                jr addMVpromos
1364   19A2                      
1365   19A2             fAddMVover:
1366   19A2 18 48                jr AddMVover 
1367   19A4                      
1368   19A4             addMVq:
1369   19A4 FE 08                cp 8           ;row 1?
1370   19A6 30 16                jr nc, addMVnoprom
1371   19A8             
1372   19A8             addMVpromos:         
1373   19A8 CB C8                set 1,b                ; bit 1 - promotion, bits 2,3 - promoted piece Nr. Q=3,R=2,B=1,N=0   
1374   19AA 3A 38 19             ld a, (PromoPcId)
1375   19AD 3D                   dec a
1376   19AE 32 38 19             ld (PromoPcId),a
1377   19B1 FE 00                cp 0
1378   19B3 28 03                jr z, addMVp2
1379   19B5                      
1380   19B5 CD 3F 19             call AddMove          ; promotion move for all other pieces, check detection lags here     
1381   19B8                      
1382   19B8             addMVp2:        
1383   19B8 CB 27                sla a
1384   19BA CB 27                sla a
1385   19BC B0                   or b
1386   19BD 47                   ld b,a       
1387   19BE                
1388   19BE             addMVnoprom:
1389   19BE 3A 39 19             ld a, (CastlMove)
1390   19C1 FE 00                cp 0
1391   19C3 28 02                jr z, addMVnoCastle
1392   19C5 CB E0                set 4,b                ; bit 4 - castling indicator
1393   19C7             addMVnoCastle:
1394   19C7             
1395   19C7 3A 37 19             ld a, (CaptPiece)
1396   19CA FE 00                cp 0
1397   19CC 28 10                jr z,addMVnoEP
1398   19CE 3A 83 01             ld a, (ENPSQ)
1399   19D1 FE FF                cp $ff
1400   19D3 28 09                jr z,addMVnoEP 
1401   19D5 4F                   ld c,a
1402   19D6 3A 36 13             ld a, (SQt)
1403   19D9 B9                   cp c
1404   19DA 20 02                jr nz,addMVnoEP
1405   19DC CB E8                set 5,b                ; bit 5 - en-passant capture
1406   19DE                                             ; bit 6 - later for check+ detection
1407   19DE                                             ; bit 7 - later for checkmate detection
1408   19DE             addMVnoEP:
1409   19DE                                                 
1410   19DE DD 70 00             ld (ix), b
1411   19E1 DD 23                inc ix
1412   19E3                      
1413   19E3 DD E1                pop ix
1414   19E5 C1                   pop bc        
1415   19E6                                                                                         
1416   19E6 CD 8A 21             call MakeMove         ; check+ detection action, with checkmate detection later
1417   19E9 CD 61 25             call UnMakeMove
1418   19EC                                      
1419   19EC             AddMVover:
1420   19EC F1                   pop af         
1421   19ED C9                   ret
1422   19EE             
1423   19EE             ;END
1424   19EE             
1425   19EE             
1426   19EE             ;BEGIN of ========== Composes notation string for output for current list of generated moves
1427   19EE             ;                   (last by MOVE GENs) 
1428   19EE             
1429   19EE             MovesToStr:
1430   19EE F5                   push af
1431   19EF C5                   push bc
1432   19F0 D5                   push de
1433   19F1 DD E5                push ix
1434   19F3                      
1435   19F3 11 86 01             ld de, NEXT_MVSTR
1436   19F6 DD 21 92 04          ld ix, NEXT_MVCNT
1437   19FA             
1438   19FA DD 46 00             ld b,(ix)
1439   19FD DD 21 93 04          ld ix, NEXT_MOVES
1440   1A01 78                   ld a, b
1441   1A02 FE 00                cp 0
1442   1A04 28 5B                jr z, MV2sEndSymb 
1443   1A06                      
1444   1A06             MV2sToLoop:
1445   1A06             
1446   1A06 DD 7E 00             ld a, (ix)   ; piece
1447   1A09 FE 50                cp 'P'
1448   1A0B 28 02                jr z, MV2sNoPieceNotate
1449   1A0D 12                   ld (de),a
1450   1A0E 13                   inc de
1451   1A0F             MV2sNoPieceNotate:
1452   1A0F DD 23                inc ix
1453   1A11                             
1454   1A11 CD B7 1A             call MC2getSQ   ; from square
1455   1A14 13                   inc de    
1456   1A15 13                   inc de
1457   1A16 CD B7 1A             call MC2getSQ   ; to square
1458   1A19 1B                   dec de    
1459   1A1A 1B                   dec de
1460   1A1B                                        
1461   1A1B DD 7E 00             ld a, (ix)    ; flags
1462   1A1E CB 67                bit 4,a
1463   1A20 28 05                jr z,MV2sNoCastle
1464   1A22 CD 98 1A             call MC2sCASTLEs   ; redraws castling 0-0 or 0-0-0      
1465   1A25 18 1B                jr MV2sNoProm    
1466   1A27             MV2sNoCastle:
1467   1A27 DD 7E 00             ld a, (ix)    ; flags again
1468   1A2A CB 47                bit 0,a
1469   1A2C 28 04                jr z, MV2sNoCapt
1470   1A2E 3E 78                ld a, 'x'
1471   1A30 18 02                jr MV2xTo
1472   1A32             MV2sNoCapt:
1473   1A32 3E 2D                ld a, '-'
1474   1A34             MV2xTo:         
1475   1A34 12                   ld (de),a
1476   1A35 13                   inc de        
1477   1A36 13                   inc de
1478   1A37 13                   inc de
1479   1A38                             
1480   1A38 DD 7E 00             ld a, (ix)    ; possibly promotion
1481   1A3B CB 4F                bit 1,a
1482   1A3D 28 03                jr z, MV2sNoProm
1483   1A3F                      
1484   1A3F CD 6E 1A             call MV2sPromotion ; add piece promotion text =Q..N 
1485   1A42             
1486   1A42             MV2sNoProm:
1487   1A42 DD 7E 00             ld a, (ix)    ; possibly check+
1488   1A45 CB 77                bit 6,a
1489   1A47 28 0F                jr z, MV2sNoCheck
1490   1A49                      
1491   1A49 DD 7E 00             ld a, (ix)    ; possibly checkmate
1492   1A4C CB 7F                bit 7,a
1493   1A4E 28 04                jr z, MV2sJustCheck
1494   1A50             
1495   1A50 3E 23                ld a, '#'
1496   1A52 18 02                jr MV2sCk1
1497   1A54                      
1498   1A54             MV2sJustCheck:         
1499   1A54 3E 2B                ld a, '+'
1500   1A56 12          MV2sCk1: ld (de),a        
1501   1A57 13                   inc de         
1502   1A58                      
1503   1A58             MV2sNoCheck:                     
1504   1A58 DD 23                inc ix
1505   1A5A                              
1506   1A5A 3E 2C                ld a, ','
1507   1A5C 12                   ld (de),a        
1508   1A5D 13                   inc de
1509   1A5E                      
1510   1A5E 10 A6                djnz MV2sToLoop
1511   1A60 1B                   dec de
1512   1A61                      
1513   1A61             MV2sEndSymb:         
1514   1A61 3E 24                ld a, '$'
1515   1A63 12                   ld (de),a         
1516   1A64 13                   inc de
1517   1A65 3E 00                ld a, 0
1518   1A67 12                   ld (de),a 
1519   1A68                              
1520   1A68 DD E1                pop ix
1521   1A6A D1                   pop de
1522   1A6B C1                   pop bc
1523   1A6C F1                   pop af
1524   1A6D C9                   ret
1525   1A6E             
1526   1A6E             MV2sPromotion:
1527   1A6E             
1528   1A6E 3E 3D                ld a, '='
1529   1A70 12                   ld (de),a
1530   1A71 13                   inc de
1531   1A72                               
1532   1A72 DD 7E 00             ld a, (ix)    ; which piece?
1533   1A75 CB 3F                srl a
1534   1A77 CB 3F                srl a
1535   1A79 E6 03                and 3         ; 0..3 piece Id
1536   1A7B FE 03                cp 3          ; Queen?
1537   1A7D 20 04                jr nz, MC2sNoQ
1538   1A7F 3E 51                ld a, 'Q'
1539   1A81 18 12                jr MC2sPrId         
1540   1A83 FE 02       MC2sNoQ: cp 2          ; Rook?
1541   1A85 20 04                jr nz, MC2sNoR
1542   1A87 3E 52                ld a, 'R'
1543   1A89 18 0A                jr MC2sPrId        
1544   1A8B FE 01       MC2sNoR: cp 1          ; Bishop?
1545   1A8D 20 04                jr nz, MC2sNoB
1546   1A8F 3E 42                ld a, 'B'
1547   1A91 18 02                jr MC2sPrId
1548   1A93 3E 4E       MC2sNoB: ld a, 'N'     ; Knight
1549   1A95             MC2sPrId:
1550   1A95 12                   ld (de),a
1551   1A96 13                   inc de
1552   1A97 C9                   ret
1553   1A98                       
1554   1A98             MC2sCASTLEs:           ; simply rewrites characters in buffer 
1555   1A98             
1556   1A98 13                   inc de
1557   1A99 1A                   ld a,(de)
1558   1A9A 1B                   dec de
1559   1A9B 1B                   dec de
1560   1A9C 1B                   dec de
1561   1A9D 1B                   dec de
1562   1A9E FE 63                cp 'c'
1563   1AA0 20 08                jr nz,MC2sShort       
1564   1AA2 3E 30                ld a, '0'     ; 0-0-0
1565   1AA4 12                   ld (de),a
1566   1AA5 13                   inc de
1567   1AA6 3E 2D                ld a, '-'
1568   1AA8 12                   ld (de),a
1569   1AA9 13                   inc de
1570   1AAA             MC2sShort:
1571   1AAA 3E 30                ld a, '0'     ; just 0-0 part
1572   1AAC 12                   ld (de),a
1573   1AAD 13                   inc de
1574   1AAE 3E 2D                ld a, '-'
1575   1AB0 12                   ld (de),a
1576   1AB1 13                   inc de
1577   1AB2 3E 30                ld a, '0'
1578   1AB4 12                   ld (de),a
1579   1AB5 13                   inc de                           
1580   1AB6             
1581   1AB6 C9                   ret
1582   1AB7             ; get square and store to text string
1583   1AB7             MC2getSQ:
1584   1AB7 DD 7E 00             ld a, (ix)
1585   1ABA E6 07                and 7
1586   1ABC C6 61                add a, 'a'
1587   1ABE 12                   ld (de),a        
1588   1ABF 13                   inc de
1589   1AC0 DD 7E 00             ld a, (ix)
1590   1AC3 CB 3F                srl a
1591   1AC5 CB 3F                srl a
1592   1AC7 CB 3F                srl a
1593   1AC9 C6 31                add a, '1'
1594   1ACB 12                   ld (de),a
1595   1ACC DD 23                inc ix
1596   1ACE C9                   ret
1597   1ACF             
1598   1ACF             ; printing of current legal moves to output
1599   1ACF             MovesOut:
1600   1ACF D5                   push de
1601   1AD0 11 86 01             ld de, NEXT_MVSTR
1602   1AD3 CD E9 38             call PrintString
1603   1AD6 D1                   pop de
1604   1AD7 C9                   ret
1605   1AD8             
1606   1AD8             ;END        
1607   1AD8             
1608   1AD8             ;BEGIN of ========== SET FEN position on BOARD and variables
1609   1AD8             ;
1610   1AD8             ; parameter: a-reg
1611   1AD8             ;  0 - set by using startFEN
1612   1AD8             ;  1 - set fen provided in IX register
1613   1AD8             ;
1614   1AD8             SetFEN:
1615   1AD8 F5                   push af
1616   1AD9 C5                   push bc
1617   1ADA D5                   push de
1618   1ADB E5                   push hl
1619   1ADC             
1620   1ADC FE 00                cp 0
1621   1ADE 28 05                jr z, SetFENstartpos
1622   1AE0 DD E5                push ix
1623   1AE2 D1                   pop de   ;de contains FEN address now
1624   1AE3 18 03                jr SetFENp
1625   1AE5             SetFENstartpos:         
1626   1AE5 11 07 01             ld de, startFEN
1627   1AE8 3E FF       SetFENp: ld a,$ff
1628   1AEA 32 84 01             ld (WKSQ),a
1629   1AED 32 85 01             ld (BKSQ),a
1630   1AF0 CD 1F 1D             call SetSqScan
1631   1AF3 CD 28 1D             call ScanSqNxt
1632   1AF6 06 40                ld b, 64
1633   1AF8             setBoardSquare:
1634   1AF8 1A                   ld a, (de)
1635   1AF9 13                   inc de
1636   1AFA FE 2F                cp '/'
1637   1AFC 28 FA                jr z, setBoardSquare
1638   1AFE 4F                   ld c, a
1639   1AFF FE 31                cp '1'
1640   1B01 38 16                jr c, notFenDigit  ;ifA<'1' then jump
1641   1B03 FE 39                cp '9'
1642   1B05 30 12                jr nc, notFenDigit ;ifA>='9' then jump
1643   1B07 D6 30                sub '0'
1644   1B09 4F                   ld c,a
1645   1B0A             setFenEmptyPiece:
1646   1B0A 36 00                ld (hl), 0
1647   1B0C CD 28 1D             call ScanSqNxt
1648   1B0F 0D                   dec c
1649   1B10 05                   dec b
1650   1B11 79                   ld a,c
1651   1B12 FE 00                cp 0
1652   1B14 20 F4                jr nz, setFenEmptyPiece
1653   1B16 04                   inc b
1654   1B17 18 1A                jr nextFenPiece
1655   1B19             notFenDigit:
1656   1B19 77                   ld (hl),a
1657   1B1A FE 4B                cp 'K'
1658   1B1C 20 07                jr nz, setFenNoWK
1659   1B1E CD 4E 1D             call GetScanSQ
1660   1B21 32 84 01             ld (WKSQ),a
1661   1B24 7E                   ld a,(hl)
1662   1B25             setFenNoWK:
1663   1B25 FE 6B                cp 'k'
1664   1B27 20 07                jr nz, setFenNoBK
1665   1B29 CD 4E 1D             call GetScanSQ
1666   1B2C 32 85 01             ld (BKSQ),a
1667   1B2F 7E                   ld a,(hl)
1668   1B30             setFenNoBK:         
1669   1B30 CD 28 1D             call ScanSqNxt
1670   1B33             nextFenPiece:
1671   1B33 10 C3                djnz setBoardSquare
1672   1B35                      
1673   1B35 13                   inc de                 ; detects which side to move
1674   1B36 1A                   ld a, (de)
1675   1B37 FE 77                cp 'w'
1676   1B39 20 04                jr nz,setFenBlackMv
1677   1B3B 3E 00                ld a,0
1678   1B3D 18 02                jr setFenCol2Mv
1679   1B3F             setFenBlackMv:
1680   1B3F 3E 01                ld a,1
1681   1B41             setFenCol2Mv:
1682   1B41 32 81 01             ld (SIDE),a
1683   1B44 13                   inc de
1684   1B45 13                   inc de
1685   1B46             
1686   1B46 06 00                ld b,0           
1687   1B48             setFenCastlings:
1688   1B48 1A                   ld a, (de)
1689   1B49 13                   inc de
1690   1B4A FE 20                cp ' '
1691   1B4C 28 24                jr z,setFenCsOver ; break loop
1692   1B4E              
1693   1B4E FE 2D                cp '-'
1694   1B50 28 1E                jr z,setFenCs     ; just skip
1695   1B52             
1696   1B52 FE 4B                cp 'K'
1697   1B54 20 04                jr nz,setFenC2
1698   1B56 CB C0                set 0,b
1699   1B58 18 16                jr setFenCs
1700   1B5A             setFenC2:
1701   1B5A FE 51                cp 'Q'
1702   1B5C 20 04                jr nz,setFenC3
1703   1B5E CB C8                set 1,b
1704   1B60 18 0E                jr setFenCs
1705   1B62             setFenC3:
1706   1B62 FE 6B                cp 'k'
1707   1B64 20 04                jr nz,setFenC4
1708   1B66 CB D0                set 2,b
1709   1B68 18 06                jr setFenCs
1710   1B6A             setFenC4:
1711   1B6A FE 71                cp 'q'
1712   1B6C 20 02                jr nz,setFenCs
1713   1B6E CB D8                set 3,b     
1714   1B70             setFenCs:
1715   1B70 18 D6                jr setFenCastlings ;just go next      
1716   1B72             setFenCsOver:
1717   1B72 78                   ld a,b
1718   1B73 32 82 01             ld (CASTLES),a
1719   1B76                      
1720   1B76 1A                   ld a, (de)           ; is en-passant square provided?
1721   1B77 13                   inc de
1722   1B78 FE 2D                cp '-'
1723   1B7A 28 10                jr z,setFenNoEnp     ; just skip
1724   1B7C D6 61                sub 'a'
1725   1B7E 47                   ld b,a         
1726   1B7F 1A                   ld a, (de)
1727   1B80 13                   inc de
1728   1B81 D6 31                sub '1'
1729   1B83 CB 27                sla a
1730   1B85 CB 27                sla a
1731   1B87 CB 27                sla a       
1732   1B89 B0                   or b                 ; reg-a = given en-passant square
1733   1B8A 18 02                jr setFenENPsq     
1734   1B8C             setFenNoEnp:
1735   1B8C 3E FF                ld a,$ff
1736   1B8E             setFenENPsq:
1737   1B8E 32 83 01             ld (ENPSQ),a         ; save en-passant square
1738   1B91             
1739   1B91 13                   inc de
1740   1B92 3E 00                ld a,0
1741   1B94 32 73 06             ld (MOVE_CNT),a
1742   1B97                                                                                                                                                                                                                
1743   1B97 E1                   pop hl
1744   1B98 D1                   pop de
1745   1B99 C1                   pop bc
1746   1B9A F1                   pop af
1747   1B9B C9                   ret
1748   1B9C             
1749   1B9C             ;END
1750   1B9C             
1751   1B9C             ;BEGIN of ========== GET FEN position from BOARD and variables
1752   1B9C             ;
1753   1B9C             ; parameter:  address in DE register for resulting string,
1754   1B9C             ;   ends with $, can be printed right after
1755   1B9C             ;
1756   1B9C             GetFEN:
1757   1B9C F5                   push af
1758   1B9D C5                   push bc
1759   1B9E D5                   push de
1760   1B9F E5                   push hl
1761   1BA0 DD E5                push ix
1762   1BA2                      
1763   1BA2 D5                   push de
1764   1BA3 DD E1                pop ix        ; ix = de
1765   1BA5                   
1766   1BA5 CD 1F 1D             call SetSqScan
1767   1BA8 06 40                ld b,64
1768   1BAA 16 00                ld d,0        ; current column
1769   1BAC             getBoardSquare:
1770   1BAC                               
1771   1BAC 7A                   ld a,d
1772   1BAD FE 08                cp 8           ; if slash for new line
1773   1BAF 20 09                jr nz,getBoNsl
1774   1BB1                      
1775   1BB1 3E 2F                ld a,'/'
1776   1BB3 DD 77 00             ld (ix),a
1777   1BB6 DD 23                inc ix
1778   1BB8 16 00                ld d,0
1779   1BBA             getBoNsl:
1780   1BBA CD 28 1D             call ScanSqNxt
1781   1BBD 7E                   ld a, (hl)
1782   1BBE             
1783   1BBE FE 00                cp 0
1784   1BC0 28 06                jr z,getBo0
1785   1BC2 FE 20                cp ' '
1786   1BC4 28 02                jr z,getBo0  ; if empty square or space
1787   1BC6 18 1E                jr getBoNo0
1788   1BC8             getBo0:         
1789   1BC8 7A                   ld a,d
1790   1BC9 FE 00                cp 0
1791   1BCB 20 04                jr nz,getBoC2
1792   1BCD 3E 31       getBo1:  ld a,'1'          ; first space
1793   1BCF 18 15                jr getBoNo0
1794   1BD1             getBoC2:
1795   1BD1 DD 2B                dec ix         
1796   1BD3 DD 7E 00             ld a,(ix)
1797   1BD6 DD 23                inc ix
1798   1BD8 D6 31                sub '1'
1799   1BDA 38 F1                jr c,getBo1         
1800   1BDC FE 08                cp 8
1801   1BDE 30 ED                jr nc,getBo1
1802   1BE0 DD 2B                dec ix         
1803   1BE2 DD 7E 00             ld a,(ix)
1804   1BE5 3C                   inc a            ; char+1 counter of empty squares
1805   1BE6             getBoNo0:
1806   1BE6 DD 77 00             ld (ix),a
1807   1BE9 DD 23                inc ix
1808   1BEB                      
1809   1BEB 14                   inc d
1810   1BEC 10 BE                djnz getBoardSquare  ; scan all 64 squares    
1811   1BEE                      
1812   1BEE CD 8D 1C             call getBo_      ; space
1813   1BF1                      
1814   1BF1 3A 81 01             ld a,(SIDE)      ; side to move
1815   1BF4 FE 00                cp 0
1816   1BF6 20 04                jr nz,getBoB
1817   1BF8 3E 77                ld a,'w'
1818   1BFA 18 02                jr getBoSd
1819   1BFC 3E 62       getBoB:  ld a,'b'
1820   1BFE DD 77 00    getBoSd: ld (ix),a
1821   1C01 DD 23                inc ix
1822   1C03                               
1823   1C03 CD 8D 1C             call getBo_
1824   1C06             
1825   1C06 3A 82 01             ld a,(CASTLES)
1826   1C09 47                   ld b,a
1827   1C0A E6 0F                and %00001111
1828   1C0C FE 00                cp 0
1829   1C0E 28 2E                jr z,getBoNoCst
1830   1C10 CB 40                bit 0,b
1831   1C12 28 07                jr z,getBnWK
1832   1C14 3E 4B                ld a,'K'
1833   1C16 DD 77 00             ld (ix),a
1834   1C19 DD 23                inc ix
1835   1C1B             getBnWK:  
1836   1C1B CB 48                bit 1,b
1837   1C1D 28 07                jr z,getBnWQ
1838   1C1F 3E 51                ld a,'Q'
1839   1C21 DD 77 00             ld (ix),a
1840   1C24 DD 23                inc ix
1841   1C26             getBnWQ:  
1842   1C26 CB 50                bit 2,b
1843   1C28 28 07                jr z,getBnBK
1844   1C2A 3E 6B                ld a,'k'
1845   1C2C DD 77 00             ld (ix),a
1846   1C2F DD 23                inc ix
1847   1C31             getBnBK:  
1848   1C31 CB 58                bit 3,b
1849   1C33 28 0C                jr z,getBoCsOver
1850   1C35 3E 71                ld a,'q'
1851   1C37 DD 77 00             ld (ix),a
1852   1C3A DD 23                inc ix         
1853   1C3C 18 03                jr getBoCsOver
1854   1C3E                               
1855   1C3E             getBoNoCst:
1856   1C3E CD 95 1C             call getBoM    ; sign - 
1857   1C41             getBoCsOver:
1858   1C41             
1859   1C41 CD 8D 1C             call getBo_
1860   1C44             
1861   1C44 3A 83 01             ld a,(ENPSQ)   ; add en-passant info
1862   1C47 FE FF                cp $ff
1863   1C49 28 1A                jr z,getBoNoEp
1864   1C4B 47                   ld b,a
1865   1C4C E6 07                and 7
1866   1C4E C6 61                add a,'a'
1867   1C50 DD 77 00             ld (ix),a
1868   1C53 DD 23                inc ix
1869   1C55 78                   ld a,b
1870   1C56 CB 3F                srl a
1871   1C58 CB 3F                srl a
1872   1C5A CB 3F                srl a
1873   1C5C C6 31                add a,'1'
1874   1C5E DD 77 00             ld (ix),a
1875   1C61 DD 23                inc ix
1876   1C63 18 03                jr getBoEpOver
1877   1C65             getBoNoEp:
1878   1C65 CD 95 1C             call getBoM    ; sign - 
1879   1C68             getBoEpOver:
1880   1C68 CD 8D 1C             call getBo_
1881   1C6B             
1882   1C6B 3E 30                ld a,'0'       ; ignore halfmoves
1883   1C6D DD 77 00             ld (ix),a
1884   1C70 DD 23                inc ix
1885   1C72                      
1886   1C72 CD 8D 1C             call getBo_
1887   1C75                      
1888   1C75 3A 73 06             ld a,(MOVE_CNT)
1889   1C78 CB 3F                srl a          ; =1+int(/2)
1890   1C7A C6 31                add a,'1'
1891   1C7C DD 77 00             ld (ix),a
1892   1C7F DD 23                inc ix
1893   1C81                      
1894   1C81 3E 24                ld a,'$'
1895   1C83 DD 77 00             ld (ix),a
1896   1C86                      
1897   1C86 DD E1                pop ix                                                                                                                                                                                           
1898   1C88 E1                   pop hl
1899   1C89 D1                   pop de
1900   1C8A C1                   pop bc
1901   1C8B F1                   pop af
1902   1C8C C9                   ret
1903   1C8D                      
1904   1C8D 3E 20       getBo_:  ld a,' '
1905   1C8F DD 77 00             ld (ix),a
1906   1C92 DD 23                inc ix
1907   1C94 C9                   ret         
1908   1C95 3E 2D       getBoM:  ld a,'-'
1909   1C97 DD 77 00             ld (ix),a
1910   1C9A DD 23                inc ix
1911   1C9C C9                   ret         
1912   1C9D                      
1913   1C9D             
1914   1C9D             ;END
1915   1C9D             
1916   1C9D             ;BEGIN of ========== BOARD printing out
1917   1C9D             
1918   1C9D             BoardOut:
1919   1C9D 2E 2E 2E 2E         .byte "........", 13, 10   ;output string
1919   1CA1 2E 2E 2E 2E 
1919   1CA5 0D 0A 
1920   1CA7 2E 2E 2E 2E         .byte "........", 13, 10
1920   1CAB 2E 2E 2E 2E 
1920   1CAF 0D 0A 
1921   1CB1 2E 2E 2E 2E         .byte "........", 13, 10
1921   1CB5 2E 2E 2E 2E 
1921   1CB9 0D 0A 
1922   1CBB 2E 2E 2E 2E         .byte "........", 13, 10
1922   1CBF 2E 2E 2E 2E 
1922   1CC3 0D 0A 
1923   1CC5 2E 2E 2E 2E         .byte "........", 13, 10
1923   1CC9 2E 2E 2E 2E 
1923   1CCD 0D 0A 
1924   1CCF 2E 2E 2E 2E         .byte "........", 13, 10
1924   1CD3 2E 2E 2E 2E 
1924   1CD7 0D 0A 
1925   1CD9 2E 2E 2E 2E         .byte "........", 13, 10
1925   1CDD 2E 2E 2E 2E 
1925   1CE1 0D 0A 
1926   1CE3 2E 2E 2E 2E         .byte "........", 13, 10
1926   1CE7 2E 2E 2E 2E 
1926   1CEB 0D 0A 
1927   1CED 24 00               .byte "$", 0   
1928   1CEF                     
1929   1CEF             printBOARD:
1930   1CEF F5                   push af
1931   1CF0 C5                   push bc
1932   1CF1 D5                   push de
1933   1CF2 E5                   push hl
1934   1CF3 06 08                ld b, 8
1935   1CF5 CD 1F 1D             call SetSqScan
1936   1CF8 11 9D 1C             ld de, BoardOut
1937   1CFB             printBoardLine:
1938   1CFB 0E 08                ld c, 8
1939   1CFD             printCharsInLine:         
1940   1CFD CD 28 1D             call ScanSqNxt
1941   1D00 7E                   ld a, (hl)
1942   1D01 FE 00                cp 0
1943   1D03 20 02                jr nz, printCh1
1944   1D05 3E 20                ld a, ' '            ; Empty square     
1945   1D07             printCh1:
1946   1D07 12                   ld (de), a
1947   1D08 13                   inc de
1948   1D09 0D                   dec c
1949   1D0A 79                   ld a,c
1950   1D0B FE 00                cp 0
1951   1D0D 20 EE                jr nz, printCharsInLine   ; 8x8
1952   1D0F 13                   inc de                    ; chr(13)+chr(10)
1953   1D10 13                   inc de
1954   1D11 10 E8                djnz printBoardLine
1955   1D13             
1956   1D13 11 9D 1C             ld de, BoardOut
1957   1D16 CD E9 38             call PrintString
1958   1D19             
1959   1D19 E1                   pop hl
1960   1D1A D1                   pop de
1961   1D1B C1                   pop bc
1962   1D1C F1                   pop af
1963   1D1D C9                   ret
1964   1D1E             ;END
1965   1D1E             
1966   1D1E             
1967   1D1E             ;BEGIN of ========== BOARD scanning A1,B1,...,H1,A2,B2...,H8
1968   1D1E             
1969   1D1E             ; board order on screen or FEN notation is A8,B8,...,H8,A7,B7.... H1
1970   1D1E             ; so we go to square 57 then scan to 63, then jump to 49 ... till last square is 7 
1971   1D1E             
1972   1D1E 00          ScanSqC:  .byte 0   ;counter 1..8, reg HL contains pointer to BOARD square 
1973   1D1F             
1974   1D1F             SetSqScan:
1975   1D1F 21 1E 1D             ld hl, ScanSqC
1976   1D22 36 00                ld (hl),0              ; +1 for first loop 
1977   1D24 21 77 01             ld hl, BOARD+64-8-1
1978   1D27 C9                   ret
1979   1D28             ScanSqNxt:
1980   1D28 F5                   push af         
1981   1D29 C5                   push bc
1982   1D2A DD E5                push ix
1983   1D2C DD 21 1E 1D          ld ix, ScanSqC
1984   1D30 DD 34 00             inc (ix)
1985   1D33 DD 7E 00             ld a,(ix)
1986   1D36 FE 09                cp 8+1
1987   1D38 28 06                jr z, ScanSqNxtRow
1988   1D3A 23                   inc hl                 ;just next square
1989   1D3B             retSqScan:         
1990   1D3B DD E1                pop ix
1991   1D3D C1                   pop bc
1992   1D3E F1                   pop af
1993   1D3F C9                   ret
1994   1D40             ScanSqNxtRow:
1995   1D40 3E 01                ld a,1
1996   1D42 DD 77 00             ld (ix),a
1997   1D45 01 0F 00             ld bc, 8+7           ;square of previous row, -7
1998   1D48 37                   scf
1999   1D49 3F                   ccf
2000   1D4A ED 42                sbc hl, bc           ;there is no sub oper., so we use sbc                          
2001   1D4C 18 ED                jr retSqScan
2002   1D4E             GetScanSQ:                   ; returns current square I
2003   1D4E C5                   push bc
2004   1D4F E5                   push hl
2005   1D50 01 40 01             ld bc, BOARD
2006   1D53 37                   scf
2007   1D54 3F                   ccf
2008   1D55 ED 42                sbc hl, bc          ; difference BOARD - hl-reg
2009   1D57                       
2010   1D57 E5                   push hl
2011   1D58 C1                   pop bc
2012   1D59 79                   ld a,c              ; will contain square Nr.
2013   1D5A E1                   pop hl
2014   1D5B C1                   pop bc
2015   1D5C C9                   ret
2016   1D5D             
2017   1D5D             ;END
2018   1D5D             
2019   1D5D             
2020   1D5D             ;BEGIN of ========== KING CHECK+ DETECTION
2021   1D5D             ;
2022   1D5D             ; on return a-reg 1-is check, 0-not check
2023   1D5D             ;
2024   1D5D 00          SQ_ck_i:      .byte 0   ; storing to restore later  
2025   1D5E 00          SQ_ck_t:      .byte 0
2026   1D5F 00          CastlMove_ck: .byte 0
2027   1D60 00          PromoPcId_ck: .byte 0
2028   1D61 00          CaptPiece_ck: .byte 0
2029   1D62             
2030   1D62             IsCheck:
2031   1D62 FD E5               push iy
2032   1D64 E5                  push hl
2033   1D65                     
2034   1D65 3A 39 19            ld a,(CastlMove)
2035   1D68 32 5F 1D            ld (CastlMove_ck),a
2036   1D6B 3A 38 19            ld a,(PromoPcId)
2037   1D6E 32 60 1D            ld (PromoPcId_ck),a
2038   1D71 3A 37 19            ld a,(CaptPiece)
2039   1D74 32 61 1D            ld (CaptPiece_ck),a
2040   1D77                             
2041   1D77 3E 00               ld a,0    
2042   1D79 32 39 19            ld (CastlMove),a
2043   1D7C 32 38 19            ld (PromoPcId),a
2044   1D7F 32 37 19            ld (CaptPiece),a 
2045   1D82                                   
2046   1D82 3A 35 13            ld a, (SQi)      ; save
2047   1D85 32 5D 1D            ld (SQ_ck_i),a
2048   1D88 3A 36 13            ld a, (SQt)
2049   1D8B 32 5E 1D            ld (SQ_ck_t),a
2050   1D8E 3A 81 01            ld a, (SIDE)
2051   1D91 FE 00               cp 0
2052   1D93 20 05               jr nz,IsCkBlack
2053   1D95 3A 84 01            ld a,(WKSQ)
2054   1D98 18 03               jr IsChSt
2055   1D9A             IsCkBlack:
2056   1D9A 3A 85 01            ld a,(BKSQ)        
2057   1D9D             IsChSt: 
2058   1D9D 32 36 13            ld (SQt),a      
2059   1DA0 32 35 13            ld (SQi),a
2060   1DA3 CD 54 22            call MM_hl        ; position hl to the square of king
2061   1DA6                                     
2062   1DA6 E5                  push hl
2063   1DA7 FD E1               pop iy            ; contains square of king
2064   1DA9                     
2065   1DA9 CD D5 1D            call ValidateKingCheck
2066   1DAC F5                  push af
2067   1DAD                     
2068   1DAD 3A 5D 1D            ld a, (SQ_ck_i)  ;restore
2069   1DB0 32 35 13            ld (SQi),a
2070   1DB3 3A 5E 1D            ld a, (SQ_ck_t)
2071   1DB6 32 36 13            ld (SQt),a
2072   1DB9                     
2073   1DB9 3A 5F 1D            ld a,(CastlMove_ck)
2074   1DBC 32 39 19            ld (CastlMove),a
2075   1DBF 3A 60 1D            ld a,(PromoPcId_ck)
2076   1DC2 32 38 19            ld (PromoPcId),a
2077   1DC5 3A 61 1D            ld a,(CaptPiece_ck)
2078   1DC8 32 37 19            ld (CaptPiece),a
2079   1DCB                     
2080   1DCB F1                  pop af
2081   1DCC                     
2082   1DCC E1                  pop hl
2083   1DCD FD E1               pop iy
2084   1DCF C9                  ret        
2085   1DD0                     
2086   1DD0             ;END
2087   1DD0             
2088   1DD0             
2089   1DD0             ;BEGIN of ========== VALIDATE KING CHECK
2090   1DD0             ;
2091   1DD0             ; Usually king validation is done by opposit movement generation with king capture detection.
2092   1DD0             ; As it takes long to try all moves, we better verify square-attackers.
2093   1DD0             ; This gives advantage that only really legal moves are in the list without further iterations.
2094   1DD0             ;
2095   1DD0             ; on return a=0 on valid move, 1-not valid
2096   1DD0             
2097   1DD0 00          SQ_i:     .byte 0   
2098   1DD1 00          SQ_t:     .byte 0
2099   1DD2 00          SQ1:      .byte 0   ;contains flag that this square is nearby (+-1 sq)
2100   1DD3 00          SQk:      .byte 0   ;king square after movement
2101   1DD4 00          SQc:      .byte 0   ;square for castle checking
2102   1DD5             
2103   1DD5                       
2104   1DD5             ValidateKingCheck:
2105   1DD5                                   
2106   1DD5 C5                   push bc
2107   1DD6 D5                   push de
2108   1DD7 E5                   push hl
2109   1DD8 DD E5                push ix
2110   1DDA                      
2111   1DDA FD E5                push iy
2112   1DDC E1                   pop hl              ;set back pointer to square of piece
2113   1DDD                      
2114   1DDD 3A 36 13             ld a,(SQt)          ;save values
2115   1DE0 32 D1 1D             ld (SQ_t),a
2116   1DE3 3A 35 13             ld a,(SQi)
2117   1DE6 32 D0 1D             ld (SQ_i),a
2118   1DE9                      
2119   1DE9 3A 35 13             ld a,(SQi)
2120   1DEC 47                   ld b,a
2121   1DED 3A 84 01             ld a,(WKSQ)
2122   1DF0 B8                   cp b
2123   1DF1 20 05                jr nz,V_notWKing
2124   1DF3 32 D3 1D             ld (SQk),a                                  
2125   1DF6 18 2B                jr V_ifCastl       ; castling of white king?
2126   1DF8             V_notWKing:
2127   1DF8 3A 85 01             ld a,(BKSQ)
2128   1DFB B8                   cp b
2129   1DFC 20 05                jr nz,V_notKing
2130   1DFE 32 D3 1D             ld (SQk),a
2131   1E01 18 20                jr V_ifCastl       ; castling of black king?
2132   1E03             V_notKing:
2133   1E03 3A 81 01             ld a,(SIDE)
2134   1E06 FE 00                cp 0
2135   1E08 20 08                jr nz, V_blackPc
2136   1E0A 3A 84 01             ld a,(WKSQ)
2137   1E0D 32 D3 1D             ld (SQk),a 
2138   1E10 18 06                jr V_Pc1
2139   1E12             V_blackPc:
2140   1E12 3A 85 01             ld a,(BKSQ)
2141   1E15 32 D3 1D             ld (SQk),a
2142   1E18 47          V_Pc1:   ld b,a
2143   1E19 CD 9B 1E             call V_hl_setpos   ; new position of hl at square of king
2144   1E1C CD BF 1E             call ValidateKSq   ; if check after movement to?        
2145   1E1F 30 64                jr nc,KgNotValid  
2146   1E21 18 5E                jr KgIsValid                  
2147   1E23             V_ifCastl:                         
2148   1E23 3A 39 19             ld a, (CastlMove)
2149   1E26 FE 00                cp 0
2150   1E28 28 4B                jr z, V_noCastl
2151   1E2A                      
2152   1E2A 78                   ld a,b
2153   1E2B 32 D4 1D             ld (SQc),a
2154   1E2E                                        ; castling, b-reg contains king position already
2155   1E2E CD BF 1E             call ValidateKSq  ; if check?
2156   1E31 30 52                jr nc,KgNotValid
2157   1E33             
2158   1E33 3A D4 1D             ld a,(SQc)
2159   1E36 47                   ld b,a                
2160   1E37 3A D1 1D             ld a,(SQ_t)
2161   1E3A B8                   cp b
2162   1E3B 38 1C                jr c, V_decWCstl
2163   1E3D                                        
2164   1E3D CD 4F 1E             call V_CstlInc
2165   1E40 CD BF 1E             call ValidateKSq  ; f1,f8 under check?
2166   1E43 30 40                jr nc,KgNotValid
2167   1E45                      
2168   1E45 CD 4F 1E             call V_CstlInc
2169   1E48 CD BF 1E             call ValidateKSq  ; g1,g8 under check?
2170   1E4B 30 38                jr nc,KgNotValid
2171   1E4D                      
2172   1E4D 18 32                jr KgIsValid
2173   1E4F                      
2174   1E4F             V_CstlInc:
2175   1E4F 3A D4 1D             ld a,(SQc)
2176   1E52 3C                   inc a
2177   1E53 32 D4 1D             ld (SQc),a
2178   1E56 47                   ld b,a
2179   1E57 23                   inc hl
2180   1E58 C9                   ret   
2181   1E59                               
2182   1E59             V_decWCstl:
2183   1E59 CD 6B 1E             call V_CstlDec
2184   1E5C CD BF 1E             call ValidateKSq  ; d1,d8 under check?
2185   1E5F 30 24                jr nc,KgNotValid
2186   1E61                      
2187   1E61 CD 6B 1E             call V_CstlDec
2188   1E64 CD BF 1E             call ValidateKSq  ; c1,c8 under check?
2189   1E67 30 1C                jr nc,KgNotValid
2190   1E69                      
2191   1E69 18 16                jr KgIsValid
2192   1E6B             
2193   1E6B             V_CstlDec:
2194   1E6B 3A D4 1D             ld a,(SQc)
2195   1E6E 3D                   dec a
2196   1E6F 32 D4 1D             ld (SQc),a
2197   1E72 47                   ld b,a
2198   1E73 2B                   dec hl
2199   1E74 C9                   ret 
2200   1E75                               
2201   1E75             V_noCastl:
2202   1E75 3A 36 13             ld a,(SQt)        ; move to under check?
2203   1E78 47                   ld b,a
2204   1E79 CD 9B 1E             call V_hl_setpos  ; new position of hl at square of king         
2205   1E7C CD BF 1E             call ValidateKSq
2206   1E7F 30 04                jr nc,KgNotValid                          
2207   1E81             
2208   1E81             KgIsValid:         
2209   1E81 3E 00                ld a,0
2210   1E83 18 02                jr KgVret         
2211   1E85             KgNotValid:
2212   1E85 3E 01                ld a,1
2213   1E87             KgVret:
2214   1E87             
2215   1E87 F5                   push af
2216   1E88 3A D1 1D             ld a,(SQ_t)          ;restore values
2217   1E8B 32 36 13             ld (SQt),a
2218   1E8E 3A D0 1D             ld a,(SQ_i)
2219   1E91 32 35 13             ld (SQi),a
2220   1E94 F1                   pop af
2221   1E95                      
2222   1E95 DD E1                pop ix
2223   1E97 E1                   pop hl
2224   1E98 D1                   pop de
2225   1E99 C1                   pop bc
2226   1E9A C9                   ret
2227   1E9B                                                                                                                                              
2228   1E9B             ; reposition of hl pointer to square, by calculation
2229   1E9B             V_hl_setpos:
2230   1E9B C5                   push bc
2231   1E9C 78                   ld a,b
2232   1E9D 32 35 13             ld (SQi),a
2233   1EA0                      
2234   1EA0 06 00                ld b,0
2235   1EA2 3A D0 1D             ld a,(SQ_i)
2236   1EA5 4F                   ld c,a
2237   1EA6 3A 35 13             ld a,(SQi)
2238   1EA9 91                   sub c
2239   1EAA 38 04                jr c, V_StDistNeg
2240   1EAC 4F                   ld c,a
2241   1EAD 09                   add hl,bc              ;new hl position sq-forward
2242   1EAE 18 0D                jr V_hl_rdy1
2243   1EB0             V_StDistNeg:
2244   1EB0 3A 35 13             ld a,(SQi)
2245   1EB3 4F                   ld c,a
2246   1EB4 3A D0 1D             ld a,(SQ_i)         
2247   1EB7 91                   sub c
2248   1EB8 4F                   ld c,a                         
2249   1EB9 37                   scf
2250   1EBA 3F                   ccf
2251   1EBB ED 42                sbc hl,bc              ;new hl position sq-backward
2252   1EBD             V_hl_rdy1:
2253   1EBD C1                   pop bc
2254   1EBE C9                   ret
2255   1EBF             
2256   1EBF             ; detect if given square (in b) is under attack of opponent
2257   1EBF               
2258   1EBF             ValidateKSq:
2259   1EBF                                               
2260   1EBF 78                   ld a,b
2261   1EC0 32 35 13             ld (SQi),a
2262   1EC3             
2263   1EC3 CD EB 13             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]  
2264   1EC6                                                                
2265   1EC6                      ; try to attack this square in SQi (threat comes from SQt)
2266   1EC6             
2267   1EC6                      ; diognals
2268   1EC6 DD 21 2C 16          ld ix,bishopMoves
2269   1ECA 06 04                ld b, 4
2270   1ECC                      
2271   1ECC             DiognalScan4directions:
2272   1ECC             
2273   1ECC D5                   push de
2274   1ECD 3E 01                ld a,1
2275   1ECF 32 D2 1D             ld (SQ1),a
2276   1ED2             DiognalLoop:
2277   1ED2 CD 27 1F             call DiognalAttacks
2278   1ED5 FE 00                cp 0
2279   1ED7 28 F9                jr z,DiognalLoop
2280   1ED9 D1                   pop de
2281   1EDA FE 02                cp 2
2282   1EDC 28 46                jr z,NotValidKgSq
2283   1EDE                                       
2284   1EDE DD 23                inc ix
2285   1EE0 DD 23                inc ix
2286   1EE2 DD 23                inc ix
2287   1EE4 DD 23                inc ix
2288   1EE6                      
2289   1EE6 10 E4                djnz DiognalScan4directions        
2290   1EE8                      
2291   1EE8                      ; horizontals and verticals       
2292   1EE8 DD 21 73 15          ld ix,rookMoves
2293   1EEC 06 04                ld b, 4
2294   1EEE                      
2295   1EEE             HorzVertScan4directions:
2296   1EEE             
2297   1EEE D5                   push de
2298   1EEF 3E 01                ld a,1
2299   1EF1 32 D2 1D             ld (SQ1),a
2300   1EF4             HorzVertLoop:
2301   1EF4 CD 44 20             call HorzVertAttacks
2302   1EF7 FE 00                cp 0
2303   1EF9 28 F9                jr z,HorzVertLoop
2304   1EFB D1                   pop de
2305   1EFC FE 02                cp 2
2306   1EFE 28 24                jr z,NotValidKgSq
2307   1F00                           
2308   1F00 DD 23                inc ix
2309   1F02 DD 23                inc ix
2310   1F04 DD 23                inc ix
2311   1F06 DD 23                inc ix
2312   1F08                      
2313   1F08 10 E4                djnz HorzVertScan4directions
2314   1F0A             
2315   1F0A                      ; knights       
2316   1F0A DD 21 DD 16          ld ix, knightMoves
2317   1F0E 06 08                ld b, 8
2318   1F10             VKnightScan8moves:
2319   1F10 CD 0A 21             call KnightAttacks
2320   1F13 FE 02                cp 2
2321   1F15 28 0D                jr z,NotValidKgSq
2322   1F17 DD 23                inc ix
2323   1F19 DD 23                inc ix
2324   1F1B DD 23                inc ix
2325   1F1D DD 23                inc ix
2326   1F1F 10 EF                djnz VKnightScan8moves
2327   1F21                      
2328   1F21             ValidKgSq:
2329   1F21 37                   scf
2330   1F22 18 02                jr ValidKgSqRet
2331   1F24             NotValidKgSq:
2332   1F24 37                   scf
2333   1F25 3F                   ccf
2334   1F26             ValidKgSqRet:
2335   1F26 C9                   ret
2336   1F27             
2337   1F27             
2338   1F27             ; look for diognal-attacks to that direction
2339   1F27             DiognalAttacks:
2340   1F27             
2341   1F27 C5                   push bc
2342   1F28 E5                   push hl
2343   1F29 DD E5                push ix
2344   1F2B                                       
2345   1F2B DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1
2346   1F2E DD 23                inc ix
2347   1F30 FE 2D                cp '-'
2348   1F32 28 08                jr z, V_BsNegX      
2349   1F34 7A                   ld a,d
2350   1F35 3C                   inc a           ;a=direction +1 of X 
2351   1F36 FE 08                cp 8
2352   1F38 30 66                jr nc, V_BsSt
2353   1F3A 18 09                jr V_BsCanOk1  
2354   1F3C             V_BsNegX:
2355   1F3C 3E 00                ld a,0          ;a=direction -1 of X
2356   1F3E BA                   cp d
2357   1F3F 38 02                jr c, V_BsCanSubtrX
2358   1F41 18 5D                jr V_BsSt
2359   1F43             V_BsCanSubtrX:         
2360   1F43 7A                   ld a,d
2361   1F44 3D                   dec a 
2362   1F45             V_BsCanOk1:
2363   1F45 57                   ld d,a         
2364   1F46 DD 23                inc ix
2365   1F48                      
2366   1F48 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1
2367   1F4B DD 23                inc ix
2368   1F4D FE 2D                cp '-'
2369   1F4F 28 08                jr z, V_BsNegY
2370   1F51 7B                   ld a,e
2371   1F52 3C                   inc a          ;a=direction +1 of Y  
2372   1F53 FE 08                cp 8
2373   1F55 30 49                jr nc, V_BsSt
2374   1F57 18 09                jr V_BsCanOk2   
2375   1F59             V_BsNegY:
2376   1F59 3E 00                ld a,0         ;a=direction -1 of Y
2377   1F5B BB                   cp e
2378   1F5C 38 02                jr c, V_BsCanSubtrY
2379   1F5E 18 40                jr V_BsSt
2380   1F60             V_BsCanSubtrY:         
2381   1F60 7B                   ld a, e
2382   1F61 3D                   dec a
2383   1F62             V_BsCanOk2:
2384   1F62 5F                   ld e,a
2385   1F63 DD 23                inc ix         
2386   1F65                      
2387   1F65 CD FC 13             call StoreSqToMove    ;new SQt,hl        
2388   1F68                      
2389   1F68 3A 36 13             ld a, (SQt)
2390   1F6B 47                   ld b,a
2391   1F6C 3A D0 1D             ld a, (SQ_i)
2392   1F6F B8                   cp b
2393   1F70 28 7B                jr z,V_cont           ; if piece is on that square then will be empty
2394   1F72 3A D1 1D             ld a, (SQ_t)
2395   1F75 B8                   cp b
2396   1F76 28 1E                jr z,V_IsThisK       ; if piece goes to that square
2397   1F78                                           ; then if piece is not king then
2398   1F78                                           ; our king is protected                             
2399   1F78 CD E3 18             call IsEmpty
2400   1F7B 38 70                jr c,V_cont       
2401   1F7D                      
2402   1F7D 3A 81 01             ld a, (SIDE)
2403   1F80 FE 01                cp 1
2404   1F82 28 6D                jr z,V_BsThisBlack
2405   1F84                      
2406   1F84             V_BsThisWhite:         
2407   1F84 CD 18 19             call IsBlack           ; enemy?
2408   1F87 30 56                jr nc,V_NoBlack
2409   1F89                      
2410   1F89 FE 6B                cp 'k'
2411   1F8B 20 18                jr nz, V_NoBK
2412   1F8D                      
2413   1F8D 3A D2 1D    V_Sq1:   ld a, (SQ1)            ; nearby square
2414   1F90 FE 01                cp 1
2415   1F92 20 0C                jr nz,V_BsSt
2416   1F94 18 45                jr V_dont              ; king or pawn beats 
2417   1F96                      
2418   1F96             V_IsThisK:                      ; king can not protect self
2419   1F96 3A D3 1D             ld a,(SQk)
2420   1F99 47                   ld b,a
2421   1F9A 3A D0 1D             ld a,(SQ_i)
2422   1F9D B8                   cp b
2423   1F9E 28 4D                jr z, V_cont           ; our king goes to this direction, continue
2424   1FA0                                             ; stop, our piece protects anyway
2425   1FA0             
2426   1FA0 3E 01       V_BsSt:  ld a,1                 ; stop to this direction, our piece protects king
2427   1FA2 C3 32 20             jp V_BsOver
2428   1FA5                       
2429   1FA5             V_NoBK:    
2430   1FA5 FE 62                cp 'b'
2431   1FA7 28 32                jr z, V_dont           ; bishop beats
2432   1FA9 FE 71                cp 'q'
2433   1FAB 28 2E                jr z, V_dont           ; queen beats
2434   1FAD FE 70                cp 'p'
2435   1FAF 20 EF                jr nz, V_BsSt          ; otherwise knight and cant beat
2436   1FB1                      
2437   1FB1 3A D3 1D             ld a,(SQk)
2438   1FB4 47                   ld b,a
2439   1FB5 3A D0 1D             ld a,(SQ_i)
2440   1FB8 B8                   cp b
2441   1FB9 28 14                jr z, V_KuBp           ; if our king goes under pawn attack?
2442   1FBB                      
2443   1FBB 3A 83 01             ld a,(ENPSQ)
2444   1FBE 47                   ld b,a
2445   1FBF 3A D1 1D             ld a,(SQ_t)
2446   1FC2 B8                   cp b
2447   1FC3 28 02                jr z,V_CapBep
2448   1FC5 18 08                jr V_KuBp
2449   1FC7                      
2450   1FC7             V_CapBep:                       ; we capture en-passant
2451   1FC7 3A 36 13             ld a,(SQt)
2452   1FCA C6 08                add a,8
2453   1FCC B8                   cp b
2454   1FCD 28 D1                jr z,V_BsSt            ; this is the pawn that did check+
2455   1FCF             
2456   1FCF             V_KuBp:         
2457   1FCF 3A 35 13             ld a,(SQi)             ; pawn direction verif. black pawn is above
2458   1FD2 47                   ld b,a
2459   1FD3 3A 36 13             ld a,(SQt)           
2460   1FD6 B8                   cp b
2461   1FD7 30 B4                jr nc,V_Sq1
2462   1FD9 18 C5                jr V_BsSt
2463   1FDB             
2464   1FDB 3E 02       V_dont:  ld a,2                 ; stop and not valid move, king in check+
2465   1FDD 18 53                jr V_BsOver 
2466   1FDF             V_NoBlack:
2467   1FDF CD F9 18             call IsWhite           ; our?
2468   1FE2 38 BC                jr c,V_BsSt
2469   1FE4 18 07                jr V_cont
2470   1FE6             V_NoWhite:
2471   1FE6 CD 18 19             call IsBlack           ; our?
2472   1FE9 38 B5                jr c,V_BsSt
2473   1FEB 18 00                jr V_cont
2474   1FED             V_cont:         
2475   1FED 3E 00                ld a,0                 ; continue after to this direction
2476   1FEF 18 41                jr V_BsOver
2477   1FF1                              
2478   1FF1             V_BsThisBlack:         
2479   1FF1 CD F9 18             call IsWhite           ; enemy?
2480   1FF4 30 F0                jr nc, V_NoWhite
2481   1FF6             
2482   1FF6 FE 4B                cp 'K'
2483   1FF8 20 02                jr nz, V_NoWK
2484   1FFA 18 91                jr V_Sq1
2485   1FFC             V_NoWK:    
2486   1FFC FE 42                cp 'B'
2487   1FFE 28 DB                jr z, V_dont           ; bishop beats
2488   2000 FE 51                cp 'Q'
2489   2002 28 D7                jr z, V_dont           ; queen beats
2490   2004 FE 50                cp 'P'
2491   2006 20 98                jr nz, V_BsSt          ; otherwise knight and cant beat
2492   2008                      
2493   2008 3A D3 1D             ld a,(SQk)
2494   200B 47                   ld b,a
2495   200C 3A D0 1D             ld a,(SQ_i)
2496   200F B8                   cp b
2497   2010 28 14                jr z, V_KuWp           ; if our king goes under pawn attack?
2498   2012                      
2499   2012 3A 83 01             ld a,(ENPSQ)
2500   2015 47                   ld b,a
2501   2016 3A D1 1D             ld a,(SQ_t)
2502   2019 B8                   cp b
2503   201A 28 02                jr z,V_CapWep
2504   201C 18 08                jr V_KuWp
2505   201E                      
2506   201E             V_CapWep:                       ; we capture en-passant
2507   201E 3A 36 13             ld a,(SQt)
2508   2021 D6 08                sub 8
2509   2023 B8                   cp b
2510   2024 28 1B                jr z,V_BsSt_f          ; this is the pawn that did check+
2511   2026             
2512   2026             V_KuWp:
2513   2026                      
2514   2026 3A 35 13             ld a,(SQi)             ; pawn direction verif. white pawn is below
2515   2029 47                   ld b,a
2516   202A 3A 36 13             ld a,(SQt)           
2517   202D B8                   cp b
2518   202E 38 0E                jr c,V_Sq1_f
2519   2030 18 0F                jr V_BsSt_f
2520   2032                    
2521   2032             V_BsOver:
2522   2032             
2523   2032 F5                   push af
2524   2033 3E 00                ld a,0
2525   2035 32 D2 1D             ld (SQ1),a      ;next square will be not nearby in that direction anyway
2526   2038 F1                   pop af
2527   2039                      
2528   2039 DD E1                pop ix
2529   203B E1                   pop hl
2530   203C C1                   pop bc
2531   203D C9                   ret
2532   203E                       
2533   203E C3 8D 1F    V_Sq1_f:    jp V_Sq1
2534   2041 C3 A0 1F    V_BsSt_f:   jp V_BsSt
2535   2044             
2536   2044             ; look for horizontal-vertical-attacks to that direction
2537   2044             HorzVertAttacks:
2538   2044             
2539   2044 C5                   push bc
2540   2045 E5                   push hl
2541   2046 DD E5                push ix
2542   2048                               
2543   2048 DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,=0
2544   204B DD 23                inc ix
2545   204D FE 3D                cp '='
2546   204F 28 16                jr z, V_RkZero1
2547   2051 FE 2D                cp '-'
2548   2053 28 08                jr z, V_RkNegX      
2549   2055 7A                   ld a,d
2550   2056 3C                   inc a           ;a=direction +1 of X 
2551   2057 FE 08                cp 8
2552   2059 30 66                jr nc, V_RkSt
2553   205B 18 09                jr V_RkCanOk1  
2554   205D             V_RkNegX:
2555   205D 3E 00                ld a,0          ;a=direction -1 of X
2556   205F BA                   cp d
2557   2060 38 02                jr c, V_RkCanSubtrX
2558   2062 18 5D                jr V_RkSt
2559   2064             V_RkCanSubtrX:         
2560   2064 7A                   ld a,d
2561   2065 3D                   dec a 
2562   2066             V_RkCanOk1:
2563   2066 57                   ld d,a         
2564   2067             V_RkZero1:
2565   2067 DD 23                inc ix 
2566   2069 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,=0
2567   206C DD 23                inc ix
2568   206E FE 3D                cp '='
2569   2070 28 16                jr z, V_RkZero2        
2570   2072 FE 2D                cp '-'
2571   2074 28 08                jr z, V_RkNegY
2572   2076 7B                   ld a,e
2573   2077 3C                   inc a          ;a=direction +1 of Y  
2574   2078 FE 08                cp 8
2575   207A 30 45                jr nc, V_RkSt
2576   207C 18 09                jr V_RkCanOk2   
2577   207E             V_RkNegY:
2578   207E 3E 00                ld a,0         ;a=direction -1 of Y
2579   2080 BB                   cp e
2580   2081 38 02                jr c, V_RkCanSubtrY
2581   2083 18 3C                jr V_RkSt
2582   2085             V_RkCanSubtrY:         
2583   2085 7B                   ld a, e
2584   2086 3D                   dec a
2585   2087             V_RkCanOk2:
2586   2087 5F                   ld e,a
2587   2088             V_RkZero2:
2588   2088 DD 23                inc ix         
2589   208A                      
2590   208A CD FC 13             call StoreSqToMove    ;new SQt,hl
2591   208D                             
2592   208D 3A 36 13             ld a, (SQt)
2593   2090 47                   ld b,a
2594   2091 3A D0 1D             ld a, (SQ_i)
2595   2094 B8                   cp b
2596   2095 28 26                jr z,V_Rkcont           ; if piece is on that square then will be empty
2597   2097 3A D1 1D             ld a, (SQ_t)
2598   209A B8                   cp b
2599   209B 28 28                jr z,V_RkIsThisK       ; if piece goes to that square
2600   209D                                             ; then if piece is not king then
2601   209D                                             ; our king is protected
2602   209D CD E3 18             call IsEmpty
2603   20A0 38 1B                jr c,V_Rkcont
2604   20A2                      
2605   20A2 3A 81 01             ld a, (SIDE)
2606   20A5 FE 01                cp 1
2607   20A7 28 40                jr z,V_RkThisBlack
2608   20A9                      
2609   20A9             V_RkThisWhite:         
2610   20A9 CD 18 19             call IsBlack           ; enemy?
2611   20AC 30 2D                jr nc,V_RkNoBlack
2612   20AE                      
2613   20AE FE 6B                cp 'k'
2614   20B0 20 1F                jr nz, V_RkNoBK
2615   20B2                      
2616   20B2 3A D2 1D    V_RkSq1: ld a, (SQ1)            ; nearby square
2617   20B5 FE 01                cp 1
2618   20B7 20 08                jr nz,V_RkSt
2619   20B9                      ;otherwise king beats our king
2620   20B9                      
2621   20B9             V_Rkdont:
2622   20B9 3E 02                ld a,2                 ; stop and not valid move, king in check+
2623   20BB 18 41                jr V_RkOver
2624   20BD             V_Rkcont:         
2625   20BD 3E 00                ld a,0                 ; continue after to this direction
2626   20BF 18 3D                jr V_RkOver
2627   20C1                      
2628   20C1 3E 01       V_RkSt:  ld a,1                 ; stop to this direction, our piece protects king
2629   20C3 18 39                jr V_RkOver
2630   20C5                                
2631   20C5             V_RkIsThisK:                    ; king can not protect itself
2632   20C5 3A D3 1D             ld a,(SQk)
2633   20C8 47                   ld b,a
2634   20C9 3A D0 1D             ld a,(SQ_i)
2635   20CC B8                   cp b
2636   20CD 28 EE                jr z, V_Rkcont         ; our king goes to this direction, continue
2637   20CF                                             ; stop, our piece protects anyway
2638   20CF 18 F0                jr V_RkSt                       
2639   20D1                       
2640   20D1             V_RkNoBK:    
2641   20D1 FE 72                cp 'r'
2642   20D3 28 E4                jr z, V_Rkdont           ; rook beats
2643   20D5 FE 71                cp 'q'
2644   20D7 28 E0                jr z, V_Rkdont           ; queen beats
2645   20D9 18 E6                jr V_RkSt                ; otherwise can not beat
2646   20DB             V_RkNoBlack:
2647   20DB CD F9 18             call IsWhite           ; our?
2648   20DE 38 E1                jr c,V_RkSt
2649   20E0 18 DB                jr V_Rkcont
2650   20E2             V_RkNoWhite:
2651   20E2 CD 18 19             call IsBlack           ; our?
2652   20E5 38 DA                jr c,V_RkSt
2653   20E7 18 D4                jr V_Rkcont                 
2654   20E9             V_RkThisBlack:         
2655   20E9 CD F9 18             call IsWhite           ; enemy?
2656   20EC 30 F4                jr nc,V_RkNoWhite
2657   20EE             
2658   20EE FE 4B                cp 'K'
2659   20F0 20 02                jr nz, V_RkNoWK
2660   20F2 18 BE                jr V_RkSq1
2661   20F4             V_RkNoWK:    
2662   20F4 FE 52                cp 'R'
2663   20F6 28 C1                jr z, V_Rkdont           ; rook beats
2664   20F8 FE 51                cp 'Q'
2665   20FA 28 BD                jr z, V_Rkdont           ; queen beats
2666   20FC 18 C3                jr V_RkSt                ; otherwise can not beat  
2667   20FE             
2668   20FE             V_RkOver:
2669   20FE F5                   push af
2670   20FF 3E 00                ld a,0
2671   2101 32 D2 1D             ld (SQ1),a      ;next square will be not nearby in that direction anyway
2672   2104 F1                   pop af
2673   2105                      
2674   2105 DD E1                pop ix
2675   2107 E1                   pop hl
2676   2108 C1                   pop bc
2677   2109 C9                   ret 
2678   210A             
2679   210A             ; look for knight-attack
2680   210A             KnightAttacks:
2681   210A C5                   push bc
2682   210B D5                   push de
2683   210C E5                   push hl
2684   210D DD E5                push ix
2685   210F                              
2686   210F DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,-2,+2
2687   2112 DD 23                inc ix
2688   2114 FE 2D                cp '-'
2689   2116 28 0A                jr z, V_KnNegX
2690   2118 DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of X      
2691   211B 82                   add a,d
2692   211C FE 08                cp 8
2693   211E 30 62                jr nc, V_KnNo
2694   2120 18 0D                jr V_KnCanOk1  
2695   2122             V_KnNegX:
2696   2122 DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of X
2697   2125 3D                   dec a
2698   2126 BA                   cp d
2699   2127 38 02                jr c, V_KnCanSubtrX
2700   2129 18 57                jr V_KnNo
2701   212B             V_KnCanSubtrX:         
2702   212B 7A                   ld a, d
2703   212C DD 96 00             sub (ix)    
2704   212F             V_KnCanOk1:
2705   212F 57                   ld d,a         
2706   2130 DD 23                inc ix
2707   2132                      
2708   2132 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,-2,+2
2709   2135 DD 23                inc ix
2710   2137 FE 2D                cp '-'
2711   2139 28 0A                jr z, V_KnNegY
2712   213B DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of Y  
2713   213E 83                   add a,e
2714   213F FE 08                cp 8
2715   2141 30 3F                jr nc, V_KnNo
2716   2143 18 0D                jr V_KnCanOk2   
2717   2145             V_KnNegY:
2718   2145 DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of Y
2719   2148 3D                   dec a 
2720   2149 BB                   cp e
2721   214A 38 02                jr c, V_KnCanSubtrY
2722   214C 18 34                jr V_KnNo
2723   214E             V_KnCanSubtrY:         
2724   214E 7B                   ld a, e
2725   214F DD 96 00             sub (ix)
2726   2152             V_KnCanOk2:
2727   2152 5F                   ld e, a
2728   2153 DD 23                inc ix         
2729   2155                      
2730   2155 CD FC 13             call StoreSqToMove    ;new SQt,hl
2731   2158                             
2732   2158 CD E3 18             call IsEmpty
2733   215B 38 25                jr c,V_KnNo
2734   215D                      
2735   215D 3A 36 13             ld a, (SQt)
2736   2160 47                   ld b,a
2737   2161 3A D1 1D             ld a, (SQ_t)
2738   2164 B8                   cp b
2739   2165 20 02                jr nz, V_KnIsKn
2740   2167 18 19                jr V_KnNo              ; we beat this piece
2741   2169             
2742   2169             V_KnIsKn:         
2743   2169 3A 81 01             ld a, (SIDE)
2744   216C FE 01                cp 1
2745   216E 28 07                jr z, V_KnThisKingBlack
2746   2170             V_KnThisKingWhite:         
2747   2170 7E                   ld a,(hl)
2748   2171 FE 6E                cp 'n'                 ; knight?
2749   2173 28 09                jr z,V_Kndont
2750   2175 18 0B                jr V_KnNo              ; otherwise our
2751   2177             V_KnThisKingBlack:         
2752   2177 7E                   ld a,(hl)
2753   2178 FE 4E                cp 'N'                 ; knight?
2754   217A 28 02                jr z,V_Kndont
2755   217C 18 04                jr V_KnNo              ; otherwise our    
2756   217E             V_Kndont:
2757   217E 3E 02                ld a,2                 ; not valid move, king in check+
2758   2180 18 02                jr V_KnOver
2759   2182             V_KnNo:         
2760   2182 3E 00                ld a,0                 ; not attacked
2761   2184             V_KnOver:
2762   2184 DD E1                pop ix
2763   2186 E1                   pop hl
2764   2187 D1                   pop de
2765   2188 C1                   pop bc
2766   2189 C9                   ret 
2767   218A             ;END
2768   218A             
2769   218A             
2770   218A             ;BEGIN of ========== MAKE MOVE
2771   218A             ;
2772   218A             ; Make move on BOARD
2773   218A             ; SQi - from square
2774   218A             ; SQt - to square
2775   218A             ; PromoPcId - id of piece to promote = 4-queen,3-rook,2-bishop,1-knight, 0-no promotion
2776   218A             ;
2777   218A             
2778   218A             MakeMove:
2779   218A             
2780   218A F5                   push af
2781   218B C5                   push bc
2782   218C D5                   push de
2783   218D E5                   push hl
2784   218E DD E5                push ix
2785   2190 FD E5                push iy
2786   2192                      
2787   2192 DD 21 92 04          ld ix, NEXT_MVCNT
2788   2196 DD 46 00             ld b,(ix)
2789   2199 DD 21 93 04          ld ix, NEXT_MOVES
2790   219D 78                   ld a, b
2791   219E FE 00                cp 0
2792   21A0 20 02                jr nz, MKMthereAre
2793   21A2             
2794   21A2 18 75                jr fMKMEnd
2795   21A4                      
2796   21A4             MKMthereAre: 
2797   21A4 1E 00                ld e,0       ; flag that found
2798   21A6             
2799   21A6             MKMToLoop:
2800   21A6 C5                   push bc
2801   21A7 DD E5                push ix
2802   21A9             
2803   21A9 DD 7E 00             ld a, (ix)   ; notated piece
2804   21AC 57                   ld d,a
2805   21AD DD 23                inc ix
2806   21AF             
2807   21AF 3A 35 13             ld a, (SQi)
2808   21B2 47                   ld b,a
2809   21B3 DD 7E 00             ld a, (ix)   ; from square
2810   21B6 B8                   cp b
2811   21B7 20 7B                jr nz, MKMnotMV
2812   21B9                      
2813   21B9 DD 23                inc ix            
2814   21BB 3A 36 13             ld a, (SQt)
2815   21BE 4F                   ld c,a
2816   21BF DD 7E 00             ld a, (ix)   ; to square
2817   21C2 B9                   cp c
2818   21C3 20 6F                jr nz, MKMnotMV
2819   21C5                      
2820   21C5 CD 62 22             call MKifPromoTheSame ; verifies if promoted piece the same in list
2821   21C8 FE 01                cp 1                  ; actually we can ignore it, because undo just places
2822   21CA 20 68                jr nz, MKMnotMV      ; back a pawn
2823   21CC                      
2824   21CC                      ; ok, this move. Let's do it
2825   21CC                      
2826   21CC CD 8A 22             call MKMcastlesDO   ; saves castling flags and verifies rooks
2827   21CF                                                  
2828   21CF CD 73 23             call MKMsaveEPSQ
2829   21D2                      
2830   21D2 DD 2B                dec ix         
2831   21D4 DD 7E 00             ld a, (ix)   ; from square
2832   21D7 CD 54 22             call MM_hl
2833   21DA 7E                   ld a,(hl)
2834   21DB 57                   ld d,a       ; save piece
2835   21DC                      
2836   21DC CD 00 23             call UpdateKingSQ   ; and castling flags too
2837   21DF                               
2838   21DF CD 5E 22             call MM_0    ; empty square now
2839   21E2                      
2840   21E2 DD 23                inc ix
2841   21E4 DD 7E 00             ld a, (ix)   ; to square
2842   21E7 CD 54 22             call MM_hl
2843   21EA                      
2844   21EA D5                   push de
2845   21EB 56                   ld d,(hl)    ; save captured piece
2846   21EC                      
2847   21EC 7E                   ld a,(hl)
2848   21ED FE 00                cp 0
2849   21EF 28 03                jr z, MM_noCapture  ;en-passant is not in list
2850   21F1                      
2851   21F1 CD 9D 23             call MM_capt2list   ;should save last captured piece in list   
2852   21F4                      
2853   21F4             MM_noCapture:         
2854   21F4                      
2855   21F4 D1                   pop de       ; restore our piece
2856   21F5                      
2857   21F5 7A                   ld a,d
2858   21F6 77                   ld (hl),a    ; just place our piece here
2859   21F7                               
2860   21F7 DD 23                inc ix
2861   21F9 DD 7E 00             ld a, (ix)     ; flags
2862   21FC CB 67                bit 4,a        ; castling
2863   21FE 28 03                jr z,MMNoCastle
2864   2200                      
2865   2200 CD B1 23             call  MMcastles          
2866   2203                                         
2867   2203             MMNoCastle:
2868   2203 DD 7E 00             ld a, (ix)     ; flags    
2869   2206 CB 4F                bit 1,a        ; possibly promotion
2870   2208 28 03                jr z, MMNoProm
2871   220A                      
2872   220A CD 0D 24             call MMPromotion ; put new piece on board         
2873   220D             MMNoProm:
2874   220D DD 7E 00             ld a, (ix)     ; flags
2875   2210 CB 6F                bit 5,a        ; en-passant 
2876   2212 28 09                jr z,MMNoEP
2877   2214             
2878   2214 CD 3E 24             call MMEnPass  ; en-passant capture
2879   2217 18 04                jr MMNoEP                                          
2880   2219             
2881   2219 18 2B       fMKMEnd: jr MKMEnd
2882   221B             
2883   221B 18 89       fMKMToLoop: jr MKMToLoop      ; jump far                                            
2884   221D                                                                                                                                                    
2885   221D             MMNoEP:                                         
2886   221D 1E 01                ld e,1         ; we found already
2887   221F                              
2888   221F CD ED 22             call Swap_Sides   ; Swap
2889   2222 CD 62 1D             call IsCheck
2890   2225 FE 00                cp 0
2891   2227 28 08                jr z, MKMnoCheck
2892   2229                      
2893   2229 DD 7E 00             ld a, (ix)     ; flags
2894   222C CB F7                set 6,a        ; bit 6 - check
2895   222E DD 77 00             ld (ix),a      ; save to flags
2896   2231             MKMnoCheck:         
2897   2231                      
2898   2231 CD 9A 22             call MKMsave2Hist ; Save history
2899   2234             MKMnotMV:
2900   2234 DD E1                pop ix
2901   2236                      
2902   2236 DD 23                inc ix        ; piece
2903   2238 DD 23                inc ix        ; from
2904   223A DD 23                inc ix        ; to
2905   223C DD 23                inc ix        ; flags
2906   223E             
2907   223E C1                   pop bc
2908   223F                      
2909   223F 7B                   ld a,e
2910   2240 FE 01                cp 1
2911   2242 28 02                jr z, MKMEnd
2912   2244 10 D5                djnz fMKMToLoop
2913   2246             
2914   2246             MKMEnd:
2915   2246             
2916   2246 7B                   ld a,e
2917   2247 FE 00                cp 0
2918   2249 20 00                jr nz, MKMfoundmove
2919   224B             MKMfoundmove:
2920   224B FD E1                pop iy                                                                                                   
2921   224D DD E1                pop ix
2922   224F E1                   pop hl
2923   2250 D1                   pop de
2924   2251 C1                   pop bc
2925   2252 F1                   pop af
2926   2253 C9                   ret
2927   2254                      
2928   2254             MM_hl:                        ; reposition of hl to square provided in a-reg
2929   2254 C5                   push bc
2930   2255 06 00                ld b,0
2931   2257 4F                   ld c,a
2932   2258 21 40 01             ld hl, BOARD
2933   225B 09                   add hl,bc            ; points to piece to move
2934   225C C1                   pop bc
2935   225D C9                   ret
2936   225E             
2937   225E 3E 00       MM_0:    ld a,0               ; empty square now 
2938   2260 77                   ld (hl),a 
2939   2261 C9                   ret
2940   2262             
2941   2262             ; verifies promoted piece
2942   2262             MKifPromoTheSame:
2943   2262 C5                   push bc
2944   2263 3A 38 19             ld a, (PromoPcId)
2945   2266 FE 00                cp 0
2946   2268 28 1C                jr z, MKsamePromo
2947   226A 3D                   dec a
2948   226B 47                   ld b,a
2949   226C DD 23                inc ix
2950   226E DD 7E 00             ld a, (ix)       ; flags
2951   2271 4F                   ld c,a
2952   2272 DD 2B                dec ix
2953   2274 CB 4F                bit 1,a
2954   2276 28 0E                jr z, MKsamePromo
2955   2278 79                   ld a,c
2956   2279 CB 3F                srl a
2957   227B CB 3F                srl a
2958   227D E6 03                and 3
2959   227F B8                   cp b
2960   2280 28 04                jr z, MKsamePromo
2961   2282 3E 00                ld a,0
2962   2284 18 02                jr MKsamePover                           
2963   2286             MKsamePromo:
2964   2286 3E 01                ld a,1
2965   2288             MKsamePover:
2966   2288 C1                   pop bc
2967   2289 C9                   ret
2968   228A             
2969   228A             ; works on castling flags          
2970   228A             MKMcastlesDO:
2971   228A F5                   push af
2972   228B 3A 82 01             ld a,(CASTLES)
2973   228E 32 9C 23             ld (Cstl2hist),a   ; save for history
2974   2291 FE 00                cp 0
2975   2293 28 03                jr z,MKMNoRvf
2976   2295 CD 32 23             call MKMUpdateRookMvCapt
2977   2298             MKMNoRvf:
2978   2298 F1                   pop af         
2979   2299 C9                   ret
2980   229A             
2981   229A             ; Saves move into history of moves made
2982   229A             MKMsave2Hist:
2983   229A E5                   push hl
2984   229B C5                   push bc
2985   229C 06 00                ld b,0
2986   229E 3A 73 06             ld a,(MOVE_CNT)
2987   22A1 4F                   ld c,a
2988   22A2 3C                   inc a
2989   22A3 32 73 06             ld (MOVE_CNT),a
2990   22A6 21 74 06             ld hl, MOVE_HIST
2991   22A9                      
2992   22A9 FE 3C                cp 60
2993   22AB 38 07                jr c,slowBcAdd1     
2994   22AD CB 21                sla c
2995   22AF CB 21                sla c      ; 4*c
2996   22B1                       ;1.byte = from sq
2997   22B1                       ;2.byte = to sq
2998   22B1                       ;3.byte = flags and promoted to
2999   22B1                       ;4.byte = castling flags, en-passant square before
3000   22B1 09                   add hl,bc
3001   22B2 18 04                jr overBcAdd1         
3002   22B4             slowBcAdd1:         
3003   22B4 09                   add hl,bc
3004   22B5 09                   add hl,bc
3005   22B6 09                   add hl,bc
3006   22B7 09                   add hl,bc
3007   22B8             overBcAdd1:         
3008   22B8                      
3009   22B8                               
3010   22B8 3A 35 13             ld a,(SQi)
3011   22BB 77                   ld (hl),a  ; from
3012   22BC 23                   inc hl
3013   22BD 3A 36 13             ld a,(SQt) ; to
3014   22C0 77                   ld (hl),a
3015   22C1 23                   inc hl
3016   22C2 DD 7E 00             ld a, (ix) ; flags with piece promoted
3017   22C5 77                   ld (hl),a  ;
3018   22C6 23                   inc hl
3019   22C7 3A 9B 23             ld a,(EnPs2hist)
3020   22CA FE FF                cp $ff
3021   22CC 28 0C                jr z,EnP0hs
3022   22CE FE 20                cp 32
3023   22D0 30 04                jr nc,EnPBlackHs
3024   22D2 D6 0F                sub 15    ;a3=1...h3=8
3025   22D4 18 06                jr EnPSvhs 
3026   22D6             EnPBlackHs:
3027   22D6 D6 1F                sub 31    ;a6=9...h6=16
3028   22D8 18 02                jr EnPSvhs
3029   22DA 3E 00       EnP0hs:  ld a,0
3030   22DC 47          EnPSvhs: ld b,a
3031   22DD 3A 9C 23             ld a,(Cstl2hist)
3032   22E0 CB 27                sla a           ; 4 shifts
3033   22E2 CB 27                sla a
3034   22E4 CB 27                sla a
3035   22E6 CB 27                sla a
3036   22E8 B0                   or b
3037   22E9 77                   ld (hl),a  ; save en-passant square and castling info that was before
3038   22EA C1                   pop bc
3039   22EB E1                   pop hl
3040   22EC C9                   ret
3041   22ED             
3042   22ED             ; Just swap both sides
3043   22ED             Swap_Sides:
3044   22ED F5                   push af
3045   22EE 3A 81 01             ld a,(SIDE)       ; swap sides
3046   22F1 FE 00                cp 0
3047   22F3 28 04                jr z,SwSdBl
3048   22F5 3E 00                ld a,0
3049   22F7 18 02                jr SwSdSt
3050   22F9 3E 01       SwSdBl:  ld a,1
3051   22FB 32 81 01    SwSdSt:  ld (SIDE),a
3052   22FE F1                   pop af
3053   22FF C9                   ret
3054   2300                      
3055   2300             ; save king square         
3056   2300             UpdateKingSQ:
3057   2300 7A                   ld a,d
3058   2301 FE 4B                cp 'K'
3059   2303 20 16                jr nz,MKMnoWK1
3060   2305 79                   ld a,c
3061   2306 32 84 01             ld (WKSQ),a
3062   2309 FE 04                cp 4
3063   230B 28 0C                jr z,KingStillE1
3064   230D F5                   push af
3065   230E 3A 82 01             ld a,(CASTLES)
3066   2311 E6 FC                and %11111100
3067   2313 32 82 01             ld (CASTLES),a
3068   2316 F1                   pop af         
3069   2317 18 18                jr MKMkingOut         
3070   2319             KingStillE1:         
3071   2319 18 16                jr MKMkingOut         
3072   231B             MKMnoWK1:          
3073   231B FE 6B                cp 'k'
3074   231D 20 12                jr nz,MKMkingOut
3075   231F 79                   ld a,c
3076   2320 32 85 01             ld (BKSQ),a
3077   2323 FE 3C                cp 60
3078   2325 28 0A                jr z,KingStillE8
3079   2327 F5                   push af
3080   2328 3A 82 01             ld a,(CASTLES)
3081   232B E6 F3                and %11110011
3082   232D 32 82 01             ld (CASTLES),a         
3083   2330 F1                   pop af
3084   2331             KingStillE8:         
3085   2331                      
3086   2331             MKMkingOut:
3087   2331 C9                   ret
3088   2332             
3089   2332             ; if rook has moved or has been captured, clear and save castling flags
3090   2332             MKMUpdateRookMvCapt:
3091   2332 D5                   push de
3092   2333 3A 82 01             ld a,(CASTLES)
3093   2336 57                   ld d,a
3094   2337 78                   ld a,b        ;from
3095   2338 CD 57 23             call MKMiWKK
3096   233B CD 5E 23             call MKMiWKQ
3097   233E CD 65 23             call MKMiBKK
3098   2341 CD 6C 23             call MKMiBKQ
3099   2344 79                   ld a,c        ;to
3100   2345 CD 57 23             call MKMiWKK
3101   2348 CD 5E 23             call MKMiWKQ
3102   234B CD 65 23             call MKMiBKK
3103   234E CD 6C 23             call MKMiBKQ
3104   2351 7A                   ld a,d
3105   2352 32 82 01             ld (CASTLES),a
3106   2355 D1                   pop de
3107   2356 C9                   ret
3108   2357                      
3109   2357 FE 07       MKMiWKK: cp 7          ; is H1?
3110   2359 20 02                jr nz,MKMoWKK
3111   235B CB 82                res 0,d       
3112   235D C9          MKMoWKK: ret
3113   235E FE 00       MKMiWKQ: cp 0          ; is A1?
3114   2360 20 02                jr nz,MKMoWKQ
3115   2362 CB 8A                res 1,d       
3116   2364 C9          MKMoWKQ: ret
3117   2365 FE 3F       MKMiBKK: cp 63         ; is H8?
3118   2367 20 02                jr nz,MKMoBKK
3119   2369 CB 92                res 2,d       
3120   236B C9          MKMoBKK: ret
3121   236C FE 38       MKMiBKQ: cp 56         ; is A8?
3122   236E 20 02                jr nz,MKMoBKQ
3123   2370 CB 9A                res 3,d       
3124   2372 C9          MKMoBKQ: ret
3125   2373             
3126   2373                       
3127   2373             
3128   2373                               
3129   2373             ; save new en-passant square
3130   2373             MKMsaveEPSQ:
3131   2373 3A 83 01             ld a,(ENPSQ)
3132   2376 32 9B 23             ld (EnPs2hist),a   ; save for history
3133   2379 3E FF                ld a,$ff
3134   237B 32 83 01             ld (ENPSQ),a
3135   237E 7A                   ld a,d
3136   237F FE 50                cp 'P'
3137   2381 20 17                jr nz, MKMnoeps
3138   2383 79                   ld a,c
3139   2384 D6 10                sub 16           ; are there 16 squares inbetween
3140   2386 B8                   cp b
3141   2387 28 08                jr z, MKMwEp     ; double move of white pawn
3142   2389                      ; try for black pawn
3143   2389 79                   ld a,c
3144   238A C6 10                add a,16
3145   238C B8                   cp b
3146   238D 28 06                jr z, MKMbEp      ; double move of black pawn 
3147   238F 18 09                jr MKMnoeps
3148   2391 C6 08       MKMwEp:  add a,8
3149   2393 18 02                jr MKMsaveNewEp
3150   2395 D6 08       MKMbEp:  sub 8
3151   2397             MKMsaveNewEp:
3152   2397 32 83 01             ld (ENPSQ),a
3153   239A             MKMnoeps:
3154   239A C9                   ret                                    
3155   239B             
3156   239B 00          EnPs2hist: .byte 0        ; to save en-passant square for history later
3157   239C             
3158   239C 00          Cstl2hist: .byte 0        ; to save castling flags for history later
3159   239D                                                                             
3160   239D             ; saves captured piece in list         
3161   239D             MM_capt2list:                      
3162   239D E5                   push hl
3163   239E 21 58 24             ld hl, UnMakeList
3164   23A1             MKMloop1:         
3165   23A1 7E                   ld a,(hl)
3166   23A2 FE 20                cp ' '
3167   23A4 28 07                jr z,MKMblankL1
3168   23A6 FE 00                cp 0
3169   23A8 28 03                jr z,MKMblankL1
3170   23AA 23                   inc hl
3171   23AB 18 F4                jr MKMloop1
3172   23AD             MKMblankL1:
3173   23AD 7A                   ld a,d
3174   23AE 77                   ld (hl),a       ; should save for next UnMakeMove      
3175   23AF E1                   pop hl
3176   23B0 C9                   ret
3177   23B1                      
3178   23B1             ; castling moves, should move rook too                 
3179   23B1             MMcastles:
3180   23B1 E5                   push hl
3181   23B2 79                   ld a,c
3182   23B3 FE 06                cp 6         ; g1?
3183   23B5 20 12                jr nz,MMNoG1
3184   23B7 3E 07                ld a, 7      ; rook on h1
3185   23B9 CD 54 22             call MM_hl
3186   23BC CD 5E 22             call MM_0    ; empty square now
3187   23BF 3E 05                ld a, 5      ; f1
3188   23C1 CD 54 22             call MM_hl
3189   23C4 3E 52                ld a,'R'
3190   23C6 77                   ld (hl),a
3191   23C7 18 42                jr MMoverC         
3192   23C9             MMNoG1:
3193   23C9 FE 02                cp 2         ; c1?
3194   23CB 20 12                jr nz,MMNoC1
3195   23CD 3E 00                ld a, 0      ; rook on a1
3196   23CF CD 54 22             call MM_hl
3197   23D2 CD 5E 22             call MM_0    ; empty square now
3198   23D5 3E 03                ld a, 3      ; d1
3199   23D7 CD 54 22             call MM_hl
3200   23DA 3E 52                ld a,'R'
3201   23DC 77                   ld (hl),a
3202   23DD 18 2C                jr MMoverC
3203   23DF             MMNoC1:
3204   23DF FE 3E                cp 62        ; g8?
3205   23E1 20 12                jr nz,MMNoG8
3206   23E3 3E 3F                ld a, 63     ; rook on h8
3207   23E5 CD 54 22             call MM_hl
3208   23E8 CD 5E 22             call MM_0    ; empty square now
3209   23EB 3E 3D                ld a, 61     ; f8
3210   23ED CD 54 22             call MM_hl
3211   23F0 3E 72                ld a,'r'
3212   23F2 77                   ld (hl),a
3213   23F3 18 16                jr MMoverC
3214   23F5             MMNoG8:
3215   23F5 FE 3A                cp 58        ; c8?
3216   23F7 20 12                jr nz,MMoverC
3217   23F9 3E 38                ld a, 56     ; rook on a8
3218   23FB CD 54 22             call MM_hl
3219   23FE CD 5E 22             call MM_0    ; empty square now
3220   2401 3E 3B                ld a, 59     ; d8
3221   2403 CD 54 22             call MM_hl
3222   2406 3E 72                ld a,'r'
3223   2408 77                   ld (hl),a
3224   2409 18 00                jr MMoverC
3225   240B E1          MMoverC: pop hl
3226   240C C9                   ret
3227   240D             
3228   240D             ; promoted pieces
3229   240D             MMPromotion:
3230   240D                      ; which piece?
3231   240D 3A 38 19             ld a, (PromoPcId)
3232   2410 FE 04                cp 4          ; Queen?
3233   2412 20 04                jr nz, MMNoQ
3234   2414 3E 51                ld a, 'Q'
3235   2416 18 1A                jr MMPcPut        
3236   2418 FE 03       MMNoQ:   cp 3          ; Rook?
3237   241A 20 04                jr nz, MMNoR
3238   241C 3E 52                ld a, 'R'
3239   241E 18 12                jr MMPcPut        
3240   2420 FE 02       MMNoR:   cp 2          ; Bishop?
3241   2422 20 04                jr nz, MMNoB
3242   2424 3E 42                ld a, 'B'
3243   2426 18 0A                jr MMPcPut
3244   2428 FE 01       MMNoB:   cp 1          ; Knight?  
3245   242A 20 04                jr nz, MMNoN
3246   242C 3E 4E                ld a, 'N'
3247   242E 18 02                jr MMPcPut
3248   2430 3E 51       MMNoN:   ld a, 'Q'     ; actually, should provide 3
3249   2432             
3250   2432             MMPcPut:
3251   2432 4F                   ld c,a        ; save
3252   2433 7A                   ld a,d
3253   2434 FE 50                cp 'P'
3254   2436 28 04                jr z,MMPcWProm
3255   2438 3E 20                ld a,32
3256   243A 81                   add a,c
3257   243B 4F                   ld c,a        ; to lowercase
3258   243C             MMPcWProm:
3259   243C 71                   ld (hl),c
3260   243D C9                   ret
3261   243E                      
3262   243E             ; en-passant capture         
3263   243E             MMEnPass:
3264   243E E5                   push hl
3265   243F 7A                   ld a,d
3266   2440 FE 50                cp 'P'
3267   2442 20 07                jr nz,MMPcBEnp         
3268   2444 3A 36 13             ld a,(SQt)
3269   2447 D6 08                sub 8
3270   2449 18 05                jr MMEnp1
3271   244B             MMPcBEnp:
3272   244B 3A 36 13             ld a,(SQt)
3273   244E C6 08                add a,8
3274   2450 CD 54 22    MMEnp1:  call MM_hl
3275   2453 CD 5E 22             call MM_0    ; empty square now
3276   2456 E1                   pop hl
3277   2457 C9                   ret
3278   2458             ;END
3279   2458             
3280   2458             ;BEGIN of ========== UNMAKE MOVE
3281   2458             ;
3282   2458             ; UnMake move on BOARD (undo)
3283   2458             ; uses own history recordings in MOVE_HIST
3284   2458             ; which sets
3285   2458             ;  SQi - from square
3286   2458             ;  SQt - to square
3287   2458             ;   +also uses flags from history
3288   2458             
3289   2458                          ; we keep list of captured pieces to unmake later as stack
3290   2458             UnMakeList:
3291   2458 20 20 20 20          .byte "                                                                  "
3291   245C 20 20 20 20 
3291   2460 20 20 20 20 
3291   2464 20 20 20 20 
3291   2468 20 20 20 20 
3291   246C 20 20 20 20 
3291   2470 20 20 20 20 
3291   2474 20 20 20 20 
3291   2478 20 20 20 20 
3291   247C 20 20 20 20 
3291   2480 20 20 20 20 
3291   2484 20 20 20 20 
3291   2488 20 20 20 20 
3291   248C 20 20 20 20 
3291   2490 20 20 20 20 
3291   2494 20 20 20 20 
3291   2498 20 20 
3292   249A 20 20 20 20          .byte "                                                                  "
3292   249E 20 20 20 20 
3292   24A2 20 20 20 20 
3292   24A6 20 20 20 20 
3292   24AA 20 20 20 20 
3292   24AE 20 20 20 20 
3292   24B2 20 20 20 20 
3292   24B6 20 20 20 20 
3292   24BA 20 20 20 20 
3292   24BE 20 20 20 20 
3292   24C2 20 20 20 20 
3292   24C6 20 20 20 20 
3292   24CA 20 20 20 20 
3292   24CE 20 20 20 20 
3292   24D2 20 20 20 20 
3292   24D6 20 20 20 20 
3292   24DA 20 20 
3293   24DC 20 20 20 20          .byte "                                                                  "
3293   24E0 20 20 20 20 
3293   24E4 20 20 20 20 
3293   24E8 20 20 20 20 
3293   24EC 20 20 20 20 
3293   24F0 20 20 20 20 
3293   24F4 20 20 20 20 
3293   24F8 20 20 20 20 
3293   24FC 20 20 20 20 
3293   2500 20 20 20 20 
3293   2504 20 20 20 20 
3293   2508 20 20 20 20 
3293   250C 20 20 20 20 
3293   2510 20 20 20 20 
3293   2514 20 20 20 20 
3293   2518 20 20 20 20 
3293   251C 20 20 
3294   251E 20 20 20 20          .byte "                                                                  "
3294   2522 20 20 20 20 
3294   2526 20 20 20 20 
3294   252A 20 20 20 20 
3294   252E 20 20 20 20 
3294   2532 20 20 20 20 
3294   2536 20 20 20 20 
3294   253A 20 20 20 20 
3294   253E 20 20 20 20 
3294   2542 20 20 20 20 
3294   2546 20 20 20 20 
3294   254A 20 20 20 20 
3294   254E 20 20 20 20 
3294   2552 20 20 20 20 
3294   2556 20 20 20 20 
3294   255A 20 20 20 20 
3294   255E 20 20 
3295   2560 00          flag_ix:       .byte 0      ; temporary flag of move made
3296   2561                     
3297   2561             UnMakeMove:
3298   2561 F5                   push af
3299   2562 C5                   push bc
3300   2563 D5                   push de
3301   2564 E5                   push hl
3302   2565 DD E5                push ix
3303   2567 FD E5                push iy
3304   2569                      
3305   2569 CD C4 25             call UnMKrestoreFromHist       ; Restores from history
3306   256C                            
3307   256C 3A 35 13             ld a, (SQi)   ; from square
3308   256F 47                   ld b,a
3309   2570                                
3310   2570 3A 36 13             ld a, (SQt)   ; to square
3311   2573 4F                   ld c,a
3312   2574                              
3313   2574                      ; Let's undo it
3314   2574 CD ED 22             call Swap_Sides   ; Swap sides
3315   2577                      
3316   2577 CD 54 22             call MM_hl
3317   257A 56                   ld d,(hl)
3318   257B CD 5E 22             call MM_0      ; empty square now
3319   257E                               
3320   257E 3A 60 25             ld a, (flag_ix)     ; flags
3321   2581 CB 47                bit 0,a
3322   2583 28 0A                jr z,UnMKnoCapture
3323   2585                
3324   2585 3A 60 25             ld a, (flag_ix)     ; flags
3325   2588 CB 6F                bit 5,a             ; ignore en-passant case
3326   258A 20 03                jr nz,UnMKnoCapture
3327   258C              
3328   258C CD 19 26             call UnMKCapturedPiece
3329   258F             
3330   258F             UnMKnoCapture:
3331   258F                               
3332   258F 3A 35 13             ld a,(SQi)
3333   2592 CD 54 22             call MM_hl
3334   2595 7A                   ld a,d
3335   2596 77                   ld (hl),a       ; just place our piece back
3336   2597             
3337   2597 C5                   push bc
3338   2598 48                   ld c,b          ; square-from
3339   2599 CD 00 23             call UpdateKingSQ
3340   259C C1                   pop bc
3341   259D                      
3342   259D 3A 60 25             ld a, (flag_ix)      ; flags
3343   25A0 CB 67                bit 4,a              ; castling      
3344   25A2 28 03                jr z,UnMKNoCastle
3345   25A4                      
3346   25A4 CD 33 26             call  UnMKcastles          
3347   25A7                                                   
3348   25A7             UnMKNoCastle:
3349   25A7 3A 60 25             ld a, (flag_ix)     ; flags    
3350   25AA CB 4F                bit 1,a             ; possibly promotion
3351   25AC 28 03                jr z, UnMKNoProm
3352   25AE                      
3353   25AE CD 8F 26             call UnMKPromotion  ; put pawn back on board         
3354   25B1             UnMKNoProm:
3355   25B1 3A 60 25             ld a, (flag_ix)     ; flags
3356   25B4 CB 6F                bit 5,a             ; en-passant         
3357   25B6 28 03                jr z,UnMKNoEP
3358   25B8                      
3359   25B8 CD A5 26             call UnMKEnPass  ; en-passant capture
3360   25BB             UnMKNoEP:                                     
3361   25BB                      ; en-passant square is updated before
3362   25BB             
3363   25BB             UnMKEnd:
3364   25BB             
3365   25BB FD E1                pop iy                           
3366   25BD DD E1                pop ix
3367   25BF E1                   pop hl
3368   25C0 D1                   pop de
3369   25C1 C1                   pop bc
3370   25C2 F1                   pop af
3371   25C3 C9                   ret
3372   25C4                      
3373   25C4             ; Get SQi,SQt, promoted piece from history
3374   25C4             UnMKrestoreFromHist:
3375   25C4 E5                   push hl
3376   25C5 C5                   push bc
3377   25C6 06 00                ld b,0
3378   25C8 3A 73 06             ld a,(MOVE_CNT)
3379   25CB 3D                   dec a
3380   25CC 4F                   ld c,a
3381   25CD 32 73 06             ld (MOVE_CNT),a
3382   25D0 21 74 06             ld hl, MOVE_HIST
3383   25D3                      
3384   25D3 FE 3C                cp 60
3385   25D5 38 07                jr c,slowBcAdd2
3386   25D7 CB 21                sla c
3387   25D9 CB 21                sla c      ; 4*c
3388   25DB                       ;1.byte = from sq
3389   25DB                       ;2.byte = to sq
3390   25DB                       ;3.byte = flags and promoted to
3391   25DB                       ;4.byte = en-passant square and castling info before
3392   25DB 09                   add hl,bc
3393   25DC 18 04                jr overBcAdd2         
3394   25DE             slowBcAdd2:         
3395   25DE 09                   add hl,bc
3396   25DF 09                   add hl,bc
3397   25E0 09                   add hl,bc
3398   25E1 09                   add hl,bc
3399   25E2             overBcAdd2:         
3400   25E2             
3401   25E2 7E                   ld a,(hl)
3402   25E3 32 35 13             ld (SQi),a
3403   25E6 23                   inc hl
3404   25E7 7E                   ld a,(hl)
3405   25E8 32 36 13             ld (SQt),a
3406   25EB 23                   inc hl
3407   25EC 7E                   ld a,(hl)
3408   25ED 32 60 25             ld (flag_ix),a
3409   25F0 23                   inc hl
3410   25F1 7E                   ld a,(hl)
3411   25F2 47                   ld b,a
3412   25F3 E6 0F                and %00001111
3413   25F5 FE 00                cp 0
3414   25F7 28 0C                jr z,unmkEp0
3415   25F9 FE 09                cp 9
3416   25FB 30 04                jr nc,unmkBlackEp
3417   25FD C6 0F                add a,15            ; a3=16...
3418   25FF 18 06                jr unmkEpS
3419   2601             unmkBlackEp:         
3420   2601 C6 1F                add a,31            ; a6=40...
3421   2603 18 02                jr unmkEpS         
3422   2605 3E FF       unmkEp0: ld a,$ff
3423   2607 32 83 01    unmkEpS: ld (ENPSQ),a      ; restore ENPSQ
3424   260A 78                   ld a,b
3425   260B CB 3F                srl a
3426   260D CB 3F                srl a
3427   260F CB 3F                srl a    ; 4 shifts
3428   2611 CB 3F                srl a
3429   2613 32 82 01             ld (CASTLES),a    ; restore castling info    
3430   2616 C1                   pop bc
3431   2617 E1                   pop hl
3432   2618 C9                   ret
3433   2619             
3434   2619             ; Get captured piece from list and put back
3435   2619             UnMKCapturedPiece:                      
3436   2619             
3437   2619 D5                   push de
3438   261A 11 58 24             ld de, UnMakeList
3439   261D             UnMKloop1:        
3440   261D 1A                   ld a,(de)
3441   261E FE 20                cp ' '
3442   2620 28 07                jr z,UnMKblankL1
3443   2622 FE 00                cp 0
3444   2624 28 03                jr z,UnMKblankL1
3445   2626 13                   inc de
3446   2627 18 F4                jr UnMKloop1
3447   2629             UnMKblankL1:
3448   2629 1B                   dec de
3449   262A 1A                   ld a,(de)       ; should be a previous MakeMove
3450   262B F5                   push af
3451   262C 3E 20                ld a,' '
3452   262E 12                   ld (de),a       ; clear this
3453   262F F1                   pop af
3454   2630 D1                   pop de
3455   2631 77                   ld (hl),a       ; place back captured piece   
3456   2632 C9                   ret     
3457   2633                                                                   
3458   2633             ; castling moves, should move rook back too                 
3459   2633             UnMKcastles:
3460   2633 E5                   push hl
3461   2634 79                   ld a,c
3462   2635 FE 06                cp 6         ; g1?
3463   2637 20 12                jr nz,UnMKNoG1
3464   2639 3E 05                ld a, 5      ; rook on f1
3465   263B CD 54 22             call MM_hl
3466   263E CD 5E 22             call MM_0    ; empty square now
3467   2641 3E 07                ld a, 7      ; h1
3468   2643 CD 54 22             call MM_hl
3469   2646 3E 52                ld a,'R'
3470   2648 77                   ld (hl),a
3471   2649 18 42                jr UnMKoverC         
3472   264B             UnMKNoG1:
3473   264B FE 02                cp 2         ; c1?
3474   264D 20 12                jr nz,UnMKNoC1
3475   264F 3E 03                ld a, 3      ; rook on d1
3476   2651 CD 54 22             call MM_hl
3477   2654 CD 5E 22             call MM_0    ; empty square now
3478   2657 3E 00                ld a, 0      ; a1
3479   2659 CD 54 22             call MM_hl
3480   265C 3E 52                ld a,'R'
3481   265E 77                   ld (hl),a
3482   265F 18 2C                jr UnMKoverC
3483   2661             UnMKNoC1:
3484   2661 FE 3E                cp 62        ; g8?
3485   2663 20 12                jr nz,UnMKNoG8
3486   2665 3E 3D                ld a, 61     ; rook on f8
3487   2667 CD 54 22             call MM_hl
3488   266A CD 5E 22             call MM_0    ; empty square now
3489   266D 3E 3F                ld a, 63     ; h8
3490   266F CD 54 22             call MM_hl
3491   2672 3E 72                ld a,'r'
3492   2674 77                   ld (hl),a
3493   2675 18 16                jr UnMKoverC
3494   2677             UnMKNoG8:
3495   2677 FE 3A                cp 58        ; c8?
3496   2679 20 12                jr nz,UnMKoverC
3497   267B 3E 3B                ld a, 59     ; rook on d8
3498   267D CD 54 22             call MM_hl
3499   2680 CD 5E 22             call MM_0    ; empty square now
3500   2683 3E 38                ld a, 56     ; a8
3501   2685 CD 54 22             call MM_hl
3502   2688 3E 72                ld a,'r'
3503   268A 77                   ld (hl),a
3504   268B 18 00                jr UnMKoverC
3505   268D             UnMKoverC:
3506   268D E1                   pop hl
3507   268E C9                   ret
3508   268F             
3509   268F             ; promoted pieces
3510   268F             UnMKPromotion:
3511   268F E5                   push hl
3512   2690 3E 07                ld a,7
3513   2692 B9                   cp c
3514   2693 38 04                jr c,UnMKwhitePw
3515   2695 3E 70                ld a,'p'
3516   2697 18 02                jr UnMKPw
3517   2699             UnMKwhitePw:
3518   2699 3E 50                ld a,'P'
3519   269B 57          UnMKPw:  ld d,a
3520   269C 3A 35 13             ld a,(SQi)
3521   269F CD 54 22             call MM_hl         
3522   26A2 72                   ld (hl),d
3523   26A3 E1                   pop hl
3524   26A4 C9                   ret
3525   26A5                       
3526   26A5             ; en-passant capture         
3527   26A5             UnMKEnPass:
3528   26A5 E5                   push hl
3529   26A6 7A                   ld a,d
3530   26A7 FE 50                cp 'P'
3531   26A9 20 0C                jr nz,UnMKPcBEnp         
3532   26AB 3A 36 13             ld a,(SQt)
3533   26AE D6 08                sub 8
3534   26B0 CD 54 22             call MM_hl
3535   26B3 36 70                ld (hl),'p'
3536   26B5 18 0A                jr UnMKEnp1
3537   26B7             UnMKPcBEnp:
3538   26B7 3A 36 13             ld a,(SQt)
3539   26BA C6 08                add a,8
3540   26BC CD 54 22             call MM_hl
3541   26BF 36 50                ld (hl),'P'
3542   26C1             UnMKEnp1:
3543   26C1 E1                   pop hl
3544   26C2 C9                   ret
3545   26C3                              
3546   26C3             ;END
3547   26C3                   
3548   26C3             
3549   26C3             ;BEGIN of ========== KING CHECKMATE DETECTION
3550   26C3             ;;
3551   26C3             ; It verifies check+ moves of the list for possible movement.
3552   26C3             ; Makes it slower, anyway correct for complete notation.
3553   26C3             ; Sets bit-7 for checkmate moves.
3554   26C3             ;
3555   26C3             LookForCheckmates:
3556   26C3             
3557   26C3 3A 37 13             ld a, (MateDetect)
3558   26C6 FE 00                cp 0
3559   26C8 20 6F                jr nz, CKMEnd
3560   26CA                              
3561   26CA DD 21 92 04          ld ix, NEXT_MVCNT
3562   26CE DD 46 00             ld b,(ix)
3563   26D1 DD 21 93 04          ld ix, NEXT_MOVES
3564   26D5 78                   ld a, b
3565   26D6 FE 00                cp 0
3566   26D8 28 5F                jr z,CKMEnd
3567   26DA                      
3568   26DA             CKMToLoop:
3569   26DA DD 23                inc ix        ; piece
3570   26DC DD 23                inc ix        ; from
3571   26DE DD 23                inc ix        ; to
3572   26E0 DD 7E 00             ld a,(ix)     ; flags
3573   26E3 CB 77                bit 6,a
3574   26E5 28 4E                jr z, CKMnoCheck
3575   26E7 DD 2B                dec ix
3576   26E9 DD 2B                dec ix
3577   26EB DD 7E 00             ld a,(ix)
3578   26EE 32 35 13             ld (SQi),a
3579   26F1 DD 23                inc ix
3580   26F3 DD 7E 00             ld a,(ix)
3581   26F6 32 36 13             ld (SQt),a
3582   26F9 DD 23                inc ix
3583   26FB DD 7E 00             ld a,(ix)     ; flags
3584   26FE CB 4F                bit 1,a       
3585   2700 28 0C                jr z, CKMnoPromo
3586   2702 DD 7E 00             ld a,(ix)     ; flags again       
3587   2705 CB 3F                srl a
3588   2707 CB 3F                srl a
3589   2709 E6 03                and 3
3590   270B 3C                   inc a
3591   270C 18 02                jr CKMpcProm
3592   270E             CKMnoPromo:
3593   270E 3E 00                ld a,0
3594   2710             CKMpcProm:         
3595   2710 32 38 19             ld (PromoPcId),a
3596   2713 CD 8A 21             call MakeMove  ; make this move again
3597   2716                      
3598   2716 3E 01                ld a,1
3599   2718 32 37 13             ld (MateDetect),a            
3600   271B CD 38 13             call GenMoves  ; finds any legal move
3601   271E                      
3602   271E CD 61 25             call UnMakeMove  ; unmake
3603   2721                      
3604   2721 3A 37 13             ld a,(MateDetect)
3605   2724 FE 02                cp 2           ; is there any?
3606   2726 28 08                jr z, CKMnoMate
3607   2728                      
3608   2728 DD 7E 00             ld a,(ix)     ; flags again
3609   272B CB FF                set 7,a       ; bit 7 - checkmate
3610   272D DD 77 00             ld (ix),a     ; save flag   
3611   2730                      
3612   2730             CKMnoMate:
3613   2730 3E 00                ld a,0
3614   2732 32 37 13             ld (MateDetect),a
3615   2735                                                                                                                             
3616   2735             CKMnoCheck:
3617   2735 DD 23                inc ix
3618   2737 10 A1                djnz CKMToLoop
3619   2739             
3620   2739             CKMEnd:                           
3621   2739 C9                   ret
3622   273A                      
3623   273A             ;END 
3624   273A             
3625   273A             
3626   273A             
3627   273A                                
3628   273A             ;BEGIN of ========== COUNTER for large loop of 65536 maximum value
3629   273A             ;
3630   273A             ; just imitates 2byte integer in 8-bit registers
3631   273A             
3632   273A 00          Il:      .byte 0
3633   273B 00          Ih:      .byte 0
3634   273C             
3635   273C             
3636   273C 32 3B 27    LD_Ix:   ld (Ih),a  ; sets a-reg x 256 value to counter
3637   273F 3E 00                ld a,0
3638   2741 32 3A 27             ld (Il),a
3639   2744 C9                   ret
3640   2745             
3641   2745 C5          DEC_I:   push bc
3642   2746 3A 3A 27             ld a,(Il)
3643   2749 4F                   ld c,a
3644   274A 3A 3B 27             ld a,(Ih)
3645   274D 47                   ld b,a
3646   274E 0B                   dec bc
3647   274F 79                   ld a,c
3648   2750 32 3A 27             ld (Il),a
3649   2753 78                   ld a,b
3650   2754 32 3B 27             ld (Ih),a
3651   2757 3E 00                ld a,0
3652   2759 B8                   cp b
3653   275A 20 06                jr nz, IsNo0_I
3654   275C B9                   cp c
3655   275D 20 03                jr nz, IsNo0_I
3656   275F 37                   scf       ; sets CF on empty counter
3657   2760 18 02                jr Is0ret
3658   2762 37          IsNo0_I: scf
3659   2763 3F                   ccf
3660   2764 C1          Is0ret:  pop bc
3661   2765 C9                   ret
3662   2766             ;END
3663   2766             
3664   2766             ;BEGIN of ========== DEBUG tool
3665   2766             
3666   2766             ; Put call DEBUGs in ASM to see that I got here
3667   2766                      
3668   2766 44 45 42 55 debugstr: .byte "DEBUG!$", 0  ; outputs this when reaches
3668   276A 47 21 24 00 
3669   276E             
3670   276E             DEBUGs:
3671   276E             
3672   276E D5                   push de
3673   276F 11 66 27             ld de, debugstr
3674   2772 CD E9 38             call PrintString
3675   2775 D1                   pop de
3676   2776 C9                   ret            
3677   2777             
3678   2777 44 45 42 55         .byte "DEBUGZ",0    ; put in code to find via debugger
3678   277B 47 5A 00 
3679   277E             ;END
3680   277E             
3681   277E                   
3682   277E             ;        
3683   277E             ; INCLUDES        
3684   277E             ;        
3685   277E             
3686   277E                       #include "ChessUI.ASM"     ; USER interface and grahics
0001+  277E             ;=======================================
0002+  277E             ;
0003+  277E             ; Graphics part of chess program ChessY2K
0004+  277E             ;
0005+  277E             ;=======================================
0006+  277E             ;
0007+  277E             ; USER INTERFACE
0008+  277E             ; screen, vdp, keyboard controls
0009+  277E             ;
0010+  277E             ; Uses VRAM even too much for chess needs.
0011+  277E             ; Will be good for presentation recording.
0012+  277E             ;
0013+  277E             ;---------------------------------------
0014+  277E             
0015+  277E             ;
0016+  277E             ; Defines labels to access datas after loading.
0017+  277E             ; This was genereated by "export" operator of tasm
0018+  277E             ; in ChessPI.ASM
0019+  277E             ; REPLACE THESE AFTER EACH RECOMPILE OF CHESSPI
0020+  277E             
0021+  277E             dtBBB            .EQU  $8001
0022+  277E             dtBBW            .EQU  $8159
0023+  277E             dtBKB            .EQU  $82b1
0024+  277E             dtBKW            .EQU  $8409
0025+  277E             dtBNB            .EQU  $8561
0026+  277E             dtBNW            .EQU  $86b9
0027+  277E             dtBPB            .EQU  $8811
0028+  277E             dtBPW            .EQU  $8969
0029+  277E             dtBQB            .EQU  $8ac1
0030+  277E             dtBQW            .EQU  $8c19
0031+  277E             dtBRB            .EQU  $8d71
0032+  277E             dtBRW            .EQU  $8ec9
0033+  277E             dtWBB            .EQU  $9021
0034+  277E             dtWBW            .EQU  $9179
0035+  277E             dtWKB            .EQU  $92d1
0036+  277E             dtWKW            .EQU  $9429
0037+  277E             dtWNB            .EQU  $9581
0038+  277E             dtWNW            .EQU  $96d9
0039+  277E             dtWPB            .EQU  $9831
0040+  277E             dtWPW            .EQU  $9989
0041+  277E             dtWQB            .EQU  $9ae1
0042+  277E             dtWQW            .EQU  $9c39
0043+  277E             dtWRB            .EQU  $9d91
0044+  277E             dtWRW            .EQU  $9ee9
0045+  277E             dtSQB            .EQU  $a041
0046+  277E             dtSQW            .EQU  $a199
0047+  277E             dtFRDN           .EQU  $a2f1
0048+  277E             dtFRLF           .EQU  $a63f
0049+  277E             dtFRRT           .EQU  $a98d
0050+  277E             dtFRUP           .EQU  $acdb
0051+  277E             dtWhiteToMove    .EQU  $b029
0052+  277E             dtWhiteNotToMove .EQU  $b091
0053+  277E             dtBlackToMove    .EQU  $b0f9
0054+  277E             dtBlackNotToMove .EQU  $b161
0055+  277E             dtWP             .EQU  $b1c9
0056+  277E             dtBP             .EQU  $b321
0057+  277E             dtWN             .EQU  $b479
0058+  277E             dtBN             .EQU  $b5d1
0059+  277E             dtWB             .EQU  $b729
0060+  277E             dtBB             .EQU  $b881
0061+  277E             dtWR             .EQU  $b9d9
0062+  277E             dtBR             .EQU  $bb31
0063+  277E             dtWQ             .EQU  $bc89
0064+  277E             dtBQ             .EQU  $bde3
0065+  277E             dtWK             .EQU  $bf3b
0066+  277E             dtBK             .EQU  $c093
0067+  277E             dtMSXlogo        .EQU  $c1eb
0068+  277E             
0069+  277E             
0070+  277E 00          Stylo:    .byte 0   ; set as configuration flags:
0071+  277F                                 ; 0-bit to use cursor 
0072+  277F                                 ; 1-bit allow drag and move pieces
0073+  277F                                 ; 2-bit set up pieces mode
0074+  277F             
0075+  277F 0C          CursorSq: .byte 12         ; square of cursor, on init=E2
0076+  2780 FF          DragSq:   .byte $ff        ; drag at square
0077+  2781 00          RplyMs:   .byte 0          ; position in MOVE_str for replayer
0078+  2782             
0079+  2782 00          Grph_Exit: .byte 0        ; 1 on ESC exit 
0080+  2783             
0081+  2783             PiecesIX:
0082+  2783 9F A1 47 A0         .word dtSQW+6, dtSQB+6
0083+  2787 8F 99 37 98         .word dtWPW+6, dtWPB+6, dtWNW+6, dtWNB+6, dtWBW+6, dtWBB+6
0083+  278B DF 96 87 95 
0083+  278F 7F 91 27 90 
0084+  2793 EF 9E 97 9D         .word dtWRW+6, dtWRB+6, dtWQW+6, dtWQB+6, dtWKW+6, dtWKB+6
0084+  2797 3F 9C E7 9A 
0084+  279B 2F 94 D7 92 
0085+  279F 6F 89 17 88         .word dtBPW+6, dtBPB+6, dtBNW+6, dtBNB+6, dtBBW+6, dtBBB+6
0085+  27A3 BF 86 67 85 
0085+  27A7 5F 81 07 80 
0086+  27AB CF 8E 77 8D         .word dtBRW+6, dtBRB+6, dtBQW+6, dtBQB+6, dtBKW+6, dtBKB+6         
0086+  27AF 1F 8C C7 8A 
0086+  27B3 0F 84 B7 82 
0087+  27B7             
0088+  27B7             
0089+  27B7             
0090+  27B7             VRAMcopy:       ; for each piece, to know that was copied to VRAM
0091+  27B7 00 00 00 00         .word 0,0,0,0,0,0,0,0,0,0,0,0,0
0091+  27BB 00 00 00 00 
0091+  27BF 00 00 00 00 
0091+  27C3 00 00 00 00 
0091+  27C7 00 00 00 00 
0091+  27CB 00 00 00 00 
0091+  27CF 00 00 
0092+  27D1             VRAMcpXY:       ; for each piece, holds HL (X,Y coord.)
0093+  27D1 00 00 00 00         .word 0,0,0,0,0,0,0,0,0,0,0,0,0 
0093+  27D5 00 00 00 00 
0093+  27D9 00 00 00 00 
0093+  27DD 00 00 00 00 
0093+  27E1 00 00 00 00 
0093+  27E5 00 00 00 00 
0093+  27E9 00 00 
0094+  27EB 00 00 00 00         .word 0,0,0,0,0,0,0,0,0,0,0,0,0
0094+  27EF 00 00 00 00 
0094+  27F3 00 00 00 00 
0094+  27F7 00 00 00 00 
0094+  27FB 00 00 00 00 
0094+  27FF 00 00 00 00 
0094+  2803 00 00 
0095+  2805             
0096+  2805 00          VRAMcirc: .byte 0 ; to know that sign copied to VRAM
0097+  2806             
0098+  2806                             ; the same for masks of black and white pieces
0099+  2806                             ; Masks are used when piece is moving.
0100+  2806                             ; Simple square redraw is used after animation is over.
0101+  2806             PiecesMskIX:
0102+  2806 CF B1 7F B4         .word dtWP+6, dtWN+6, dtWB+6, dtWR+6, dtWQ+6, dtWK+6
0102+  280A 2F B7 DF B9 
0102+  280E 8F BC 41 BF 
0103+  2812 27 B3 D7 B5         .word dtBP+6, dtBN+6, dtBB+6, dtBR+6, dtBQ+6, dtBK+6
0103+  2816 87 B8 37 BB 
0103+  281A E9 BD 99 C0 
0104+  281E 00 00 00 00 VRAMcpMsk:    .word 0,0,0,0,0,0
0104+  2822 00 00 00 00 
0104+  2826 00 00 00 00 
0105+  282A 00 00 00 00 VRAMcpMskXY:  .word 0,0,0,0,0,0,0,0,0,0,0,0  
0105+  282E 00 00 00 00 
0105+  2832 00 00 00 00 
0105+  2836 00 00 00 00 
0105+  283A 00 00 00 00 
0105+  283E 00 00 00 00 
0106+  2842             
0107+  2842 2F B0 67 B1 CircIX: .word dtWhiteToMove+6, dtBlackNotToMove+6, dtWhiteNotToMove+6, dtBlackToMove+6
0107+  2846 97 B0 FF B0 
0108+  284A                                                                                                                                                                                                                    
0109+  284A             GraphicsS:
0110+  284A                      
0111+  284A                      ; loads datas of graphics in memory from file
0112+  284A CD F0 35             call ChessY2K_GraphDatas_load
0113+  284D                         
0114+  284D 3E 0C                ld a,12
0115+  284F 32 7F 27             ld (CursorSq),a           ; cursor on E2
0116+  2852 3E FF                ld a,$ff
0117+  2854 32 80 27             ld (DragSq),a             ; no drag
0118+  2857 3E 00                ld a,0
0119+  2859 32 82 27             ld (Grph_Exit),a          ; starting...
0120+  285C 32 81 27             ld (RplyMs),a            ; set replayer position to 0  
0121+  285F                      
0122+  285F CD CD 29             call ClearLastFEN         ; for setup position clear previous one
0123+  2862 CD 1A 38             call SetScreen5By30h      ; set Screen 5 by using BIOS
0124+  2865 CD 21 38             call DisableScreenBy30h   ; do not display
0125+  2868 CD 40 39             call Copy_VdpRegs         ; save VDP regs
0126+  286B CD 88 38             call VDPfaster            ; optimize VDP, sprites off
0127+  286E                      
0128+  286E 21 0C 36             ld hl, tbPalettes         ;
0129+  2871 CD 54 38             call SetPaletteByTable    ; defines 16colors
0130+  2874 CD CA 28             call SetGraphics0         ; most graphics inits
0131+  2877 CD 3F 30             call PutMSXlogo           ; put MSX lable on screen
0132+  287A CD 9F 31             call PutToMove            ; draws and saves rounded-sign which side to move
0133+  287D                                                ;  (and saves to VRAM too)
0134+  287D                         
0135+  287D                      ;1.draw just squares
0136+  287D CD 79 30             call PutFrame             ; puts frame for board
0137+  2880 CD 98 29             call Draw0Board           ; just draw empty board without pieces
0138+  2883                      
0139+  2883                      ;2 create copy of pictures in VRAM      
0140+  2883 CD 88 29             call SetPMapFEN           ; sets special board for saving at XY in VRAM to know later
0141+  2886 CD F6 2C             call DrawBoard            ; draws complete board with pieces and saves bitmaps
0142+  2889 CD 98 29             call Draw0Board           ; just draw empty board to overwrite glitches
0143+  288C CD 79 30             call PutFrame             ; redraw frame - with no defects
0144+  288F             
0145+  288F                      ;3 set chess position to play from
0146+  288F CD B9 29             call SetFENbyMode         ; set position according mode
0147+  2892 CD F6 2C             call DrawBoard            ; now uses saved pieces
0148+  2895 CD 9F 31             call PutToMove            ; redraw using saved
0149+  2898                      
0150+  2898 3E 00                ld a,0
0151+  289A CD 81 39             call SetPage              ; Page to display
0152+  289D CD 26 38             call EnableScreenBy30h    ; display on
0153+  28A0                      
0154+  28A0 CD 93 32             call DrawCursor           ; Draws a rectangle of cursor on square
0155+  28A3 CD 38 13             call GenMoves             ; And generate first moves too.
0156+  28A6                      
0157+  28A6 CD 9E 38             call InkeyKeyBy30h      ; keypress detect
0158+  28A9 32 03 33             ld (PreKeyWas),a         ; saves last key
0159+  28AC             
0160+  28AC             LOOP_GRAPHICS:
0161+  28AC CD 9E 38             call InkeyKeyBy30h        ; keypress detect
0162+  28AF FE 00                cp 0
0163+  28B1 28 03                jr z, no_key_pressed
0164+  28B3             
0165+  28B3 CD 04 33             call Cursor_Key_Controls  ; keyboard, cursor by arrow-keys
0166+  28B6             no_key_pressed:
0167+  28B6                             
0168+  28B6 CD A4 2B             call ANIMATION            ; process animations, if there should be
0169+  28B9             
0170+  28B9 3A 82 27             ld a,(Grph_Exit)
0171+  28BC FE 00                cp 0                      ; Exit on ESC 
0172+  28BE 28 EC                jr z,LOOP_GRAPHICS                                                                    
0173+  28C0                                                         
0174+  28C0 CD 6F 3B             call RestoreColors
0175+  28C3 CD 57 39             call Rest_VdpRegs         ; restore VDP regs
0176+  28C6 CD AC 38             call SetScreen0By30h      ; set Screen 0
0177+  28C9                      
0178+  28C9 C9                   ret
0179+  28CA                      
0180+  28CA             ; set page 0, color 0, vdp for drawing
0181+  28CA             
0182+  28CA             SetGraphics0:
0183+  28CA F5                   push af
0184+  28CB E5                   push hl
0185+  28CC                      
0186+  28CC 3E 00                ld a,0
0187+  28CE CD 7F 38             call SetBackgrColor       ; sets color by number
0188+  28D1 3E 00                ld a,0
0189+  28D3 CD 81 39             call SetPage              ; Page to display
0190+  28D6                               
0191+  28D6 3E 00                ld a,0
0192+  28D8 21 00 00             ld hl,0
0193+  28DB CD 94 39             call Set_Vdp_Write        ; gona send to vdp
0194+  28DE                      
0195+  28DE E1                   pop hl
0196+  28DF F1                   pop af
0197+  28E0 C9                   ret 
0198+  28E1             
0199+  28E1 38 2F 38 2F emptyFEN:    .byte "8/8/8/8/8/8/8/8 w - - 0 1",0
0199+  28E5 38 2F 38 2F 
0199+  28E9 38 2F 38 2F 
0199+  28ED 38 2F 38 20 
0199+  28F1 77 20 2D 20 
0199+  28F5 2D 20 30 20 
0199+  28F9 31 00 
0200+  28FB 38 2F 50 50 piecemapFEN: .byte "8/PPpp4/NNnn4/BBbb4/RRrr4/QQqq4/KKkk4/8 w - - 0 1",0
0200+  28FF 70 70 34 2F 
0200+  2903 4E 4E 6E 6E 
0200+  2907 34 2F 42 42 
0200+  290B 62 62 34 2F 
0200+  290F 52 52 72 72 
0200+  2913 34 2F 51 51 
0200+  2917 71 71 34 2F 
0200+  291B 4B 4B 6B 6B 
0200+  291F 34 2F 38 20 
0200+  2923 77 20 2D 20 
0200+  2927 2D 20 30 20 
0200+  292B 31 00 
0201+  292D 24          wasSetUpFEN: .byte "$"
0202+  292E                          .ds 90
0203+  2988             
0204+  2988             SetPMapFEN:                        ; set special FEN for piece bitmaps
0205+  2988 F5                   push af
0206+  2989 DD E5                push ix
0207+  298B 3E 01                ld a,1
0208+  298D DD 21 FB 28          ld ix, piecemapFEN
0209+  2991 CD D8 1A             call SetFEN
0210+  2994 DD E1                pop ix
0211+  2996 F1                   pop af
0212+  2997 C9                   ret
0213+  2998                     
0214+  2998             Draw0Board:                        ; draws an empty board without pieces 
0215+  2998 F5                   push af
0216+  2999 DD E5                push ix               
0217+  299B CD AF 29             call SetEmptyFEN         ; set empty board      
0218+  299E 3E 01                ld a,1
0219+  29A0 32 0C 2D             ld (DrItFl),a
0220+  29A3 CD F6 2C             call DrawBoard            ; just draw empty board without pieces
0221+  29A6 3E 00                ld a,0
0222+  29A8 32 0C 2D             ld (DrItFl),a
0223+  29AB DD E1                pop ix
0224+  29AD F1                   pop af 
0225+  29AE C9                   ret
0226+  29AF                      
0227+  29AF             SetEmptyFEN:                 ; this sets an empty board position
0228+  29AF 3E 01                ld a,1
0229+  29B1 DD 21 E1 28          ld ix, emptyFEN
0230+  29B5 CD D8 1A             call SetFEN         
0231+  29B8 C9                   ret
0232+  29B9                      
0233+  29B9             SetFENbyMode:                ; sets position by mode
0234+  29B9 F5                   push af 
0235+  29BA 3A 7E 27             ld a,(Stylo)    
0236+  29BD                               
0237+  29BD CB 57                bit 2,a
0238+  29BF 28 05                jr z, SetStartFEN
0239+  29C1             
0240+  29C1 CD AF 29             call SetEmptyFEN    ; set empty board
0241+  29C4 18 05                jr SetFByMover
0242+  29C6             
0243+  29C6             SetStartFEN:         
0244+  29C6 3E 00                ld a,0              ; set default position
0245+  29C8 CD D8 1A             call SetFEN
0246+  29CB             SetFByMover:
0247+  29CB F1                   pop af
0248+  29CC C9                   ret
0249+  29CD                      
0250+  29CD             ClearLastFEN:
0251+  29CD F5                   push af
0252+  29CE D5                   push de
0253+  29CF 11 2D 29             ld de,wasSetUpFEN
0254+  29D2 3E 24                ld a,'$'
0255+  29D4 12                   ld (de),a
0256+  29D5 D1                   pop de
0257+  29D6 F1                   pop af
0258+  29D7 C9                   ret
0259+  29D8             
0260+  29D8                      
0261+  29D8             ;-----------------------------------------------------
0262+  29D8             ;
0263+  29D8             ; Chess move by cursor and space
0264+  29D8             ;
0265+  29D8             ; Validates move, moves piece on board and screen.
0266+  29D8             ; SQi - from square
0267+  29D8             ; SQt - to square
0268+  29D8             ; PromoPcId - id of piece to promote = 4-queen,3-rook,2-bishop,1-knight, 0-no promotion
0269+  29D8             
0270+  29D8             Chess_Move_Cursor:
0271+  29D8 F5                   push af
0272+  29D9 3A 3E 2B             ld a,(Move_sq_f)
0273+  29DC 32 35 13             ld (SQi),a
0274+  29DF 3A 3F 2B             ld a,(Move_sq_t)
0275+  29E2 32 36 13             ld (SQt),a
0276+  29E5 3E 00                ld a,0
0277+  29E7 32 38 19             ld (PromoPcId),a
0278+  29EA 3E 00                ld a,0
0279+  29EC 32 51 2B             ld (AnimUnMk),a
0280+  29EF CD 52 2B             call setAnimation        ; animate it and make move
0281+  29F2             NotValidChMv:         
0282+  29F2 F1                   pop af
0283+  29F3 C9                   ret
0284+  29F4                      
0285+  29F4             Chess_Move_Real:
0286+  29F4 CD 8A 21             call MakeMove            ; Goes when animation is over
0287+  29F7 CD 52 2A             call AfterChessMovement
0288+  29FA C9                   ret
0289+  29FB             
0290+  29FB             ;--------------------------------------------------------
0291+  29FB             ;
0292+  29FB             ; Undo chess animated chess move
0293+  29FB             ;
0294+  29FB             Chess_UnMake_Move_U:
0295+  29FB F5                   push af
0296+  29FC C5                   push bc
0297+  29FD D5                   push de
0298+  29FE E5                   push hl
0299+  29FF                                                                                                            
0300+  29FF 21 73 06             ld hl, MOVE_CNT
0301+  2A02 4E                   ld c,(hl)
0302+  2A03 21 74 06             ld hl, MOVE_HIST
0303+  2A06 79                   ld a, c
0304+  2A07 FE 00                cp 0
0305+  2A09 28 3B                jr z, Unmake_end_action
0306+  2A0B 06 00                ld b,0
0307+  2A0D             
0308+  2A0D 0D                   dec c
0309+  2A0E 09                   add hl,bc
0310+  2A0F 09                   add hl,bc
0311+  2A10 09                   add hl,bc
0312+  2A11 09                   add hl,bc
0313+  2A12                      
0314+  2A12 7E                   ld a,(hl)        ; from
0315+  2A13 32 3F 2B             ld (Move_sq_t),a ; move backward animation
0316+  2A16 57                   ld d,a
0317+  2A17 23                   inc hl
0318+  2A18 7E                   ld a,(hl)        ; to    
0319+  2A19 32 3E 2B             ld (Move_sq_f),a
0320+  2A1C 5F                   ld e,a
0321+  2A1D 23                   inc hl
0322+  2A1E 7E                   ld a,(hl)        ; flags
0323+  2A1F                      
0324+  2A1F 0E 00                ld c,0         
0325+  2A21 CB 6F                bit 5,a      ; if en-passant capture
0326+  2A23 28 09                jr z,NoEnPassUnmakeMove
0327+  2A25                      
0328+  2A25 7B                   ld a,e
0329+  2A26 E6 07                and 7
0330+  2A28 4F                   ld c,a          ;X of en-passant square
0331+  2A29 7A                   ld a,d
0332+  2A2A E6 F8                and %11111000   ;Y of en-passant square
0333+  2A2C B1                   or c
0334+  2A2D 4F                   ld c,a
0335+  2A2E             NoEnPassUnmakeMove:
0336+  2A2E 79                   ld a,c
0337+  2A2F 32 4C 2B             ld (Move_Enp),a ; save en-p.square for animation    
0338+  2A32                                        
0339+  2A32 7E                   ld a, (hl)   ; flags                
0340+  2A33 CB 67                bit 4,a      ; if castling
0341+  2A35 28 07                jr z,UnmakeNoCastling
0342+  2A37                      
0343+  2A37 0E 01                ld c,1
0344+  2A39 EB                   ex de,hl
0345+  2A3A CD FC 2A             call SetCastlesForLater
0346+  2A3D EB                   ex de,hl             
0347+  2A3E                               
0348+  2A3E             UnmakeNoCastling:
0349+  2A3E 3E 01                ld a,1
0350+  2A40 32 51 2B             ld (AnimUnMk),a
0351+  2A43 CD 52 2B             call setAnimation        ; animate it and unmake move
0352+  2A46                      
0353+  2A46             Unmake_end_action:
0354+  2A46 E1                   pop hl
0355+  2A47 D1                   pop de
0356+  2A48 C1                   pop bc
0357+  2A49 F1                   pop af
0358+  2A4A C9                   ret
0359+  2A4B             
0360+  2A4B             ; Does actual unmake on chess board
0361+  2A4B             Chess_Unmake_Move_Real:
0362+  2A4B CD 61 25             call UnMakeMove            ; Goes when animation is over
0363+  2A4E CD 52 2A             call AfterChessMovement
0364+  2A51 C9                   ret                                                                       
0365+  2A52             
0366+  2A52             ;
0367+  2A52             ; Action right after chess make/unmake move
0368+  2A52             ; Redraws 2 squares after movement
0369+  2A52             ; Regenerates next moves
0370+  2A52             ;
0371+  2A52             AfterChessMovement:
0372+  2A52 F5                   push af
0373+  2A53 C5                   push bc
0374+  2A54 3A 3E 2B             ld a,(Move_sq_f)
0375+  2A57 4F                   ld c,a             
0376+  2A58 CD 0D 2D             call DrawSquare
0377+  2A5B 3A 3F 2B             ld a,(Move_sq_t)
0378+  2A5E 4F                   ld c,a             
0379+  2A5F CD 0D 2D             call DrawSquare
0380+  2A62 CD 93 32             call DrawCursor
0381+  2A65 C1                   pop bc
0382+  2A66 F1                   pop af
0383+  2A67 CD 38 13             call GenMoves  ; And generate next moves too
0384+  2A6A CD 9F 31             call PutToMove ; redraws which side to move
0385+  2A6D C9                   ret
0386+  2A6E                      
0387+  2A6E             ;--------------------------------------------------------
0388+  2A6E             ;
0389+  2A6E             ; Drag and move validation
0390+  2A6E             ; Parameter: reg-a  0 - for drag, 1 - for move
0391+  2A6E             ;
0392+  2A6E             IsValidDragMove:
0393+  2A6E             
0394+  2A6E C5                   push bc
0395+  2A6F D5                   push de
0396+  2A70 E5                   push hl
0397+  2A71 DD E5                push ix
0398+  2A73                      
0399+  2A73 57                   ld d,a   ;save usage
0400+  2A74 1E 00                ld e,0   ; flag that found
0401+  2A76                                                                                   
0402+  2A76 DD 21 92 04          ld ix, NEXT_MVCNT
0403+  2A7A DD 46 00             ld b,(ix)
0404+  2A7D DD 21 93 04          ld ix, NEXT_MOVES
0405+  2A81 78                   ld a, b
0406+  2A82 FE 00                cp 0
0407+  2A84 28 6F                jr z, ValidLookExit
0408+  2A86             
0409+  2A86 3A 80 27             ld a,(DragSq)
0410+  2A89 67                   ld h,a
0411+  2A8A 3A 7F 27             ld a,(CursorSq)
0412+  2A8D 6F                   ld l,a
0413+  2A8E             
0414+  2A8E             isValidLoop:
0415+  2A8E             
0416+  2A8E DD 7E 00             ld a, (ix)   ; notated piece
0417+  2A91 DD 23                inc ix
0418+  2A93 DD 7E 00             ld a, (ix)   ; from square
0419+  2A96 32 35 13             ld (SQi),a        
0420+  2A99 DD 23                inc ix               
0421+  2A9B DD 7E 00             ld a, (ix)   ; to square
0422+  2A9E 32 36 13             ld (SQt),a
0423+  2AA1 DD 23                inc ix   
0424+  2AA3 DD 7E 00             ld a, (ix)   ; flags and promoted piece
0425+  2AA6 0E 00                ld c,0
0426+  2AA8 CB 4F                bit 1,a      ; if promotion
0427+  2AAA 28 02                jr z,ValidNoPromo
0428+  2AAC 0E 04                ld c,4       ; then queen
0429+  2AAE             ValidNoPromo:
0430+  2AAE 79                   ld a,c
0431+  2AAF 32 38 19             ld (PromoPcId),a
0432+  2AB2                             
0433+  2AB2 7A                   ld a,d
0434+  2AB3 FE 00                cp 0
0435+  2AB5 28 30                jr z,isValidDrag
0436+  2AB7                      
0437+  2AB7 3A 35 13             ld a,(SQi)      ; verify movement
0438+  2ABA BC                   cp h
0439+  2ABB 20 34                jr nz, ValidNotThisMove
0440+  2ABD                              
0441+  2ABD 3A 36 13             ld a,(SQt)
0442+  2AC0 BD                   cp l
0443+  2AC1 20 2E                jr nz, ValidNotThisMove
0444+  2AC3             
0445+  2AC3 DD 7E 00             ld a, (ix)   ; flags                
0446+  2AC6 0E 00                ld c,0         
0447+  2AC8 CB 6F                bit 5,a      ; if en-passant capture
0448+  2ACA 28 09                jr z,ValidNoEnPassMove
0449+  2ACC                      
0450+  2ACC 7D                   ld a,l
0451+  2ACD E6 07                and 7
0452+  2ACF 4F                   ld c,a          ;X of en-passant square
0453+  2AD0 7C                   ld a,h
0454+  2AD1 E6 F8                and %11111000   ;Y of en-passant square
0455+  2AD3 B1                   or c 
0456+  2AD4 4F                   ld c,a
0457+  2AD5             ValidNoEnPassMove:
0458+  2AD5 79                   ld a,c
0459+  2AD6 32 4C 2B             ld (Move_Enp),a ; save en-p.square for animation    
0460+  2AD9                                        
0461+  2AD9 DD 7E 00             ld a, (ix)   ; flags                
0462+  2ADC CB 67                bit 4,a      ; if castling
0463+  2ADE 28 05                jr z,ValidNoCastling
0464+  2AE0                      
0465+  2AE0 0E 00                ld c,0
0466+  2AE2 CD FC 2A             call SetCastlesForLater
0467+  2AE5                               
0468+  2AE5             ValidNoCastling:
0469+  2AE5 18 06                jr ValidIsThis
0470+  2AE7                      
0471+  2AE7             isValidDrag:             ; verify drag
0472+  2AE7 3A 35 13             ld a,(SQi)
0473+  2AEA BD                   cp l
0474+  2AEB 20 04                jr nz, ValidNotThisMove
0475+  2AED                      
0476+  2AED             ValidIsThis:       ; ok, this move        
0477+  2AED 1E 01                ld e,1
0478+  2AEF 18 04                jr ValidLookExit
0479+  2AF1                      
0480+  2AF1             ValidNotThisMove:
0481+  2AF1 DD 23                inc ix        
0482+  2AF3 10 99                djnz isValidLoop
0483+  2AF5                               
0484+  2AF5             ValidLookExit:
0485+  2AF5 7B                   ld a,e
0486+  2AF6 DD E1                pop ix
0487+  2AF8 E1                   pop hl
0488+  2AF9 D1                   pop de
0489+  2AFA C1                   pop bc
0490+  2AFB C9                   ret
0491+  2AFC             
0492+  2AFC             ; save castling rook info for animation later
0493+  2AFC             ; set before reg-c  = 0 for makemove, 1 for unmake move               
0494+  2AFC             SetCastlesForLater:
0495+  2AFC 7D                   ld a,l       ; square to
0496+  2AFD FE 06                cp 6
0497+  2AFF 28 0E                jr z,thisValidE1G1 ; e1g1
0498+  2B01 FE 02                cp 2
0499+  2B03 28 0F                jr z,thisValidE1C1 ; e1c1
0500+  2B05 FE 3E                cp 62
0501+  2B07 28 10                jr z,thisValidE8G8 ; e8g8
0502+  2B09 FE 3A                cp 58
0503+  2B0B 28 11                jr z,thisValidE8C8 ; e8c8
0504+  2B0D 18 2E                jr ValidCstlNot
0505+  2B0F             thisValidE1G1:
0506+  2B0F 21 07 05             ld hl,$0507      ; h1f1
0507+  2B12 18 0D                jr ValidSetCastles         
0508+  2B14             thisValidE1C1:
0509+  2B14 21 00 03             ld hl,$0300      ; a1c1
0510+  2B17 18 08                jr ValidSetCastles         
0511+  2B19             thisValidE8G8:
0512+  2B19 21 3F 3D             ld hl,$3D3F      ; h8f8
0513+  2B1C 18 03                jr ValidSetCastles         
0514+  2B1E             thisValidE8C8:
0515+  2B1E 21 38 3B             ld hl,$3B38      ; a8c8
0516+  2B21             ValidSetCastles:
0517+  2B21 79                   ld a,c
0518+  2B22 FE 00                cp 0
0519+  2B24 20 0A                jr nz, unMakeCastlesCase
0520+  2B26 7D                   ld a,l
0521+  2B27 32 4E 2B             ld (MvC_sq_f2),a
0522+  2B2A 7C                   ld a,h
0523+  2B2B 32 4F 2B             ld (MvC_sq_t2),a
0524+  2B2E 18 08                jr ValidSaveCstl
0525+  2B30             unMakeCastlesCase:
0526+  2B30 7C                   ld a,h
0527+  2B31 32 4E 2B             ld (MvC_sq_f2),a
0528+  2B34 7D                   ld a,l
0529+  2B35 32 4F 2B             ld (MvC_sq_t2),a
0530+  2B38             ValidSaveCstl:         
0531+  2B38 3E 01                ld a,1
0532+  2B3A 32 4D 2B             ld (Move_Cstl),a ; save for animation    
0533+  2B3D             ValidCstlNot:
0534+  2B3D C9                   ret
0535+  2B3E                      
0536+  2B3E             ;----------------------------------------------------|
0537+  2B3E             ;
0538+  2B3E             ;  This draws moving piece.
0539+  2B3E             ;  Should be on timer interrupt.
0540+  2B3E             ;  Anyway doesnt matter on emulators.  
0541+  2B3E             ;  Uses lots of VRAM (video memory), just because
0542+  2B3E             ;  it is best MSX has and can manage fast.
0543+  2B3E             ;
0544+  2B3E             
0545+  2B3E 00          Move_sq_f: .byte 0   ; from square
0546+  2B3F 00          Move_sq_t: .byte 0   ; to square
0547+  2B40 00          Move_X_f:  .byte 0   ; from X on screen
0548+  2B41 00          Move_Y_f:  .byte 0   ; Y
0549+  2B42 00          Move_X_t:  .byte 0   ; to X
0550+  2B43 00          Move_Y_t:  .byte 0   ; to Y
0551+  2B44 00          Move_X:    .byte 0   ; current X 
0552+  2B45 00          Move_Y:    .byte 0   ; current Y
0553+  2B46 00          Move_DX:   .byte 0   ; dx in dots (kinda y=a*x+c in asm)
0554+  2B47 00          Move_DXn:  .byte 0   ; to 0-right, 1-left
0555+  2B48 00          Move_DY:   .byte 0   ; dy in dots
0556+  2B49 00          Move_DYn:  .byte 0   ; to 0-down, 1-up
0557+  2B4A             
0558+  2B4A 00          MovePc_f:  .byte 0   ; holds piece on square from (as we remove while animating)
0559+  2B4B 00          MovePc_t:  .byte 0   ; holds piece on square to
0560+  2B4C             
0561+  2B4C 00          Move_Enp:  .byte 0   ; square if en-passant capturing
0562+  2B4D             
0563+  2B4D 00          Move_Cstl: .byte 0   ; 1 if castling king (to start for rook after)
0564+  2B4E 00          MvC_sq_f2: .byte 0   ; for rook movement squares from->to
0565+  2B4F 00          MvC_sq_t2: .byte 0   ;
0566+  2B50 00          AnimI:     .byte 0   ; counter 0..25
0567+  2B51 00          AnimUnMk:  .byte 0   ; 1 if UnMake case
0568+  2B52             
0569+  2B52             setAnimation:           ; provide square numbers
0570+  2B52 F5                       push af
0571+  2B53 C5                       push bc
0572+  2B54 D5                       push de
0573+  2B55 E5                       push hl
0574+  2B56                          
0575+  2B56 A8                       xor b    ; b=0
0576+  2B57 3A 3E 2B                 ld a,(Move_sq_f)            
0577+  2B5A CD 22 2C                 call ObtainHLboardBySq
0578+  2B5D 56                       ld d,(hl)
0579+  2B5E 70                       ld (hl),b
0580+  2B5F 4F                       ld c,a
0581+  2B60 CD 0D 2D                 call DrawSquare          ; now empty while moving
0582+  2B63 CD 4A 2F                 call GetHLbySquare       ; set X,Y
0583+  2B66 7A                       ld a,d
0584+  2B67 32 4A 2B                 ld (MovePc_f),a
0585+  2B6A 7C                       ld a,h
0586+  2B6B 32 40 2B                 ld (Move_X_f),a          ; from
0587+  2B6E 32 44 2B                 ld (Move_X),a            ; now X
0588+  2B71 7D                       ld a,l
0589+  2B72 32 41 2B                 ld (Move_Y_f),a
0590+  2B75 32 45 2B                 ld (Move_Y),a            ; now Y
0591+  2B78                          
0592+  2B78 A8                       xor b
0593+  2B79 3A 3F 2B                 ld a,(Move_sq_t)
0594+  2B7C CD 22 2C                 call ObtainHLboardBySq
0595+  2B7F 56                       ld d,(hl)
0596+  2B80 70                       ld (hl),b
0597+  2B81 4F                       ld c,a
0598+  2B82 CD 0D 2D                 call DrawSquare          ; now empty while moving                         
0599+  2B85 CD 4A 2F                 call GetHLbySquare       ; set X,Y
0600+  2B88 7A                       ld a,d
0601+  2B89 32 4B 2B                 ld (MovePc_t),a
0602+  2B8C 7C                       ld a,h
0603+  2B8D 32 42 2B                 ld (Move_X_t),a          ; to
0604+  2B90 7D                       ld a,l
0605+  2B91 32 43 2B                 ld (Move_Y_t),a
0606+  2B94                          
0607+  2B94 3E 19                    ld a,25                  ;25ticks
0608+  2B96 32 50 2B                 ld (AnimI),a             ;counter
0609+  2B99                          
0610+  2B99 CD 2E 2C                 call AnimGetDXDY         ; calculate dx,dy
0611+  2B9C                                      
0612+  2B9C CD A7 2D                 call Save26squaresVRAM   ; saving path of piece to draw without defects
0613+  2B9F                          
0614+  2B9F E1                       pop hl
0615+  2BA0 D1                       pop de
0616+  2BA1 C1                       pop bc
0617+  2BA2 F1                       pop af
0618+  2BA3 C9                       ret            
0619+  2BA4             
0620+  2BA4             ANIMATION:
0621+  2BA4 F5                       push af
0622+  2BA5 3A 50 2B                 ld a,(AnimI)
0623+  2BA8 FE 00                    cp 0
0624+  2BAA 28 74                    jr z, AnimNONE ;if No animation
0625+  2BAC                          
0626+  2BAC C5                       push bc
0627+  2BAD D5                       push de
0628+  2BAE E5                       push hl
0629+  2BAF                          
0630+  2BAF CD 15 2E                 call RestoreIsquareFromVRAM ;prepares and draws animation square
0631+  2BB2 CD BF 2C                 call GetNewAnimXY ; next X,Y
0632+  2BB5                                       
0633+  2BB5 3A 50 2B                 ld a,(AnimI)
0634+  2BB8 3D                       dec a
0635+  2BB9 32 50 2B                 ld (AnimI),a
0636+  2BBC FE 00                    cp 0
0637+  2BBE 20 5D                    jr nz, AnimTickOver  ;On counter=0 animation is over
0638+  2BC0                          
0639+  2BC0 CD 15 2E                 call RestoreIsquareFromVRAM ;restore last
0640+  2BC3                          
0641+  2BC3 3A 4A 2B                 ld a,(MovePc_f)
0642+  2BC6 4F                       ld c,a
0643+  2BC7 3A 3E 2B                 ld a,(Move_sq_f)
0644+  2BCA CD 22 2C                 call ObtainHLboardBySq
0645+  2BCD 71                       ld (hl),c
0646+  2BCE                          
0647+  2BCE 3A 4B 2B                 ld a,(MovePc_t)
0648+  2BD1 4F                       ld c,a
0649+  2BD2 3A 3F 2B                 ld a,(Move_sq_t)
0650+  2BD5 CD 22 2C                 call ObtainHLboardBySq
0651+  2BD8 71                       ld (hl),c
0652+  2BD9             
0653+  2BD9 3A 4D 2B                 ld a,(Move_Cstl)
0654+  2BDC                          
0655+  2BDC FE 02                    cp 2
0656+  2BDE 28 0C                    jr z,wasCastleAnim
0657+  2BE0                                      
0658+  2BE0 3A 51 2B                 ld a,(AnimUnMk)
0659+  2BE3 FE 00                    cp 0
0660+  2BE5 20 0C                    jr nz,AnimUnMakeCase
0661+  2BE7                                                                 
0662+  2BE7 CD F4 29                 call Chess_Move_Real          ; does actual chess movements
0663+  2BEA 18 0A                    jr Anim_enp_too
0664+  2BEC                          
0665+  2BEC             wasCastleAnim:
0666+  2BEC 3E 00                    ld a,0
0667+  2BEE 32 4D 2B                 ld (Move_Cstl),a              ; after castling rook has made its move
0668+  2BF1 18 2A                    jr AnimTickOver
0669+  2BF3             AnimUnMakeCase:
0670+  2BF3 CD 4B 2A                 call Chess_Unmake_Move_Real   ; does actual chess undo movements
0671+  2BF6             Anim_enp_too:          
0672+  2BF6 3A 4C 2B                 ld a,(Move_Enp)
0673+  2BF9 FE 00                    cp 0
0674+  2BFB 28 06                    jr z,AnimNoEnpRedraw
0675+  2BFD C5                       push bc
0676+  2BFE 4F                       ld c,a
0677+  2BFF CD 0D 2D                 call DrawSquare      ; remove en-passant piece visually
0678+  2C02 C1                       pop bc             
0679+  2C03             AnimNoEnpRedraw:
0680+  2C03             
0681+  2C03             setCastleAnim:
0682+  2C03 3A 4D 2B                 ld a,(Move_Cstl)
0683+  2C06 FE 00                    cp 0
0684+  2C08 28 13                    jr z,AnimTickOver
0685+  2C0A 3C                       inc a            
0686+  2C0B 32 4D 2B                 ld (Move_Cstl),a
0687+  2C0E 3A 4E 2B                 ld a,(MvC_sq_f2)
0688+  2C11 32 3E 2B                 ld (Move_sq_f),a
0689+  2C14 3A 4F 2B                 ld a,(MvC_sq_t2)
0690+  2C17 32 3F 2B                 ld (Move_sq_t),a
0691+  2C1A CD 52 2B                 call setAnimation  ; set new animation for rook now
0692+  2C1D                          
0693+  2C1D                     
0694+  2C1D             AnimTickOver:
0695+  2C1D E1                       pop hl             
0696+  2C1E D1                       pop de
0697+  2C1F C1                       pop bc
0698+  2C20 F1          AnimNONE:    pop af
0699+  2C21 C9                       ret                              
0700+  2C22                          
0701+  2C22             ;---------------------------------------------
0702+  2C22             ;determine HL by square number in a-reg
0703+  2C22             ObtainHLboardBySq:           
0704+  2C22 F5                       push af
0705+  2C23 C5                       push bc
0706+  2C24 21 40 01                 ld hl,BOARD
0707+  2C27 4F                       ld c,a
0708+  2C28 06 00                    ld b,0
0709+  2C2A 09                       add hl,bc
0710+  2C2B C1                       pop bc
0711+  2C2C F1                       pop af
0712+  2C2D C9                       ret
0713+  2C2E                          
0714+  2C2E             ;---------------------------------------------
0715+  2C2E             ; determine DX,DY step for animated piece                                                                     
0716+  2C2E             AnimGetDXDY:
0717+  2C2E             
0718+  2C2E 3A 40 2B                 ld a,(Move_X_f)
0719+  2C31 47                       ld b,a             
0720+  2C32 3A 42 2B                 ld a,(Move_X_t)
0721+  2C35 B8                       cp b
0722+  2C36 28 2E                    jr z,AnimDX0
0723+  2C38 38 16                    jr c,decAnimDX ;if toX<fromX
0724+  2C3A                                                                             
0725+  2C3A 3A 3E 2B                 ld a,(Move_sq_f)
0726+  2C3D E6 07                    and 7
0727+  2C3F 4F                       ld c,a
0728+  2C40 3A 3F 2B                 ld a,(Move_sq_t)
0729+  2C43 E6 07                    and 7
0730+  2C45 91                       sub c            ; a = dx
0731+  2C46 32 46 2B                 ld (Move_DX),a
0732+  2C49 3E 00                    ld a,0
0733+  2C4B 32 47 2B                 ld (Move_DXn),a
0734+  2C4E 18 1E                    jr AnimGetDY
0735+  2C50             decAnimDX:               
0736+  2C50 3A 3F 2B                 ld a,(Move_sq_t)
0737+  2C53 E6 07                    and 7
0738+  2C55 4F                       ld c,a
0739+  2C56 3A 3E 2B                 ld a,(Move_sq_f)
0740+  2C59 E6 07                    and 7
0741+  2C5B 91                       sub c            ; a = -dx
0742+  2C5C 32 46 2B                 ld (Move_DX),a
0743+  2C5F 3E 01                    ld a,1
0744+  2C61 32 47 2B                 ld (Move_DXn),a
0745+  2C64 18 08                    jr AnimGetDY           
0746+  2C66             AnimDX0:
0747+  2C66 3E 00                    ld a,0
0748+  2C68 32 46 2B                 ld (Move_DX),a
0749+  2C6B 32 47 2B                 ld (Move_DXn),a
0750+  2C6E             AnimGetDY:             
0751+  2C6E 3A 41 2B                 ld a,(Move_Y_f)
0752+  2C71 47                       ld b,a             
0753+  2C72 3A 43 2B                 ld a,(Move_Y_t)
0754+  2C75 B8                       cp b
0755+  2C76 28 3E                    jr z,AnimDY0
0756+  2C78 38 1E                    jr c,decAnimDY ;if toY<fromY
0757+  2C7A                          
0758+  2C7A 3A 3E 2B                 ld a,(Move_sq_f)
0759+  2C7D CB 3F                    srl a
0760+  2C7F CB 3F                    srl a
0761+  2C81 CB 3F                    srl a
0762+  2C83 4F                       ld c,a
0763+  2C84 3A 3F 2B                 ld a,(Move_sq_t)
0764+  2C87 CB 3F                    srl a
0765+  2C89 CB 3F                    srl a
0766+  2C8B CB 3F                    srl a
0767+  2C8D 91                       sub c            ; a = -dy
0768+  2C8E 32 48 2B                 ld (Move_DY),a
0769+  2C91 3E 01                    ld a,1
0770+  2C93 32 49 2B                 ld (Move_DYn),a
0771+  2C96 18 26                    jr AnimGetDXover            
0772+  2C98                          
0773+  2C98             decAnimDY:
0774+  2C98 3A 3F 2B                 ld a,(Move_sq_t)
0775+  2C9B CB 3F                    srl a
0776+  2C9D CB 3F                    srl a
0777+  2C9F CB 3F                    srl a
0778+  2CA1 4F                       ld c,a
0779+  2CA2 3A 3E 2B                 ld a,(Move_sq_f)
0780+  2CA5 CB 3F                    srl a
0781+  2CA7 CB 3F                    srl a
0782+  2CA9 CB 3F                    srl a
0783+  2CAB 91                       sub c            ; a = dy
0784+  2CAC 32 48 2B                 ld (Move_DY),a
0785+  2CAF 3E 00                    ld a,0
0786+  2CB1 32 49 2B                 ld (Move_DYn),a
0787+  2CB4 18 08                    jr AnimGetDXover
0788+  2CB6             AnimDY0:
0789+  2CB6 3E 00                    ld a,0
0790+  2CB8 32 48 2B                 ld (Move_DY),a
0791+  2CBB 32 49 2B                 ld (Move_DYn),a
0792+  2CBE                          
0793+  2CBE             AnimGetDXover:
0794+  2CBE C9                       ret
0795+  2CBF             
0796+  2CBF             
0797+  2CBF             ;---------------------------------------------
0798+  2CBF             ;
0799+  2CBF             ; Sets new X,Y on animation tick
0800+  2CBF             ;
0801+  2CBF             GetNewAnimXY:
0802+  2CBF F5                       push af
0803+  2CC0 C5                       push bc
0804+  2CC1 D5                       push de
0805+  2CC2                          
0806+  2CC2 3A 44 2B                 ld a,(Move_X)
0807+  2CC5 57                       ld d,a
0808+  2CC6 3A 45 2B                 ld a,(Move_Y)
0809+  2CC9 5F                       ld e,a
0810+  2CCA                                           ; determine new X
0811+  2CCA 3A 46 2B                 ld a,(Move_DX)
0812+  2CCD 47                       ld b,a           ; save dx
0813+  2CCE 3A 47 2B                 ld a,(Move_DXn)
0814+  2CD1 FE 01                    cp 1
0815+  2CD3 28 04                    jr z,decAnimXmv
0816+  2CD5 7A                       ld a,d
0817+  2CD6 80                       add a,b          ; new X=X+dx
0818+  2CD7 18 02                    jr newXforAnim
0819+  2CD9             decAnimXmv:               
0820+  2CD9 7A                       ld a,d
0821+  2CDA 90                       sub b            ; new X=X-dx            
0822+  2CDB             newXforAnim:             
0823+  2CDB 32 44 2B                 ld (Move_X),a
0824+  2CDE                                           ; determine new Y
0825+  2CDE                                           
0826+  2CDE 3A 48 2B                 ld a,(Move_DY)
0827+  2CE1 47                       ld b,a           ; save dy
0828+  2CE2 3A 49 2B                 ld a,(Move_DYn)
0829+  2CE5 FE 01                    cp 1
0830+  2CE7 28 04                    jr z,decAnimYmv
0831+  2CE9 7B                       ld a,e
0832+  2CEA 80                       add a,b          ; new Y=Y+dy
0833+  2CEB 18 02                    jr newYforAnim                              
0834+  2CED             decAnimYmv:               
0835+  2CED 7B                       ld a,e
0836+  2CEE 90                       sub b            ; new Y=Y-dy 
0837+  2CEF             newYforAnim:
0838+  2CEF 32 45 2B                 ld (Move_Y),a
0839+  2CF2 D1                       pop de
0840+  2CF3 C1                       pop bc
0841+  2CF4 F1                       pop af
0842+  2CF5 C9                       ret
0843+  2CF6                         
0844+  2CF6             ;----------------------------------------------------|
0845+  2CF6             ;
0846+  2CF6             ;  Draws board on screen.
0847+  2CF6             ;  
0848+  2CF6             ;
0849+  2CF6             DrawBoard:
0850+  2CF6 F5                   push af
0851+  2CF7 C5                   push bc
0852+  2CF8 CD 1F 1D             call SetSqScan          ; draw order A8,...,H8,A7...,A1,...,H1
0853+  2CFB 06 40                ld b,64
0854+  2CFD             DrawBoScan:
0855+  2CFD CD 28 1D             call ScanSqNxt
0856+  2D00 CD 4E 1D             call GetScanSQ
0857+  2D03 4F                   ld c,a                  ; current square
0858+  2D04 CD 0D 2D             call DrawSquare
0859+  2D07 10 F4                djnz DrawBoScan        ; scan all squares
0860+  2D09 C1                   pop bc
0861+  2D0A F1                   pop af
0862+  2D0B C9                   ret
0863+  2D0C             
0864+  2D0C             ;
0865+  2D0C             ;  Draws piece or just empty square by 
0866+  2D0C             ;       square in C-reg [0..63]
0867+  2D0C             ;
0868+  2D0C 00          DrItFl: .byte 0     ;should draw anyway flag
0869+  2D0D             
0870+  2D0D             DrawSquare:
0871+  2D0D F5                   push af
0872+  2D0E C5                   push bc
0873+  2D0F D5                   push de
0874+  2D10 E5                   push hl
0875+  2D11 DD E5                push ix
0876+  2D13 06 00                ld b,0
0877+  2D15 21 40 01             ld hl,BOARD
0878+  2D18 09                   add hl,bc
0879+  2D19 7E                   ld a,(hl)
0880+  2D1A FE 00                cp 0
0881+  2D1C 20 02                jr nz, notE0_
0882+  2D1E 3E 20                ld a,' '
0883+  2D20 CD 4A 2F    notE0_:  call GetHLbySquare       ; set X,Y
0884+  2D23 CD 77 2F             call GetWhiteSqFlagInE   ; and determine E flag     
0885+  2D26 CD 89 2F             call GetPieceIdx    ; convert to index from pn..QK
0886+  2D29 4F                   ld c,a              ; c=index
0887+  2D2A EB                   ex de,hl            ; de = hl
0888+  2D2B                              
0889+  2D2B 3A 0C 2D             ld a,(DrItFl)
0890+  2D2E FE 01                cp 1
0891+  2D30 28 0B                jr z,pc2VRAM1       ; should draw anyway     
0892+  2D32                      
0893+  2D32 21 B7 27             ld hl,VRAMcopy
0894+  2D35 06 00                ld b,0
0895+  2D37 09                   add hl,bc         
0896+  2D38 7E                   ld a,(hl)       
0897+  2D39 FE 01                cp 1
0898+  2D3B 28 28                jr z,pc2VRAM2       ; if saved before, just copy
0899+  2D3D                                          ; else create bitmap
0900+  2D3D             pc2VRAM1:                                       
0901+  2D3D                      ;DRAW and SAVE a copy                
0902+  2D3D 3E 01                ld a,1
0903+  2D3F 77                   ld (hl),a           ; bitmap saved flag
0904+  2D40 EB                   ex de,hl            ; hl = X,Y
0905+  2D41 79                   ld a,c              ; index of piece or square
0906+  2D42 CD AF 2F             call GetPieceIX     ; get ix-address
0907+  2D45 11 1A 1A             ld de,$1A1A         ;26x26
0908+  2D48 CD CA 39             call HMMC           ;copy RAM -> VRAM
0909+  2D4B                      
0910+  2D4B CD E5 2F             call SaveMaskToo    ; save MASK on first init
0911+  2D4E                      
0912+  2D4E 3A 0C 2D             ld a,(DrItFl)
0913+  2D51 FE 01                cp 1
0914+  2D53 28 4B                jr z,overDrawSqPc   ; if draws empty board 
0915+  2D55                      
0916+  2D55 EB                   ex de,hl            ; de = hl
0917+  2D56                      
0918+  2D56 21 D1 27             ld hl,VRAMcpXY      ; save X,Y for piece index
0919+  2D59 06 00                ld b,0
0920+  2D5B 09                   add hl,bc
0921+  2D5C 09                   add hl,bc         
0922+  2D5D 72                   ld (hl),d           ;save X
0923+  2D5E 23                   inc hl
0924+  2D5F 73                   ld (hl),e           ;save Y
0925+  2D60                      
0926+  2D60 CD 18 2F             call COPY2VRAMoutside
0927+  2D63                       
0928+  2D63 18 3B                jr overDrawSqPc
0929+  2D65                          
0930+  2D65             pc2VRAM2:         
0931+  2D65                      ;COPY piece back to square
0932+  2D65                      
0933+  2D65 21 D1 27             ld hl,VRAMcpXY      ; get X,Y by piece index
0934+  2D68 06 00                ld b,0
0935+  2D6A 09                   add hl,bc
0936+  2D6B 09                   add hl,bc         
0937+  2D6C 7E                   ld a,(hl)           ;saved X
0938+  2D6D 32 DF 3B             ld (HC_p+0),a       ;X
0939+  2D70 23                   inc hl
0940+  2D71 7E                   ld a,(hl)           ;saved Y
0941+  2D72 32 E1 3B             ld (HC_p+2),a       ;Y
0942+  2D75             
0943+  2D75 7A                   ld a,d
0944+  2D76 32 E3 3B             ld (HC_p+4),a       ;to X   
0945+  2D79 7B                   ld a,e
0946+  2D7A 32 E5 3B             ld (HC_p+6),a       ;to Y
0947+  2D7D 3E 19                ld a,$19
0948+  2D7F 32 E7 3B             ld (HC_p+8),a       ;25
0949+  2D82 32 E9 3B             ld (HC_p+10),a      ;25
0950+  2D85 AF                   xor a
0951+  2D86 32 E0 3B             ld (HC_p+1),a        
0952+  2D89 32 E4 3B             ld (HC_p+5),a       ;X
0953+  2D8C 32 E6 3B             ld (HC_p+7),a       ;Y
0954+  2D8F 32 E8 3B             ld (HC_p+9),a       ;dots
0955+  2D92 32 EA 3B             ld (HC_p+11),a      ;dots
0956+  2D95 32 EB 3B             ld (HC_p+12),a      ;DIX/DIY
0957+  2D98 3E 01                ld a,%00000001
0958+  2D9A 32 E2 3B             ld (HC_p+3),a       ;256+Y
0959+  2D9D CD EC 3B             call HMMMf          ;copy VRAM -> VRAM to visible area        
0960+  2DA0             
0961+  2DA0             overDrawSqPc:         
0962+  2DA0 DD E1                pop ix
0963+  2DA2 E1                   pop hl
0964+  2DA3 D1                   pop de
0965+  2DA4 C1                   pop bc
0966+  2DA5 F1                   pop af
0967+  2DA6 C9                   ret
0968+  2DA7                      
0969+  2DA7             ;-------------------------------------------------
0970+  2DA7             ;
0971+  2DA7             ;
0972+  2DA7             ; Saving 26 squares in VRAM as background for
0973+  2DA7             ;      moving piece all way long
0974+  2DA7             ;
0975+  2DA7             Save26squaresVRAM:
0976+  2DA7 F5                   push af
0977+  2DA8 C5                   push bc
0978+  2DA9 D5                   push de
0979+  2DAA                      
0980+  2DAA 3A 44 2B             ld a,(Move_X)
0981+  2DAD 57                   ld d,a
0982+  2DAE 3A 45 2B             ld a,(Move_Y)
0983+  2DB1 5F                   ld e,a
0984+  2DB2 D5                   push de             ; save X,Y                            
0985+  2DB3                      
0986+  2DB3 06 1A                ld b,26
0987+  2DB5 11 00 00             ld de,0
0988+  2DB8             Loop26squares:
0989+  2DB8 F3                   di                 
0990+  2DB9 3A 44 2B             ld a,(Move_X)       ;X
0991+  2DBC D6 04                sub 4               ;X-4   reserve
0992+  2DBE 32 DF 3B             ld (HC_p+0),a
0993+  2DC1 3A 45 2B             ld a,(Move_Y)       ;Y
0994+  2DC4 D6 04                sub 4               ;Y-4
0995+  2DC6 32 E1 3B             ld (HC_p+2),a
0996+  2DC9                      
0997+  2DC9 CD BF 2C             call GetNewAnimXY   ; new X,Y
0998+  2DCC                               
0999+  2DCC 7A                   ld a,d
1000+  2DCD 32 E3 3B             ld (HC_p+4),a       ;to X
1001+  2DD0 7B                   ld a,e
1002+  2DD1 32 E5 3B             ld (HC_p+6),a       ;to Y (+next byte)   put in columns
1003+  2DD4 3E 20                ld a,$20
1004+  2DD6 32 E7 3B             ld (HC_p+8),a       ;32
1005+  2DD9 32 E9 3B             ld (HC_p+10),a      ;32
1006+  2DDC AF                   xor a         
1007+  2DDD 32 E0 3B             ld (HC_p+1),a       ;X
1008+  2DE0 32 E2 3B             ld (HC_p+3),a       ;Y
1009+  2DE3 32 E4 3B             ld (HC_p+5),a       ;
1010+  2DE6 32 E8 3B             ld (HC_p+9),a       ;dots
1011+  2DE9 32 EA 3B             ld (HC_p+11),a      ;dots
1012+  2DEC 32 EB 3B             ld (HC_p+12),a      ;DIX/DIY
1013+  2DEF 3E 03                ld a,%00000011
1014+  2DF1 32 E6 3B             ld (HC_p+7),a       ; 512+Y down
1015+  2DF4 CD EC 3B             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1016+  2DF7                      
1017+  2DF7 3E 20                ld a,$20
1018+  2DF9 83                   add a,e
1019+  2DFA 5F                   ld e,a
1020+  2DFB FE C0                cp $20*6
1021+  2DFD 20 07                jr nz,L26clmnNxt
1022+  2DFF 1E 00                ld e,0             ; next column
1023+  2E01 3E 20                ld a,$20
1024+  2E03 82                   add a,d
1025+  2E04 57                   ld d,a
1026+  2E05 FB                   ei
1027+  2E06             L26clmnNxt:
1028+  2E06 10 B0                djnz Loop26squares     
1029+  2E08                      
1030+  2E08 D1                   pop de             ; restore X,Y
1031+  2E09 7A                   ld a,d
1032+  2E0A 32 44 2B             ld (Move_X),a
1033+  2E0D 7B                   ld a,e
1034+  2E0E 32 45 2B             ld (Move_Y),a
1035+  2E11                     
1036+  2E11 D1                   pop de
1037+  2E12 C1                   pop bc
1038+  2E13 F1                   pop af
1039+  2E14 C9                   ret
1040+  2E15             
1041+  2E15             ;
1042+  2E15             ; This: 1) copies background (1..26 saved before) to VRAM-holder
1043+  2E15             ;       2) copies mask of piece logically to VRAM-holder
1044+  2E15             ;       3) copies holder to board on display
1045+  2E15             ;
1046+  2E15             
1047+  2E15             
1048+  2E15             RestoreIsquareFromVRAM:
1049+  2E15 F5                   push af
1050+  2E16 C5                   push bc
1051+  2E17 D5                   push de
1052+  2E18                      
1053+  2E18 3A 50 2B             ld a,(AnimI)
1054+  2E1B 47                   ld b,a
1055+  2E1C 3E 19                ld a,25
1056+  2E1E 90                   sub b
1057+  2E1F                      
1058+  2E1F 47                   ld b,a              ; counter I = 0..25
1059+  2E20 11 00 00             ld de,0  
1060+  2E23 FE 00                cp 0
1061+  2E25 28 10                jr z,L2_26theSq
1062+  2E27             Loop26SqToFindXY:
1063+  2E27             
1064+  2E27 3E 20                ld a,$20
1065+  2E29 83                   add a,e
1066+  2E2A 5F                   ld e,a
1067+  2E2B FE C0                cp $20*6
1068+  2E2D 20 06                jr nz,L2_26clmnNxt
1069+  2E2F 1E 00                ld e,0             ; next column
1070+  2E31 3E 20                ld a,$20
1071+  2E33 82                   add a,d
1072+  2E34 57                   ld d,a
1073+  2E35             L2_26clmnNxt:
1074+  2E35 10 F0                djnz Loop26SqToFindXY
1075+  2E37             L2_26theSq:                             
1076+  2E37 CD 44 2E             call Back2Holder     ; put backgroound in holder
1077+  2E3A                      
1078+  2E3A CD 7E 2E             call DrawAnimPiece   ; draws animation piece to holder (mask with transp.)
1079+  2E3D                      
1080+  2E3D CD D8 2E             call Holder2Screen   ; put holder on board in right place
1081+  2E40             
1082+  2E40 D1                   pop de
1083+  2E41 C1                   pop bc
1084+  2E42 F1                   pop af
1085+  2E43 C9                   ret
1086+  2E44             
1087+  2E44             ;----------------------------------
1088+  2E44             ; Puts background in holder
1089+  2E44             
1090+  2E44             Back2Holder:
1091+  2E44 F3                   di
1092+  2E45 7A                   ld a,d
1093+  2E46 32 DF 3B             ld (HC_p+0),a
1094+  2E49 7B                   ld a,e
1095+  2E4A 32 E1 3B             ld (HC_p+2),a
1096+  2E4D 3E DF                ld a,255-$20
1097+  2E4F 32 E3 3B             ld (HC_p+4),a       ;to X
1098+  2E52 3E B1                ld a,209-$20
1099+  2E54 32 E5 3B             ld (HC_p+6),a       ;to Y (+next byte) in column
1100+  2E57 3E 20                ld a,$20
1101+  2E59 32 E7 3B             ld (HC_p+8),a       ;32
1102+  2E5C 32 E9 3B             ld (HC_p+10),a      ;32
1103+  2E5F AF                   xor a         
1104+  2E60 32 E0 3B             ld (HC_p+1),a       ;X
1105+  2E63 32 E4 3B             ld (HC_p+5),a       ;
1106+  2E66 32 E8 3B             ld (HC_p+9),a       ;dots
1107+  2E69 32 EA 3B             ld (HC_p+11),a      ;dots
1108+  2E6C 32 EB 3B             ld (HC_p+12),a      ;DIX/DIY
1109+  2E6F 3E 01                ld a,%00000001
1110+  2E71 32 E6 3B             ld (HC_p+7),a       ; 256+Y down
1111+  2E74 3E 03                ld a,%00000011
1112+  2E76 32 E2 3B             ld (HC_p+3),a       ; 512+Y down
1113+  2E79 CD EC 3B             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1114+  2E7C FB                   ei
1115+  2E7D C9                   ret
1116+  2E7E                               
1117+  2E7E             ;------------------------------------------------------
1118+  2E7E             ;
1119+  2E7E             ; Prepares mask of piece in VRAM holder on background
1120+  2E7E             ;
1121+  2E7E             ;                  
1122+  2E7E             DrawAnimPiece:
1123+  2E7E                                       
1124+  2E7E                          ;COPY mask of piece (logical VRAM->VRAM)
1125+  2E7E F3                       di        
1126+  2E7F 3A 4A 2B                 ld a,(MovePc_f)
1127+  2E82 FE 00                    cp 0
1128+  2E84 20 03                    jr nz,DrawAnimNormPiece
1129+  2E86 3A 4B 2B                 ld a,(MovePc_t)        ;castling rook moving
1130+  2E89             DrawAnimNormPiece:             
1131+  2E89 1E 00                    ld e,0
1132+  2E8B CD 89 2F                 call GetPieceIdx       ;get index of piece
1133+  2E8E CB 3F                    srl a
1134+  2E90 3D                       dec a
1135+  2E91 4F                       ld c,a
1136+  2E92 21 2A 28                 ld hl,VRAMcpMskXY      ; get X,Y by piece index             
1137+  2E95 06 00                    ld b,0
1138+  2E97 09                       add hl,bc              ; offset
1139+  2E98 09                       add hl,bc
1140+  2E99                                                
1141+  2E99 7E                       ld a,(hl)           ;saved X
1142+  2E9A 32 17 3C                 ld (LM_p+0),a       ;X
1143+  2E9D 23                       inc hl
1144+  2E9E 7E                       ld a,(hl)           ;saved Y        
1145+  2E9F 32 19 3C                 ld (LM_p+2),a       ;Y
1146+  2EA2             
1147+  2EA2                          ;ld a,(Move_X)
1148+  2EA2 3E E3                    ld a,255-$20+4
1149+  2EA4 32 1B 3C                 ld (LM_p+4),a       ;to X   
1150+  2EA7                          ;ld a,(Move_Y)
1151+  2EA7 3E B5                    ld a,209-$20+4
1152+  2EA9 32 1D 3C                 ld (LM_p+6),a       ;to Y
1153+  2EAC 3E 19                    ld a,$19
1154+  2EAE 32 1F 3C                 ld (LM_p+8),a       ;25
1155+  2EB1 32 21 3C                 ld (LM_p+10),a      ;25
1156+  2EB4 AF                       xor a
1157+  2EB5 32 18 3C                 ld (LM_p+1),a
1158+  2EB8                          ;ld (LM_p+7),a       
1159+  2EB8 32 1C 3C                 ld (LM_p+5),a       ;Y
1160+  2EBB 32 20 3C                 ld (LM_p+9),a       ;dots
1161+  2EBE 32 22 3C                 ld (LM_p+11),a      ;dots
1162+  2EC1 32 23 3C                 ld (LM_p+12),a      ;DIX/DIY
1163+  2EC4 3E 01                    ld a,%00000001
1164+  2EC6 32 1A 3C                 ld (LM_p+3),a       ;256+Y
1165+  2EC9 3E 01                    ld a,%00000001
1166+  2ECB 32 1E 3C                 ld (LM_p+7),a       ;256+Y
1167+  2ECE 3E 08                    ld a,%00001000      ;TIMP copy
1168+  2ED0 32 24 3C                 ld (LM_p+13),a      ;logical
1169+  2ED3 CD 25 3C                 call LMMMf          ;copy VRAM -> VRAM without transparent color
1170+  2ED6                                              ;to visible area
1171+  2ED6 FB                       ei                                 
1172+  2ED7 C9                       ret
1173+  2ED8             
1174+  2ED8             ;----------------------------------
1175+  2ED8             ; Puts holder on board
1176+  2ED8             
1177+  2ED8             Holder2Screen:                             ; draw holder to screen with piece
1178+  2ED8 F3                   di
1179+  2ED9 3E DF                ld a,255-$20                
1180+  2EDB 32 DF 3B             ld (HC_p+0),a
1181+  2EDE 3E B1                ld a,209-$20
1182+  2EE0 32 E1 3B             ld (HC_p+2),a
1183+  2EE3 3A 44 2B             ld a,(Move_X)
1184+  2EE6 D6 04                sub 4               ;X-4
1185+  2EE8 32 E3 3B             ld (HC_p+4),a       ;to X
1186+  2EEB 3A 45 2B             ld a,(Move_Y)
1187+  2EEE D6 04                sub 4               ;Y-4
1188+  2EF0 32 E5 3B             ld (HC_p+6),a       ;to Y (+next byte)
1189+  2EF3 3E 20                ld a,$20
1190+  2EF5 32 E7 3B             ld (HC_p+8),a       ;32
1191+  2EF8 32 E9 3B             ld (HC_p+10),a      ;32
1192+  2EFB AF                   xor a         
1193+  2EFC 32 E0 3B             ld (HC_p+1),a       ;X
1194+  2EFF 32 E4 3B             ld (HC_p+5),a       ;
1195+  2F02 32 E6 3B             ld (HC_p+7),a       ;         
1196+  2F05 32 E8 3B             ld (HC_p+9),a       ;dots
1197+  2F08 32 EA 3B             ld (HC_p+11),a      ;dots
1198+  2F0B 32 EB 3B             ld (HC_p+12),a      ;DIX/DIY
1199+  2F0E 3E 01                ld a,%00000001
1200+  2F10 32 E2 3B             ld (HC_p+3),a       ;from holder 256+Y down
1201+  2F13 CD EC 3B             call HMMMf          ;copy VRAM -> VRAM
1202+  2F16 FB                   ei
1203+  2F17 C9                   ret
1204+  2F18                                                
1205+  2F18             ;-------------------------------------------------
1206+  2F18             ;
1207+  2F18             ;BOARD copying to third screen
1208+  2F18             ; Fast but takes much VRAM.
1209+  2F18             ; Not used but working. It is sick to use VRAM like this.
1210+  2F18             ;-------------------------------------------------
1211+  2F18             COPY2VRAMoutside:
1212+  2F18 7A                   ld a,d              ;X
1213+  2F19 32 DF 3B             ld (HC_p+0),a
1214+  2F1C 32 E3 3B             ld (HC_p+4),a       ;to X
1215+  2F1F 7B                   ld a,e              ;Y
1216+  2F20 32 E1 3B             ld (HC_p+2),a
1217+  2F23 32 E5 3B             ld (HC_p+6),a       ;to Y (+next byte)
1218+  2F26 3E 19                ld a,$19
1219+  2F28 32 E7 3B             ld (HC_p+8),a       ;25
1220+  2F2B 32 E9 3B             ld (HC_p+10),a      ;25
1221+  2F2E AF                   xor a         
1222+  2F2F 32 E0 3B             ld (HC_p+1),a       ;X
1223+  2F32 32 E2 3B             ld (HC_p+3),a       ;Y
1224+  2F35 32 E4 3B             ld (HC_p+5),a       ;
1225+  2F38 32 E8 3B             ld (HC_p+9),a       ;dots
1226+  2F3B 32 EA 3B             ld (HC_p+11),a      ;dots
1227+  2F3E 32 EB 3B             ld (HC_p+12),a      ;DIX/DIY
1228+  2F41 3E 01                ld a,%00000001
1229+  2F43 32 E6 3B             ld (HC_p+7),a       ; 256+Y down
1230+  2F46 CD EC 3B             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1231+  2F49 C9                   ret
1232+  2F4A                       
1233+  2F4A             ; calculates HL screen coordinates X,Y by square number
1234+  2F4A             ; provide square in c-reg
1235+  2F4A             GetHLbySquare:
1236+  2F4A F5                   push af
1237+  2F4B C5                   push bc
1238+  2F4C D5                   push de
1239+  2F4D 21 B4 05             ld hl,$05D2-$0005-$0019
1240+  2F50 79                   ld a,c
1241+  2F51 E6 07                and 7
1242+  2F53                           ; X- a..h of table
1243+  2F53                      ;cp 2
1244+  2F53                      ;jp c,GetHLx_
1245+  2F53                      ;push bc
1246+  2F53                      ;ld bc,$0100
1247+  2F53                      ;add hl,bc      ; one pixel visal correction to the right
1248+  2F53                      ;pop bc
1249+  2F53             GetHLx_:         
1250+  2F53 11 00 19             ld de,$1900
1251+  2F56             GetHLbySqX:
1252+  2F56 FE 00                cp 0
1253+  2F58 28 04                jr z,GetHLokSqX
1254+  2F5A 19                   add hl,de
1255+  2F5B 3D                   dec a
1256+  2F5C 18 F8                jr GetHLbySqX        
1257+  2F5E             GetHLokSqX:
1258+  2F5E 79                   ld a,c
1259+  2F5F CB 3F                srl a
1260+  2F61 CB 3F                srl a
1261+  2F63 CB 3F                srl a
1262+  2F65                           ; Y- 1..8 of table
1263+  2F65 11 19 00             ld de,$0019
1264+  2F68             GetHLbySqY:
1265+  2F68 FE 00                cp 0
1266+  2F6A 28 07                jr z,GetHLokSqY
1267+  2F6C 37                   scf
1268+  2F6D 3F                   ccf
1269+  2F6E ED 52                sbc hl,de
1270+  2F70 3D                   dec a
1271+  2F71 18 F5                jr GetHLbySqY        
1272+  2F73             GetHLokSqY:
1273+  2F73 D1                   pop de
1274+  2F74 C1                   pop bc
1275+  2F75 F1                   pop af
1276+  2F76 C9                   ret
1277+  2F77                      
1278+  2F77             ; calculates white square in e-reg flag by square number (a-reg)
1279+  2F77             GetWhiteSqFlagInE:
1280+  2F77 F5                   push af
1281+  2F78 79                   ld a,c
1282+  2F79 E6 07                and 7
1283+  2F7B 5F                   ld e,a    ; X- a..h of table
1284+  2F7C                      
1285+  2F7C 79                   ld a,c
1286+  2F7D CB 3F                srl a
1287+  2F7F CB 3F                srl a
1288+  2F81 CB 3F                srl a
1289+  2F83                                ; Y- 1..8 of table
1290+  2F83 83                   add a,e
1291+  2F84 E6 01                and 1     ;mod2
1292+  2F86 5F                   ld e,a    ; contains flag
1293+  2F87 F1                   pop af
1294+  2F88 C9                   ret
1295+  2F89                               
1296+  2F89             ;----------------------------------------------------|
1297+  2F89                      ; locates index in array of pieces datas
1298+  2F89                      ; a-piece char of p..K
1299+  2F89                      ; e - square is white flag
1300+  2F89                      ; on return a contains index
1301+  2F89                                             
1302+  2F89             GetPieceIdx:
1303+  2F89 C5                   push bc
1304+  2F8A D5                   push de
1305+  2F8B E5                   push hl
1306+  2F8C 21 A2 2F             ld hl,pieceL
1307+  2F8F 06 0D                ld b,13
1308+  2F91 16 00                ld d,0
1309+  2F93             GetPcIxLoop:
1310+  2F93 BE                   cp (hl)
1311+  2F94 28 04                jr z,GetPcIx1
1312+  2F96 23                   inc hl
1313+  2F97 14                   inc d
1314+  2F98 10 F9                djnz GetPcIxLoop               
1315+  2F9A             GetPcIx1:
1316+  2F9A CB 22                sla d  ; x2
1317+  2F9C 7B                   ld a,e ;black or white square?; 
1318+  2F9D 82                   add a,d
1319+  2F9E E1                   pop hl
1320+  2F9F D1                   pop de
1321+  2FA0 C1                   pop bc
1322+  2FA1 C9                   ret        
1323+  2FA2             
1324+  2FA2 20 50 4E 42 pieceL:  .byte " PNBRQKpnbrqk"
1324+  2FA6 52 51 4B 70 
1324+  2FAA 6E 62 72 71 
1324+  2FAE 6B 
1325+  2FAF             
1326+  2FAF                      ;and position IX after
1327+  2FAF             GetPieceIX:
1328+  2FAF C5                   push bc
1329+  2FB0 E5                   push hl
1330+  2FB1 06 00                ld b,0
1331+  2FB3 4F                   ld c,a
1332+  2FB4 CB 21                sla c    ; offset
1333+  2FB6 DD 21 83 27          ld ix, PiecesIX
1334+  2FBA DD 09                add ix,bc
1335+  2FBC DD 6E 00             ld l,(ix)
1336+  2FBF DD 23                inc ix
1337+  2FC1 DD 66 00             ld h,(ix)
1338+  2FC4 E5                   push hl
1339+  2FC5 DD E1                pop ix   ;now IX contains address
1340+  2FC7 E1                   pop hl
1341+  2FC8 C1                   pop bc
1342+  2FC9 C9                   ret
1343+  2FCA             
1344+  2FCA                      ;to determine IX for mask
1345+  2FCA             GetPieceMskIX:
1346+  2FCA C5                   push bc
1347+  2FCB E5                   push hl
1348+  2FCC 06 00                ld b,0
1349+  2FCE 4F                   ld c,a
1350+  2FCF CB 21                sla c
1351+  2FD1 DD 21 06 28          ld ix, PiecesMskIX     ; offset of masks
1352+  2FD5 DD 09                add ix,bc
1353+  2FD7 DD 6E 00             ld l,(ix)
1354+  2FDA DD 23                inc ix
1355+  2FDC DD 66 00             ld h,(ix)
1356+  2FDF E5                   push hl
1357+  2FE0 DD E1                pop ix   ;now IX contains address
1358+  2FE2 E1                   pop hl
1359+  2FE3 C1                   pop bc
1360+  2FE4 C9                   ret
1361+  2FE5             
1362+  2FE5             ; This copie mask of piece to VRAM
1363+  2FE5             SaveMaskToo:
1364+  2FE5 F5                   push af         ; and save the mask of piece too - to see it moving after
1365+  2FE6 C5                   push bc
1366+  2FE7 D5                   push de
1367+  2FE8 E5                   push hl
1368+  2FE9 DD E5                push ix
1369+  2FEB 79                   ld a,c
1370+  2FEC FE 02                cp 2
1371+  2FEE 38 47                jr c, pcMsk2VRAMno
1372+  2FF0 CB 3F                srl a
1373+  2FF2 3D                   dec a           ; a = index PpNn....Kk      
1374+  2FF3 4F                   ld c,a
1375+  2FF4 06 00                ld b,0
1376+  2FF6 21 1E 28             ld hl,VRAMcpMsk
1377+  2FF9 09                   add hl,bc       ; hl contains flag if piece has been saved to VRAM
1378+  2FFA 7E                   ld a,(hl)
1379+  2FFB FE 01                cp 1
1380+  2FFD 28 38                jr z,pcMsk2VRAMno
1381+  2FFF 3E 01                ld a,1
1382+  3001 77                   ld (hl),a       ; now will be saved
1383+  3002 79                   ld a,c
1384+  3003 CD CA 2F             call GetPieceMskIX  ; get ix-address for mask
1385+  3006 11 1A 1A             ld de,$1A1A         ;26x26
1386+  3009 26 7B                ld h,$10 + $19*3
1387+  300B 2E 10                ld l,$10
1388+  300D 79                   ld a,c
1389+  300E FE 06                cp 6                ;for PNBRQK 0..5
1390+  3010 38 07                jr c,pcMskSetY
1391+  3012 7C                   ld a,h
1392+  3013 C6 19                add a,$19           ; set next column for black pieces
1393+  3015 67                   ld h,a
1394+  3016 79                   ld a,c
1395+  3017 D6 06                sub 6
1396+  3019             pcMskSetY:         
1397+  3019 FE 00                cp 0
1398+  301B 28 09                jr z,pcMskGoodY
1399+  301D 3D                   dec a
1400+  301E F5                   push af
1401+  301F 7D                   ld a,l
1402+  3020 C6 19                add a,$19
1403+  3022 6F                   ld l,a
1404+  3023 F1                   pop af
1405+  3024 18 F3                jr pcMskSetY
1406+  3026             pcMskGoodY:
1407+  3026 CD CA 39             call HMMC           ;copy mask RAM -> VRAM                  
1408+  3029             
1409+  3029 EB                   ex de,hl            ; de = hl
1410+  302A 21 2A 28             ld hl,VRAMcpMskXY   ; save X,Y for mask of piece index
1411+  302D 06 00                ld b,0
1412+  302F 09                   add hl,bc
1413+  3030 09                   add hl,bc         
1414+  3031 72                   ld (hl),d           ;save X
1415+  3032 23                   inc hl
1416+  3033 73                   ld (hl),e           ;save Y
1417+  3034                      
1418+  3034 CD 18 2F             call COPY2VRAMoutside
1419+  3037                      
1420+  3037             pcMsk2VRAMno:        
1421+  3037 DD E1                pop ix
1422+  3039 E1                   pop hl
1423+  303A D1                   pop de
1424+  303B C1                   pop bc
1425+  303C F1                   pop af
1426+  303D C9                   ret
1427+  303E             
1428+  303E 00          VRAM_msx .byte 0  ; flag that VRAM contains it
1429+  303F             
1430+  303F             ; Puts MSX logo on screen
1431+  303F             PutMSXlogo:
1432+  303F F5                   push af
1433+  3040 C5                   push bc
1434+  3041 D5                   push de
1435+  3042 E5                   push hl
1436+  3043 DD E5                push ix
1437+  3045                      
1438+  3045 3A 3E 30             ld a,(VRAM_msx)
1439+  3048 FE 00                cp 0
1440+  304A 20 1A                jr nz,PutMSXlog_Copy
1441+  304C                              
1442+  304C 26 DD                ld h,255-$22
1443+  304E 2E AF                ld l,209-$22
1444+  3050 11 0C 1E             ld de,$1E0C
1445+  3053 DD 21 F1 C1          ld ix, dtMSXlogo+6     ; top
1446+  3057 CD CA 39             call HMMC              ;copy RAM -> VRAM
1447+  305A 0E 00                ld c,0
1448+  305C CD 09 31             call COPY_frames2VRAM_outside ;the same as for frame  
1449+  305F                      
1450+  305F 3E 01                ld a,1
1451+  3061 32 3E 30             ld (VRAM_msx),a
1452+  3064 18 0C                jr PutMSXex
1453+  3066                               
1454+  3066             PutMSXlog_Copy:
1455+  3066 26 DD                ld h,255-$22
1456+  3068 2E AF                ld l,209-$22
1457+  306A 11 0C 1E             ld de,$1E0C            ; copy from VRAM outside > VRAM on screen
1458+  306D 0E 00                ld c,0
1459+  306F CD 54 31             call COPY_frames_fromVRAM
1460+  3072                      
1461+  3072             PutMSXex:                                                                                                                                                        
1462+  3072 DD E1                pop ix
1463+  3074 E1                   pop hl
1464+  3075 D1                   pop de
1465+  3076 C1                   pop bc        
1466+  3077 F1                   pop af
1467+  3078 C9                   ret                  
1468+  3079             
1469+  3079                      
1470+  3079             ; Puts frame for chess board
1471+  3079             PutFrame:
1472+  3079 F5                   push af
1473+  307A C5                   push bc
1474+  307B D5                   push de
1475+  307C E5                   push hl
1476+  307D DD E5                push ix
1477+  307F 3A 08 31             ld a,(VRAM_frame)
1478+  3082 FE 00                cp 0
1479+  3084 20 4F                jr nz,CopyFramesFromVRAM
1480+  3086                                ; DRAW and SAVE
1481+  3086 21 00 00             ld hl,0
1482+  3089 11 08 D2             ld de,$D208
1483+  308C DD 21 E1 AC          ld ix, dtFRUP+6     ; top
1484+  3090 CD CA 39             call HMMC           ;copy RAM -> VRAM
1485+  3093 0E 01                ld c,1
1486+  3095 CD 09 31             call COPY_frames2VRAM_outside
1487+  3098             
1488+  3098 21 00 00             ld hl,0
1489+  309B 11 D2 08             ld de,$08D2
1490+  309E DD 21 45 A6          ld ix, dtFRLF+6     ; left
1491+  30A2 CD CA 39             call HMMC           ;copy RAM -> VRAM
1492+  30A5 0E 02                ld c,2
1493+  30A7 CD 09 31             call COPY_frames2VRAM_outside
1494+  30AA             
1495+  30AA 21 00 CA             ld hl,$D200-$0800
1496+  30AD 11 D2 08             ld de,$08D2
1497+  30B0 DD 21 93 A9          ld ix, dtFRRT+6     ; right
1498+  30B4 CD CA 39             call HMMC           ;copy RAM -> VRAM
1499+  30B7 0E 00                ld c,0
1500+  30B9 CD 09 31             call COPY_frames2VRAM_outside
1501+  30BC                      
1502+  30BC 21 CA 00             ld hl,$00D2-$0008
1503+  30BF 11 08 D2             ld de,$D208
1504+  30C2 DD 21 F7 A2          ld ix, dtFRDN+6     ; bottom
1505+  30C6 CD CA 39             call HMMC           ;copy RAM -> VRAM
1506+  30C9 0E 00                ld c,0
1507+  30CB CD 09 31             call COPY_frames2VRAM_outside
1508+  30CE                      
1509+  30CE 3E 01                ld a,1
1510+  30D0 32 08 31             ld (VRAM_frame),a
1511+  30D3                      
1512+  30D3 18 2C                jr PutFramesEx
1513+  30D5                      
1514+  30D5             CopyFramesFromVRAM:
1515+  30D5 21 00 00             ld hl,0
1516+  30D8 11 08 D2             ld de,$D208         ; top
1517+  30DB 0E 01                ld c,1         
1518+  30DD CD 54 31             call COPY_frames_fromVRAM
1519+  30E0             
1520+  30E0 21 00 00             ld hl,0
1521+  30E3 11 D2 08             ld de,$08D2         ; left 
1522+  30E6 0E 02                ld c,2           
1523+  30E8 CD 54 31             call COPY_frames_fromVRAM
1524+  30EB             
1525+  30EB 21 00 CA             ld hl,$D200-$0800
1526+  30EE 11 D2 08             ld de,$08D2         ; right
1527+  30F1 0E 00                ld c,0         
1528+  30F3 CD 54 31             call COPY_frames_fromVRAM
1529+  30F6                      
1530+  30F6 21 CA 00             ld hl,$00D2-$0008
1531+  30F9 11 08 D2             ld de,$D208         ; bottom
1532+  30FC 0E 00                ld c,0         
1533+  30FE CD 54 31             call COPY_frames_fromVRAM
1534+  3101             
1535+  3101             PutFramesEx:
1536+  3101 DD E1                pop ix
1537+  3103 E1                   pop hl
1538+  3104 D1                   pop de
1539+  3105 C1                   pop bc
1540+  3106 F1                   pop af
1541+  3107 C9                   ret
1542+  3108             
1543+  3108 00          VRAM_frame:  .byte 0         ; 1 if frame saved to VRAM
1544+  3109             
1545+  3109             ; if c=0 then use XY of HL as it is
1546+  3109             ; if c=1 then upper border of frame
1547+  3109             ; if c=2 then left border of frame
1548+  3109             COPY_frames2VRAM_outside:     ;SAVES FRAME
1549+  3109 F5                   push af
1550+  310A E5                   push hl
1551+  310B 7C                   ld a,h
1552+  310C 32 DF 3B             ld (HC_p+0),a       ;X = H
1553+  310F 7D                   ld a,l            
1554+  3110 32 E1 3B             ld (HC_p+2),a       ;Y = L
1555+  3113 7A                   ld a,d
1556+  3114 32 E7 3B             ld (HC_p+8),a       ;D width
1557+  3117 7B                   ld a,e
1558+  3118 32 E9 3B             ld (HC_p+10),a      ;E height
1559+  311B AF                   xor a        
1560+  311C 32 E0 3B             ld (HC_p+1),a       ;X
1561+  311F 32 E2 3B             ld (HC_p+3),a       ;Y
1562+  3122 32 E4 3B             ld (HC_p+5),a       ;
1563+  3125 32 E8 3B             ld (HC_p+9),a       ;dots
1564+  3128 32 EA 3B             ld (HC_p+11),a      ;dots
1565+  312B 32 EB 3B             ld (HC_p+12),a      ;DIX/DIY
1566+  312E 3E 03                ld a,%00000011
1567+  3130 32 E6 3B             ld (HC_p+7),a       ; 512+Y down
1568+  3133                      
1569+  3133 79                   ld a,c
1570+  3134 FE 01                cp 1
1571+  3136 28 06                jr z,CPYfrUP
1572+  3138 FE 02                cp 2
1573+  313A 28 07                jr z,CPYfrLF
1574+  313C 18 08                jr CPY_asItIs        
1575+  313E             CPYfrUP:
1576+  313E 21 D4 00             ld hl,$00D2+$0002
1577+  3141 18 03                jr CPY_asItIs
1578+  3143             CPYfrLF:
1579+  3143 21 00 D4             ld hl,$D200+$0200
1580+  3146             
1581+  3146             CPY_asItIs:
1582+  3146 7C                   ld a,h
1583+  3147 32 E3 3B             ld (HC_p+4),a       ;to X
1584+  314A 7D                   ld a,l
1585+  314B 32 E5 3B             ld (HC_p+6),a       ;to Y (+next 2 bits)
1586+  314E E1                   pop hl
1587+  314F CD EC 3B             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1588+  3152 F1                   pop af
1589+  3153 C9                   ret
1590+  3154                      
1591+  3154             COPY_frames_fromVRAM:        ;Copies back FRAME from VRAM
1592+  3154 F5                   push af
1593+  3155 E5                   push hl
1594+  3156 7C                   ld a,h
1595+  3157 32 E3 3B             ld (HC_p+4),a       ;to X
1596+  315A 7D                   ld a,l            
1597+  315B 32 E5 3B             ld (HC_p+6),a       ;to Y (+next 2 bits)
1598+  315E 7A                   ld a,d
1599+  315F 32 E7 3B             ld (HC_p+8),a       ;D width
1600+  3162 7B                   ld a,e
1601+  3163 32 E9 3B             ld (HC_p+10),a      ;E height
1602+  3166 AF                   xor a        
1603+  3167 32 E0 3B             ld (HC_p+1),a       ;X
1604+  316A 32 E6 3B             ld (HC_p+7),a       ;to Y
1605+  316D 32 E4 3B             ld (HC_p+5),a       ;
1606+  3170 32 E8 3B             ld (HC_p+9),a       ;dots
1607+  3173 32 EA 3B             ld (HC_p+11),a      ;dots
1608+  3176 32 EB 3B             ld (HC_p+12),a      ;DIX/DIY
1609+  3179 3E 03                ld a,%00000011
1610+  317B 32 E2 3B             ld (HC_p+3),a       ; 512+Y down
1611+  317E                      
1612+  317E 79                   ld a,c
1613+  317F FE 01                cp 1
1614+  3181 28 06                jr z,BCPYfrUP
1615+  3183 FE 02                cp 2
1616+  3185 28 07                jr z,BCPYfrLF
1617+  3187 18 08                jr BCPY_asItIs        
1618+  3189             BCPYfrUP:
1619+  3189 21 D4 00             ld hl,$00D2+$0002
1620+  318C 18 03                jr BCPY_asItIs
1621+  318E             BCPYfrLF:
1622+  318E 21 00 D4             ld hl,$D200+$0200
1623+  3191             
1624+  3191             BCPY_asItIs:
1625+  3191 7C                   ld a,h
1626+  3192 32 DF 3B             ld (HC_p+0),a       ;X = H
1627+  3195 7D                   ld a,l
1628+  3196 32 E1 3B             ld (HC_p+2),a       ;Y = L
1629+  3199 E1                   pop hl
1630+  319A CD EC 3B             call HMMMf          ;copy VRAM outside visible screen -> VRAM
1631+  319D F1                   pop af
1632+  319E C9                   ret
1633+  319F             
1634+  319F                             
1635+  319F                      
1636+  319F             ; Puts rounded identification about side to move
1637+  319F             
1638+  319F             PutToMove:
1639+  319F F5                   push af
1640+  31A0 C5                   push bc
1641+  31A1 D5                   push de
1642+  31A2 E5                   push hl
1643+  31A3 DD E5                push ix
1644+  31A5                      
1645+  31A5 DD 21 42 28          ld ix,CircIX
1646+  31A9                               
1647+  31A9 3A 05 28             ld a,(VRAMcirc)
1648+  31AC FE 00                cp 0
1649+  31AE 20 30                jr nz,circ2VRAM2
1650+  31B0                                                  
1651+  31B0                      ;DRAW and SAVE a copy                
1652+  31B0 3E 01                ld a,1
1653+  31B2 32 05 28             ld (VRAMcirc),a     ; bitmap saved flag
1654+  31B5                      
1655+  31B5 06 00                ld b,0       ; loop 4 bitmaps
1656+  31B7 26 00                ld h,0       ; X
1657+  31B9             Save2VRAMsgnLoop:
1658+  31B9 C5                   push bc
1659+  31BA                      
1660+  31BA DD E5                push ix            ; table of bitmaps
1661+  31BC CD 1A 32             call GetIXfrom4tb  ; ix - address in VRAM for current bitmap
1662+  31BF                      
1663+  31BF 2E C3                ld l,209-$E    ; hl = X,Y
1664+  31C1                      
1665+  31C1 EB                   ex de,hl       ; de = hl
1666+  31C2 CD 18 2F             call COPY2VRAMoutside  ; copy blank to put sign on it with transp.logical                 
1667+  31C5 EB                   ex de,hl                          
1668+  31C6                                                          
1669+  31C6 11 0E 0E             ld de,$0E0E    ; 14x14
1670+  31C9 CD CA 39             call HMMC      ;copy RAM -> VRAM
1671+  31CC                 
1672+  31CC CD 28 32             call SgCopy2VRAMtrsp  ;copies 13x13 (w/o transparent)
1673+  31CF                      
1674+  31CF DD E1                pop ix
1675+  31D1 DD 23                inc ix
1676+  31D3 DD 23                inc ix
1677+  31D5                      
1678+  31D5 7C                   ld a,h
1679+  31D6 C6 0E                add a,$E       ; X=X+14
1680+  31D8 67                   ld h,a
1681+  31D9                      
1682+  31D9 C1                   pop bc
1683+  31DA 04                   inc b
1684+  31DB 78                   ld a,b
1685+  31DC FE 04                cp 4
1686+  31DE 20 D9                jr nz,Save2VRAMsgnLoop       
1687+  31E0                        
1688+  31E0             circ2VRAM2:         
1689+  31E0                      ;COPY sign from VRAM which side to move
1690+  31E0                      
1691+  31E0 26 00                ld h,0                  ;from X for case "white to move" (bitmaps are placed horizontally)
1692+  31E2 2E C3                ld l,209-$E             ;from Y
1693+  31E4                      
1694+  31E4 3A 81 01             ld a,(SIDE)
1695+  31E7 FE 00                cp 0
1696+  31E9 28 0A                jr z,SgWhite2Move
1697+  31EB DD 23                inc ix
1698+  31ED DD 23                inc ix
1699+  31EF DD 23                inc ix
1700+  31F1 DD 23                inc ix   ;will use two bitmaps at addr+4 
1701+  31F3 26 1C                ld h,$E+$E              ;from X for case "black to move"            
1702+  31F5             SgWhite2Move:
1703+  31F5                      
1704+  31F5 DD E5                push ix                 ; table of bitmaps
1705+  31F7 CD 1A 32             call GetIXfrom4tb       ; ix - address in VRAM for current bitmap of white side
1706+  31FA                      
1707+  31FA 16 D2                ld d,204+6
1708+  31FC 1E C2                ld e,204-10
1709+  31FE                      
1710+  31FE CD 5F 32             call SgCopy2Board  ;white sign
1711+  3201                      
1712+  3201 DD E1                pop ix ; restore table of bitmaps
1713+  3203 DD 23                inc ix
1714+  3205 DD 23                inc ix ; to next bitmap pointer
1715+  3207             
1716+  3207 CD 1A 32             call GetIXfrom4tb  ; ix - address in VRAM for current bitmap of black side
1717+  320A                      
1718+  320A 7C                   ld a,h
1719+  320B C6 0E                add a,$E       ; X=X+14
1720+  320D 67                   ld h,a
1721+  320E                      
1722+  320E 1E 08                ld e,8
1723+  3210 CD 5F 32             call SgCopy2Board  ;black sign
1724+  3213                      
1725+  3213 DD E1                pop ix
1726+  3215 E1                   pop hl
1727+  3216 D1                   pop de
1728+  3217 C1                   pop bc
1729+  3218 F1                   pop af
1730+  3219 C9                   ret
1731+  321A             
1732+  321A             GetIXfrom4tb:
1733+  321A D5                   push de
1734+  321B DD 5E 00             ld e,(ix)
1735+  321E DD 23                inc ix
1736+  3220 DD 56 00             ld d,(ix)
1737+  3223                               
1738+  3223 D5                   push de
1739+  3224 DD E1                pop ix         ; ix - address in VRAM
1740+  3226 D1                   pop de
1741+  3227 C9                   ret
1742+  3228             
1743+  3228             ;Copy with logical transparent
1744+  3228             SgCopy2VRAMtrsp: 
1745+  3228                      
1746+  3228 7C                   ld a,h              ;X
1747+  3229 32 17 3C             ld (LM_p+0),a       ;
1748+  322C 32 1B 3C             ld (LM_p+4),a       ;to X          
1749+  322F 7D                   ld a,l              ;Y
1750+  3230 32 19 3C             ld (LM_p+2),a       ;
1751+  3233 32 1D 3C             ld (LM_p+6),a       ;to Y         
1752+  3236 3E 0E                ld a,$E
1753+  3238 32 1F 3C             ld (LM_p+8),a       ;14
1754+  323B 32 21 3C             ld (LM_p+10),a      ;14
1755+  323E AF                   xor a
1756+  323F 32 18 3C             ld (LM_p+1),a
1757+  3242 32 1C 3C             ld (LM_p+5),a       ;
1758+  3245 32 1A 3C             ld (LM_p+3),a       ;            
1759+  3248 32 20 3C             ld (LM_p+9),a       ;dots
1760+  324B 32 22 3C             ld (LM_p+11),a      ;dots
1761+  324E 32 23 3C             ld (LM_p+12),a      ;DIX/DIY
1762+  3251 3E 01                ld a,%00000001
1763+  3253 32 1E 3C             ld (LM_p+7),a       ;256+Y
1764+  3256 3E 08                ld a,%00001000      ;TIMP copy
1765+  3258 32 24 3C             ld (LM_p+13),a      ;logical
1766+  325B CD 25 3C             call LMMMf          ;copy VRAM -> VRAM without transparent color
1767+  325E C9                   ret                 ;to invisible area          
1768+  325F                      
1769+  325F             SgCopy2Board:
1770+  325F             
1771+  325F 7C                   ld a,h              ;saved X
1772+  3260 32 DF 3B             ld (HC_p+0),a       ;X
1773+  3263 7D                   ld a,l              ;saved Y                      
1774+  3264 32 E1 3B             ld (HC_p+2),a       ;Y
1775+  3267 7A                   ld a,d         
1776+  3268 32 E3 3B             ld (HC_p+4),a       ;to X
1777+  326B 7B                   ld a,e         
1778+  326C 32 E5 3B             ld (HC_p+6),a       ;to Y (+next 2 bits)
1779+  326F 3E 0E                ld a,$E
1780+  3271 32 E7 3B             ld (HC_p+8),a       ;14
1781+  3274 32 E9 3B             ld (HC_p+10),a      ;14
1782+  3277 AF                   xor a        
1783+  3278 32 E0 3B             ld (HC_p+1),a       ;X
1784+  327B 32 E6 3B             ld (HC_p+7),a       ;to Y
1785+  327E 32 E4 3B             ld (HC_p+5),a       ;
1786+  3281 32 E8 3B             ld (HC_p+9),a       ;dots
1787+  3284 32 EA 3B             ld (HC_p+11),a      ;dots
1788+  3287 32 EB 3B             ld (HC_p+12),a      ;DIX/DIY
1789+  328A 3E 01                ld a,%00000001
1790+  328C 32 E2 3B             ld (HC_p+3),a       ; 256+Y
1791+  328F CD EC 3B             call HMMMf          ;copy VRAM outside visible screen -> VRAM on board                         
1792+  3292 C9                   ret
1793+  3293             
1794+  3293             
1795+  3293             ;----------------------------------------------------|
1796+  3293             DrawCursor:              ; Draws cursor (UserControl)
1797+  3293 F5                   push af
1798+  3294 3A 7E 27             ld a,(Stylo)
1799+  3297 CB 47                bit 0,a
1800+  3299 28 3C                jr z,noCursors
1801+  329B             
1802+  329B C5                   push bc
1803+  329C D5                   push de
1804+  329D E5                   push hl
1805+  329E                      
1806+  329E 3A 80 27             ld a,(DragSq)
1807+  32A1 FE FF                cp $ff
1808+  32A3 28 16                jr z,DrawCursorOnly
1809+  32A5             
1810+  32A5 4F                   ld c,a             ; Draw DragSquare too
1811+  32A6 CD 4A 2F             call GetHLbySquare ; Get X,Y
1812+  32A9                           
1813+  32A9 06 0E                ld b,$E            ; color
1814+  32AB 0E 16                ld c,$16           ; length of lines
1815+  32AD CD D9 32             call CursRectDraw  ; line
1816+  32B0                      
1817+  32B0 01 01 01             ld bc,$0101
1818+  32B3 09                   add hl,bc          ; shift 1 dot right down
1819+  32B4             
1820+  32B4 06 0E                ld b,$E            ; color
1821+  32B6 0E 14                ld c,$14           ; double-line
1822+  32B8 CD D9 32             call CursRectDraw
1823+  32BB                      
1824+  32BB             DrawCursorOnly:         
1825+  32BB 3A 7F 27             ld a,(CursorSq)
1826+  32BE 4F                   ld c,a
1827+  32BF CD 4A 2F             call GetHLbySquare ; Get X,Y
1828+  32C2                           
1829+  32C2 06 0F                ld b,$F            ; color
1830+  32C4 0E 16                ld c,$16           ; length of lines
1831+  32C6 CD D9 32             call CursRectDraw  ; line
1832+  32C9                      
1833+  32C9 01 01 01             ld bc,$0101
1834+  32CC 09                   add hl,bc          ; shift 1 dot right down
1835+  32CD             
1836+  32CD 06 0F                ld b,$F            ; color
1837+  32CF 0E 14                ld c,$14           ; double-line
1838+  32D1 CD D9 32             call CursRectDraw
1839+  32D4                      
1840+  32D4 E1                   pop hl         
1841+  32D5 D1                   pop de
1842+  32D6 C1                   pop bc
1843+  32D7             noCursors:         
1844+  32D7 F1                   pop af
1845+  32D8 C9                   ret
1846+  32D9             
1847+  32D9             CursRectDraw:               ; rectangle with length provided in c, color in b        
1848+  32D9 7C                   ld a,h
1849+  32DA 81                   add a,c
1850+  32DB 57                   ld d,a             ; X+25
1851+  32DC 5D                   ld e,l             ; Y
1852+  32DD 3E 00                ld a,0             ; just overwrite
1853+  32DF CD 78 3B             call LINE          ; Line 1
1854+  32E2 62                   ld h,d
1855+  32E3 7B                   ld a,e
1856+  32E4 81                   add a,c
1857+  32E5 3C                   inc a
1858+  32E6 3C                   inc a
1859+  32E7 5F                   ld e,a
1860+  32E8 3E 00                ld a,0             ; just overwrite
1861+  32EA CD 78 3B             call LINE          ; Line 2
1862+  32ED 6B                   ld l,e
1863+  32EE 7A                   ld a,d
1864+  32EF 91                   sub c
1865+  32F0 57                   ld d,a
1866+  32F1 3E 00                ld a,0             ; just overwrite
1867+  32F3 CD 78 3B             call LINE          ; Line 3
1868+  32F6 62                   ld h,d
1869+  32F7 7B                   ld a,e
1870+  32F8 91                   sub c
1871+  32F9 3D                   dec a
1872+  32FA 3D                   dec a
1873+  32FB 5F                   ld e,a
1874+  32FC 3E 00                ld a,0             ; just overwrite
1875+  32FE CD 78 3B             call LINE          ; Line 4
1876+  3301 6B                   ld l,e             ; hl now the same        
1877+  3302 C9                   ret
1878+  3303             
1879+  3303             ;------------------------------------------------------
1880+  3303             ; KEY & CURSOR CONTROLLER
1881+  3303             ;
1882+  3303             ; a-reg contains ASCII code of last key pressed
1883+  3303             ; Arrows controls for cursor.
1884+  3303             ; Can't go outside board,
1885+  3303             ; Can't go twice (avoid fast emulator speed)
1886+  3303             ;
1887+  3303             
1888+  3303 00          PreKeyWas:  .byte 0
1889+  3304             
1890+  3304             Cursor_Key_Controls:
1891+  3304             
1892+  3304 F5                   push af
1893+  3305 C5                   push bc
1894+  3306                      
1895+  3306 FE 7A                cp 'z'             ; If Z was pressed, double action
1896+  3308 20 0C                jr nz, CkeyIf_z
1897+  330A             CkeyZ:         
1898+  330A                                         ; use the same key that was before
1899+  330A 3A 03 33             ld a,(PreKeyWas)
1900+  330D 4F                   ld c,a
1901+  330E 3E 00                ld a,0
1902+  3310 32 03 33             ld (PreKeyWas),a
1903+  3313 79                   ld a,c
1904+  3314 18 1B                jr CkeyWhatKeyCode         
1905+  3316             CkeyIf_z:
1906+  3316 FE 5A                cp 'Z'
1907+  3318 28 F0                jr z, CkeyZ
1908+  331A FE 2F                cp '/'
1909+  331C 28 EC                jr z, CkeyZ
1910+  331E FE 7E                cp '~'
1911+  3320 28 E8                jr z, CkeyZ
1912+  3322 FE 7C                cp '|'
1913+  3324 28 E4                jr z, CkeyZ     ; bunch of the same keys
1914+  3326             CkeyNormal:
1915+  3326                 
1916+  3326 4F                   ld c,a
1917+  3327 3A 03 33             ld a,(PreKeyWas)
1918+  332A B9                   cp c
1919+  332B 28 36                jr z,CkeyNo       ; the same, emulator may be too fast
1920+  332D 79                   ld a,c
1921+  332E 32 03 33             ld (PreKeyWas),a  ; key now
1922+  3331                      
1923+  3331             CkeyWhatKeyCode:
1924+  3331 FE 1B                cp 27
1925+  3333 20 07                jr nz, CkeyIf_space
1926+  3335                      
1927+  3335~            #ifdef PGN_COMPILE
1928+  3335~                    ; no exit because too heavy memory usage to continue after
1929+  3335             #else       
1930+  3335                      
1931+  3335 3E 01                ld a,1                     ; Exit on ESC
1932+  3337 32 82 27             ld (Grph_Exit),a
1933+  333A             #endif         
1934+  333A 18 27                jr CkeyNo
1935+  333C                               
1936+  333C             CkeyIf_space:                  
1937+  333C FE 20                cp 32
1938+  333E 20 05                jr nz, CkeyIfEnter
1939+  3340             CkeySpace:                         ; SPACE pressed
1940+  3340 CD 66 33             call CKeySpacePressed
1941+  3343 18 1E                jr CkeyNo
1942+  3345                      
1943+  3345             CkeyIfEnter:
1944+  3345 FE 0D                cp 13
1945+  3347 28 F7                jr z, CkeySpace           ; the same as space
1946+  3349                       ;and process other key controls
1947+  3349                                               
1948+  3349 CD C2 33             call IfCursorKeys       ; process if cursor key has been pressed
1949+  334C             CKeyPsetup:
1950+  334C CD 29 34             call IfPieceSetupKeys   ; process if setup of pieces key has been pressed
1951+  334F                      
1952+  334F              
1953+  334F FE 75                cp 'u'             ; If U was pressed, try undomove
1954+  3351 20 0C                jr nz, CkeyIf_u
1955+  3353             CkeyU:         
1956+  3353                                         ; use the same key that was before
1957+  3353             
1958+  3353~            #ifdef PGN_COMPILE
1959+  3353~            
1960+  3353~                     call DO_Replay_UnmakeMove   ; unmake last move in replay
1961+  3353             #else
1962+  3353 3A 7E 27             ld a,(Stylo)
1963+  3356 CB 47                bit 0,a
1964+  3358 28 09                jr z,CkeyNo        ; if cursor allowed
1965+  335A CD FB 29             call Chess_UnMake_Move_U    ; unmake last move
1966+  335D             #endif
1967+  335D 18 04                jr CkeyNo
1968+  335F             CkeyIf_u:
1969+  335F FE 55                cp 'U'
1970+  3361 28 F0                jr z, CkeyU
1971+  3363                      
1972+  3363             CkeyIfNoU:
1973+  3363             
1974+  3363             CkeyNo:
1975+  3363 C1                   pop bc
1976+  3364 F1                   pop af
1977+  3365 C9                   ret 
1978+  3366             
1979+  3366                     
1980+  3366             ;-------------------- If space key pressed -the long one
1981+  3366             CKeySpacePressed:         
1982+  3366 F5                   push af
1983+  3367 3A 7E 27             ld a,(Stylo)
1984+  336A                      
1985+  336A~            #ifdef PGN_COMPILE 
1986+  336A~                     
1987+  336A~                     call DO_Replay_Move            ; if REPLAY mode
1988+  336A~            
1989+  336A             #else         
1990+  336A                      
1991+  336A CB 47                bit 0,a                   ; if cursor is not allowed 
1992+  336C 28 4F                jr z,CSpcOver
1993+  336E                               
1994+  336E CB 57                bit 2,a                   ; if setup of pieces then empty square
1995+  3370 28 07                jr z,CSpcNPS
1996+  3372 3E 20                ld a,' '
1997+  3374 CD 29 34             call IfPieceSetupKeys     ; process if setup of pieces key has been pressed
1998+  3377 18 44                jr CSpcOver
1999+  3379             CSpcNPS:         
2000+  3379 CB 4F                bit 1,a                   ; if can not drag and move pieces 
2001+  337B 28 40                jr z,CSpcOver
2002+  337D             
2003+  337D 3A 50 2B             ld a,(AnimI)
2004+  3380 FE 00                cp 0
2005+  3382 20 39                jr nz,CSpcOver            ; animation process right now
2006+  3384 3A 80 27             ld a,(DragSq)
2007+  3387 FE FF                cp $ff
2008+  3389 20 16                jr nz, CDragWas
2009+  338B             CSpcDragz:         
2010+  338B 3E 00                ld a,0
2011+  338D CD 6E 2A             call IsValidDragMove
2012+  3390 FE 00                cp 0
2013+  3392 28 29                jr z, CSpcOver           ; if drag not valid
2014+  3394                               
2015+  3394 3A 7F 27             ld a,(CursorSq)
2016+  3397 32 80 27             ld (DragSq),a
2017+  339A 18 21                jr CSpcOver
2018+  339C                      
2019+  339C             CSpcTryDrag:
2020+  339C CD F6 2C             call DrawBoard       ; redraw all
2021+  339F 18 EA                jr CSpcDragz        
2022+  33A1                      
2023+  33A1             CDragWas:
2024+  33A1 32 3E 2B             ld (Move_sq_f),a
2025+  33A4 3E 01                ld a,1
2026+  33A6 CD 6E 2A             call IsValidDragMove
2027+  33A9 F5                   push af
2028+  33AA 3E FF                ld a,$ff
2029+  33AC 32 80 27             ld (DragSq),a
2030+  33AF F1                   pop af
2031+  33B0 FE 00                cp 0
2032+  33B2 28 E8                jr z, CSpcTryDrag      ; if move not valid
2033+  33B4             
2034+  33B4 3A 7F 27             ld a,(CursorSq)
2035+  33B7 32 3F 2B             ld (Move_sq_t),a
2036+  33BA                      
2037+  33BA CD D8 29             call Chess_Move_Cursor          ; this will set animation and do the move
2038+  33BD             CSpcOver:
2039+  33BD CD 93 32             call DrawCursor
2040+  33C0                      
2041+  33C0             #endif         
2042+  33C0 F1                   pop af
2043+  33C1 C9                   ret         
2044+  33C2                      
2045+  33C2             ;---------------------------------
2046+  33C2             ; If cursor arrow keys pressed
2047+  33C2             ;
2048+  33C2             IfCursorKeys:
2049+  33C2             
2050+  33C2 F5                   push af     
2051+  33C3 FE 1D                cp 29
2052+  33C5 20 17                jr nz, CkeyIfCurs2
2053+  33C7                                                ; LEFT pressed                                 
2054+  33C7 3A 7F 27             ld a,(CursorSq)
2055+  33CA 4F                   ld c,a                                   
2056+  33CB E6 07                and 7
2057+  33CD FE 00                cp 0
2058+  33CF 28 56                jr z,CkeyCKexit
2059+  33D1 79                   ld a,c
2060+  33D2 CD 0D 2D             call DrawSquare
2061+  33D5 3D                   dec a
2062+  33D6                      
2063+  33D6             CKeyCursMv:
2064+  33D6 32 7F 27             ld (CursorSq),a
2065+  33D9 CD 93 32             call DrawCursor
2066+  33DC 18 49                jr CkeyCKexit
2067+  33DE             
2068+  33DE             CkeyIfCurs2:  
2069+  33DE FE 1C                cp 28
2070+  33E0 20 11                jr nz, CkeyIfCurs3                                       
2071+  33E2                                                ; RIGHT pressed                                      
2072+  33E2 3A 7F 27             ld a,(CursorSq)
2073+  33E5 4F                   ld c,a         
2074+  33E6 E6 07                and 7
2075+  33E8 FE 07                cp 7
2076+  33EA 28 3B                jr z,CkeyCKexit
2077+  33EC 79                   ld a,c
2078+  33ED CD 0D 2D             call DrawSquare
2079+  33F0 3C                   inc a         
2080+  33F1 18 E3                jr CKeyCursMv
2081+  33F3             
2082+  33F3                                                                                                                           
2083+  33F3             CkeyIfCurs3:
2084+  33F3 FE 1E                cp 30
2085+  33F5 20 16                jr nz, CkeyIfCurs4                                       
2086+  33F7                                                ; UP pressed                                   
2087+  33F7 3A 7F 27             ld a,(CursorSq)
2088+  33FA 4F                   ld c,a                                           
2089+  33FB CB 3F                srl a
2090+  33FD CB 3F                srl a
2091+  33FF CB 3F                srl a
2092+  3401 FE 07                cp 7
2093+  3403 28 22                jr z,CkeyCKexit
2094+  3405 79                   ld a,c
2095+  3406 CD 0D 2D             call DrawSquare
2096+  3409 C6 08                add a,8                 
2097+  340B 18 C9                jr CKeyCursMv
2098+  340D                                                 
2099+  340D             CkeyIfCurs4:
2100+  340D FE 1F                cp 31
2101+  340F 20 16                jr nz, CkeyCKexit                                      
2102+  3411                                                ; DOWN pressed                                   
2103+  3411 3A 7F 27             ld a,(CursorSq)
2104+  3414 4F                   ld c,a                                           
2105+  3415 CB 3F                srl a
2106+  3417 CB 3F                srl a
2107+  3419 CB 3F                srl a
2108+  341B FE 00                cp 0
2109+  341D 28 08                jr z,CkeyCKexit
2110+  341F 79                   ld a,c
2111+  3420 CD 0D 2D             call DrawSquare
2112+  3423 D6 08                sub 8        
2113+  3425 18 AF                jr CKeyCursMv
2114+  3427                      
2115+  3427             CkeyCKexit:
2116+  3427 F1                   pop af         
2117+  3428 C9                   ret
2118+  3429             
2119+  3429             ;---------------------------------
2120+  3429             ; If piece keys PNBRQK pressed
2121+  3429             ;
2122+  3429             IfPieceSetupKeys:
2123+  3429 F5                   push af
2124+  342A C5                   push bc
2125+  342B D5                   push de
2126+  342C E5                   push hl
2127+  342D 47                   ld b,a   ;save code
2128+  342E FE 50                cp 'P'
2129+  3430 28 32                jr z,CsetupWP
2130+  3432 FE 4E                cp 'N'
2131+  3434 28 3B                jr z,CsetupWN
2132+  3436 FE 42                cp 'B'
2133+  3438 28 37                jr z,CsetupWB
2134+  343A FE 52                cp 'R'
2135+  343C 28 33                jr z,CsetupWR
2136+  343E FE 51                cp 'Q'
2137+  3440 28 2F                jr z,CsetupWQ
2138+  3442 FE 4B                cp 'K'
2139+  3444 28 2D                jr z,CsetupWK
2140+  3446 FE 70                cp 'p'
2141+  3448 28 1A                jr z,CsetupBP
2142+  344A FE 6E                cp 'n'
2143+  344C 28 23                jr z,CsetupBN
2144+  344E FE 62                cp 'b'
2145+  3450 28 1F                jr z,CsetupBB
2146+  3452 FE 72                cp 'r'
2147+  3454 28 1B                jr z,CsetupBR
2148+  3456 FE 71                cp 'q'
2149+  3458 28 17                jr z,CsetupBQ
2150+  345A FE 6B                cp 'k'
2151+  345C 28 21                jr z,CsetupBK
2152+  345E FE 20                cp ' '
2153+  3460 28 2B                jr z,CsetupBlank
2154+  3462 18 27                jr CsetupDoNothing
2155+  3464             CsetupWP:
2156+  3464             CsetupBP:
2157+  3464 3A 7F 27             ld a,(CursorSq)
2158+  3467 FE 08                cp 8
2159+  3469 38 7C                jr c,CsetupKexit
2160+  346B FE 38                cp 56
2161+  346D 30 78                jr nc,CsetupKexit
2162+  346F 18 1E                jr Csetup2        
2163+  3471             CsetupWN:
2164+  3471             CsetupWB:
2165+  3471             CsetupWR:
2166+  3471             CsetupWQ:
2167+  3471             CsetupBN:
2168+  3471             CsetupBB:
2169+  3471             CsetupBR:
2170+  3471             CsetupBQ:
2171+  3471 18 1C                jr Csetup2
2172+  3473             CsetupWK:
2173+  3473 3A 84 01             ld a,(WKSQ)
2174+  3476 FE FF                cp $ff
2175+  3478 28 03                jr z,Csu2WK
2176+  347A CD EC 34             call CsuKRmv    ; White king not here anymore
2177+  347D 18 10       Csu2WK:  jr Csetup2
2178+  347F             
2179+  347F             
2180+  347F             CsetupBK:
2181+  347F 3A 85 01             ld a,(BKSQ)
2182+  3482 FE FF                cp $ff
2183+  3484 28 03                jr z,Csu2BK
2184+  3486 CD EC 34             call CsuKRmv    ; Black king not here anymore
2185+  3489 18 04       Csu2BK:  jr Csetup2
2186+  348B                      
2187+  348B             CsetupDoNothing:
2188+  348B 18 5A                jr CsetupKexit  ; exit
2189+  348D             
2190+  348D 06 00       CsetupBlank: ld b,0 ; will be empty square
2191+  348F             
2192+  348F             Csetup2:               ;puts new piece on board or clears square
2193+  348F 3A 7F 27             ld a,(CursorSq)
2194+  3492 CD 22 2C             call ObtainHLboardBySq
2195+  3495 4F                   ld c,a
2196+  3496 3A 84 01             ld a,(WKSQ)
2197+  3499 B9                   cp c
2198+  349A 20 07                jr nz,CsuNoOverWK
2199+  349C 3E FF                ld a,$ff
2200+  349E 32 84 01             ld (WKSQ),a
2201+  34A1 18 0B                jr CsuOverK       
2202+  34A3             CsuNoOverWK:       
2203+  34A3 3A 85 01             ld a,(BKSQ)
2204+  34A6 B9                   cp c
2205+  34A7 20 05                jr nz,CsuOverK
2206+  34A9 3E FF                ld a,$ff
2207+  34AB 32 85 01             ld (BKSQ),a
2208+  34AE             
2209+  34AE             CsuOverK:     
2210+  34AE 78                   ld a,b
2211+  34AF FE 4B                cp 'K'
2212+  34B1 20 06                jr nz, CsuNoWKnwpos
2213+  34B3 79                   ld a,c
2214+  34B4 32 84 01             ld (WKSQ),a
2215+  34B7 18 08                jr CsuOverK2
2216+  34B9             CsuNoWKnwpos:
2217+  34B9 FE 6B                cp 'k'
2218+  34BB 20 04                jr nz, CsuOverK2
2219+  34BD 79                   ld a,c
2220+  34BE 32 85 01             ld (BKSQ),a
2221+  34C1             CsuOverK2:
2222+  34C1 78                   ld a,b
2223+  34C2 70                   ld (hl),b          ; new piece or empty square here
2224+  34C3 FE 00                cp 0
2225+  34C5 28 0D                jr z,CsuNSd
2226+  34C7 FE 5A                cp 'Z'
2227+  34C9 30 04                jr nc,CsetupBlackPc
2228+  34CB 3E 00                ld a,0
2229+  34CD 18 02                jr CsuSDm
2230+  34CF             CsetupBlackPc:         
2231+  34CF 3E 01                ld a,1
2232+  34D1 32 81 01    CsuSDm:  ld (SIDE),a
2233+  34D4 CD 9F 31    CsuNSd:  call PutToMove
2234+  34D7 79                   ld a,c        
2235+  34D8 CD 0D 2D             call DrawSquare
2236+  34DB CD FE 34             call RecalcCastles ;what castlings are possible?
2237+  34DE CD 93 32             call DrawCursor
2238+  34E1 11 2D 29             ld de,wasSetUpFEN
2239+  34E4 CD 9C 1B             call GetFEN        ;keeps actual FEN for position
2240+  34E7             CsetupKexit:
2241+  34E7 E1                   pop hl         
2242+  34E8 D1                   pop de
2243+  34E9 C1                   pop bc
2244+  34EA F1                   pop af
2245+  34EB C9                   ret
2246+  34EC             
2247+  34EC             ; this is used for kings to remove them from board
2248+  34EC F5          CsuKRmv: push af
2249+  34ED C5                   push bc
2250+  34EE E5                   push hl
2251+  34EF 4F                   ld c,a
2252+  34F0 CD 22 2C             call ObtainHLboardBySq
2253+  34F3 3E 00                ld a,0
2254+  34F5 77                   ld (hl),a
2255+  34F6 79                   ld a,c
2256+  34F7 CD 0D 2D             call DrawSquare ; empty square now         
2257+  34FA E1                   pop hl
2258+  34FB C1                   pop bc
2259+  34FC F1                   pop af
2260+  34FD C9                   ret
2261+  34FE             ;
2262+  34FE             ; this calculates maximum possible castling and sets flags
2263+  34FE             ; otherwise movements may not work normally
2264+  34FE             ; 
2265+  34FE             RecalcCastles:
2266+  34FE F5                   push af
2267+  34FF F5                   push af
2268+  3500 E5                   push hl
2269+  3501 06 00                ld b,0         ; new flags for castlings
2270+  3503 3A 84 01             ld a,(WKSQ)
2271+  3506 FE 04                cp 4
2272+  3508 20 18                jr nz,RclcBlack
2273+  350A 3E 07                ld a,7
2274+  350C CD 22 2C             call ObtainHLboardBySq
2275+  350F 7E                   ld a,(hl)
2276+  3510 FE 52                cp 'R'
2277+  3512 20 02                jr nz,RclnWr1
2278+  3514 CB C0                set 0,b
2279+  3516 3E 00       RclnWr1: ld a,0
2280+  3518 CD 22 2C             call ObtainHLboardBySq
2281+  351B 7E                   ld a,(hl)
2282+  351C FE 52                cp 'R'
2283+  351E 20 02                jr nz,RclcBlack
2284+  3520 CB C8                set 1,b
2285+  3522             RclcBlack:
2286+  3522 3A 85 01             ld a,(BKSQ)
2287+  3525 FE 3C                cp 60
2288+  3527 20 18                jr nz,RclcOver
2289+  3529 3E 3F                ld a,63
2290+  352B CD 22 2C             call ObtainHLboardBySq
2291+  352E 7E                   ld a,(hl)
2292+  352F FE 72                cp 'r'
2293+  3531 20 02                jr nz,RclnBr1
2294+  3533 CB D0                set 2,b
2295+  3535 3E 38       RclnBr1: ld a,56
2296+  3537 CD 22 2C             call ObtainHLboardBySq
2297+  353A 7E                   ld a,(hl)
2298+  353B FE 72                cp 'r'
2299+  353D 20 02                jr nz,RclcOver
2300+  353F CB D8                set 3,b
2301+  3541             RclcOver:
2302+  3541 78                   ld a,b
2303+  3542 32 82 01             ld (CASTLES),a
2304+  3545 E1                   pop hl
2305+  3546 C1                   pop bc
2306+  3547 F1                   pop af
2307+  3548 C9                   ret                                                                                                                                                      
2308+  3549             
2309+  3549             
2310+  3549             ;---------------------------------
2311+  3549             ; Redraw squares around.
2312+  3549             ; Intended for large cursor
2313+  3549             ; Not used, as DrawCursor does the same.
2314+  3549             ;---------------------------------
2315+  3549 2D 09 2D 08 _AsqDirc: .byte '-',9,'-',8,'-',7,'-',1,'=',0,'+',1,'+',7,'+',8,'+',9
2315+  354D 2D 07 2D 01 
2315+  3551 3D 00 2B 01 
2315+  3555 2B 07 2B 08 
2315+  3559 2B 09 
2316+  355B             
2317+  355B             RedrawSquaresAround:
2318+  355B             
2319+  355B F5                   push af
2320+  355C C5                   push bc
2321+  355D D5                   push de
2322+  355E E5                   push hl
2323+  355F 21 49 35             ld hl,_AsqDirc
2324+  3562 06 09                ld b,9
2325+  3564 4F                   ld c,a
2326+  3565             ArndSqScan
2327+  3565 7E                   ld a,(hl)
2328+  3566 23                   inc hl
2329+  3567 FE 2D                cp '-'
2330+  3569 28 08                jr z,ArndSqDec
2331+  356B 7E                   ld a,(hl)
2332+  356C 81                   add a,c
2333+  356D FE 3F                cp 63
2334+  356F 38 0A                jr c,ArndSqNo
2335+  3571 18 05                jr ArndSqYes                 
2336+  3573             ArndSqDec:         
2337+  3573 56                   ld d,(hl)
2338+  3574 79                   ld a,c
2339+  3575 92                   sub d
2340+  3576 38 03                jr c,ArndSqNo
2341+  3578             ArndSqYes:         
2342+  3578 CD 0D 2D             call DrawSquare   ; if square on board then redraw
2343+  357B             ArndSqNo:
2344+  357B 79                   ld a,c
2345+  357C 23                   inc hl
2346+  357D 10 E6                djnz ArndSqScan
2347+  357F E1                   pop hl
2348+  3580 D1                   pop de
2349+  3581 C1                   pop bc
2350+  3582 F1                   pop af
2351+  3583 C9                   ret
2352+  3584             
2353+  3584                      
2354+  3584             ;-----------------------------------------------------------
2355+  3584             ;
2356+  3584             ; Process replay of one move
2357+  3584             ;
2358+  3584             ;-----------------------------------------------------------
2359+  3584             DO_Replay_Move:
2360+  3584 F5                   push af
2361+  3585 C5                   push bc
2362+  3586 D5                   push de
2363+  3587 E5                   push hl
2364+  3588                               
2365+  3588 11 74 0A             ld de, MOVE_str
2366+  358B 3A 81 27             ld a,(RplyMs)
2367+  358E 47                   ld b,a
2368+  358F FE 00                cp 0
2369+  3591 28 1A                jr z,RplyTo0
2370+  3593             RplyLoopMv:
2371+  3593 13                   inc de
2372+  3594 13                   inc de
2373+  3595 13                   inc de
2374+  3596 13                   inc de
2375+  3597 1A                   ld a,(de)
2376+  3598 FE 20                cp 32
2377+  359A 28 01                jr z,RplyNskp1
2378+  359C 13                   inc de          ;skip promotion
2379+  359D             RplyNskp1:
2380+  359D 13                   inc de         
2381+  359E 1A                   ld a,(de)
2382+  359F FE 20                cp 32
2383+  35A1 28 1D                jr z,RplyNoMv
2384+  35A3 FE 00                cp 0
2385+  35A5 28 19                jr z,RplyNoMv
2386+  35A7 FE 24                cp '$'
2387+  35A9 28 15                jr z,RplyNoMv
2388+  35AB             
2389+  35AB 10 E6                djnz RplyLoopMv
2390+  35AD             RplyTo0:
2391+  35AD CD D8 12             call MbyStrMove           ; move
2392+  35B0 CD F6 2C             call DrawBoard            ; no animation, sorry
2393+  35B3 CD 9F 31             call PutToMove
2394+  35B6 CD 38 13             call GenMoves             ; use GenMovesAndString to see
2395+  35B9                      
2396+  35B9 3A 81 27             ld a,(RplyMs)
2397+  35BC 3C                   inc a
2398+  35BD 32 81 27             ld (RplyMs),a
2399+  35C0             RplyNoMv:
2400+  35C0 E1                   pop hl       
2401+  35C1 D1                   pop de
2402+  35C2 C1                   pop bc
2403+  35C3 F1                   pop af
2404+  35C4 C9                   ret
2405+  35C5             
2406+  35C5                     
2407+  35C5             DO_Replay_UnmakeMove:
2408+  35C5 F5                   push af
2409+  35C6 3A 81 27             ld a,(RplyMs)
2410+  35C9 FE 00                cp 0
2411+  35CB 28 13                jr z,RplyUMKret
2412+  35CD CD 61 25             call UnMakeMove
2413+  35D0 CD F6 2C             call DrawBoard            ; no animation, sorry
2414+  35D3 CD 9F 31             call PutToMove
2415+  35D6 CD 38 13             call GenMoves
2416+  35D9 3A 81 27             ld a,(RplyMs)
2417+  35DC 3D                   dec a
2418+  35DD 32 81 27             ld (RplyMs),a
2419+  35E0             RplyUMKret:
2420+  35E0 F1                   pop af
2421+  35E1 C9                   ret
2422+  35E2                               
2423+  35E2             
2424+  35E2 00          Loaded2VRAM: .byte 0       ; pre-loading of datas from file just once,
2425+  35E3                                        ; after the VRAM memory could be used only.
2426+  35E3                                        
2427+  35E3             Chess_GraphDatas_address:   .equ $8000         ; address where to load module
2428+  35E3             
2429+  35E3             Chess_GraphDatas_filename:
2430+  35E3 00 43 48 45            .byte 0, "CHESSPI CO2",0            ; name of file
2430+  35E7 53 53 50 49 
2430+  35EB 20 43 4F 32 
2430+  35EF 00 
2431+  35F0             
2432+  35F0             ChessY2K_GraphDatas_load:
2433+  35F0 F5                      push af
2434+  35F1 3A E2 35                ld a,(Loaded2VRAM)
2435+  35F4                         
2436+  35F4 FE 00                   cp 0
2437+  35F6 20 12                   jr nz,GraphDatas_ok
2438+  35F8             
2439+  35F8 E5                      push hl
2440+  35F9 D5                      push de
2441+  35FA 21 E3 35                ld hl,Chess_GraphDatas_filename
2442+  35FD 11 00 80                ld de,Chess_GraphDatas_address
2443+  3600 CD 51 3C                call diskload                     ; loads datas
2444+  3603 D1                      pop de
2445+  3604 E1                      pop hl
2446+  3605                         
2447+  3605 3E 01                   ld a,1
2448+  3607 32 E2 35                ld (Loaded2VRAM),a                ; VRAM ok
2449+  360A             GraphDatas_ok:
2450+  360A F1                      pop af
2451+  360B C9                      ret
2452+  360C             
2453+  360C                         ;                                                                               
2454+  360C                         ; Data files for pieces Colour of piece (B or W) 
2455+  360C                         ;   + Name of piece ("KQRBNP" or empty square)
2456+  360C                         ;   + colour of square under (read black bishop on black square)
2457+  360C             
2458+  360C             tbPalettes:
2459+  360C                         ;table of colours Nr,R,G,B
2460+  360C                         ;  thanks to bmp2msx software (http://www.imasy.or.jp/~hra/)
2461+  360C 00 06 06 05         .byte $0,6,6,5
2462+  3610 01 05 03 02         .byte $1,5,3,2
2463+  3614 02 00 00 00         .byte $2,0,0,0
2464+  3618 03 07 07 06         .byte $3,7,7,6
2465+  361C 04 05 04 03         .byte $4,5,4,3
2466+  3620 05 05 05 05         .byte $5,5,5,5
2467+  3624 06 06 06 06         .byte $6,6,6,6
2468+  3628 07 03 02 02         .byte $7,3,2,2
2469+  362C 08 03 03 03         .byte $8,3,3,3
2470+  3630 09 06 05 04         .byte $9,6,5,4
2471+  3634 0A 04 04 03         .byte $A,4,4,3
2472+  3638 0B 01 01 01         .byte $B,1,1,1
2473+  363C 0C 02 01 01         .byte $C,2,1,1
2474+  3640 0D 06 05 06         .byte $D,6,5,6
2475+  3644 0E 01 01 02         .byte $E,1,1,2
2476+  3648 0F 01 02 01         .byte $F,1,2,1
2477+  364C                     3687   364C                       #include "ChessMN.ASM"     ; MENU choices
0001+  364C             ;=======================================
0002+  364C             ;
0003+  364C             ; MAIN loop and MENU for ChessY2K
0004+  364C             ;
0005+  364C             ;=======================================
0006+  364C             
0007+  364C 00          _menuI:     .byte 0   ;Current menu item to choose
0008+  364D 00          _exitMn:    .byte 0   ;internal to know that exit 
0009+  364E             
0010+  364E             ChessMN:
0011+  364E                     
0012+  364E             MAINLOOP:
0013+  364E 3E 00                ld a,0
0014+  3650 32 4C 36             ld (_menuI),a
0015+  3653 CD 98 36             call MainMenu
0016+  3656                               
0017+  3656 3A 4C 36             ld a,(_menuI)
0018+  3659 FE 00                cp 0
0019+  365B 20 02                jr nz, ItemNo0
0020+  365D 18 38                jr EXIT_ALL        
0021+  365F             ItemNo0:
0022+  365F FE 01                cp 1
0023+  3661 20 09                jr nz, ItemNo1
0024+  3663                      
0025+  3663 3A 74 0A             ld a,(MOVE_str)
0026+  3666 FE 00                cp 0
0027+  3668 28 28                jr z,LoopM
0028+  366A                      
0029+  366A~            #ifdef PGN_COMPILE 
0030+  366A~                    
0031+  366A~                     ld a,%00000000         ; no cursor,can't dragmove, just replaymoves
0032+  366A~                     ld (Stylo),a 
0033+  366A~            
0034+  366A~                     call GraphicsS         ; user interface for chess program
0035+  366A~                     
0036+  366A~                     ld a,0
0037+  366A~                     ld (Stylo),a
0038+  366A             #endif                   
0039+  366A 18 26                jr LoopM
0040+  366C             ItemNo1:      
0041+  366C FE 02                cp 2
0042+  366E 20 0F                jr nz, ItemNo2
0043+  3670             
0044+  3670 3E 03                ld a,%00000011         ; cursor,can dragmove
0045+  3672 32 7E 27             ld (Stylo),a 
0046+  3675                      
0047+  3675 CD 4A 28             call GraphicsS         ; user interface for chess program
0048+  3678                      
0049+  3678 3E 00                ld a,0
0050+  367A 32 7E 27             ld (Stylo),a 
0051+  367D             
0052+  367D 18 13                jr LoopM
0053+  367F             
0054+  367F             ItemNo2:
0055+  367F FE 03                cp 3
0056+  3681 20 0F                jr nz, ItemNo3
0057+  3683             
0058+  3683 3E 05                ld a,%00000101         ; cursor,can setup pieces
0059+  3685 32 7E 27             ld (Stylo),a 
0060+  3688                      
0061+  3688 CD 4A 28             call GraphicsS         ; user interface for chess program
0062+  368B                      
0063+  368B 3E 00                ld a,0
0064+  368D 32 7E 27             ld (Stylo),a 
0065+  3690             
0066+  3690 18 00                jr LoopM
0067+  3692                     
0068+  3692             ItemNo3:         
0069+  3692             LoopM:   
0070+  3692             
0071+  3692 CD 26 13             call UndoAllMoves   ; good refresh
0072+  3695                      
0073+  3695 18 B7                jr MAINLOOP
0074+  3697                           
0075+  3697                      
0076+  3697             EXIT_ALL:
0077+  3697             
0078+  3697 C9                   ret
0079+  3698                      
0080+  3698             
0081+  3698             MainMenu:
0082+  3698                         
0083+  3698 CD B8 38                call ClearScreenBy30h
0084+  369B CD FF 37                call LastFENwasSet        ; to know FEN set up
0085+  369E 21 0C 36                ld hl, tbPalettes         ; in datas of ChessUI  
0086+  36A1 CD 54 38                call SetPaletteByTable    ; defines 16colors                 
0087+  36A4                                                    
0088+  36A4 3E 00                   ld a,0
0089+  36A6 32 4D 36                ld (_exitMn),a
0090+  36A9 3E 01                   ld a,1
0091+  36AB                                                 
0092+  36AB~            #ifdef PGN_COMPILE                       
0093+  36AB             #else
0094+  36AB 3C                      inc a                    ; can not access first choice
0095+  36AC             #endif            
0096+  36AC 32 4C 36                ld (_menuI),a
0097+  36AF                         
0098+  36AF CD 9E 38                call InkeyKeyBy30h      ; keypress detect
0099+  36B2 32 BF 37                ld (_keymnbf),a         ; saves last key
0100+  36B5                                     
0101+  36B5             MENULOOP:                           ; Loop till ESC pressed
0102+  36B5 CD E3 36                call DrawChoices
0103+  36B8 CD 9E 38                call InkeyKeyBy30h      ; keypress detect
0104+  36BB                         
0105+  36BB                         ;cp 27
0106+  36BB                         ;jr z,EscEXIT
0107+  36BB                         
0108+  36BB CD C0 37                call MenuKeyPress       ; Selection or other item
0109+  36BE 18 0A                   jr Menu2loop
0110+  36C0             
0111+  36C0             EscEXIT:
0112+  36C0 3E 00                   ld a,0            
0113+  36C2 32 4C 36                ld (_menuI),a           ; nothing selected
0114+  36C5 3E 01                   ld a,1            
0115+  36C7 32 4D 36                ld (_exitMn),a
0116+  36CA             Menu2loop:            
0117+  36CA                                                 
0118+  36CA 3A 4D 36                ld a,(_exitMn)
0119+  36CD FE 00                   cp 0
0120+  36CF 28 E4                   jr z, MENULOOP
0121+  36D1                         
0122+  36D1 21 01 01                ld hl,$0101             ; locate left upper corner
0123+  36D4 CD DA 38                call LocatePosBy30h
0124+  36D7 3E 01                   ld a,1                  ; display cursor
0125+  36D9 32 A9 FC                ld (CSRSW),a
0126+  36DC CD B8 38                call ClearScreenBy30h   ; and clear the screen
0127+  36DF CD 6F 3B                call RestoreColors      ; restores default MSX colors
0128+  36E2                                                  
0129+  36E2 C9                      ret
0130+  36E3             
0131+  36E3             ;------------- draws menu items
0132+  36E3             DrawChoices:
0133+  36E3 F5                      push af
0134+  36E4 C5                      push bc
0135+  36E5 D5                      push de
0136+  36E6 E5                      push hl
0137+  36E7                         
0138+  36E7                         ;ld a,2
0139+  36E7                         ;ld (FORCLR),a           ; set color black
0140+  36E7                         ;call SetColorBy30h
0141+  36E7                     
0142+  36E7 21 05 04                ld hl,$0405
0143+  36EA CD DA 38                call LocatePosBy30h
0144+  36ED             
0145+  36ED 11 35 37                ld de, MNheader
0146+  36F0                         
0147+  36F0 3E 00                   ld a,0                  ; do not display cursor
0148+  36F2 32 A9 FC                ld (CSRSW),a
0149+  36F5                          
0150+  36F5 CD E9 38                call PrintString
0151+  36F8                         
0152+  36F8 2E 07                   ld l,7 ; row
0153+  36FA 06 00                   ld b,0 ; 3 choices
0154+  36FC 11 55 37                ld de, MNchoices
0155+  36FF             MNchScan:   
0156+  36FF 04                      inc b          
0157+  3700 2C                      inc l  ; next row
0158+  3701 26 04                   ld h,4 ; col
0159+  3703             
0160+  3703 CD DA 38                call LocatePosBy30h
0161+  3706                      
0162+  3706 CD E9 38                call PrintString
0163+  3709                   
0164+  3709 E5                      push hl
0165+  370A EB                      ex de,hl    ; hl = de
0166+  370B C5                      push bc
0167+  370C 01 20 00                ld bc,32
0168+  370F 09                      add hl,bc
0169+  3710 C1                      pop bc
0170+  3711 EB                      ex de,hl    ; de = hl+32 now
0171+  3712 E1                      pop hl
0172+  3713                         
0173+  3713 D5                      push de
0174+  3714 26 01                   ld h,1 ; col
0175+  3716 CD DA 38                call LocatePosBy30h            
0176+  3719 3A 4C 36                ld a,(_menuI)
0177+  371C B8                      cp b
0178+  371D 20 05                   jr nz,MNchNotI
0179+  371F 11 B5 37                ld de,MnSelector    ; selector char
0180+  3722 18 03                   jr MNchSelI
0181+  3724 11 BA 37    MNchNotI:   ld de,MnSpace        ;space
0182+  3727 CD E9 38    MNchSelI:   call PrintString
0183+  372A D1                      pop de
0184+  372B                                                 
0185+  372B 3E 03                   ld a,MNitems
0186+  372D B8                      cp b           
0187+  372E 20 CF                   jr nz,MNchScan          
0188+  3730                         
0189+  3730 E1                      pop hl
0190+  3731 D1                      pop de
0191+  3732 C1                      pop bc
0192+  3733 F1                      pop af
0193+  3734 C9                      ret
0194+  3735                         
0195+  3735             
0196+  3735 4D 53 58 20 MNheader:   .byte "MSX chessY2K project          $",0
0196+  3739 63 68 65 73 
0196+  373D 73 59 32 4B 
0196+  3741 20 70 72 6F 
0196+  3745 6A 65 63 74 
0196+  3749 20 20 20 20 
0196+  374D 20 20 20 20 
0196+  3751 20 20 24 00 
0197+  3755             
0198+  3755             
0199+  3755~            #ifdef PGN_COMPILE
0200+  3755~            
0201+  3755~            MNitems:    .equ 1
0202+  3755~            MNchoices:
0203+  3755~                        .byte "Replay chess game from PGN    $",0
0204+  3755~                        
0205+  3755             #else
0206+  3755             
0207+  3755             MNitems:    .equ 3
0208+  3755             MNchoices:
0209+  3755 52 65 70 6C             .byte "Replay PGN (other module)     $",0
0209+  3759 61 79 20 50 
0209+  375D 47 4E 20 28 
0209+  3761 6F 74 68 65 
0209+  3765 72 20 6D 6F 
0209+  3769 64 75 6C 65 
0209+  376D 29 20 20 20 
0209+  3771 20 20 24 00 
0210+  3775 4D 6F 76 65             .byte "Move pieces by using cursor   $",0
0210+  3779 20 70 69 65 
0210+  377D 63 65 73 20 
0210+  3781 62 79 20 75 
0210+  3785 73 69 6E 67 
0210+  3789 20 63 75 72 
0210+  378D 73 6F 72 20 
0210+  3791 20 20 24 00 
0211+  3795 53 65 74 20             .byte "Set positon for diagram       $",0
0211+  3799 70 6F 73 69 
0211+  379D 74 6F 6E 20 
0211+  37A1 66 6F 72 20 
0211+  37A5 64 69 61 67 
0211+  37A9 72 61 6D 20 
0211+  37AD 20 20 20 20 
0211+  37B1 20 20 24 00 
0212+  37B5             #endif
0213+  37B5             
0214+  37B5 2D 3E 20 24 MnSelector: .byte "-> $",0
0214+  37B9 00 
0215+  37BA 20 20 20 24 MnSpace:    .byte "   $",0
0215+  37BE 00 
0216+  37BF             
0217+  37BF 00          _keymnbf:   .byte 0  ; key pressed before
0218+  37C0             
0219+  37C0             ; this checks which key as been pressed
0220+  37C0             MenuKeyPress:
0221+  37C0 F5                      push af
0222+  37C1 C5                      push bc
0223+  37C2                         
0224+  37C2 FE 00                   cp 0
0225+  37C4 28 36                   jr z,MNnoAct
0226+  37C6                         
0227+  37C6 47                      ld b,a
0228+  37C7 3A BF 37                ld a,(_keymnbf)
0229+  37CA B8                      cp b
0230+  37CB 28 2F                   jr z, MNnoAct
0231+  37CD 78                      ld a,b
0232+  37CE 32 BF 37                ld (_keymnbf),a
0233+  37D1                         
0234+  37D1 FE 20                   cp 32
0235+  37D3 20 11                   jr nz,MNnoSpace
0236+  37D5             MNspaceKey:
0237+  37D5             
0238+  37D5 3A 4C 36                ld a,(_menuI)
0239+  37D8 FE 01                   cp 1
0240+  37DA 20 03                   jr nz,noPGNsub
0241+  37DC             
0242+  37DC                         ; submenu of PGN files
0243+  37DC CD 19 38                call ChessY2K_pgn_module
0244+  37DF                         
0245+  37DF                         ;jr MNnoAct
0246+  37DF             
0247+  37DF 3E 01       noPGNsub:   ld a,1
0248+  37E1 32 4D 36                ld (_exitMn),a     ; Item has been selected, exit menu and DO action
0249+  37E4 18 16                   jr MNnoAct             
0250+  37E6 FE 0D       MNnoSpace:  cp 13
0251+  37E8 20 02                   jr nz,MNnoEnter
0252+  37EA 18 E9                   jr MNspaceKey
0253+  37EC             MNnoEnter:
0254+  37EC 3A 4C 36                ld a,(_menuI)
0255+  37EF FE 03                   cp MNitems
0256+  37F1 28 03                   jr z, MNitemNxt0
0257+  37F3 3C                      inc a ; next item                     
0258+  37F4 18 03                   jr MNitemNxt1            
0259+  37F6 3E 01       MNitemNxt0: ld a,1 
0260+  37F8             
0261+  37F8~            #ifdef PGN_COMPILE                       
0262+  37F8             #else
0263+  37F8 3C                      inc a                    ; can not access first choice
0264+  37F9                                                  ; (1st reserved for other module)
0265+  37F9             #endif
0266+  37F9             
0267+  37F9 32 4C 36    MNitemNxt1: ld (_menuI),a
0268+  37FC                         
0269+  37FC             MNnoAct:            
0270+  37FC C1                      pop bc
0271+  37FD F1                      pop af
0272+  37FE C9                      ret
0273+  37FF             
0274+  37FF             ;
0275+  37FF             ; This outputs FEN for last position set up
0276+  37FF             ;           
0277+  37FF             LastFENwasSet:
0278+  37FF 21 12 01                ld hl,$0112
0279+  3802 CD DA 38                call LocatePosBy30h
0280+  3805 11 2D 29                ld de,wasSetUpFEN
0281+  3808 CD E9 38                call PrintString   ; print out FEN
0282+  380B C9                      ret
0283+  380C             
0284+  380C             ;This module has been separated to avoid 
0285+  380C             ; internal problems
0286+  380C             ;              
0287+  380C             Chess_PG_module_address:   .equ $8000         ; address where to load module
0288+  380C             Chess_PG_module_filename:
0289+  380C 00 43 48 45            .byte 0, "CHESSPG CO2",0           ; name of module file
0289+  3810 53 53 50 47 
0289+  3814 20 43 4F 32 
0289+  3818 00 
0290+  3819                   
0291+  3819             ChessY2K_pgn_module:
0292+  3819~            #ifdef PGN_COMPILE
0293+  3819~                        push de
0294+  3819~                        push hl
0295+  3819~                        ld hl,Chess_PG_module_filename
0296+  3819~                        ld de,Chess_PG_module_address
0297+  3819~                        call diskload                     ; loads module
0298+  3819~                        call Chess_PG_module_address      ; starts main sub-procedure
0299+  3819~                        pop hl
0300+  3819~                        pop de
0301+  3819             #endif             
0302+  3819 C9                      ret
0303+  381A             
0304+  381A                     3688   381A             
3689   381A                       #include "VDPs.ASM"        ; VDP video functions
0001+  381A             ;=======================================
0002+  381A             ;
0003+  381A             ; VDP functions
0004+  381A             ;
0005+  381A             ;=======================================
0006+  381A             
0007+  381A             ; Provides:
0008+  381A             ;----------------------------------------------------------------------
0009+  381A             ; (1) Just working LAME part for Hello World of MSX VDP
0010+  381A             ;         (put pixels on screen)
0011+  381A             ;----------------------------------------------------------------------
0012+  381A             ;
0013+  381A             ; These functions provide MSX2 drawing from .COM module.
0014+  381A             ; LAME part can put pixels and that's all.
0015+  381A             ; Screen is 212 lines x 128 bytes per line of 2-pixels.
0016+  381A             ;
0017+  381A             ; In reality, prepare to spend days on MSX-hardcore:
0018+  381A             ; manuals, forums, not-working samples, no-hello-worlds, etc. 
0019+  381A             ; .BIN loaded from BASIC is not the same as .COM
0020+  381A             ; 64kb-s is less then Bios+DOS+BASIC+programs+etc. require -
0021+  381A             ; so it crashes silently by rewriting in the same memory addresses.
0022+  381A             ; Lots of functions described by techies just crash the emulator. 
0023+  381A             ; BASIC is for drawings!, not assembler.
0024+  381A             ; And video memory should be used as much possible (page 0-3, not LAME!),
0025+  381A             ; because MSX has lots of video memory compared to programmable RAM.
0026+  381A             ;
0027+  381A             ; Hello world .com that puts 2-pixels in left upper and right lower corner.
0028+  381A             ; 
0029+  381A             ;   org $100
0030+  381A             ;   call SetScreen5By30h
0031+  381A             ;   ld de,0
0032+  381A             ;   call LocateHL_byXY_inDE
0033+  381A             ;   ld a,$77
0034+  381A             ;   call VDPdraw2pixels    
0035+  381A             ;   ld d,127
0036+  381A             ;   ld e,211
0037+  381A             ;   call LocateHL_byXY_inDE
0038+  381A             ;   ld a,$88
0039+  381A             ;   call VDPdraw2pixels
0040+  381A             ;   call PressKeyBy30h
0041+  381A             ;   call SetScreen0By30h
0042+  381A             ;   ret
0043+  381A             ;         
0044+  381A             
0045+  381A             
0046+  381A             SetScreen5By30h:
0047+  381A 3E 05                ld    a,$05      ; Screen 5      
0048+  381C F7                   rst   30h
0049+  381D 80                   .byte $80        ; BIOS slot (when nothing is loaded)  
0050+  381E 5F 00                .word $005f      ; CHGMOD CALL 5Fh
0051+  3820 C9                   ret
0052+  3821                      
0053+  3821             DisableScreenBy30h:       ; Before...
0054+  3821 F7                   rst   30h
0055+  3822 80                   .byte $80        
0056+  3823 41 00                .word $0041      ; Disables screen display      
0057+  3825 C9                   ret
0058+  3826                      
0059+  3826             EnableScreenBy30h:        ; When drawings are finished... 
0060+  3826 F7                   rst   30h
0061+  3827 80                   .byte $80               
0062+  3828 44 00                .word $0044      ; Enables screen display  
0063+  382A C9                   ret
0064+  382B             
0065+  382B             LocateHL_byXY_inDE:       ; Procedure calculates hl offset and sets VDP for writing
0066+  382B F3                   di
0067+  382C F5                   push af
0068+  382D C5                   push bc
0069+  382E D5                   push de
0070+  382F E5                   push hl
0071+  3830 DD E5                push ix
0072+  3832 6A                   ld l,d           ; regs d=x[0..127]
0073+  3833 7B                   ld a,e           ;      e=y[0..211]
0074+  3834 11 00 00             ld de,0
0075+  3837 CB 47                bit 0,a
0076+  3839 28 02                jr z,no2add128bits
0077+  383B 1E 80                ld e,$80
0078+  383D             no2add128bits:
0079+  383D 1F                   rra
0080+  383E 67                   ld h,a
0081+  383F 19                   add hl,de
0082+  3840 AF                   xor a 
0083+  3841 CD 4C 38             call SetVDPwriteBy30h  ; now will write at this position
0084+  3844 DD E1                pop ix
0085+  3846 E1                   pop hl
0086+  3847 D1                   pop de
0087+  3848 C1                   pop bc
0088+  3849 F1                   pop af
0089+  384A FB                   ei
0090+  384B C9                   ret                                          
0091+  384C                                       ; This prepares for "pixeling"
0092+  384C             SetVDPwriteBy30h:         ; hl,contains initial address
0093+  384C F7                   rst   30h
0094+  384D 80                   .byte $80 
0095+  384E 71 01                .word $0171      ; NSTWRT Sets up the VDP for writing wit full VRAM address
0096+  3850 C9                   ret         
0097+  3851             
0098+  3851             VDPdraw2pixels:           ; Put 2 pixels by sending one byte with 2 colour Nr. (bits 0-3,4-7)
0099+  3851 D3 98                out ($98),a      ; send this sequently
0100+  3853 C9                   ret
0101+  3854                      
0102+  3854                              
0103+  3854             SetPaletteByTable:        ; Sets colors by given RGB-table in HL-reg
0104+  3854 F5                   push af         
0105+  3855 C5                   push bc
0106+  3856 E5                   push hl
0107+  3857 06 10                ld b,$10             ; 16 colours
0108+  3859             SPcoLoop:
0109+  3859 F3                   di
0110+  385A 7E                   ld   a,(hl)
0111+  385B 23                   inc  hl
0112+  385C D3 99                out  ($99),a          ; colour Nr.
0113+  385E 3E 90                ld   a, 128+16
0114+  3860 D3 99                out  ($99),a         
0115+  3862 7E                   ld   a,(hl)            ; red
0116+  3863 23                   inc  hl
0117+  3864 23                   inc  hl
0118+  3865 CB 27                sla  a
0119+  3867 CB 27                sla  a
0120+  3869 CB 27                sla  a
0121+  386B CB 27                sla  a                 ; bits 4-7
0122+  386D 4F                   ld   c,a
0123+  386E 7E                   ld   a,(hl)            ; blue bits 0-3
0124+  386F 2B                   dec  hl
0125+  3870 B1                   or   c
0126+  3871 D3 9A                out  ($9A),a 
0127+  3873 7E                   ld   a,(hl)            ; green bits 0-3
0128+  3874 23                   inc  hl
0129+  3875 23                   inc  hl
0130+  3876 D3 9A                out  ($9A),a
0131+  3878 FB                   ei 
0132+  3879 10 DE                djnz SPcoLoop
0133+  387B E1                   pop  hl         
0134+  387C C1                   pop  bc
0135+  387D F1                   pop  af 
0136+  387E C9                   ret
0137+  387F                      
0138+  387F             SetBackgrColor:               ; Sets background color by A=Nr.              
0139+  387F F3                   di
0140+  3880 D3 99                out  ($99),a        ; a=[0..15]
0141+  3882 3E 87                ld   a,128+7
0142+  3884 D3 99                out  ($99),a        
0143+  3886 FB                   ei
0144+  3887 C9                   ret
0145+  3888             
0146+  3888             VDPfaster:                   ; working with memory only, no sprite collisions and other things slowing down VDP
0147+  3888 F5                   push af
0148+  3889 F3                   di
0149+  388A 3E 0A                ld   a, %00001010 ; sprites off (bit1), VRAM quantity (bit3)- Affects how VDP performs refresh on DRAM chips   
0150+  388C D3 99                out  ($99),a
0151+  388E 3E 88                ld   a, 128+8     
0152+  3890 D3 99                out  ($99),a
0153+  3892 FB                   ei
0154+  3893 F1                   pop af
0155+  3894 C9                   ret
0156+  3895                                                                                                                      
0157+  3895             PressKeyBy30h:               ; wait for keypress
0158+  3895 F7                   rst   30h
0159+  3896 80                   .byte $80 
0160+  3897 9F 00                .word $009f
0161+  3899             ClearKeyBy30h:
0162+  3899 F7                   rst   30h
0163+  389A 80                   .byte $80 
0164+  389B 56 01                .word $0156         ; clear key buffer after             
0165+  389D C9                   ret
0166+  389E             
0167+  389E             InkeyKeyBy30h:               ; detects if there is a keypress
0168+  389E F7                   rst   30h
0169+  389F 80                   .byte $80 
0170+  38A0 9C 00                .word $009c
0171+  38A2 28 05                jr z,InkeyK_none
0172+  38A4 CD 95 38             call PressKeyBy30h  ; if is then detects code
0173+  38A7 18 02                jr InkeyK_ret
0174+  38A9             InkeyK_none:
0175+  38A9 3E 00                ld a,0
0176+  38AB             InkeyK_ret:         
0177+  38AB C9                   ret
0178+  38AC                                                 
0179+  38AC             SetScreen0By30h:             ; set back screen0
0180+  38AC 3E 00                ld    a,0      
0181+  38AE F7                   rst   30h
0182+  38AF 80                   .byte $80
0183+  38B0 5F 00                .word $005f
0184+  38B2 C9                   ret
0185+  38B3                      
0186+  38B3             SetScreenABy30h:             ; set screen by A-reg
0187+  38B3 F7                   rst   30h
0188+  38B4 80                   .byte $80
0189+  38B5 5F 00                .word $005f
0190+  38B7 C9                   ret 
0191+  38B8                      
0192+  38B8             ClearScreenBy30h:            ; clears screen
0193+  38B8 F5                   push af
0194+  38B9 C5                   push bc
0195+  38BA D5                   push de
0196+  38BB AF                   xor a          
0197+  38BC F7                   rst   30h
0198+  38BD 80                   .byte $80
0199+  38BE C3 00                .word $00c3
0200+  38C0 D1                   pop de
0201+  38C1 C1                   pop bc
0202+  38C2 F1                   pop af
0203+  38C3 C9                   ret
0204+  38C4                      
0205+  38C4             LINL40: .equ $F3AE
0206+  38C4                             
0207+  38C4             SetMode80:
0208+  38C4 F5                  push af
0209+  38C5 3E 50               ld a,80
0210+  38C7 32 AE F3            ld (LINL40),a    ;width 80
0211+  38CA CD AC 38            call SetScreen0By30h
0212+  38CD F1                  pop af
0213+  38CE C9                  ret
0214+  38CF             SetMode40:
0215+  38CF F5                  push af
0216+  38D0 3E 28               ld a,40
0217+  38D2 32 AE F3            ld (LINL40),a    ;width 40
0218+  38D5 CD AC 38            call SetScreen0By30h
0219+  38D8 F1                  pop af
0220+  38D9 C9                  ret 
0221+  38DA                              
0222+  38DA             LocatePosBy30h:              ; Locate at position H (column) L (row) on screen
0223+  38DA F7                   rst   30h
0224+  38DB 80                   .byte $80
0225+  38DC C6 00                .word $00c6
0226+  38DE C9                   ret
0227+  38DF             PutCharBy30h:                ; Put char reg-a = ascii code      
0228+  38DF F7                   rst   30h
0229+  38E0 80                   .byte $80
0230+  38E1 A2 00                .word $00a2
0231+  38E3 C9                   ret
0232+  38E4             PrintLineBy30h:
0233+  38E4 F7                   rst   30h
0234+  38E5 80                   .byte $80
0235+  38E6 A2 00                .word $00a2
0236+  38E8 C9                   ret
0237+  38E9             
0238+  38E9             CALL_5:   .equ $F37D         ;output string to screen
0239+  38E9             ; prints string that ends with $
0240+  38E9             ; de-reg points to string in address
0241+  38E9             ; 
0242+  38E9             PrintString:
0243+  38E9 F5                   push af
0244+  38EA C5                   push bc
0245+  38EB D5                   push de
0246+  38EC E5                   push hl
0247+  38ED DD E5                push ix
0248+  38EF FD E5                push iy
0249+  38F1 0E 09                ld c, 9       ; function for CALL 5
0250+  38F3 CD 7D F3             call CALL_5   ; MSX printing
0251+  38F6 FD E1                pop iy
0252+  38F8 DD E1                pop ix
0253+  38FA E1                   pop hl
0254+  38FB D1                   pop de
0255+  38FC C1                   pop bc
0256+  38FD F1                   pop af
0257+  38FE C9                   ret
0258+  38FF                                      
0259+  38FF                      
0260+  38FF             FORCLR:  .equ  $F3E9         ; foreground color 
0261+  38FF             BAKCLR:  .equ  $F3EA         ; background color
0262+  38FF             BDRCLR:  .equ  $F3EB         ; bordercolor
0263+  38FF             SetColorBy30h:
0264+  38FF F7                   rst   30h           ; set color scheme by using FORCLR,BAKCLR,BDRCLR
0265+  3900 80                   .byte $80
0266+  3901 62 00                .word $0062
0267+  3903 C9                   ret
0268+  3904                      
0269+  3904             CSRSW:   .equ $FCA9         ; to set cursor display switch (0-not to show)        
0270+  3904             CSTYLE:  .equ $FCAA         ; to set cursor style (0-full,2-underline)
0271+  3904                 
0272+  3904                             
0273+  3904                      
0274+  3904             ;--------------------------------------
0275+  3904             ; (2) ADVANCED functions, if You love VDP
0276+  3904             ;
0277+  3904             ; Use of pages,
0278+  3904             ; buffered copy of RAM->VRAM, RAM->RAM
0279+  3904             ;--------------------------------------
0280+  3904             ;
0281+  3904             ;
0282+  3904             ; Check if a v9958 is available (if so, return nz)
0283+  3904             ; Initialize address (v9958)
0284+  3904             ; (MSX+,MSXturboR video chip)
0285+  3904             ;
0286+  3904 00          v9958:        .byte      0             ;>1 = v9958 present
0287+  3905             
0288+  3905 F3          v9958_Check:  di                       ;Test for v9958
0289+  3906 3E 01                     ld    a,1                ;Set s$1
0290+  3908 D3 99                     out   ($99),a
0291+  390A 3E 8F                     ld    a,15+128
0292+  390C D3 99                     out   ($99),a
0293+  390E 1A                        ld    a,(de)             ;Waste some time...
0294+  390F DB 99                     in    a,($99)
0295+  3911 F5                        push  af
0296+  3912 3E 00                     ld    a,0
0297+  3914 D3 99                     out   ($99),a
0298+  3916 3E 8F                     ld    a,15+128
0299+  3918 D3 99                     out   ($99),a            ;Set s$0
0300+  391A FB                        ei
0301+  391B F1                        pop   af
0302+  391C E6 3C                     and   %00111100          ;v9938? RET with Z
0303+  391E 32 04 39                  ld    (v9958),a
0304+  3921 C9                        ret
0305+  3922             
0306+  3922             ;-----------------------------------------
0307+  3922             ;         
0308+  3922             ; These routines are the know-how scripts
0309+  3922             ; by VDP profies. In fact, dont use without
0310+  3922             ; knowing what is all about. Read manuals.
0311+  3922             ;
0312+  3922             ;-----------------------------------------
0313+  3922             
0314+  3922 00 00 00 00 VDP: .word  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0314+  3926 00 00 00 00 
0314+  392A 00 00 00 00 
0314+  392E 00 00 00 00 
0314+  3932 00 00 00 00 
0314+  3936 00 00 00 00 
0314+  393A 00 00 00 00 
0314+  393E 00 00 
0315+  3940             
0316+  3940             ;
0317+  3940             ;Copy the VDP-registers' settings to array VDP.
0318+  3940             ;Afterwards, read the VDP-registers with LD A,(VDP + r)
0319+  3940             ;(this should be placed at the start of a program)
0320+  3940             ;
0321+  3940 21 22 39    Copy_VdpRegs: ld      hl,VDP+0
0322+  3943 11 22 39                  ld      de,VDP+0
0323+  3946 01 08 00                  ld      bc,8
0324+  3949 ED B0                     ldir
0325+  394B 21 2A 39                  ld      hl,VDP+8
0326+  394E 11 2A 39                  ld      de,VDP+8
0327+  3951 01 11 00                  ld      bc,17
0328+  3954 ED B0                     ldir
0329+  3956 C9                        ret
0330+  3957             
0331+  3957             
0332+  3957             ;
0333+  3957             ;Restore the VDP-registers' settings.
0334+  3957             ;(this should be placed at the end of a program)
0335+  3957             ;
0336+  3957 01 00 08    Rest_VdpRegs: ld      bc,$0800
0337+  395A 21 22 39                  ld      hl,VDP+0
0338+  395D CD 6F 39                  call    Rest_VdpSub
0339+  3960 01 08 10                  ld      bc,$1008
0340+  3963 21 2A 39                  ld      hl,VDP+8
0341+  3966 CD 6F 39                  call    Rest_VdpSub
0342+  3969 01 19 03                  ld      bc,$0319
0343+  396C 21 7E 39                  ld      hl,Vdp3zero    ;a jp Restore_Vdp_Sub is implied
0344+  396F 7E          Rest_VdpSub:  ld      a,(hl)
0345+  3970 23                        inc     hl
0346+  3971 F3                        di
0347+  3972 D3 99                     out     ($99),a
0348+  3974 79                        ld      a,c
0349+  3975 F6 80                     or      128
0350+  3977 FB                        ei
0351+  3978 D3 99                     out     ($99),a
0352+  397A 0C                        inc     c
0353+  397B 10 F2                     djnz    Rest_VdpSub
0354+  397D C9                        ret
0355+  397E             
0356+  397E 00 00 00    Vdp3zero:    .byte      0,0,0
0357+  3981             
0358+  3981             
0359+  3981             ;
0360+  3981             ;Set page = A [0..3] in screen 5.
0361+  3981             ;
0362+  3981             SetPage:
0363+  3981 87                  add     a,a ;x32
0364+  3982 87                  add     a,a
0365+  3983 87                  add     a,a
0366+  3984 87                  add     a,a
0367+  3985 87                  add     a,a
0368+  3986 C6 1F               add     a,31
0369+  3988 32 24 39            ld      (VDP+2),a
0370+  398B F3                  di
0371+  398C D3 99               out     ($99),a
0372+  398E 3E 82               ld      a,2+128
0373+  3990 FB                  ei
0374+  3991 D3 99               out     ($99),a
0375+  3993 C9                  ret
0376+  3994                     
0377+  3994             ;
0378+  3994             ;Set VDP port $98 to start writing at address AHL (17-bit)
0379+  3994             ;
0380+  3994             ;
0381+  3994             ; Left upper corner of each pages:
0382+  3994             ;   0 -> A=0,HL=$0000
0383+  3994             ;   1 -> A=0,HL=$8000
0384+  3994             ;   2 -> A=1,HL=$0000
0385+  3994             ;   3 -> A=1,HL=$8000
0386+  3994             ;
0387+  3994             
0388+  3994             
0389+  3994             Set_Vdp_Write:           ; A(1bit),HL(16bits) input
0390+  3994                     
0391+  3994 CB 04               rlc   h
0392+  3996 17                  rla
0393+  3997 CB 04               rlc   h
0394+  3999 17                  rla
0395+  399A CB 3C               srl   h
0396+  399C CB 3C               srl   h
0397+  399E F3                  di
0398+  399F D3 99               out   ($99),a
0399+  39A1 3E 8E               ld    a,14+128
0400+  39A3 D3 99               out   ($99),a
0401+  39A5 7D                  ld    a,l
0402+  39A6 00                  nop
0403+  39A7 D3 99               out   ($99),a
0404+  39A9 7C                  ld    a,h
0405+  39AA F6 40               or    64
0406+  39AC FB                  ei
0407+  39AD D3 99               out   ($99),a
0408+  39AF C9                  ret
0409+  39B0             
0410+  39B0             ;
0411+  39B0             ;Set VDP port $98 to start reading at address AHL (17-bit)
0412+  39B0             ;
0413+  39B0             SetVdp_Read:
0414+  39B0 CB 04               rlc     h
0415+  39B2 17                  rla
0416+  39B3 CB 04               rlc     h
0417+  39B5 17                  rla
0418+  39B6 CB 3C               srl     h
0419+  39B8 CB 3C               srl     h
0420+  39BA F3                  di
0421+  39BB D3 99               out     ($99),a       ;set bits 15-17
0422+  39BD 3E 8E               ld      a,128+14
0423+  39BF D3 99               out     ($99),a
0424+  39C1 7D                  ld      a,l           ;set bits 0-7
0425+  39C2 00                  nop
0426+  39C3 D3 99               out     ($99),a
0427+  39C5 7C                  ld      a,h           ;set bits 8-14
0428+  39C6 FB                  ei                    ; + read access
0429+  39C7 D3 99               out     ($99),a
0430+  39C9 C9                  ret
0431+  39CA                     
0432+  39CA             ;****************************************************************
0433+  39CA             ; HMMC (High speed move CPU to VRAM)
0434+  39CA             ; Screen size 256x212 dots, each byte is color Nr. for 2-pixels 
0435+  39CA             ;
0436+  39CA             ; Copies data from memory to block in VRAM
0437+  39CA             ; The same as in basic COPY file.pic TO (x,y)-(x+D-1,y+E-1)
0438+  39CA             ;
0439+  39CA             ; RAM [IX] => VRAM (H,L)-(+D,+E)
0440+  39CA             ;
0441+  39CA             ; set ix = memory address of data to write to VRAM
0442+  39CA             ; set h,l,d,e for rectangle to put in
0443+  39CA             ; D,E mod 2 = 0 !
0444+  39CA             ;****************************************************************
0445+  39CA             
0446+  39CA             HMMC:  
0447+  39CA F3                   di
0448+  39CB F5                   push af
0449+  39CC C5                   push bc
0450+  39CD E5                   push hl
0451+  39CE DD E5                push ix      
0452+  39D0 3E 00                ld a,0         
0453+  39D2 CD 37 3A             call hmmc_wait_VDP
0454+  39D5 3E 24                ld a,36         ;command register R#36
0455+  39D7 D3 99                out ($99),a
0456+  39D9 3E 91                ld a,128+17     ;VDP(17)<=36
0457+  39DB D3 99                out ($99),a
0458+  39DD AF                   xor a           ;ld a,0
0459+  39DE 0E 9B                ld c,$9b
0460+  39E0 ED 61                out (c),h       ;X
0461+  39E2 ED 79                out (c),a
0462+  39E4 ED 69                out (c),l       ;Y
0463+  39E6 ED 79                out (c),a
0464+  39E8 ED 51                out (c),d       ;DX in dots
0465+  39EA ED 79                out (c),a       ;
0466+  39EC ED 59                out (c),e       ;DY in dots
0467+  39EE ED 79                out (c),a       ;
0468+  39F0                         
0469+  39F0 DD 66 00             ld h,(ix)       ;first byte of data
0470+  39F3 ED 61                out (c),h       
0471+  39F5             
0472+  39F5 ED 79                out (c),a       ;DIX and DIY = 0     
0473+  39F7 3E F0                ld a,%11110000
0474+  39F9 ED 79                out (c),a      ; command to do it
0475+  39FB 3E AC                ld a,128+44
0476+  39FD D3 99                out ($99),a
0477+  39FF 3E 91                ld a,128+17
0478+  3A01 D3 99                out ($99),a    ; VDP(17)<=44                        
0479+  3A03             hmmc_Loop:
0480+  3A03 3E 02                ld a,2
0481+  3A05 CD 25 3A             call hmmc_Status
0482+  3A08 CB 7F                bit 7,a        ; TR? transferring?
0483+  3A0A 28 F7                jr z, hmmc_Loop
0484+  3A0C CB 47                bit 0,a        ; CE? is over?
0485+  3A0E 28 09                jr z, hmmc_exit                       
0486+  3A10 DD 23                inc ix
0487+  3A12 DD 7E 00             ld a,(ix)
0488+  3A15 D3 9B                out ($9b),a
0489+  3A17 18 EA                jr hmmc_Loop                                                      
0490+  3A19             hmmc_exit:
0491+  3A19 3E 00                ld a,0
0492+  3A1B CD 25 3A             call hmmc_Status
0493+  3A1E DD E1                pop ix
0494+  3A20 E1                   pop hl
0495+  3A21 C1                   pop bc
0496+  3A22 F1                   pop af
0497+  3A23 FB                   ei
0498+  3A24 C9                   ret                                                                                                                                                                                                                  
0499+  3A25                                                                                                                                                                                                                                                                                         
0500+  3A25             hmmc_Status:
0501+  3A25 D3 99                out ($99),a
0502+  3A27 3E 8F                ld a,$8f
0503+  3A29 D3 99                out ($99),a
0504+  3A2B DB 99                in a,($99)
0505+  3A2D F5                   push af
0506+  3A2E AF                   xor a
0507+  3A2F D3 99                out ($99),a
0508+  3A31 3E 8F                ld a,$8f
0509+  3A33 D3 99                out ($99),a
0510+  3A35 F1                   pop af
0511+  3A36 C9                   ret
0512+  3A37             hmmc_wait_VDP:
0513+  3A37 3E 02                ld a,2
0514+  3A39 CD 25 3A             call hmmc_Status
0515+  3A3C E6 01                and 1
0516+  3A3E 20 F7                jr nz,hmmc_wait_VDP
0517+  3A40 AF                   xor a
0518+  3A41 CD 25 3A             call hmmc_Status
0519+  3A44 C9                   ret
0520+  3A45             
0521+  3A45             ;****************************************************************
0522+  3A45             ;  HMMM (High speed move VRAM to VRAM)
0523+  3A45             ;        to use, set H, L, D, E, B, C and go
0524+  3A45             ;        VRAM (H,L)-(+D,+E) ---> VRAM (B,C)
0525+  3A45             ; DE is difference -not absolute values
0526+  3A45             ; byte DIX,DIY=0, explained:
0527+  3A45             ; The 0 copies the block starting from the upper left, the 1 from right/bottom.
0528+  3A45             ; what's the difference? when copying overlapping source/destination
0529+  3A45             ; (a scroller for example)
0530+  3A45             ; when scrolling from right to left DIX/DIY can both be 0
0531+  3A45             ;  but copying from left to right DIX must be 1. just figure it out...
0532+  3A45             ; Then give coord.positive from right upper corner to left.
0533+  3A45             ;****************************************************************
0534+  3A45             
0535+  3A45             HMMM:
0536+  3A45 F3                   di
0537+  3A46 F5                   push af
0538+  3A47 C5                   push bc              
0539+  3A48 CD 81 3A             call VDPready
0540+  3A4B 3E 20                ld  a,32
0541+  3A4D D3 99                out ($99),a
0542+  3A4F 3E 91                ld  a,128+17
0543+  3A51 D3 99                out ($99),a     ;R#17 := 32
0544+  3A53 D5                   push de
0545+  3A54 C5                   push bc
0546+  3A55 AF                   xor a           ;ld a,0
0547+  3A56 D1                   pop de          ;de = bc now
0548+  3A57 0E 9B                ld c,$9b
0549+  3A59 ED 61                out (c),h       ;X from
0550+  3A5B ED 79                out (c),a
0551+  3A5D ED 69                out (c),l       ;Y from
0552+  3A5F ED 79                out (c),a
0553+  3A61 ED 51                out (c),d       ;X to
0554+  3A63 ED 79                out (c),a       ;
0555+  3A65 ED 59                out (c),e       ;Y to
0556+  3A67 ED 79                out (c),a
0557+  3A69 D1                   pop de          ;de = de now
0558+  3A6A ED 51                out (c),d       ;DX in dots
0559+  3A6C ED 79                out (c),a       ;
0560+  3A6E ED 59                out (c),e       ;DY in dots
0561+  3A70 ED 79                out (c),a       ;
0562+  3A72 ED 79                out (c),a       ;dummy
0563+  3A74 ED 79                out (c),a       ;DIX and DIY = 0
0564+  3A76 3E D0                ld  a,%11010000 ;HMMM command
0565+  3A78 ED 79                out (c),a       ;do it
0566+  3A7A CD 81 3A             call VDPready
0567+  3A7D C1                   pop bc
0568+  3A7E F1                   pop af
0569+  3A7F FB                   ei
0570+  3A80 C9                   ret
0571+  3A81                                             
0572+  3A81             VDPready:
0573+  3A81 3E 02               ld   a,2
0574+  3A83 F3                  di
0575+  3A84 D3 99               out  ($99),a          ;select status register 2
0576+  3A86 3E 8F               ld   a,128+15
0577+  3A88 D3 99               out  ($99),a
0578+  3A8A DB 99               in   a,($99)
0579+  3A8C 1F                  rra
0580+  3A8D 3E 00               ld   a,0
0581+  3A8F D3 99               out  ($99),a
0582+  3A91 3E 8F               ld   a,128+15
0583+  3A93 D3 99               out  ($99),a
0584+  3A95 FB                  ei
0585+  3A96 38 E9               jr   c,VDPready    ;wait till previous VDP execution is over (CE)
0586+  3A98 C9                  ret
0587+  3A99             
0588+  3A99             ;
0589+  3A99             ; Sets display mode to width 80
0590+  3A99             ; Use then SetScreen0By30h to set back width 40
0591+  3A99             ;
0592+  3A99             VDPsetMode80:        
0593+  3A99             
0594+  3A99 F3                  di
0595+  3A9A 3E 04               ld   a,%00000100
0596+  3A9C D3 99               out  ($99),a
0597+  3A9E 3E 80               ld   a,128+0
0598+  3AA0 D3 99               out  ($99),a
0599+  3AA2 3E 70               ld   a,%01110000
0600+  3AA4 D3 99               out  ($99),a
0601+  3AA6 3E 81               ld   a,128+1
0602+  3AA8 D3 99               out  ($99),a
0603+  3AAA AF                  xor a
0604+  3AAB D3 99               out  ($99),a
0605+  3AAD 3E 88               ld   a,128+8
0606+  3AAF D3 99               out  ($99),a
0607+  3AB1 AF                  xor a
0608+  3AB2 D3 99               out  ($99),a
0609+  3AB4 3E 89               ld   a,128+9
0610+  3AB6 D3 99               out  ($99),a
0611+  3AB8 FB                  ei
0612+  3AB9 C9                  ret
0613+  3ABA                                                     
0614+  3ABA             ;        
0615+  3ABA             ;Disable the screen.
0616+  3ABA             ;
0617+  3ABA             Disable_Scr:
0618+  3ABA 3A 23 39            ld      a,(VDP+1)
0619+  3ABD E6 BF               and     %10111111
0620+  3ABF 32 23 39            ld      (VDP+1),a
0621+  3AC2 F3                  di
0622+  3AC3 D3 99               out     ($99),a
0623+  3AC5 3E 81               ld      a,128+1
0624+  3AC7 FB                  ei
0625+  3AC8 D3 99               out     ($99),a
0626+  3ACA C9                  ret
0627+  3ACB             
0628+  3ACB             ;
0629+  3ACB             ;Enable the screen.
0630+  3ACB             ;
0631+  3ACB             Enable_Scr:
0632+  3ACB 3A 23 39            ld      a,(VDP+1)
0633+  3ACE F6 40               or      %01000000
0634+  3AD0 32 23 39            ld      (VDP+1),a
0635+  3AD3 F3                  di
0636+  3AD4 D3 99               out     ($99),a
0637+  3AD6 3E 81               ld      a,128+1
0638+  3AD8 FB                  ei
0639+  3AD9 D3 99               out     ($99),a
0640+  3ADB C9                  ret
0641+  3ADC             
0642+  3ADC             ;
0643+  3ADC             ;Enable the sprites.
0644+  3ADC             ;
0645+  3ADC 3A 2A 39    Sprites_On:   ld      a,(VDP+8)
0646+  3ADF E6 FD                     and     %11111101
0647+  3AE1 32 2A 39                  ld      (VDP+8),a
0648+  3AE4 F3                        di
0649+  3AE5 D3 99                     out     ($99),a
0650+  3AE7 3E 88                     ld      a,8+128
0651+  3AE9 FB                        ei
0652+  3AEA D3 99                     out     ($99),a
0653+  3AEC C9                        ret
0654+  3AED             
0655+  3AED             ;
0656+  3AED             ;Disable the sprites.
0657+  3AED             ;
0658+  3AED 3A 2A 39    Sprites_Off:  ld      a,(VDP+8)
0659+  3AF0 F6 02                     or      %00000010
0660+  3AF2 32 2A 39                  ld      (VDP+8),a
0661+  3AF5 F3                        di
0662+  3AF6 D3 99                     out     ($99),a
0663+  3AF8 3E 88                     ld      a,8+128
0664+  3AFA FB                        ei
0665+  3AFB D3 99                     out     ($99),a
0666+  3AFD C9                        ret
0667+  3AFE             ;
0668+  3AFE             ; set 16x16 sprites
0669+  3AFE             ;         
0670+  3AFE             VDPsprites16x16:
0671+  3AFE 3A 23 39                  ld      a,(VDP+1)
0672+  3B01 F6 02                     or      %00000010
0673+  3B03 32 23 39                  ld      (VDP+1),a
0674+  3B06 F3                        di
0675+  3B07 D3 99                     out     ($99),a
0676+  3B09 3E 81                     ld      a,1+128
0677+  3B0B FB                        ei
0678+  3B0C D3 99                     out     ($99),a
0679+  3B0E C9                        ret
0680+  3B0F             
0681+  3B0F 00 00 00 00 ColPal_:    .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 
0681+  3B13 00 00 00 00 
0681+  3B17 00 00 00 00 
0681+  3B1B 00 00 00 00 
0681+  3B1F 00 00 00 00 
0681+  3B23 00 00 00 00 
0681+  3B27 00 00 00 00 
0681+  3B2B 00 00 00 00 
0682+  3B2F             
0683+  3B2F             Color16defaultPalettes:
0684+  3B2F                         ;table of colours Nr,R,G,B
0685+  3B2F 00 00 00 00         .byte $0,0,0,0
0686+  3B33 01 00 00 00         .byte $1,0,0,0
0687+  3B37 02 01 06 01         .byte $2,1,6,1
0688+  3B3B 03 03 07 03         .byte $3,3,7,3
0689+  3B3F 04 01 01 07         .byte $4,1,1,7
0690+  3B43 05 02 03 07         .byte $5,2,3,7
0691+  3B47 06 05 01 01         .byte $6,5,1,1
0692+  3B4B 07 02 06 07         .byte $7,2,6,7
0693+  3B4F 08 07 01 01         .byte $8,7,1,1
0694+  3B53 09 07 03 03         .byte $9,7,3,3
0695+  3B57 0A 06 06 01         .byte $A,6,6,1
0696+  3B5B 0B 06 06 04         .byte $B,6,6,4
0697+  3B5F 0C 01 04 01         .byte $C,1,4,1
0698+  3B63 0D 06 02 05         .byte $D,6,2,5
0699+  3B67 0E 05 05 05         .byte $E,5,5,5
0700+  3B6B 0F 07 07 07         .byte $F,7,7,7
0701+  3B6F                     
0702+  3B6F             ;Restores default MSX color palettes
0703+  3B6F             RestoreColors:
0704+  3B6F E5                       push hl
0705+  3B70 21 2F 3B                 ld hl, Color16defaultPalettes 
0706+  3B73 CD 54 38                 call SetPaletteByTable    ; defines 16colors
0707+  3B76 E1                       pop hl
0708+  3B77 C9                       ret
0709+  3B78             
0710+  3B78             ;****************************************************************
0711+  3B78             ; draws LINE 
0712+  3B78             ;        to use, set H, L, D, E, B, A and go
0713+  3B78             ;        draw LINE (H,L)-(D,E) with color B, log-op A
0714+  3B78             ; H,L,D,E absolute values
0715+  3B78             ;****************************************************************
0716+  3B78             
0717+  3B78             LINE:
0718+  3B78 F3                   di
0719+  3B79 F5                   push af
0720+  3B7A C5                   push bc
0721+  3B7B D5                   push de
0722+  3B7C E5                   push hl
0723+  3B7D                      
0724+  3B7D F5                   push af          ;save LOGICAL OPERATION
0725+  3B7E C5                   push bc          ;save COLOR            
0726+  3B7F CD 81 3A             call VDPready
0727+  3B82 3E 24                ld  a,36
0728+  3B84 D3 99                out ($99),a
0729+  3B86 3E 91                ld  a,128+17
0730+  3B88 D3 99                out ($99),a     ;R#17 := 36
0731+  3B8A AF                   xor a           ;ld a,0
0732+  3B8B 0E 9B                ld c,$9b
0733+  3B8D ED 61                out (c),h       ;X from
0734+  3B8F ED 79                out (c),a
0735+  3B91 ED 69                out (c),l       ;Y from
0736+  3B93 ED 79                out (c),a
0737+  3B95              
0738+  3B95 7C                   ld a,h          ;make DX and DIX
0739+  3B96 92                   sub d
0740+  3B97 16 04                ld  d,%00000100
0741+  3B99 30 04                jr nc,gLINE1
0742+  3B9B 16 00                ld  d,%00000000
0743+  3B9D ED 44                neg
0744+  3B9F 67          gLINE1:  ld h,a          ;H := DX , D := DIX
0745+  3BA0 7D                   ld a,l          ;make DY and DIY
0746+  3BA1 93                   sub e
0747+  3BA2 1E 08                ld  e,%00001000
0748+  3BA4 30 04                jr nc,gLINE2
0749+  3BA6 1E 00                ld  e,%00000000
0750+  3BA8 ED 44                neg
0751+  3BAA 6F          gLINE2:  ld l,a          ;L := DY , E := DIY
0752+  3BAB BC                   cp h            ;make Maj and Min
0753+  3BAC 38 0D                jr c,gLINE3
0754+  3BAE AF                   xor a
0755+  3BAF ED 69                out (c),l           ;long side
0756+  3BB1 ED 79                out (c),a
0757+  3BB3 ED 61                out (c),h           ;short side
0758+  3BB5 ED 79                out (c),a
0759+  3BB7 3E 01                ld  a,%00000001     ;MAJ := 1
0760+  3BB9 18 0B                jr gLINE4
0761+  3BBB             
0762+  3BBB AF          gLINE3:  xor a
0763+  3BBC ED 61                out (c),h           ;NX
0764+  3BBE ED 79                out (c),a
0765+  3BC0 ED 69                out (c),l           ;NY
0766+  3BC2 ED 79                out (c),a
0767+  3BC4 3E 00                ld  a,%00000000     ;MAJ := 0
0768+  3BC6             
0769+  3BC6 B2          gLINE4:  or d
0770+  3BC7 B3                   or e           ;A := DIX , DIY , MAJ
0771+  3BC8 E1                   pop hl         ;H := COLOR
0772+  3BC9 ED 61                out (c),h
0773+  3BCB ED 79                out (c),a
0774+  3BCD F1                   pop af         ;A := LOGICAL OPERATION
0775+  3BCE F6 70                or  %01110000
0776+  3BD0 ED 79                out (c),a
0777+  3BD2 3E 8F                ld  a,$8F
0778+  3BD4 ED 79                out (c),a
0779+  3BD6                      
0780+  3BD6 CD 81 3A             call VDPready
0781+  3BD9 E1                   pop hl         
0782+  3BDA D1                   pop de         
0783+  3BDB C1                   pop bc
0784+  3BDC F1                   pop af
0785+  3BDD FB                   ei
0786+  3BDE C9                   ret
0787+  3BDF              
0788+  3BDF             
0789+  3BDF             ;***************************************************************************
0790+  3BDF             ;  HMMM with 2byte addressing (far copy), for not simplest case
0791+  3BDF             ;  word size parameters for H, L, D, E, B, C, DIX/DIY byte
0792+  3BDF             ;***************************************************************************
0793+  3BDF             
0794+  3BDF 00 00 00 00 HC_p     .word 0,0,0,0,0,0
0794+  3BE3 00 00 00 00 
0794+  3BE7 00 00 00 00 
0795+  3BEB 00                   .byte 0    ;DIX,DIY, just =0
0796+  3BEC             
0797+  3BEC             HMMMf:
0798+  3BEC F3                   di
0799+  3BED F5                   push af
0800+  3BEE C5                   push bc
0801+  3BEF D5                   push de
0802+  3BF0 E5                   push hl
0803+  3BF1                              
0804+  3BF1 CD 81 3A             call VDPready
0805+  3BF4 3E 20                ld  a,32
0806+  3BF6 D3 99                out ($99),a
0807+  3BF8 3E 91                ld  a,128+17
0808+  3BFA D3 99                out ($99),a     ;R#17 := 32
0809+  3BFC 21 DF 3B             ld hl,HC_p
0810+  3BFF 0E 9B                ld c,$9b
0811+  3C01 06 0C                ld b,12         ;6x2bytes
0812+  3C03 ED B3                otir
0813+  3C05 AF                   xor a     
0814+  3C06 ED 79                out (c),a       ;dummy
0815+  3C08 ED A3                outi            ;DIX and DIY
0816+  3C0A 3E D0                ld  a,%11010000 ;HMMM command
0817+  3C0C ED 79                out (c),a       ;do it
0818+  3C0E CD 81 3A             call VDPready
0819+  3C11 E1                   pop hl
0820+  3C12 D1                   pop de
0821+  3C13 C1                   pop bc
0822+  3C14 F1                   pop af
0823+  3C15 FB                   ei
0824+  3C16 C9                   ret
0825+  3C17             
0826+  3C17             ;***************************************************************************
0827+  3C17             ;  LMMM with 2byte addressing (far copy), for not simplest case
0828+  3C17             ;  VRAM (H,L)-(D,E) ---> VRAM (B,C)  with logical operation 
0829+  3C17             ;  word size parameters for H, L, D, E, B, C, DIX/DIY byte, Logical_A byte
0830+  3C17             ;***************************************************************************
0831+  3C17             
0832+  3C17 00 00 00 00 LM_p     .word 0,0,0,0,0,0
0832+  3C1B 00 00 00 00 
0832+  3C1F 00 00 00 00 
0833+  3C23 00                   .byte 0    ;DIX,DIY, just =0
0834+  3C24 00                   .byte 0    ;LOGICAL IMP=0 (just copy), TIMP bit3=1 copy no transparents
0835+  3C25             LMMMf:
0836+  3C25 F3                   di
0837+  3C26 F5                   push af
0838+  3C27 C5                   push bc
0839+  3C28 D5                   push de
0840+  3C29 E5                   push hl
0841+  3C2A                              
0842+  3C2A CD 81 3A             call VDPready
0843+  3C2D 3E 20                ld  a,32
0844+  3C2F D3 99                out ($99),a
0845+  3C31 3E 91                ld  a,128+17
0846+  3C33 D3 99                out ($99),a     ;R#17 := 32
0847+  3C35 21 17 3C             ld hl,LM_p
0848+  3C38 0E 9B                ld c,$9b
0849+  3C3A 06 0C                ld b,12         ;6x2bytes
0850+  3C3C ED B3                otir
0851+  3C3E AF                   xor a     
0852+  3C3F ED 79                out (c),a       ;dummy
0853+  3C41 ED A3                outi            ;DIX and DIY
0854+  3C43 7E                   ld a,(hl)       ; +logical
0855+  3C44 F6 90                or %10010000    ;LMMM command
0856+  3C46 ED 79                out (c),a       ;do it
0857+  3C48 CD 81 3A             call VDPready
0858+  3C4B E1                   pop hl
0859+  3C4C D1                   pop de
0860+  3C4D C1                   pop bc
0861+  3C4E F1                   pop af
0862+  3C4F FB                   ei
0863+  3C50 C9                   ret
3690   3C51                       #include "DISKs.ASM"       ; disk function diskload
0001+  3C51             ;=======================================
0002+  3C51             ;
0003+  3C51             ; Disk functions (working)
0004+  3C51             ;
0005+  3C51             ;     diskload - to load small file into memory knowing that it works
0006+  3C51             ;     readFF - buffered reading of 255 bytes of file into memory
0007+  3C51             ;                (safe diskload for larger file)
0008+  3C51             ;     dirload - to load directory structure into memory as string
0009+  3C51             
0010+  3C51             ;=======================================
0011+  3C51             ;
0012+  3C51             ; Usage1:
0013+  3C51             ;        ld hl,filename_
0014+  3C51             ;        ld de,$2000
0015+  3C51             ;        call diskload
0016+  3C51             ;filename_:
0017+  3C51             ;        .byte 0,"myfile  com",0  
0018+  3C51             ;
0019+  3C51             ; (use exact file name space!)
0020+  3C51             ;
0021+  3C51             ;
0022+  3C51             ; Usage2:
0023+  3C51             ;        ld hl,filename_
0024+  3C51             ;scanfile_:
0025+  3C51             ;        call readFF
0026+  3C51             ;        cp 0
0027+  3C51             ;        jr z,scanover_
0028+  3C51             ;        ld b,a
0029+  3C51             ;        push de
0030+  3C51             ;scanrecord_:
0031+  3C51             ;        ld a,(de)   ;byte is here
0032+  3C51             ;        inc de
0033+  3C51             ;        djnz scanrecord_
0034+  3C51             ;        pop de
0035+  3C51             ;        jr scanfile_
0036+  3C51             ;scanover_: 
0037+  3C51             ;
0038+  3C51             ;
0039+  3C51             ; Usage3:
0040+  3C51             ;        ld hl,willcard_
0041+  3C51             ;        ld de,$2000
0042+  3C51             ;        call dirload 
0043+  3C51             ;willcard_:
0044+  3C51             ;        .byte 0,"??????? COM",0  ;
0045+  3C51             ;     
0046+  3C51             ;    
0047+  3C51             f_setdma:     .equ     26
0048+  3C51             f_read:       .equ     39
0049+  3C51             f_open:       .equ     15
0050+  3C51             f_close:      .equ     16
0051+  3C51             
0052+  3C51             f_search1     .equ     $11
0053+  3C51             f_search2     .equ     $12
0054+  3C51             
0055+  3C51             f_bdos:       .equ     $F37D   ; Call $5
0056+  3C51             
0057+  3C51             
0058+  3C51             ; load file in address de
0059+  3C51             diskload:
0060+  3C51 F5                  push af
0061+  3C52 C5                  push bc
0062+  3C53 D5                  push de
0063+  3C54 E5                  push hl
0064+  3C55 DD E5               push ix
0065+  3C57 FD E5               push iy
0066+  3C59                     
0067+  3C59 3E 01               ld a,1
0068+  3C5B 32 78 3C            ld (loadflag),a
0069+  3C5E                     
0070+  3C5E D5                  push de
0071+  3C5F CD 82 3D            call f_setfcb
0072+  3C62 CD 99 3D            call f_openf
0073+  3C65 2A DB 3D            ld hl,(f_bleng)
0074+  3C68 D1                  pop de
0075+  3C69 CD AF 3D            call f_loadf
0076+  3C6C CD C2 3D            call f_closef
0077+  3C6F                     
0078+  3C6F FD E1               pop iy
0079+  3C71 DD E1               pop ix
0080+  3C73 E1                  pop hl
0081+  3C74 D1                  pop de
0082+  3C75 C1                  pop bc
0083+  3C76 F1                  pop af
0084+  3C77 C9                  ret
0085+  3C78                     
0086+  3C78 01          loadflag: .byte   1   ; should be 0 on return if loaded
0087+  3C79             
0088+  3C79 00          stop_rdFF .byte   0   ; set 1 to stop reading
0089+  3C7A             ; scan file, buffer in address de
0090+  3C7A             readFF:
0091+  3C7A C5                  push bc
0092+  3C7B D5                  push de
0093+  3C7C E5                  push hl
0094+  3C7D DD E5               push ix
0095+  3C7F FD E5               push iy
0096+  3C81                     
0097+  3C81 3A D5 3C            ld a,(rd_opn)
0098+  3C84 FE 00               cp 0
0099+  3C86 20 08               jr nz,rd_overOpnFile
0100+  3C88                     
0101+  3C88 D5                  push de
0102+  3C89 CD 82 3D            call f_setfcb
0103+  3C8C CD 99 3D            call f_openf
0104+  3C8F D1                  pop de
0105+  3C90                 
0106+  3C90             rd_overOpnFile:
0107+  3C90             
0108+  3C90 3E 00               ld a,0
0109+  3C92 32 DA 3D            ld (f_groot+1),a
0110+  3C95 67                  ld h,a
0111+  3C96 3E 01               ld a,$1   ; read 255 bytes only
0112+  3C98 32 D9 3D            ld (f_groot),a
0113+  3C9B 2E FF               ld l,$ff
0114+  3C9D                     
0115+  3C9D 3A D5 3C            ld a,(rd_opn)
0116+  3CA0 FE 00               cp 0
0117+  3CA2 20 08               jr nz,rd_over2
0118+  3CA4 32 79 3C            ld (stop_rdFF),a                        
0119+  3CA7 CD AF 3D            call f_loadf
0120+  3CAA 18 0D               jr rd_over3
0121+  3CAC             rd_over2:
0122+  3CAC 3A 79 3C            ld a,(stop_rdFF)
0123+  3CAF FE 00               cp 0
0124+  3CB1 20 10               jr nz,rd_StopRd
0125+  3CB3 11 CB 3D            ld de,f_fcb
0126+  3CB6 CD B9 3D            call f_rdit
0127+  3CB9             rd_over3:
0128+  3CB9 3E 01               ld a,1
0129+  3CBB 32 D5 3C            ld (rd_opn),a
0130+  3CBE                     
0131+  3CBE 7D                  ld a,l
0132+  3CBF FE 00               cp 0
0133+  3CC1 20 0A               jr nz,rd_outExit
0134+  3CC3             rd_StopRd:
0135+  3CC3 CD C2 3D            call f_closef
0136+  3CC6 3E 00               ld a,0
0137+  3CC8 32 D5 3C            ld (rd_opn),a
0138+  3CCB FE 00               cp 0
0139+  3CCD                           
0140+  3CCD             rd_outExit:        
0141+  3CCD FD E1               pop iy
0142+  3CCF DD E1               pop ix
0143+  3CD1 E1                  pop hl
0144+  3CD2 D1                  pop de
0145+  3CD3 C1                  pop bc
0146+  3CD4 C9                  ret
0147+  3CD5             
0148+  3CD5 00          rd_opn: .byte 0
0149+  3CD6                  
0150+  3CD6             ;
0151+  3CD6             ; searches directory files
0152+  3CD6             ;   that match hl willcard
0153+  3CD6             ;   and stores result in address de
0154+  3CD6             ;
0155+  3CD6             ; separator ","
0156+  3CD6             ; ends with "$"
0157+  3CD6             ;
0158+  3CD6             ;  So, print the directory structure after by simple:
0159+  3CD6             ;         ld c, 9
0160+  3CD6             ;         call 5
0161+  3CD6             ;
0162+  3CD6 00          f_found .byte 0   ; counter of files found
0163+  3CD7             
0164+  3CD7             dirload:
0165+  3CD7 F5                  push af
0166+  3CD8 C5                  push bc
0167+  3CD9 D5                  push de
0168+  3CDA E5                  push hl
0169+  3CDB DD E5               push ix
0170+  3CDD FD E5               push iy
0171+  3CDF                     
0172+  3CDF 3E 00               ld      a,0
0173+  3CE1 32 D6 3C            ld      (f_found),a
0174+  3CE4                     
0175+  3CE4 CD 6A 3D            call    f_sv_save ; save de
0176+  3CE7                     
0177+  3CE7 CD 82 3D            call    f_setfcb
0178+  3CEA 2A DB 3D            ld      hl,(f_bleng)
0179+  3CED             
0180+  3CED E5                  push    hl
0181+  3CEE 11 42 3D            ld      de,f_dma                                                                                                                                                                                          
0182+  3CF1 0E 1A               ld      c,f_setdma
0183+  3CF3 CD 7D F3            call    f_bdos
0184+  3CF6 11 CB 3D            ld      de,f_fcb
0185+  3CF9 E1                  pop     hl                
0186+  3CFA                     
0187+  3CFA 0E 11               ld      c,f_search1  ; first search
0188+  3CFC CD 7D F3            call    f_bdos
0189+  3CFF                     
0190+  3CFF             f_loopDirList:
0191+  3CFF             
0192+  3CFF FE 00               cp 0
0193+  3D01 20 28               jr nz,  f_errDirList
0194+  3D03                     
0195+  3D03                     ;----- save in list --|
0196+  3D03 F5                  push    af
0197+  3D04 C5                  push    bc
0198+  3D05 D5                  push    de
0199+  3D06 E5                  push    hl
0200+  3D07                     
0201+  3D07 3A D6 3C            ld      a,(f_found)
0202+  3D0A 3C                  inc     a
0203+  3D0B 32 D6 3C            ld      (f_found),a
0204+  3D0E                             
0205+  3D0E CD 75 3D            call    f_sv_rest ; restore de
0206+  3D11                             
0207+  3D11 FD E5               push    iy
0208+  3D13 E1                  pop     hl   ; where file name is in DMA
0209+  3D14 01 0B 00            ld      bc,11
0210+  3D17 ED B0               ldir         ; write 11 chars of filename
0211+  3D19                     
0212+  3D19 3E 2C               ld      a,','    ; separator
0213+  3D1B 12                  ld      (de),a
0214+  3D1C 13                  inc     de
0215+  3D1D             
0216+  3D1D CD 6A 3D            call    f_sv_save ; save new de
0217+  3D20                     
0218+  3D20 E1                  pop     hl
0219+  3D21 D1                  pop     de
0220+  3D22 C1                  pop     bc
0221+  3D23 F1                  pop     af
0222+  3D24                     ;---------------------|
0223+  3D24                     
0224+  3D24 0E 12               ld      c,f_search2  ; continue searching
0225+  3D26 CD 7D F3            call    f_bdos
0226+  3D29                     
0227+  3D29 18 D4               jr      f_loopDirList
0228+  3D2B                     
0229+  3D2B             f_errDirList:
0230+  3D2B             
0231+  3D2B CD 75 3D            call    f_sv_rest ; restore de
0232+  3D2E             
0233+  3D2E 3A D6 3C            ld      a,(f_found)
0234+  3D31 FE 00               cp      0
0235+  3D33 28 01               jr      z, f_fxqx
0236+  3D35 1B                  dec     de
0237+  3D36 3E 24       f_fxqx: ld      a,'$'     ; it's over, put $
0238+  3D38 12                  ld      (de),a
0239+  3D39                     
0240+  3D39 FD E1               pop iy
0241+  3D3B DD E1               pop ix
0242+  3D3D E1                  pop hl
0243+  3D3E D1                  pop de
0244+  3D3F C1                  pop bc
0245+  3D40 F1                  pop af
0246+  3D41 C9                  ret
0247+  3D42             
0248+  3D42             f_dma:  .ds 40      ; to store searching results (a copy of fcb)
0249+  3D6A             
0250+  3D6A             ; need this crap because it uses all registers
0251+  3D6A             f_sv_save:
0252+  3D6A F5                  push af
0253+  3D6B 7A                  ld a,d
0254+  3D6C 32 80 3D            ld (f_sv_w+0),a        
0255+  3D6F 7B                  ld a,e
0256+  3D70 32 81 3D            ld (f_sv_w+1),a
0257+  3D73 F1                  pop af
0258+  3D74 C9                  ret
0259+  3D75             f_sv_rest:
0260+  3D75 F5                  push af
0261+  3D76 3A 80 3D            ld a,(f_sv_w+0)
0262+  3D79 57                  ld d,a        
0263+  3D7A 3A 81 3D            ld a,(f_sv_w+1)
0264+  3D7D 5F                  ld e,a        
0265+  3D7E F1                  pop af
0266+  3D7F C9                  ret
0267+  3D80             
0268+  3D80 00 00       f_sv_w: .word 0
0269+  3D82                                
0270+  3D82             f_setfcb:
0271+  3D82 E5                    push hl
0272+  3D83 21 CB 3D              ld hl,f_fcb+0
0273+  3D86 11 CC 3D              ld de,f_fcb+1
0274+  3D89 01 24 00              ld bc,36
0275+  3D8C 70                    ld (hl),b
0276+  3D8D ED B0                 ldir
0277+  3D8F E1                    pop hl
0278+  3D90 11 CB 3D              ld de,f_fcb
0279+  3D93 01 0C 00              ld bc,12
0280+  3D96 ED B0                 ldir
0281+  3D98 C9                    ret
0282+  3D99             
0283+  3D99 11 CB 3D    f_openf:  ld      de,f_fcb
0284+  3D9C 0E 0F                 ld      c,f_open
0285+  3D9E CD 7D F3              call    f_bdos
0286+  3DA1 21 01 00              ld      hl,1
0287+  3DA4 22 D9 3D              ld      (f_groot),hl
0288+  3DA7 2B                    dec     hl
0289+  3DA8 22 EC 3D              ld      (f_blok),hl
0290+  3DAB 22 EE 3D              ld      (f_blok+2),hl
0291+  3DAE C9                    ret
0292+  3DAF                                 
0293+  3DAF E5          f_loadf:  push    hl
0294+  3DB0 0E 1A                 ld      c,f_setdma
0295+  3DB2 CD 7D F3              call    f_bdos
0296+  3DB5 11 CB 3D              ld      de,f_fcb
0297+  3DB8 E1                    pop     hl
0298+  3DB9 0E 27       f_rdit:   ld      c,f_read
0299+  3DBB CD 7D F3              call    f_bdos    
0300+  3DBE 32 78 3C              ld      (loadflag),a  ;sets 0 if ok, 1 if can not load
0301+  3DC1 C9                    ret
0302+  3DC2 11 CB 3D    f_closef: ld      de,f_fcb
0303+  3DC5 0E 10                 ld      c,f_close
0304+  3DC7 CD 7D F3              call    f_bdos
0305+  3DCA C9                    ret
0306+  3DCB             
0307+  3DCB             
0308+  3DCB             ; Good tutorial on MSX files at
0309+  3DCB             ; http://fms.komkon.org/MSX/Handbook/th-3.txt
0310+  3DCB             
0311+  3DCB 00          f_fcb:    .byte    0
0312+  3DCC 3F 3F 3F 3F           .byte    "???????????"   ;11 chars          
0312+  3DD0 3F 3F 3F 3F 
0312+  3DD4 3F 3F 3F 
0313+  3DD7 00 00                 .word    0
0314+  3DD9 00 00       f_groot:  .word    0
0315+  3DDB 00 00       f_bleng:  .word    0
0316+  3DDD 00 00 00 00           .byte    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0316+  3DE1 00 00 00 00 
0316+  3DE5 00 00 00 00 
0316+  3DE9 00 00 00 
0317+  3DEC 00 00       f_blok:   .word    0
0318+  3DEE 00 00                 .word    0
0319+  3DF0             
0320+  3DF0                                     3691   3DF0                       #include "String.ASM"      ; most common string functions
0001+  3DF0             ;-------------------------------------
0002+  3DF0             ;
0003+  3DF0             ; Most common String functions (MSX asm)
0004+  3DF0             ; String can be 256 characters long maximum
0005+  3DF0             ; 
0006+  3DF0             ;
0007+  3DF0             ; String ends with 0, 
0008+  3DF0             ;  should be reserved bytes if string becomes longer,
0009+  3DF0             ;   of course.
0010+  3DF0             ;
0011+  3DF0             ;-------------------------------------
0012+  3DF0             ; 
0013+  3DF0             
0014+  3DF0             ; returns length of DE string in A, also sets Z
0015+  3DF0             Str_Len:
0016+  3DF0 C5                  push bc
0017+  3DF1 D5                  push de
0018+  3DF2 0E 00               ld c,0
0019+  3DF4             Str_LnScn:        
0020+  3DF4 1A                  ld a,(de)
0021+  3DF5 FE 00               cp 0
0022+  3DF7 28 04               jr z,Str_LnEx
0023+  3DF9 13                  inc de
0024+  3DFA 0C                  inc c
0025+  3DFB 18 F7               jr Str_LnScn
0026+  3DFD             Str_LnEx:
0027+  3DFD 79                  ld a,c
0028+  3DFE D1                  pop de        
0029+  3DFF C1                  pop bc
0030+  3E00 FE 00               cp 0
0031+  3E02 C9                  ret
0032+  3E03                     
0033+  3E03             ; set empty string
0034+  3E03             Str_Clear:
0035+  3E03 F5                  push af
0036+  3E04 3E 00               ld a,0
0037+  3E06 12                  ld (de),a
0038+  3E07 F1                  pop af
0039+  3E08 C9                  ret
0040+  3E09             
0041+  3E09             
0042+  3E09             
0043+  3E09             ; Cuts string of DE at length=A [0..254]
0044+  3E09             ;     (label+nn  is much faster)
0045+  3E09             ;
0046+  3E09             Str_Cut:
0047+  3E09 F5                   push af
0048+  3E0A C5                   push bc
0049+  3E0B E5                   push hl
0050+  3E0C 06 00                ld b,0
0051+  3E0E 4F                   ld c,a
0052+  3E0F D5                   push de
0053+  3E10 E1                   pop hl
0054+  3E11 09                   add hl,bc
0055+  3E12 3E 00                ld a,0
0056+  3E14 77                   ld (hl),a
0057+  3E15 E1                   pop hl
0058+  3E16 C1                   pop bc
0059+  3E17 F1                   pop af
0060+  3E18 C9                   ret
0061+  3E19                      
0062+  3E19             ; compares string of DE with string of IX
0063+  3E19             ; Returns: A=0 - strings are equal
0064+  3E19             ;          A=1 - IX string starts with DE str.
0065+  3E19             ;          A=2 - not equal
0066+  3E19             ; 
0067+  3E19             Str_Compare:
0068+  3E19 C5                   push bc
0069+  3E1A D5                   push de
0070+  3E1B DD E5                push ix
0071+  3E1D             Str_compScn:         
0072+  3E1D DD 7E 00             ld a,(ix)
0073+  3E20 FE 00                cp 0
0074+  3E22 28 0E                jr z,Str_compL0   
0075+  3E24 47                   ld b,a
0076+  3E25 1A                   ld a,(de)
0077+  3E26 FE 00                cp 0
0078+  3E28 28 17                jr z,Str_compN1
0079+  3E2A B8                   cp b
0080+  3E2B 20 10                jr nz,Str_compNEq
0081+  3E2D 13                   inc de
0082+  3E2E DD 23                inc ix
0083+  3E30 18 EB                jr Str_compScn
0084+  3E32             Str_compL0:
0085+  3E32 1A                   ld a,(de)
0086+  3E33 FE 00                cp 0
0087+  3E35 28 02                jr z,Str_compEq
0088+  3E37 18 04                jr Str_compNEq
0089+  3E39             Str_compEq:
0090+  3E39 3E 00                ld a,0
0091+  3E3B 18 06                jr Str_compEx
0092+  3E3D             Str_compNEq:
0093+  3E3D 3E 02                ld a,2
0094+  3E3F 18 02                jr Str_compEx         
0095+  3E41             Str_compN1:
0096+  3E41 3E 01                ld a,1
0097+  3E43             Str_compEx:
0098+  3E43 DD E1                pop ix
0099+  3E45 D1                   pop de
0100+  3E46 C1                   pop bc
0101+  3E47 C9                   ret
0102+  3E48             
0103+  3E48             ; Copies string DE to IX
0104+  3E48             Str_Copy:
0105+  3E48 F5                   push af
0106+  3E49 D5                   push de
0107+  3E4A DD E5                push ix
0108+  3E4C             Str_CpyScn:
0109+  3E4C 1A                   ld a,(de)
0110+  3E4D DD 77 00             ld (ix),a
0111+  3E50 FE 00                cp 0
0112+  3E52 28 05                jr z,StrCpyEx
0113+  3E54 13                   inc de
0114+  3E55 DD 23                inc ix
0115+  3E57 18 F3                jr Str_CpyScn
0116+  3E59             StrCpyEx:                  
0117+  3E59 DD E1                pop ix
0118+  3E5B D1                   pop de
0119+  3E5C F1                   pop af
0120+  3E5D C9                   ret
0121+  3E5E             
0122+  3E5E             ; Converts string DE to UpperCase
0123+  3E5E             Str_Upper:
0124+  3E5E F5                   push af
0125+  3E5F D5                   push de
0126+  3E60             Str_UppScn:
0127+  3E60 1A                   ld a,(de)
0128+  3E61 FE 00                cp 0
0129+  3E63 28 0E                jr z,Str_UppEx
0130+  3E65 FE 61                cp 'a'
0131+  3E67 38 07                jr c,Str_UppNCnv
0132+  3E69 FE 7A                cp 'z'
0133+  3E6B 30 03                jr nc,Str_UppNCnv
0134+  3E6D D6 20                sub 32
0135+  3E6F 12                   ld (de),a
0136+  3E70             Str_UppNCnv:
0137+  3E70 13                   inc de         
0138+  3E71 18 ED                jr Str_UppScn
0139+  3E73             Str_UppEx:         
0140+  3E73 D1                   pop de
0141+  3E74 F1                   pop af
0142+  3E75 C9                   ret
0143+  3E76             
0144+  3E76             ; Converts string DE to LowerCase
0145+  3E76             Str_Lower:
0146+  3E76 F5                   push af
0147+  3E77 D5                   push de
0148+  3E78             Str_LwrScn:
0149+  3E78 1A                   ld a,(de)
0150+  3E79 FE 00                cp 0
0151+  3E7B 28 0E                jr z,Str_LwrEx
0152+  3E7D FE 41                cp 'A'
0153+  3E7F 38 07                jr c,Str_LwrNCnv
0154+  3E81 FE 5A                cp 'Z'
0155+  3E83 30 03                jr nc,Str_LwrNCnv
0156+  3E85 C6 20                add a,32
0157+  3E87 12                   ld (de),a
0158+  3E88             Str_LwrNCnv:
0159+  3E88 13                   inc de         
0160+  3E89 18 ED                jr Str_LwrScn
0161+  3E8B             Str_LwrEx:         
0162+  3E8B D1                   pop de
0163+  3E8C F1                   pop af
0164+  3E8D C9                   ret
0165+  3E8E             
0166+  3E8E             ; Finds string DE in string IX first 254 bytes
0167+  3E8E             ; On return: A=position, starting from 0
0168+  3E8E             ; If not found then A=$ff                 
0169+  3E8E             Str_IndexOf:
0170+  3E8E C5                   push bc
0171+  3E8F D5                   push de
0172+  3E90 DD E5                push ix
0173+  3E92             
0174+  3E92 06 00                ld b,0
0175+  3E94             Str_InxScn:
0176+  3E94 DD 7E 00             ld a,(ix)
0177+  3E97 FE 00                cp 0
0178+  3E99 20 04                jr nz,Str_InxCompr
0179+  3E9B 3E FF                ld a,$ff
0180+  3E9D 18 12                jr Str_InxEx
0181+  3E9F             Str_InxCompr:
0182+  3E9F CD 19 3E             call Str_Compare
0183+  3EA2 FE 02                cp 2
0184+  3EA4 20 0A                jr nz,Str_InxFound
0185+  3EA6 04                   inc b
0186+  3EA7 3E FF                ld a,$ff
0187+  3EA9 B8                   cp b
0188+  3EAA 28 05                jr z,Str_InxEx
0189+  3EAC DD 23                inc ix
0190+  3EAE 18 E4                jr Str_InxScn
0191+  3EB0             Str_InxFound:
0192+  3EB0 78                   ld a,b 
0193+  3EB1             Str_InxEx:                  
0194+  3EB1 DD E1                pop ix
0195+  3EB3 D1                   pop de
0196+  3EB4 C1                   pop bc
0197+  3EB5 C9                   ret
0198+  3EB6             
0199+  3EB6             ;returns a=0 and Z flag set if string IX contains substring DE
0200+  3EB6             ; (length not limited)
0201+  3EB6             Str_Contains:
0202+  3EB6 DD E5                push ix
0203+  3EB8             Str_Contai_Scn:
0204+  3EB8 DD 7E 00             ld a,(ix)
0205+  3EBB FE 00                cp 0
0206+  3EBD 20 04                jr nz,Str_Contai_Cont
0207+  3EBF 3E 02                ld a,2
0208+  3EC1 18 0D                jr Str_Contai_ex
0209+  3EC3             Str_Contai_Cont:      
0210+  3EC3 CD 19 3E             call Str_Compare
0211+  3EC6 FE 02                cp 2
0212+  3EC8 20 04                jr nz,Str_Contai_found
0213+  3ECA DD 23                inc ix
0214+  3ECC 18 EA                jr Str_Contai_Scn
0215+  3ECE             Str_Contai_found:
0216+  3ECE 3E 00                ld a,0
0217+  3ED0             Str_Contai_ex:          
0218+  3ED0 DD E1                pop ix
0219+  3ED2 FE 00                cp 0
0220+  3ED4 C9                   ret
0221+  3ED5             
0222+  3ED5             ;
0223+  3ED5             ; Places substring of IX into DE
0224+  3ED5             ; c=starting char in IX, b-length in chars
0225+  3ED5             ;
0226+  3ED5             Str_Substr:
0227+  3ED5 F5                   push af
0228+  3ED6 C5                   push bc
0229+  3ED7 D5                   push de
0230+  3ED8 E5                   push hl       
0231+  3ED9             
0232+  3ED9 DD E5                push ix
0233+  3EDB E1                   pop hl
0234+  3EDC 79                   ld a,c
0235+  3EDD FE 00                cp 0
0236+  3EDF 28 05                jr z,Str_SubAt0
0237+  3EE1 C5                   push bc
0238+  3EE2 06 00                ld b,0
0239+  3EE4 09                   add hl,bc   ; offset
0240+  3EE5 C1                   pop bc
0241+  3EE6             Str_SubAt0:         
0242+  3EE6 48                   ld c,b
0243+  3EE7 06 00                ld b,0
0244+  3EE9 ED B0                ldir        ; copy bc bytes from HL to DE addrs.
0245+  3EEB 3E 00                ld a,0
0246+  3EED 12                   ld (de),a
0247+  3EEE                      
0248+  3EEE E1                   pop hl
0249+  3EEF D1                   pop de
0250+  3EF0 C1                   pop bc
0251+  3EF1 F1                   pop af
0252+  3EF2 C9                   ret
0253+  3EF3             
0254+  3EF3             ;
0255+  3EF3             ; Removes left spaces for string in DE
0256+  3EF3             ;
0257+  3EF3             Str_Ltrim:
0258+  3EF3 F5                   push af
0259+  3EF4 C5                   push bc
0260+  3EF5 D5                   push de
0261+  3EF6 DD E5                push ix
0262+  3EF8                      
0263+  3EF8 D5                   push de
0264+  3EF9 DD E1                pop ix
0265+  3EFB 0E 00                ld c,0
0266+  3EFD             Str_LtrScn:         
0267+  3EFD 1A                   ld a,(de)
0268+  3EFE FE 20                cp 32
0269+  3F00 20 05                jr nz,Str_LtrNS
0270+  3F02 13                   inc de
0271+  3F03 0E 01                ld c,1
0272+  3F05 18 F6                jr Str_LtrScn
0273+  3F07             Str_LtrNS:
0274+  3F07 79                   ld a,c
0275+  3F08 FE 00                cp 0
0276+  3F0A 28 03                jr z,Str_LtrEx
0277+  3F0C CD 48 3E             call Str_Copy
0278+  3F0F             Str_LtrEx:
0279+  3F0F DD E1                pop ix
0280+  3F11 D1                   pop de
0281+  3F12 C1                   pop bc
0282+  3F13 F1                   pop af
0283+  3F14 C9                   ret
0284+  3F15                      
0285+  3F15             ;
0286+  3F15             ; Removes right spaces for string in DE
0287+  3F15             ;
0288+  3F15             Str_Rtrim:
0289+  3F15 F5                   push af
0290+  3F16 D5                   push de         
0291+  3F17 1A                   ld a,(de)
0292+  3F18 FE 00                cp 0
0293+  3F1A 28 12                jr z,Str_RtrEx
0294+  3F1C             Str_RtrRscn:
0295+  3F1C 13                   inc de        
0296+  3F1D 1A                   ld a,(de)
0297+  3F1E FE 00                cp 0
0298+  3F20 28 02                jr z,Str_Rtr1
0299+  3F22 18 F8                jr Str_RtrRscn
0300+  3F24             Str_Rtr1:
0301+  3F24 1B                   dec de
0302+  3F25 FE 20                cp 32
0303+  3F27 20 05                jr nz,Str_RtrEx
0304+  3F29 3E 00                ld a,0
0305+  3F2B 12                   ld (de),a
0306+  3F2C 18 F6                jr Str_Rtr1
0307+  3F2E             Str_RtrEx:
0308+  3F2E D1                   pop de
0309+  3F2F F1                   pop af
0310+  3F30 C9                   ret
0311+  3F31             
0312+  3F31             ; both trims
0313+  3F31             Str_Alltrim:
0314+  3F31 CD 15 3F             call Str_Rtrim
0315+  3F34 CD F3 3E             call Str_Ltrim
0316+  3F37 C9                   ret
0317+  3F38             
0318+  3F38             ;
0319+  3F38             ; Adds DE string at the end of IX string
0320+  3F38             ;
0321+  3F38             Str_Append:
0322+  3F38 F5                   push af
0323+  3F39 DD E5                push ix         
0324+  3F3B DD 7E 00             ld a,(ix)
0325+  3F3E FE 00                cp 0
0326+  3F40 28 0B                jr z,Str_App1
0327+  3F42             Str_AppRscn:
0328+  3F42 DD 23                inc ix        
0329+  3F44 DD 7E 00             ld a,(ix)
0330+  3F47 FE 00                cp 0
0331+  3F49 28 02                jr z,Str_App1
0332+  3F4B 18 F5                jr Str_AppRscn
0333+  3F4D             Str_App1:
0334+  3F4D CD 48 3E             call Str_Copy
0335+  3F50 DD E1                pop ix
0336+  3F52 F1                   pop af
0337+  3F53 C9                   ret
0338+  3F54             
0339+  3F54             ;
0340+  3F54             ; Replaces all DE substrings in IX string with HL string
0341+  3F54             ;
0342+  3F54             Str_Replace:
0343+  3F54 F5                   push af
0344+  3F55 C5                   push bc
0345+  3F56 E5                   push hl
0346+  3F57 DD E5                push ix
0347+  3F59                      
0348+  3F59 CD F0 3D             call Str_Len
0349+  3F5C 4F                   ld c,a           ;c=Len(de-string)
0350+  3F5D FE 00                cp 0
0351+  3F5F 28 47                jr z,Str_ReplNo
0352+  3F61             Str_ReplLoop:        
0353+  3F61 CD 8E 3E             call Str_IndexOf
0354+  3F64 FE FF                cp $ff
0355+  3F66 28 40                jr z,Str_ReplNo
0356+  3F68                      
0357+  3F68 D5                   push de
0358+  3F69 47                   ld b,a
0359+  3F6A 11 AE 3F             ld de,Str_buf_
0360+  3F6D                      
0361+  3F6D DD E5                push ix
0362+  3F6F             Str_ReplIy0:                   ; copy till substr...
0363+  3F6F DD 7E 00             ld a,(ix)
0364+  3F72 12                   ld (de),a
0365+  3F73 78                   ld a,b
0366+  3F74 FE 00                cp 0
0367+  3F76 28 06                jr z,Str_ReplIx0
0368+  3F78 DD 23                inc ix
0369+  3F7A 13                   inc de
0370+  3F7B 05                   dec b
0371+  3F7C 18 F1                jr Str_ReplIy0
0372+  3F7E             Str_ReplIx0:
0373+  3F7E             
0374+  3F7E E5                   push hl
0375+  3F7F             Str_ReplIy1:                   ; copy new substring...         
0376+  3F7F 7E                   ld a,(hl)
0377+  3F80 12                   ld (de),a
0378+  3F81 FE 00                cp 0
0379+  3F83 28 04                jr z,Str_ReplHl0
0380+  3F85 23                   inc hl
0381+  3F86 13                   inc de
0382+  3F87 18 F6                jr Str_ReplIy1
0383+  3F89             Str_ReplHl0:
0384+  3F89 E1                   pop hl
0385+  3F8A                      
0386+  3F8A 79                   ld a,c
0387+  3F8B             Str_ReplSkp1:         
0388+  3F8B DD 23                inc ix                 ; skip substr
0389+  3F8D 3D                   dec a
0390+  3F8E 20 FB                jr nz,Str_ReplSkp1
0391+  3F90             Str_ReplIy3:                    ; copy all string after...
0392+  3F90 DD 7E 00             ld a,(ix)
0393+  3F93 12                   ld (de),a
0394+  3F94 FE 00                cp 0
0395+  3F96 28 05                jr z,Str_ReplIx3
0396+  3F98 DD 23                inc ix
0397+  3F9A 13                   inc de
0398+  3F9B 18 F3                jr Str_ReplIy3
0399+  3F9D             Str_ReplIx3:
0400+  3F9D DD E1                pop ix
0401+  3F9F                      
0402+  3F9F 11 AE 3F             ld de,Str_buf_
0403+  3FA2 CD 48 3E             call Str_Copy        ; copy new string to IX 
0404+  3FA5             
0405+  3FA5 D1                   pop de
0406+  3FA6 18 B9                jr Str_ReplLoop        ; to replace all occurrances
0407+  3FA8             Str_ReplNo:         
0408+  3FA8 DD E1                pop ix
0409+  3FAA E1                   pop hl
0410+  3FAB C1                   pop bc
0411+  3FAC F1                   pop af
0412+  3FAD C9                   ret
0413+  3FAE                      
0414+  3FAE             Str_buf_ .ds $100
0415+  40AE 00                   .byte 0
0416+  40AF             
0417+  40AF             
0418+  40AF             ;
0419+  40AF             ; This truncates DE string where new line (ascii 10 or 13)
0420+  40AF             ; If string is longer 254 chars then truncates at space char.
0421+  40AF             ; Sets IX as pointer to next line starting character
0422+  40AF             ; This supposed to get safe-as-much-possible string opeations.
0423+  40AF             
0424+  40AF             Str_Line:
0425+  40AF F5                   push af
0426+  40B0 C5                   push bc
0427+  40B1 D5                   push de
0428+  40B2             
0429+  40B2 01 00 00             ld bc,0
0430+  40B5             Str_Ln_Scn:
0431+  40B5 1A                   ld a,(de)       ; find end of line
0432+  40B6 FE 00                cp 0
0433+  40B8 28 28                jr z,Str_Ln_q1
0434+  40BA FE 0D                cp 13
0435+  40BC 28 24                jr z,Str_Ln_q1
0436+  40BE FE 0A                cp 10
0437+  40C0 28 20                jr z,Str_Ln_q1
0438+  40C2 13                   inc de
0439+  40C3 0C                   inc c
0440+  40C4 3E FF                ld a,$ff         ; reached 255?         
0441+  40C6 B9                   cp c
0442+  40C7 20 EC                jr nz, Str_Ln_Scn
0443+  40C9                      
0444+  40C9             Str_Ln_fSpc:         
0445+  40C9                                        
0446+  40C9 1A                   ld a,(de)         ; if string too long then finds space near 254th position
0447+  40CA FE 20                cp ' '
0448+  40CC 28 14                jr z,Str_Ln_q1    ; use this position and truncate string
0449+  40CE 1B                   dec de
0450+  40CF 0D                   dec c
0451+  40D0 20 F7                jr nz,Str_Ln_fSpc
0452+  40D2                                 
0453+  40D2             Str_Ln_cL:
0454+  40D2 1A                   ld a,(de)          ; if cant find space then just searches for line end
0455+  40D3 FE 00                cp 0               ; to obtain new IX anyway
0456+  40D5 28 0B                jr z,Str_Ln_q1
0457+  40D7 FE 0D                cp 13
0458+  40D9 28 07                jr z,Str_Ln_q1
0459+  40DB FE 0A                cp 10
0460+  40DD 28 03                jr z,Str_Ln_q1
0461+  40DF 13                   inc de
0462+  40E0 18 F0                jr Str_Ln_cL
0463+  40E2                      
0464+  40E2             Str_Ln_q1:
0465+  40E2 3E 00                ld a,0          ; set to 0 till next line
0466+  40E4 12                   ld (de),a
0467+  40E5 13                   inc de
0468+  40E6 1A                   ld a,(de)
0469+  40E7 FE 00                cp 0          
0470+  40E9 28 F7                jr z,Str_Ln_q1
0471+  40EB FE 0D                cp 13
0472+  40ED 28 F3                jr z,Str_Ln_q1
0473+  40EF FE 0A                cp 10
0474+  40F1 28 EF                jr z,Str_Ln_q1
0475+  40F3                      
0476+  40F3 D5                   push de
0477+  40F4 DD E1                pop ix
0478+  40F6                     
0479+  40F6 D1                   pop de
0480+  40F7 C1                   pop bc
0481+  40F8 F1                   pop af
0482+  40F9 C9                   ret
0483+  40FA             
0484+  40FA             ;
0485+  40FA             ; This removes all non-character symbols and sets TABs as 3 spaces
0486+  40FA             ; of string in DE.  Use after Str_Line not to lose line feeds.
0487+  40FA             ;                  
0488+  40FA             Str_CharsOnly:
0489+  40FA             
0490+  40FA F5                   push af
0491+  40FB D5                   push de
0492+  40FC DD E5                push ix
0493+  40FE D5                   push de
0494+  40FF D5                   push de
0495+  4100 DD E1                pop ix
0496+  4102 11 AE 3F             ld de,Str_buf_
0497+  4105             Str_CharsO_loop:
0498+  4105 DD 7E 00             ld a,(ix)
0499+  4108 FE 00                cp 0
0500+  410A 28 1A                jr z, Str_CharsO_Ex
0501+  410C FE 09                cp 9
0502+  410E 20 0C                jr nz, Str_CharsO_nTb
0503+  4110 3E 20                ld a,' '
0504+  4112 12                   ld (de),a
0505+  4113 13                   inc de
0506+  4114 12                   ld (de),a
0507+  4115 13                   inc de
0508+  4116             Str_CharsO_cpy:         
0509+  4116 12                   ld (de),a
0510+  4117 13                   inc de
0511+  4118 DD 23                inc ix
0512+  411A 18 E9                jr Str_CharsO_loop
0513+  411C             Str_CharsO_nTb:
0514+  411C FE 20                cp ' '
0515+  411E 38 E5                jr c,Str_CharsO_loop
0516+  4120 FE FF                cp $ff
0517+  4122 28 E1                jr z,Str_CharsO_loop
0518+  4124 18 F0                jr Str_CharsO_cpy
0519+  4126             Str_CharsO_Ex:
0520+  4126 12                   ld (de),a
0521+  4127 11 AE 3F             ld de,Str_buf_
0522+  412A DD E1                pop ix
0523+  412C CD 48 3E             call Str_Copy        ; copy new string to IX 
0524+  412F DD E1                pop ix
0525+  4131 D1                   pop de
0526+  4132 F1                   pop af
0527+  4133 C9                   ret
0528+  4134             
0529+  4134             ;
0530+  4134             ; places value of integer in reg-a into DE string
0531+  4134             ;
0532+  4134             Str_itoa:
0533+  4134 F5                   push af
0534+  4135 C5                   push bc
0535+  4136 D5                   push de
0536+  4137 FE 00                cp 0
0537+  4139 28 3E                jr z,Str_i2_0
0538+  413B FE C8                cp 200
0539+  413D 30 26                jr nc,Str_i2a200
0540+  413F FE 64                cp 100
0541+  4141 30 2C                jr nc,Str_i2a100
0542+  4143 FE 0A                cp 10
0543+  4145 30 03                jr nc,Str_i2a10
0544+  4147 4F                   ld c,a
0545+  4148 18 11                jr Str_i2q
0546+  414A             Str_i2a10:
0547+  414A 06 00                ld b,0
0548+  414C             Str_i2a_l_10:         
0549+  414C FE 0A                cp 10
0550+  414E 38 05                jr c,Str_i2a1
0551+  4150 D6 0A                sub 10
0552+  4152 04                   inc b
0553+  4153 18 F7                jr Str_i2a_l_10
0554+  4155             Str_i2a1:
0555+  4155 4F                   ld c,a
0556+  4156 3E 30                ld a,'0'
0557+  4158 80                   add a,b
0558+  4159 12                   ld (de),a
0559+  415A 13                   inc de
0560+  415B 3E 30       Str_i2q: ld a,'0'
0561+  415D 81                   add a,c
0562+  415E 12                   ld (de),a
0563+  415F 13                   inc de
0564+  4160 3E 00                ld a,0
0565+  4162 12                   ld (de),a
0566+  4163 18 18                jr Str_i2ex                  
0567+  4165             Str_i2a200:
0568+  4165 D6 C8                sub 200
0569+  4167 4F                   ld c,a                 
0570+  4168 3E 32                ld a,'2'
0571+  416A 12                   ld (de),a
0572+  416B 13                   inc de
0573+  416C 79                   ld a,c         
0574+  416D 18 DB                jr Str_i2a10
0575+  416F             Str_i2a100:
0576+  416F D6 64                sub 100
0577+  4171 4F                   ld c,a         
0578+  4172 3E 31                ld a,'1'
0579+  4174 12                   ld (de),a
0580+  4175 13                   inc de
0581+  4176 79                   ld a,c
0582+  4177 18 D1                jr Str_i2a10
0583+  4179             Str_i2_0:
0584+  4179 0E 00                ld c,0
0585+  417B 18 DE                jr Str_i2q        
0586+  417D             Str_i2ex:
0587+  417D D1                   pop de
0588+  417E C1                   pop bc
0589+  417F F1                   pop af
0590+  4180 C9                   ret
0591+  4181                      
0592+  4181             ;
0593+  4181             ; places integer value of DE string into reg-a
0594+  4181             ;
0595+  4181             Str_atoi:
0596+  4181 C5                   push bc
0597+  4182 D5                   push de
0598+  4183 E5                   push hl
0599+  4184                      
0600+  4184 EB                   ex de,hl ;hl=de
0601+  4185 11 00 00             ld de,0
0602+  4188 01 00 00             ld bc,0
0603+  418B             Str_a2iLoop:         
0604+  418B 7E                   ld a,(hl)
0605+  418C 23                   inc hl
0606+  418D FE 00                cp 0
0607+  418F 28 1A                jr z, Str_a2ex
0608+  4191 FE 30                cp '0'
0609+  4193 38 16                jr c, Str_a2ex
0610+  4195 FE 3A                cp '9'+1
0611+  4197 30 12                jr nc, Str_a2ex
0612+  4199 18 00                jr Str_a2digit
0613+  419B             Str_a2digit:
0614+  419B D6 30                sub '0'
0615+  419D 4F                   ld c,a
0616+  419E 78                   ld a,b
0617+  419F FE 00                cp 0
0618+  41A1 28 0D                jr z,Str_a2ph1
0619+  41A3 FE 01                cp 1
0620+  41A5 28 0E                jr z,Str_a2ph2
0621+  41A7 FE 02                cp 2
0622+  41A9 28 0A                jr z,Str_a2ph2   ; the same method  *10+a
0623+  41AB             Str_a2ex:               
0624+  41AB 7A                   ld a,d          ; store to A
0625+  41AC 18 17                jr Str_a2iEx         
0626+  41AE             Str_a2Lp:
0627+  41AE 18 DB                jr Str_a2iLoop
0628+  41B0                      
0629+  41B0             Str_a2ph1:
0630+  41B0 51                   ld d,c  ; ones, save
0631+  41B1 06 01                ld b,1
0632+  41B3 18 F9                jr Str_a2Lp
0633+  41B5             
0634+  41B5             Str_a2ph2:
0635+  41B5 7A                   ld a,d           ;d*10 = (d*8)+(d*2)
0636+  41B6 CB 27                sla a   ; *2
0637+  41B8                         
0638+  41B8 CB 22                sla d
0639+  41BA CB 22                sla d
0640+  41BC CB 22                sla d   ;*8
0641+  41BE 82                   add a,d  ;+ = become tens
0642+  41BF 81                   add a,c  ; +ones
0643+  41C0 57                   ld d,a   ;save
0644+  41C1 06 02                ld b,2         
0645+  41C3 18 E9                jr Str_a2Lp
0646+  41C5                      
0647+  41C5             Str_a2iEx:
0648+  41C5 E1                   pop hl         
0649+  41C6 D1                   pop de
0650+  41C7 C1                   pop bc
0651+  41C8 C9                   ret
0652+  41C9             
0653+  41C9             ; finds tags in string IX and copies substring between them to DE address
0654+  41C9             ; tags are strings addressed by hl (as left tag) and iy (as right tag)
0655+  41C9             ; for example: <div>substring between</div>
0656+  41C9             ; Separators should be at least 1char.
0657+  41C9             ; If can't find left tag till 254th position then returns empty string.
0658+  41C9             ; If can't find right tag then truncates substring at 255th position anyway. 
0659+  41C9             ;
0660+  41C9             Str_TagSubstr:
0661+  41C9 F5                   push af
0662+  41CA C5                   push bc
0663+  41CB D5                   push de
0664+  41CC E5                   push hl
0665+  41CD DD E5                push ix
0666+  41CF                      
0667+  41CF D5                   push de
0668+  41D0 EB                   ex de,hl   ; de=hl (left tag)
0669+  41D1 0E 00                ld c,0
0670+  41D3             Str_TagScn:
0671+  41D3 0C                   inc c
0672+  41D4 3E FF                ld a,$ff
0673+  41D6 B9                   cp c              ; if 255th reached
0674+  41D7 28 15                jr z,Str_LTagNotFound
0675+  41D9 CD 19 3E             call Str_Compare
0676+  41DC DD 23                inc ix
0677+  41DE FE 02                cp 2
0678+  41E0 28 F1                jr z,Str_TagScn
0679+  41E2 CD F0 3D             call Str_Len ;calculates length of left tag
0680+  41E5             Str_TagSkp1:
0681+  41E5 FE 01                cp 1
0682+  41E7 28 08                jr z,Str_TagBr1
0683+  41E9 DD 23                inc ix
0684+  41EB 3D                   dec a
0685+  41EC 18 F7                jr Str_TagSkp1
0686+  41EE                      
0687+  41EE             Str_LTagNotFound:
0688+  41EE E1                   pop hl   ; hl = de where to store substring 
0689+  41EF 18 1A                jr Str_TagBr2
0690+  41F1                      
0691+  41F1             Str_TagBr1:                  
0692+  41F1                      
0693+  41F1 FD E5                push iy
0694+  41F3 D1                   pop de   ; de now = iy (right tag)
0695+  41F4 E1                   pop hl   ; hl = de where to store substring
0696+  41F5                      
0697+  41F5 0E 00                ld c,0
0698+  41F7             Str_TagSc2:
0699+  41F7 CD 19 3E             call Str_Compare
0700+  41FA FE 02                cp 2
0701+  41FC 20 0D                jr nz,Str_TagBr2
0702+  41FE                       
0703+  41FE DD 7E 00             ld a,(ix)
0704+  4201 77                   ld (hl),a
0705+  4202 23                   inc hl
0706+  4203 DD 23                inc ix
0707+  4205 0C                   inc c
0708+  4206 3E FF                ld a,$ff
0709+  4208 B9                   cp c              ; if 255th reached
0710+  4209 20 EC                jr nz,Str_TagSc2
0711+  420B             Str_TagBr2:
0712+  420B 3E 00                ld a,0
0713+  420D 77                   ld (hl),a   ; end of new string
0714+  420E DD E1                pop ix
0715+  4210 E1                   pop hl
0716+  4211 D1                   pop de
0717+  4212 C1                   pop bc
0718+  4213 F1                   pop af         
0719+  4214 C9                   ret
0720+  4215                                 
0721+  4215             
0722+  4215             ;
0723+  4215             ; Faster copy from IX to DE length of A
0724+  4215             ;  (ignores 0)
0725+  4215             ;
0726+  4215             
0727+  4215             Block_Copy_:
0728+  4215 FE 00                cp 0
0729+  4217 28 10                jr z,Block_CpyExit
0730+  4219 F5                   push af
0731+  421A C5                   push bc
0732+  421B D5                   push de
0733+  421C E5                   push hl       
0734+  421D             
0735+  421D DD E5                push ix
0736+  421F E1                   pop hl
0737+  4220                      
0738+  4220 4F                   ld c,a
0739+  4221 06 00                ld b,0
0740+  4223 ED B0                ldir        ; copy bc bytes from HL to DE addrs.
0741+  4225                      
0742+  4225 E1                   pop hl
0743+  4226 D1                   pop de
0744+  4227 C1                   pop bc
0745+  4228 F1                   pop af
0746+  4229             Block_CpyExit:         
0747+  4229 C9                   ret
0748+  422A                      
0749+  422A             ; sets to 0 block in DE length of A
0750+  422A             Block_Clear_:
0751+  422A FE 00                cp 0
0752+  422C 28 15                jr z,Block_ClrExit
0753+  422E F5                   push af
0754+  422F C5                   push bc
0755+  4230 D5                   push de
0756+  4231 E5                   push hl       
0757+  4232             
0758+  4232 4F                   ld c,a
0759+  4233 0D                   dec c
0760+  4234                      
0761+  4234 D5                   push de
0762+  4235 E1                   pop hl
0763+  4236                      
0764+  4236 3A 44 42             ld a,(Block_ch0)
0765+  4239 77                   ld (hl),a
0766+  423A 13                   inc de
0767+  423B                      
0768+  423B 06 00                ld b,0
0769+  423D ED B0                ldir        ; copy repeating 0 from HL to DE addrs.
0770+  423F                              
0771+  423F E1                   pop hl
0772+  4240 D1                   pop de
0773+  4241 C1                   pop bc
0774+  4242 F1                   pop af
0775+  4243             Block_ClrExit:         
0776+  4243 C9                   ret
0777+  4244             
0778+  4244 00          Block_ch0: .byte 0   ;uses this byte to set 0
0779+  4245                                  ; (can set spaces or other)
0780+  4245             
3692   4245             
3693   4245             JMP_0000: .equ $F3EF         ;good exit to DOS prompt for sure 
3694   4245                                 
3695   4245             ; Exporting addresses to include them in other modules 
3696   4245             ;      (recognises as labels)
3697   4245                       
3698   4245                      .export startFEN
3699   4245                      .export MOVE_str
3700   4245                      .export BOARD
3701   4245                      .export SIDE
3702   4245                      .export CASTLES
3703   4245                      .export ENPSQ
3704   4245                      .export WKSQ
3705   4245                      .export BKSQ
3706   4245                      .export NEXT_MVSTR
3707   4245                      .export NEXT_MVCNT
3708   4245                      .export NEXT_MOVES
3709   4245                      .export MOVE_CNT
3710   4245                      .export MOVE_HIST
3711   4245                      .export GenMovesAndString
3712   4245                      .export MOVE_byString
3713   4245                      .export MbyStrMove
3714   4245                      .export UndoAllMoves
3715   4245                      .export SQi
3716   4245                      .export SQt
3717   4245                      .export GenMoves
3718   4245                      .export IsEmpty      
3719   4245                      .export IsOccupied
3720   4245                      .export IsWhite
3721   4245                      .export IsBlack
3722   4245                      .export CaptPiece
3723   4245                      .export PromoPcId
3724   4245                      .export CastlMove
3725   4245                      .export MovesToStr
3726   4245                      .export MovesOut
3727   4245                      .export SetFEN
3728   4245                      .export GetFEN
3729   4245                      .export BoardOut
3730   4245                      .export printBOARD        
3731   4245                      .export ScanSqC
3732   4245                      .export SetSqScan
3733   4245                      .export ScanSqNxt
3734   4245                      .export IsCheck  
3735   4245                      .export MakeMove
3736   4245                      .export Swap_Sides
3737   4245                      .export UnMakeMove
3738   4245                      .export DEBUGs
3739   4245                      .export LD_Ix
3740   4245                      .export DEC_I
3741   4245                      
3742   4245             endProgram:
3743   4245             .end
3744   4245             
3745   4245             
tasm: Number of errors = 0
