0001   0000             .title ChessY2K
0002   0000             
0003   0000             ;
0004   0000             ; Chess assembler ASM code for MSX
0005   0000             ;
0006   0000             ;  MSDOS:
0007   0000             ;     TASM -80 -b ChessY2K.ASM ChessY2K.com
0008   0000             ;     TASM -80 -b ChessPG.ASM ChessPG.co2
0009   0000             ;     TASM -80 -b ChessPI.ASM ChessPI.co2
0010   0000             ;  Then run ChessY2K.com on MSX-DOS1
0011   0000             ;
0012   0000             ; Date: sep.,oct. 2012
0013   0000             ;
0014   0000             ;Performance testing: 256 movement generations per minute on MSX machine -
0015   0000             ;                        not enaugh for chess but ok for pgn-viewer project.
0016   0000             
0017   0000             ;
0018   0000             ; Define PGN_COMPILE to compile separate module for pgn viewer replays
0019   0000             ; It can not be done in one .COM unfortunately - causes too much memory usage.
0020   0000             ; ChessPZ.COM is a compilation with no PGN version.
0021   0000             ; 
0022   0000             #define   PGN_COMPILE 1
0023   0000             
0024   0100                      .org $100      
0025   0100                                   
0026   0100             startProgram:
0027   0100 CD 19 28             call ChessMN     ; process menu
0028   0103                                       ; chess logic is in this file
0029   0103                     
0030   0103 C3 EF F3             jp  JMP_0000     ; return to DOS
0031   0106 C9                   ret
0032   0107                             
0033   0107             startFEN:       
0034   0107 72 6E 62 71         .byte "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",0                       
0034   010B 6B 62 6E 72 
0034   010F 2F 70 70 70 
0034   0113 70 70 70 70 
0034   0117 70 2F 38 2F 
0034   011B 38 2F 38 2F 
0034   011F 38 2F 50 50 
0034   0123 50 50 50 50 
0034   0127 50 50 2F 52 
0034   012B 4E 42 51 4B 
0034   012F 42 4E 52 20 
0034   0133 77 20 4B 51 
0034   0137 6B 71 20 2D 
0034   013B 20 30 20 31 
0034   013F 00 
0035   0140             
0036   0140             
0037   0140             ; STATUSES OF CURRENT CHESS GAME 
0038   0140             
0039   0140             ; Current chess position
0040   0140             
0041   0140 61 31 20 20 BOARD:  .byte "a1    h1"        ;64 bytes of board
0041   0144 20 20 68 31 
0042   0148 61 32 20 20         .byte "a2    h2"
0042   014C 20 20 68 32 
0043   0150 20 20 20 20         .byte "        "
0043   0154 20 20 20 20 
0044   0158 20 20 20 20         .byte "        "
0044   015C 20 20 20 20 
0045   0160 20 20 20 20         .byte "        "
0045   0164 20 20 20 20 
0046   0168 20 20 20 20         .byte "        "
0046   016C 20 20 20 20 
0047   0170 20 20 20 20         .byte "        "
0047   0174 20 20 20 20 
0048   0178 61 38 20 20         .byte "a8    h8"
0048   017C 20 20 68 38 
0049   0180 00                  .byte 0
0050   0181                     
0051   0181 00          SIDE:     .byte 0       ; side to move 0-white, 1-black   
0052   0182 00          CASTLES:  .byte 0       ; castling allowance flags
0053   0183                                     ; if bits are set: 0 wK, 1 wQ, 2 bK, 3 bQ sides
0054   0183 FF          ENPSQ:    .byte $ff     ; en-passant square none
0055   0184 00          WKSQ:     .byte 0       ; square of white king
0056   0185 00          BKSQ:     .byte 0       ; square of black king
0057   0186             
0058   0186             ;
0059   0186             ; variables and arrays for next movement generation
0060   0186             ; (for printing and displaying)          
0061   0186 20 20 20 20 NEXT_MVSTR: .byte "                                                    "
0061   018A 20 20 20 20 
0061   018E 20 20 20 20 
0061   0192 20 20 20 20 
0061   0196 20 20 20 20 
0061   019A 20 20 20 20 
0061   019E 20 20 20 20 
0061   01A2 20 20 20 20 
0061   01A6 20 20 20 20 
0061   01AA 20 20 20 20 
0061   01AE 20 20 20 20 
0061   01B2 20 20 20 20 
0061   01B6 20 20 20 20 
0062   01BA 20 20 20 20             .byte "                                                    "
0062   01BE 20 20 20 20 
0062   01C2 20 20 20 20 
0062   01C6 20 20 20 20 
0062   01CA 20 20 20 20 
0062   01CE 20 20 20 20 
0062   01D2 20 20 20 20 
0062   01D6 20 20 20 20 
0062   01DA 20 20 20 20 
0062   01DE 20 20 20 20 
0062   01E2 20 20 20 20 
0062   01E6 20 20 20 20 
0062   01EA 20 20 20 20 
0063   01EE 20 20 20 20             .byte "                                                    "
0063   01F2 20 20 20 20 
0063   01F6 20 20 20 20 
0063   01FA 20 20 20 20 
0063   01FE 20 20 20 20 
0063   0202 20 20 20 20 
0063   0206 20 20 20 20 
0063   020A 20 20 20 20 
0063   020E 20 20 20 20 
0063   0212 20 20 20 20 
0063   0216 20 20 20 20 
0063   021A 20 20 20 20 
0063   021E 20 20 20 20 
0064   0222 20 20 20 20             .byte "                                                    "
0064   0226 20 20 20 20 
0064   022A 20 20 20 20 
0064   022E 20 20 20 20 
0064   0232 20 20 20 20 
0064   0236 20 20 20 20 
0064   023A 20 20 20 20 
0064   023E 20 20 20 20 
0064   0242 20 20 20 20 
0064   0246 20 20 20 20 
0064   024A 20 20 20 20 
0064   024E 20 20 20 20 
0064   0252 20 20 20 20 
0065   0256 20 20 20 20             .byte "                                                    "                      
0065   025A 20 20 20 20 
0065   025E 20 20 20 20 
0065   0262 20 20 20 20 
0065   0266 20 20 20 20 
0065   026A 20 20 20 20 
0065   026E 20 20 20 20 
0065   0272 20 20 20 20 
0065   0276 20 20 20 20 
0065   027A 20 20 20 20 
0065   027E 20 20 20 20 
0065   0282 20 20 20 20 
0065   0286 20 20 20 20 
0066   028A 20 20 20 20             .byte "                                                    "
0066   028E 20 20 20 20 
0066   0292 20 20 20 20 
0066   0296 20 20 20 20 
0066   029A 20 20 20 20 
0066   029E 20 20 20 20 
0066   02A2 20 20 20 20 
0066   02A6 20 20 20 20 
0066   02AA 20 20 20 20 
0066   02AE 20 20 20 20 
0066   02B2 20 20 20 20 
0066   02B6 20 20 20 20 
0066   02BA 20 20 20 20 
0067   02BE 20 20 20 20             .byte "                                                    "
0067   02C2 20 20 20 20 
0067   02C6 20 20 20 20 
0067   02CA 20 20 20 20 
0067   02CE 20 20 20 20 
0067   02D2 20 20 20 20 
0067   02D6 20 20 20 20 
0067   02DA 20 20 20 20 
0067   02DE 20 20 20 20 
0067   02E2 20 20 20 20 
0067   02E6 20 20 20 20 
0067   02EA 20 20 20 20 
0067   02EE 20 20 20 20 
0068   02F2             
0069   02F2 00          NEXT_MVCNT: .byte 0      ;count, values, and string to output          
0070   02F3 00 00 00 00 NEXT_MOVES: .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0070   02F7 00 00 00 00 
0070   02FB 00 00 00 00 
0070   02FF 00 00 00 00 
0070   0303 00 00 00 00 
0070   0307 00 00 00 00 
0070   030B 00 00 00 00 
0070   030F 00 00 00 00 
0070   0313 00 00 00 00 
0070   0317 00 00 00 00 
0071   031B 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0071   031F 00 00 00 00 
0071   0323 00 00 00 00 
0071   0327 00 00 00 00 
0071   032B 00 00 00 00 
0071   032F 00 00 00 00 
0071   0333 00 00 00 00 
0071   0337 00 00 00 00 
0071   033B 00 00 00 00 
0071   033F 00 00 00 00 
0072   0343 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0072   0347 00 00 00 00 
0072   034B 00 00 00 00 
0072   034F 00 00 00 00 
0072   0353 00 00 00 00 
0072   0357 00 00 00 00 
0072   035B 00 00 00 00 
0072   035F 00 00 00 00 
0072   0363 00 00 00 00 
0072   0367 00 00 00 00 
0073   036B 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0073   036F 00 00 00 00 
0073   0373 00 00 00 00 
0073   0377 00 00 00 00 
0073   037B 00 00 00 00 
0073   037F 00 00 00 00 
0073   0383 00 00 00 00 
0073   0387 00 00 00 00 
0073   038B 00 00 00 00 
0073   038F 00 00 00 00 
0074   0393 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0074   0397 00 00 00 00 
0074   039B 00 00 00 00 
0074   039F 00 00 00 00 
0074   03A3 00 00 00 00 
0074   03A7 00 00 00 00 
0074   03AB 00 00 00 00 
0074   03AF 00 00 00 00 
0074   03B3 00 00 00 00 
0074   03B7 00 00 00 00 
0075   03BB 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0075   03BF 00 00 00 00 
0075   03C3 00 00 00 00 
0075   03C7 00 00 00 00 
0075   03CB 00 00 00 00 
0075   03CF 00 00 00 00 
0075   03D3 00 00 00 00 
0075   03D7 00 00 00 00 
0075   03DB 00 00 00 00 
0075   03DF 00 00 00 00 
0076   03E3 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0076   03E7 00 00 00 00 
0076   03EB 00 00 00 00 
0076   03EF 00 00 00 00 
0076   03F3 00 00 00 00 
0076   03F7 00 00 00 00 
0076   03FB 00 00 00 00 
0076   03FF 00 00 00 00 
0076   0403 00 00 00 00 
0076   0407 00 00 00 00 
0077   040B             
0078   040B             ; list of moves from the root
0079   040B             ; bytes:
0080   040B             ;  square from,
0081   040B             ;  square to,
0082   040B             ;  promoted piece with flags
0083   040B             ;  en-passant square move before
0084   040B             
0085   040B 00          MOVE_CNT   .byte 0   ; count of moves (below 127 chess both-side-moves) 
0086   040C             
0087   040C             MOVE_HIST  .ds 4*2*128; 2Kb for history of chess moves 
0088   080C             
0089   080C             ; We use own memory of .COM file till now
0090   080C             ;  without damaging MSX resources with malloc-style
0091   080C             ;  
0092   080C             ;  So, we are able to generate next chess moves, detect check and checkmate in 1.
0093   080C             ;  And print it out. No reasonable chess evaluation searches possible here!
0094   080C             
0095   080C             GenMovesAndString:
0096   080C CD 90 08                call GenMoves            
0097   080F CD 3F 0F                call MovesToStr    ; to print after 
0098   0812 C9                      ret
0099   0813                                                 
0100   0813             ;BEGIN of ========== MAKE MOVES BY UCI-MOVE-STRING          
0101   0813             ; use UndoAllMoves before or setFEN
0102   0813             ;
0103   0813                                                     
0104   0813             MOVE_byString:
0105   0813 F5                  push af
0106   0814 C5                  push bc
0107   0815 D5                  push de
0108   0816             
0109   0816 11 EB 33            ld de, MOVE_str 
0110   0819                     
0111   0819             MbyStrLoop:
0112   0819 CD 90 08            call GenMoves 
0113   081C                                                  
0114   081C 1A                  ld a,(de)          ; find separator
0115   081D FE 20               cp ' '
0116   081F 28 0B               jr z,MbySover
0117   0821 FE 00               cp 0
0118   0823 28 07               jr z,MbySover
0119   0825                     
0120   0825 CD 30 08            call MbyStrMove    ; single move
0121   0828                     
0122   0828 13                  inc de
0123   0829 13                  inc de             ; skip promoted and blank too
0124   082A 18 ED               jr MbyStrLoop      ; and process next move   
0125   082C             MbySover:        
0126   082C D1                  pop de
0127   082D C1                  pop bc
0128   082E F1                  pop af
0129   082F C9                  ret
0130   0830             
0131   0830             ; "move by string" in DE register
0132   0830             ; restore registers after
0133   0830             MbyStrMove:
0134   0830 CD 6D 08            call MbySgetSQ
0135   0833 32 8D 08            ld (SQi),a
0136   0836 CD 6D 08            call MbySgetSQ
0137   0839 32 8E 08            ld (SQt),a
0138   083C 1A                  ld a,(de)
0139   083D FE 20               cp ' '
0140   083F 20 03               jr nz,MbyPromPiece
0141   0841 1B                  dec de
0142   0842 18 20               jr MbyNoN        
0143   0844             MbyPromPiece:
0144   0844 FE 71               cp 'q'
0145   0846 20 04               jr nz,MbyNoQ
0146   0848 3E 04               ld a,4
0147   084A 18 1A               jr MbyProm
0148   084C FE 72       MbyNoQ: cp 'r'       
0149   084E 20 04               jr nz,MbyNoR
0150   0850 3E 03               ld a,3
0151   0852 18 12               jr MbyProm
0152   0854 FE 62       MbyNoR: cp 'b'       
0153   0856 20 04               jr nz,MbyNoB
0154   0858 3E 02               ld a,2
0155   085A 18 0A               jr MbyProm
0156   085C FE 6E       MbyNoB: cp 'n'       
0157   085E 20 04               jr nz,MbyNoN
0158   0860 3E 01               ld a,1
0159   0862 18 02               jr MbyProm
0160   0864 3E 00       MbyNoN: ld a,0             ; not promoted       
0161   0866             MbyProm:
0162   0866 32 90 0E            ld (PromoPcId),a
0163   0869 CD 98 16            call MakeMove
0164   086C C9                  ret
0165   086D             
0166   086D             MbySgetSQ:
0167   086D 1A                  ld a,(de)
0168   086E 13                  inc de
0169   086F D6 61               sub 'a'
0170   0871 47                  ld b,a
0171   0872 1A                  ld a,(de)
0172   0873 13                  inc de
0173   0874 D6 31               sub '1'
0174   0876 CB 27               sla a
0175   0878 CB 27               sla a
0176   087A CB 27               sla a
0177   087C B0                  or b
0178   087D C9                  ret                ; a-reg contains square on return
0179   087E             
0180   087E             ;END
0181   087E             
0182   087E             
0183   087E             ;BEGIN of ========== SIMPLY UNDO ALL MOVES
0184   087E             
0185   087E             UndoAllMoves:
0186   087E F5                   push af
0187   087F             UndoAllLoop:
0188   087F 3A 0B 04             ld a,(MOVE_CNT)
0189   0882 FE 00                cp 0
0190   0884 28 05                jr z,UndoAllBrk
0191   0886 CD 8A 19             call UnMakeMove
0192   0889 18 F4                jr UndoAllLoop
0193   088B             UndoAllBrk:         
0194   088B F1                   pop af
0195   088C C9                   ret
0196   088D             ;END
0197   088D                   
0198   088D                                                               
0199   088D             ;BEGIN of ========== MOVE GEN - movement generation routine
0200   088D             ; Very proper - according to chess rules.
0201   088D             ; Scanning all board squares 0..63, trying to move pieces by type, then by directions.
0202   088D             ; If move seems good then adds to the list with verification on own king attacks after movement
0203   088D             ; to avoid illegal cases.
0204   088D             
0205   088D 00          SQi:         .byte 0    ;current square
0206   088E 00          SQt:         .byte 0    ;square to move to
0207   088F             
0208   088F 00          MateDetect:  .byte 0    ; if 1 then just find the first legal move and return
0209   0890             
0210   0890             GenMoves:
0211   0890 F5                   push af
0212   0891 C5                   push bc
0213   0892 D5                   push de
0214   0893 E5                   push hl
0215   0894 DD E5                push ix
0216   0896 FD E5                push iy
0217   0898                               
0218   0898 3E 00                ld a,0    
0219   089A 32 91 0E             ld (CastlMove),a
0220   089D 32 90 0E             ld (PromoPcId),a
0221   08A0 32 8F 0E             ld (CaptPiece),a 
0222   08A3                      
0223   08A3 3A 8F 08             ld a, (MateDetect)
0224   08A6 FE 01                cp 1
0225   08A8 28 08                jr z,GenMvNoClr    ; if we are not gona save
0226   08AA                               
0227   08AA DD 21 F2 02          ld ix, NEXT_MVCNT
0228   08AE DD 36 00 00          ld (ix), 0
0229   08B2                      
0230   08B2             GenMvNoClr:         
0231   08B2 3E 00                ld a, 0            ; square counter 0..63
0232   08B4 32 8D 08             ld (SQi), a
0233   08B7 21 40 01             ld hl, BOARD
0234   08BA             GenMvSqScan:
0235   08BA 7E                   ld a, (hl)          ; piece
0236   08BB                      
0237   08BB E5                   push hl
0238   08BC FD E1                pop iy    ; set to remember square-from
0239   08BE                      
0240   08BE 7E                   ld a, (hl)          ; get piece standing there
0241   08BF FE 00                cp 0
0242   08C1 28 5F                jr z, OverMGSq      ; empty square
0243   08C3                      
0244   08C3 FE 61                cp 'a'              ; pieces
0245   08C5 30 0A                jr nc, BlackPiece
0246   08C7             
0247   08C7             WhitePiece:                  ; A-Z                    
0248   08C7 3A 81 01             ld a,(SIDE)
0249   08CA FE 00                cp 0        
0250   08CC 20 54                jr nz, OverMGSq     ; not turn
0251   08CE 7E                   ld a, (hl)
0252   08CF 18 0A                jr WhichPiece        
0253   08D1             BlackPiece:       
0254   08D1 3A 81 01             ld a,(SIDE)
0255   08D4 FE 01                cp 1 
0256   08D6 20 4A                jr nz, OverMGSq     ; not turn
0257   08D8 7E                   ld a, (hl)
0258   08D9 D6 20                sub 32            ; to uppercase
0259   08DB             WhichPiece: 
0260   08DB FE 50                cp 'P'
0261   08DD 28 16                jr z, Pmoves
0262   08DF FE 4E                cp 'N'
0263   08E1 28 23                jr z, Knmoves       
0264   08E3 FE 42                cp 'B'
0265   08E5 28 24                jr z, Bsmoves
0266   08E7 FE 52                cp 'R'
0267   08E9 28 25                jr z, Rkmoves
0268   08EB FE 51                cp 'Q'
0269   08ED 28 26                jr z, Qnmoves
0270   08EF FE 4B                cp 'K'
0271   08F1 28 2A                jr z, Kgmoves                                          
0272   08F3 18 2D                jr OverMGSq                
0273   08F5             Pmoves:
0274   08F5 3A 81 01             ld a,(SIDE)
0275   08F8 FE 01                cp 1
0276   08FA 28 05                jr z, blackPmoves
0277   08FC CD 7D 09             call MoveGenWPawn
0278   08FF 18 21                jr OverMGSq
0279   0901             blackPmoves:
0280   0901 CD 1E 0A             call MoveGenBPawn
0281   0904 18 1C                jr OverMGSq
0282   0906             Knmoves:
0283   0906 CD 56 0C             call MoveGenKnight
0284   0909 18 17                jr OverMGSq
0285   090B             Bsmoves:
0286   090B CD 95 0B             call MoveGenBishop
0287   090E 18 12                jr OverMGSq
0288   0910             Rkmoves:
0289   0910 CD DC 0A             call MoveGenRook
0290   0913 18 0D                jr OverMGSq                                                           
0291   0915             Qnmoves:
0292   0915 CD 95 0B             call MoveGenBishop   ; simply
0293   0918 CD DC 0A             call MoveGenRook     ; the same
0294   091B 18 05                jr OverMGSq
0295   091D             Kgmoves:
0296   091D CD 19 0D             call MoveGenKing
0297   0920 18 00                jr OverMGSq
0298   0922                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
0299   0922             OverMGSq:
0300   0922 23                   inc hl
0301   0923                      
0302   0923 3A 8F 08             ld a, (MateDetect)
0303   0926 FE 02                cp 2
0304   0928 20 02                jr nz, GenMVscn
0305   092A 18 0B                jr GenMVexit
0306   092C             GenMVscn:         
0307   092C 3A 8D 08             ld a, (SQi)       
0308   092F 3C                   inc a
0309   0930 32 8D 08             ld (SQi),a
0310   0933 D6 40                sub 64   ; Loop 0-63
0311   0935 20 83                jr nz, GenMvSqScan
0312   0937             GenMVexit:
0313   0937             
0314   0937 CD E8 1A             call LookForCheckmates   ; verifies checkmates
0315   093A                                                  
0316   093A FD E1                pop iy
0317   093C DD E1                pop ix
0318   093E E1                   pop hl
0319   093F D1                   pop de
0320   0940 C1                   pop bc
0321   0941 F1                   pop af
0322   0942 C9                   ret
0323   0943             
0324   0943                               
0325   0943             ; helping procedure to obtain current X,Y on board and store to d,e regs.
0326   0943             StoreXYtoDE:
0327   0943 3A 8D 08             ld a, (SQi)
0328   0946 E6 07                and 7
0329   0948 57                   ld d,a      ; X- a..h
0330   0949 3A 8D 08             ld a, (SQi)
0331   094C CB 3F                srl a
0332   094E CB 3F                srl a
0333   0950 CB 3F                srl a
0334   0952 5F                   ld e,a      ; Y- 1..8
0335   0953 C9                   ret
0336   0954             
0337   0954             ; sets new SQt to move and calculates new hl position          
0338   0954             StoreSqToMove:                 
0339   0954 7B                   ld a,e
0340   0955 CB 27                sla a
0341   0957 CB 27                sla a
0342   0959 CB 27                sla a
0343   095B B2                   or d
0344   095C 32 8E 08             ld (SQt),a              ;a-reg. contains the new square to jump
0345   095F                      
0346   095F 06 00                ld b,0
0347   0961 3A 8D 08             ld a,(SQi)
0348   0964 4F                   ld c,a
0349   0965 3A 8E 08             ld a,(SQt)
0350   0968 91                   sub c
0351   0969 38 04                jr c, StDistNeg
0352   096B 4F                   ld c,a
0353   096C 09                   add hl,bc              ;new hl position sq-forward
0354   096D 18 0D                jr StNSqOver
0355   096F             StDistNeg:
0356   096F 3A 8E 08             ld a,(SQt)
0357   0972 4F                   ld c,a
0358   0973 3A 8D 08             ld a,(SQi)         
0359   0976 91                   sub c
0360   0977 4F                   ld c,a                         
0361   0978 37                   scf
0362   0979 3F                   ccf
0363   097A ED 42                sbc hl,bc              ;new hl position sq-backward
0364   097C             StNSqOver:         
0365   097C C9                   ret
0366   097D             ;END
0367   097D             
0368   097D             
0369   097D             ;BEGIN of ========== MOVE GEN for WHITE PAWN goes up
0370   097D             
0371   097D             MoveGenWPawn:
0372   097D             
0373   097D F5                   push af
0374   097E D5                   push de
0375   097F                      
0376   097F 3E 00                ld a,0
0377   0981 32 8F 0E             ld (CaptPiece),a
0378   0984             
0379   0984 3A 83 01             ld a, (ENPSQ)
0380   0987 57                   ld d,a         
0381   0988                               
0382   0988 3A 8D 08             ld a,(SQi)                  
0383   098B C6 08                add a, 8
0384   098D 32 8E 08             ld (SQt),a
0385   0990 01 08 00             ld bc,8         ;1-7 vert. try next sq forward        
0386   0993 09                   add hl, bc      ;new square-to
0387   0994                      
0388   0994 CD 3B 0E             call IsEmpty
0389   0997 30 1B                jr nc, wpNoFWmoves
0390   0999 CD 92 0E             call AddMovPromo
0391   099C                      
0392   099C 3A 8D 08             ld a, (SQi)
0393   099F FE 10                cp 16          ;below row 3
0394   09A1 30 11                jr nc, wpNoFWmoves
0395   09A3 C6 10                add a, 8+8
0396   09A5 32 8E 08             ld (SQt),a 
0397   09A8 01 08 00             ld bc, 8        ;another (double) move
0398   09AB 09                   add hl, bc      ;new square-to
0399   09AC                      
0400   09AC CD 3B 0E             call IsEmpty
0401   09AF 30 03                jr nc, wpNoFWmoves
0402   09B1 CD 97 0E             call AddMove
0403   09B4             
0404   09B4             wpNoFWmoves:         
0405   09B4 FD E5                push iy
0406   09B6 E1                   pop hl    ; restore 
0407   09B7                      
0408   09B7 3E 01                ld a,1
0409   09B9 32 8F 0E             ld (CaptPiece),a
0410   09BC                      
0411   09BC 3A 8D 08             ld a, (SQi)
0412   09BF E6 07                and 7
0413   09C1 FE 00                cp 0
0414   09C3 28 21                jr z, wpTryCaptRight
0415   09C5             
0416   09C5 3A 8D 08             ld a, (SQi)                  
0417   09C8 C6 07                add a, 8-1 ; try capture left
0418   09CA 32 8E 08             ld (SQt),a
0419   09CD 01 07 00             ld bc, 8-1
0420   09D0 09                   add hl, bc
0421   09D1             
0422   09D1 CD 70 0E             call IsBlack
0423   09D4 30 05                jr nc, wpTryLeftEnPs
0424   09D6                      
0425   09D6 CD 92 0E             call AddMovPromo
0426   09D9 18 0B                jr wpTryCaptRight
0427   09DB                      
0428   09DB             wpTryLeftEnPs:              
0429   09DB 3A 8E 08             ld a,(SQt)
0430   09DE BA                   cp d
0431   09DF 20 05                jr nz, wpTryCaptRight
0432   09E1                                             
0433   09E1 CD 92 0E             call AddMovPromo
0434   09E4 18 00                jr wpTryCaptRight
0435   09E6                                                                                            
0436   09E6             wpTryCaptRight:
0437   09E6 FD E5                push iy
0438   09E8 E1                   pop hl    ; restore 
0439   09E9                      
0440   09E9 3A 8D 08             ld a, (SQi)
0441   09EC E6 07                and 7
0442   09EE FE 07                cp 7
0443   09F0 28 21                jr z, wpMGend
0444   09F2                               
0445   09F2 3A 8D 08             ld a, (SQi)
0446   09F5 C6 09                add a, 8+1 ; try capture right
0447   09F7 32 8E 08             ld (SQt),a
0448   09FA 01 09 00             ld bc, 8+1
0449   09FD 09                   add hl, bc
0450   09FE             
0451   09FE CD 70 0E             call IsBlack
0452   0A01 30 05                jr nc, wpTryRightEnPs
0453   0A03                      
0454   0A03 CD 92 0E             call AddMovPromo
0455   0A06 18 0B                jr wpMGend
0456   0A08                      
0457   0A08             wpTryRightEnPs:              
0458   0A08 3A 8E 08             ld a,(SQt)
0459   0A0B BA                   cp d
0460   0A0C 20 05                jr nz, wpMGend
0461   0A0E                                  
0462   0A0E CD 92 0E             call AddMovPromo
0463   0A11 18 00                jr wpMGend
0464   0A13                                                                                                                                                            
0465   0A13             wpMGend:
0466   0A13 FD E5                push iy
0467   0A15 E1                   pop hl    ; restore 
0468   0A16             
0469   0A16 3E 00                ld a,0
0470   0A18 32 90 0E             ld (PromoPcId),a
0471   0A1B                      
0472   0A1B D1                   pop de
0473   0A1C F1                   pop af
0474   0A1D C9                   ret
0475   0A1E                  
0476   0A1E             ;END
0477   0A1E             
0478   0A1E             ;BEGIN of ========== MOVE GEN for BLACK PAWN goes down
0479   0A1E             
0480   0A1E             MoveGenBPawn:
0481   0A1E             
0482   0A1E F5                   push af
0483   0A1F D5                   push de
0484   0A20                      
0485   0A20 3E 00                ld a,0
0486   0A22 32 8F 0E             ld (CaptPiece),a
0487   0A25             
0488   0A25 3A 83 01             ld a, (ENPSQ)
0489   0A28 57                   ld d,a         
0490   0A29                               
0491   0A29 3A 8D 08             ld a,(SQi)                  
0492   0A2C D6 08                sub 8
0493   0A2E 32 8E 08             ld (SQt),a
0494   0A31 37                   scf
0495   0A32 3F                   ccf
0496   0A33 01 08 00             ld bc,8         ;1-7 vert. try next sq forward        
0497   0A36 ED 42                sbc hl, bc      ;new square-to
0498   0A38                      
0499   0A38 CD 3B 0E             call IsEmpty
0500   0A3B 30 1E                jr nc, bpNoFWmoves
0501   0A3D CD 92 0E             call AddMovPromo
0502   0A40                      
0503   0A40 3A 8D 08             ld a, (SQi)
0504   0A43 FE 30                cp 48           ;above row 6
0505   0A45 38 14                jr c, bpNoFWmoves
0506   0A47 D6 10                sub 8+8
0507   0A49 32 8E 08             ld (SQt),a
0508   0A4C 37                   scf
0509   0A4D 3F                   ccf 
0510   0A4E 01 08 00             ld bc, 8        ;another (double) move
0511   0A51 ED 42                sbc hl, bc      ;new square-to
0512   0A53                      
0513   0A53 CD 3B 0E             call IsEmpty
0514   0A56 30 03                jr nc, bpNoFWmoves
0515   0A58 CD 97 0E             call AddMove
0516   0A5B             
0517   0A5B             bpNoFWmoves:         
0518   0A5B FD E5                push iy
0519   0A5D E1                   pop hl    ; restore 
0520   0A5E                      
0521   0A5E 3E 01                ld a,1
0522   0A60 32 8F 0E             ld (CaptPiece),a
0523   0A63                      
0524   0A63 3A 8D 08             ld a, (SQi)
0525   0A66 E6 07                and 7
0526   0A68 FE 07                cp 7
0527   0A6A 28 24                jr z, bpTryCaptRight
0528   0A6C             
0529   0A6C 3A 8D 08             ld a, (SQi)                  
0530   0A6F D6 07                sub 8-1 ; try capture left
0531   0A71 32 8E 08             ld (SQt),a
0532   0A74 37                   scf
0533   0A75 3F                   ccf
0534   0A76 01 07 00             ld bc, 8-1
0535   0A79 ED 42                sbc hl, bc
0536   0A7B             
0537   0A7B CD 51 0E             call IsWhite
0538   0A7E 30 05                jr nc, bpTryLeftEnPs
0539   0A80                      
0540   0A80 CD 92 0E             call AddMovPromo
0541   0A83 18 0B                jr bpTryCaptRight
0542   0A85                      
0543   0A85             bpTryLeftEnPs:              
0544   0A85 3A 8E 08             ld a,(SQt)
0545   0A88 BA                   cp d
0546   0A89 20 05                jr nz, bpTryCaptRight
0547   0A8B                                             
0548   0A8B CD 92 0E             call AddMovPromo
0549   0A8E 18 00                jr bpTryCaptRight
0550   0A90                                                                                            
0551   0A90             bpTryCaptRight:
0552   0A90 FD E5                push iy
0553   0A92 E1                   pop hl    ; restore 
0554   0A93                      
0555   0A93 3A 8D 08             ld a, (SQi)
0556   0A96 E6 07                and 7
0557   0A98 FE 00                cp 0
0558   0A9A 28 24                jr z, bpMGend
0559   0A9C                               
0560   0A9C 3A 8D 08             ld a, (SQi)
0561   0A9F D6 09                sub 8+1 ; try capture right
0562   0AA1 32 8E 08             ld (SQt),a
0563   0AA4 37                   scf
0564   0AA5 3F                   ccf
0565   0AA6 01 09 00             ld bc, 8+1
0566   0AA9 ED 42                sbc hl, bc
0567   0AAB             
0568   0AAB CD 51 0E             call IsWhite
0569   0AAE 30 05                jr nc, bpTryRightEnPs
0570   0AB0                      
0571   0AB0 CD 92 0E             call AddMovPromo      
0572   0AB3 18 0B                jr bpMGend
0573   0AB5                      
0574   0AB5             bpTryRightEnPs:              
0575   0AB5 3A 8E 08             ld a,(SQt)
0576   0AB8 BA                   cp d
0577   0AB9 20 05                jr nz, bpMGend
0578   0ABB                                             
0579   0ABB CD 92 0E             call AddMovPromo
0580   0ABE 18 00                jr bpMGend
0581   0AC0                                                                                                                                                            
0582   0AC0             bpMGend:
0583   0AC0 FD E5                push iy
0584   0AC2 E1                   pop hl    ; restore 
0585   0AC3             
0586   0AC3 3E 00                ld a,0
0587   0AC5 32 90 0E             ld (PromoPcId),a
0588   0AC8                      
0589   0AC8 D1                   pop de
0590   0AC9 F1                   pop af
0591   0ACA C9                   ret
0592   0ACB                  
0593   0ACB             ;END
0594   0ACB             
0595   0ACB             
0596   0ACB             ;BEGIN of ========== MOVE GEN for ROOKS
0597   0ACB             
0598   0ACB 2B 01 3D 00 rookMoves: .byte '+',1,'=',0 ,'-',1,'=',0 ,'=',0,'+',1 ,'=',0,'-',1 ,
0598   0ACF 2D 01 3D 00 
0598   0AD3 3D 00 2B 01 
0598   0AD7 3D 00 2D 01 
0599   0ADB 00                     .byte 0
0600   0ADC                                       
0601   0ADC             MoveGenRook:
0602   0ADC             
0603   0ADC F5                   push af
0604   0ADD C5                   push bc
0605   0ADE DD E5                push ix
0606   0AE0                      
0607   0AE0 CD 43 09             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
0608   0AE3                      
0609   0AE3 DD 21 CB 0A          ld ix,rookMoves
0610   0AE7 06 04                ld b, 4
0611   0AE9                      
0612   0AE9             RookScan4directions:
0613   0AE9             
0614   0AE9 D5                   push de
0615   0AEA             RookLoop:
0616   0AEA CD 01 0B             call RookTryMove
0617   0AED FE 00                cp 0
0618   0AEF 28 F9                jr z,RookLoop
0619   0AF1 D1                   pop de
0620   0AF2                              
0621   0AF2 DD 23                inc ix
0622   0AF4 DD 23                inc ix
0623   0AF6 DD 23                inc ix
0624   0AF8 DD 23                inc ix
0625   0AFA                      
0626   0AFA 10 ED                djnz RookScan4directions
0627   0AFC                    
0628   0AFC DD E1                pop ix
0629   0AFE C1                   pop bc
0630   0AFF F1                   pop af
0631   0B00 C9                   ret
0632   0B01                      
0633   0B01             ; try move to that direction
0634   0B01             RookTryMove:
0635   0B01             
0636   0B01 C5                   push bc
0637   0B02 DD E5                push ix
0638   0B04                      
0639   0B04 3E 00                ld a,0
0640   0B06 32 8F 0E             ld (CaptPiece),a
0641   0B09                               
0642   0B09 DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,=0
0643   0B0C DD 23                inc ix
0644   0B0E FE 3D                cp '='
0645   0B10 28 16                jr z, RkZero1
0646   0B12 FE 2D                cp '-'
0647   0B14 28 08                jr z, RkNegX      
0648   0B16 7A                   ld a,d
0649   0B17 3C                   inc a           ;a=direction +1 of X 
0650   0B18 FE 08                cp 8
0651   0B1A 30 5F                jr nc, RkNo
0652   0B1C 18 09                jr RkCanOk1  
0653   0B1E             RkNegX:
0654   0B1E 3E 00                ld a,0          ;a=direction -1 of X
0655   0B20 BA                   cp d
0656   0B21 38 02                jr c, RkCanSubtrX
0657   0B23 18 56                jr RkNo
0658   0B25             RkCanSubtrX:         
0659   0B25 7A                   ld a,d
0660   0B26 3D                   dec a 
0661   0B27             RkCanOk1:
0662   0B27 57                   ld d,a         
0663   0B28 DD 23       RkZero1: inc ix
0664   0B2A                      
0665   0B2A DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,=0
0666   0B2D DD 23                inc ix
0667   0B2F FE 3D                cp '='
0668   0B31 28 16                jr z, RkZero2        
0669   0B33 FE 2D                cp '-'
0670   0B35 28 08                jr z, RkNegY
0671   0B37 7B                   ld a,e
0672   0B38 3C                   inc a          ;a=direction +1 of Y  
0673   0B39 FE 08                cp 8
0674   0B3B 30 3E                jr nc, RkNo
0675   0B3D 18 09                jr RkCanOk2   
0676   0B3F             RkNegY:
0677   0B3F 3E 00                ld a,0         ;a=direction -1 of Y
0678   0B41 BB                   cp e
0679   0B42 38 02                jr c, RkCanSubtrY
0680   0B44 18 35                jr RkNo
0681   0B46             RkCanSubtrY:         
0682   0B46 7B                   ld a, e
0683   0B47 3D                   dec a
0684   0B48             RkCanOk2:
0685   0B48 5F                   ld e,a
0686   0B49 DD 23       RkZero2: inc ix         
0687   0B4B                      
0688   0B4B CD 54 09             call StoreSqToMove    ;new SQt,hl        
0689   0B4E             
0690   0B4E 3A 81 01             ld a, (SIDE)
0691   0B51 FE 01                cp 1
0692   0B53 28 0E                jr z,RkThisBlack
0693   0B55 CD 70 0E             call IsBlack           ; enemy?
0694   0B58 38 17                jr c,RkCaptMove
0695   0B5A CD 51 0E             call IsWhite           ; our?
0696   0B5D 38 1C                jr c,RkNo
0697   0B5F 3E 00                ld a,0                 ; continue after to this direction
0698   0B61 18 13                jr RkAdd        
0699   0B63             RkThisBlack:         
0700   0B63 CD 51 0E             call IsWhite           ; enemy?
0701   0B66 38 09                jr c,RkCaptMove
0702   0B68 CD 70 0E             call IsBlack           ; our?                        
0703   0B6B 38 0E                jr c,RkNo
0704   0B6D 3E 00                ld a,0                 ; continue after to this direction
0705   0B6F 18 05                jr RkAdd
0706   0B71             RkCaptMove:
0707   0B71 3E 01                ld a,1
0708   0B73 32 8F 0E             ld (CaptPiece),a       ; and stop to this direction  
0709   0B76             RkAdd:
0710   0B76 CD 97 0E             call AddMove
0711   0B79 18 02                jr RkOver        
0712   0B7B             
0713   0B7B 3E 01       RkNo:    ld a,1                 ; stop to this direction
0714   0B7D             
0715   0B7D             RkOver:
0716   0B7D FD E5                push iy
0717   0B7F E1                   pop hl
0718   0B80                      
0719   0B80 DD E1                pop ix
0720   0B82 C1                   pop bc
0721   0B83 C9                   ret 
0722   0B84             
0723   0B84             ;END
0724   0B84             
0725   0B84             
0726   0B84             
0727   0B84             ;BEGIN of ========== MOVE GEN for BISHOPS
0728   0B84             
0729   0B84 2B 01 2B 01 bishopMoves: .byte '+',1,'+',1 ,'+',1,'-',1 ,'-',1,'+',1 ,'-',1,'-',1 ,
0729   0B88 2B 01 2D 01 
0729   0B8C 2D 01 2B 01 
0729   0B90 2D 01 2D 01 
0730   0B94 00                       .byte 0
0731   0B95                                       
0732   0B95             MoveGenBishop:
0733   0B95             
0734   0B95 F5                   push af
0735   0B96 C5                   push bc
0736   0B97 DD E5                push ix
0737   0B99                      
0738   0B99 CD 43 09             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
0739   0B9C                      
0740   0B9C DD 21 84 0B          ld ix,bishopMoves
0741   0BA0 06 04                ld b, 4
0742   0BA2                      
0743   0BA2             BishopScan4directions:
0744   0BA2             
0745   0BA2 D5                   push de
0746   0BA3             BishopLoop:
0747   0BA3 CD BA 0B             call BishopTryMove
0748   0BA6 FE 00                cp 0
0749   0BA8 28 F9                jr z,BishopLoop
0750   0BAA D1                   pop de
0751   0BAB                              
0752   0BAB DD 23                inc ix
0753   0BAD DD 23                inc ix
0754   0BAF DD 23                inc ix
0755   0BB1 DD 23                inc ix
0756   0BB3                      
0757   0BB3 10 ED                djnz BishopScan4directions
0758   0BB5                    
0759   0BB5 DD E1                pop ix
0760   0BB7 C1                   pop bc
0761   0BB8 F1                   pop af
0762   0BB9 C9                   ret
0763   0BBA                      
0764   0BBA             ; try move to that direction
0765   0BBA             BishopTryMove:
0766   0BBA             
0767   0BBA C5                   push bc
0768   0BBB DD E5                push ix
0769   0BBD                               
0770   0BBD 3E 00                ld a,0
0771   0BBF 32 8F 0E             ld (CaptPiece),a
0772   0BC2                      
0773   0BC2 DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1
0774   0BC5 DD 23                inc ix
0775   0BC7 FE 2D                cp '-'
0776   0BC9 28 08                jr z, BsNegX      
0777   0BCB 7A                   ld a,d
0778   0BCC 3C                   inc a           ;a=direction +1 of X 
0779   0BCD FE 08                cp 8
0780   0BCF 30 5B                jr nc, BsNo
0781   0BD1 18 09                jr BsCanOk1  
0782   0BD3             BsNegX:
0783   0BD3 3E 00                ld a,0          ;a=direction -1 of X
0784   0BD5 BA                   cp d
0785   0BD6 38 02                jr c, BsCanSubtrX
0786   0BD8 18 52                jr BsNo
0787   0BDA             BsCanSubtrX:         
0788   0BDA 7A                   ld a,d
0789   0BDB 3D                   dec a 
0790   0BDC             BsCanOk1:
0791   0BDC 57                   ld d,a         
0792   0BDD DD 23                inc ix
0793   0BDF                      
0794   0BDF DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1
0795   0BE2 DD 23                inc ix
0796   0BE4 FE 2D                cp '-'
0797   0BE6 28 08                jr z, BsNegY
0798   0BE8 7B                   ld a,e
0799   0BE9 3C                   inc a          ;a=direction +1 of Y  
0800   0BEA FE 08                cp 8
0801   0BEC 30 3E                jr nc, BsNo
0802   0BEE 18 09                jr BsCanOk2   
0803   0BF0             BsNegY:
0804   0BF0 3E 00                ld a,0         ;a=direction -1 of Y
0805   0BF2 BB                   cp e
0806   0BF3 38 02                jr c, BsCanSubtrY
0807   0BF5 18 35                jr BsNo
0808   0BF7             BsCanSubtrY:         
0809   0BF7 7B                   ld a, e
0810   0BF8 3D                   dec a
0811   0BF9             BsCanOk2:
0812   0BF9 5F                   ld e,a
0813   0BFA DD 23                inc ix         
0814   0BFC                      
0815   0BFC CD 54 09             call StoreSqToMove    ;new SQt,hl        
0816   0BFF             
0817   0BFF 3A 81 01             ld a, (SIDE)
0818   0C02 FE 01                cp 1
0819   0C04 28 0E                jr z,BsThisBlack
0820   0C06 CD 70 0E             call IsBlack           ; enemy?
0821   0C09 38 17                jr c,BsCaptMove
0822   0C0B CD 51 0E             call IsWhite           ; our?
0823   0C0E 38 1C                jr c,BsNo
0824   0C10 3E 00                ld a,0                 ; continue after to this direction
0825   0C12 18 13                jr BsAdd        
0826   0C14             BsThisBlack:         
0827   0C14 CD 51 0E             call IsWhite           ; enemy?
0828   0C17 38 09                jr c,BsCaptMove
0829   0C19 CD 70 0E             call IsBlack           ; our?                        
0830   0C1C 38 0E                jr c,BsNo
0831   0C1E 3E 00                ld a,0                 ; continue after to this direction
0832   0C20 18 05                jr BsAdd
0833   0C22             BsCaptMove:
0834   0C22 3E 01                ld a,1
0835   0C24 32 8F 0E             ld (CaptPiece),a       ; and stop to this direction  
0836   0C27             BsAdd:
0837   0C27 CD 97 0E             call AddMove
0838   0C2A 18 02                jr BsOver        
0839   0C2C             
0840   0C2C 3E 01       BsNo:    ld a,1                 ; stop to this direction
0841   0C2E             
0842   0C2E             BsOver:
0843   0C2E FD E5                push iy
0844   0C30 E1                   pop hl
0845   0C31                      
0846   0C31 DD E1                pop ix
0847   0C33 C1                   pop bc
0848   0C34 C9                   ret 
0849   0C35             
0850   0C35             ;END
0851   0C35             
0852   0C35             
0853   0C35             
0854   0C35             
0855   0C35             ;BEGIN of ========== MOVE GEN for KNIGHTS
0856   0C35             
0857   0C35 2B 01 2B 02 knightMoves: .byte '+',1,'+',2 ,'+',2,'+',1 ,'+',2,'-',1 ,'+',1,'-',2 ,
0857   0C39 2B 02 2B 01 
0857   0C3D 2B 02 2D 01 
0857   0C41 2B 01 2D 02 
0858   0C45 2D 01 2D 02              .byte '-',1,'-',2 ,'-',2,'-',1 ,'-',2,'+',1 ,'-',1,'+',2 , 
0858   0C49 2D 02 2D 01 
0858   0C4D 2D 02 2B 01 
0858   0C51 2D 01 2B 02 
0859   0C55 00                       .byte 0
0860   0C56                          
0861   0C56             
0862   0C56             MoveGenKnight:
0863   0C56             
0864   0C56 F5                   push af
0865   0C57 C5                   push bc
0866   0C58 D5                   push de
0867   0C59 DD E5                push ix
0868   0C5B                      
0869   0C5B CD 43 09             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
0870   0C5E                      
0871   0C5E DD 21 35 0C          ld ix, knightMoves
0872   0C62 06 08                ld b, 8
0873   0C64             KnightScan8moves:
0874   0C64 CD 77 0C             call KnightTryMove
0875   0C67 DD 23                inc ix
0876   0C69 DD 23                inc ix
0877   0C6B DD 23                inc ix
0878   0C6D DD 23                inc ix
0879   0C6F 10 F3                djnz KnightScan8moves
0880   0C71                    
0881   0C71 DD E1                pop ix
0882   0C73 D1                   pop de
0883   0C74 C1                   pop bc
0884   0C75 F1                   pop af
0885   0C76 C9                   ret
0886   0C77             
0887   0C77             ; try move to that square
0888   0C77             KnightTryMove:
0889   0C77 C5                   push bc
0890   0C78 D5                   push de
0891   0C79 DD E5                push ix
0892   0C7B                      
0893   0C7B 3E 00                ld a,0
0894   0C7D 32 8F 0E             ld (CaptPiece),a
0895   0C80                      
0896   0C80 DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,-2,+2
0897   0C83 DD 23                inc ix
0898   0C85 FE 2D                cp '-'
0899   0C87 28 0A                jr z, KnNegX
0900   0C89 DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of X      
0901   0C8C 82                   add a,d
0902   0C8D FE 08                cp 8
0903   0C8F 30 5F                jr nc, KnNo
0904   0C91 18 0D                jr KnCanOk1  
0905   0C93             KnNegX:
0906   0C93 DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of X
0907   0C96 3D                   dec a
0908   0C97 BA                   cp d
0909   0C98 38 02                jr c, KnCanSubtrX
0910   0C9A 18 54                jr KnNo
0911   0C9C             KnCanSubtrX:         
0912   0C9C 7A                   ld a, d
0913   0C9D DD 96 00             sub (ix)    
0914   0CA0             KnCanOk1:
0915   0CA0 57                   ld d,a         
0916   0CA1 DD 23                inc ix
0917   0CA3                      
0918   0CA3 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,-2,+2
0919   0CA6 DD 23                inc ix
0920   0CA8 FE 2D                cp '-'
0921   0CAA 28 0A                jr z, KnNegY
0922   0CAC DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of Y  
0923   0CAF 83                   add a,e
0924   0CB0 FE 08                cp 8
0925   0CB2 30 3C                jr nc, KnNo
0926   0CB4 18 0D                jr KnCanOk2   
0927   0CB6             KnNegY:
0928   0CB6 DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of Y
0929   0CB9 3D                   dec a 
0930   0CBA BB                   cp e
0931   0CBB 38 02                jr c, KnCanSubtrY
0932   0CBD 18 31                jr KnNo
0933   0CBF             KnCanSubtrY:         
0934   0CBF 7B                   ld a, e
0935   0CC0 DD 96 00             sub (ix)
0936   0CC3             KnCanOk2:
0937   0CC3 5F                   ld e, a
0938   0CC4 DD 23                inc ix         
0939   0CC6                      
0940   0CC6 CD 54 09             call StoreSqToMove    ;new SQt,hl        
0941   0CC9             
0942   0CC9 3A 81 01             ld a, (SIDE)
0943   0CCC FE 01                cp 1
0944   0CCE 28 0C                jr z, KnThisBlack
0945   0CD0 CD 70 0E             call IsBlack           ; enemy?
0946   0CD3 38 13                jr c,KnCaptMove
0947   0CD5 CD 51 0E             call IsWhite           ; our?
0948   0CD8 38 16                jr c,KnNo
0949   0CDA 18 11                jr KnAdd        
0950   0CDC             KnThisBlack:         
0951   0CDC CD 51 0E             call IsWhite           ; enemy?
0952   0CDF 38 07                jr c,KnCaptMove
0953   0CE1 CD 70 0E             call IsBlack           ; our?                        
0954   0CE4 38 0A                jr c,KnNo
0955   0CE6 18 05                jr KnAdd
0956   0CE8             KnCaptMove:
0957   0CE8 3E 01                ld a,1
0958   0CEA 32 8F 0E             ld (CaptPiece),a           
0959   0CED             KnAdd:
0960   0CED CD 97 0E             call AddMove         
0961   0CF0             
0962   0CF0             KnNo:
0963   0CF0 FD E5                push iy
0964   0CF2 E1                   pop hl
0965   0CF3                      
0966   0CF3 DD E1                pop ix
0967   0CF5 D1                   pop de
0968   0CF6 C1                   pop bc
0969   0CF7 C9                   ret 
0970   0CF8             
0971   0CF8             ;END
0972   0CF8             
0973   0CF8             ;BEGIN of ========== MOVE GEN for KINGS
0974   0CF8             
0975   0CF8 2D 01 3D 00 kingMoves: .byte '-',1,'=',0 ,'-',1,'+',1 ,'=',0,'+',1 ,'+',1,'+',1 ,
0975   0CFC 2D 01 2B 01 
0975   0D00 3D 00 2B 01 
0975   0D04 2B 01 2B 01 
0976   0D08 2B 01 3D 00            .byte '+',1,'=',0 ,'+',1,'-',1 ,'=',0,'-',1 ,'-',1,'-',1 ,
0976   0D0C 2B 01 2D 01 
0976   0D10 3D 00 2D 01 
0976   0D14 2D 01 2D 01 
0977   0D18 00                     .byte 0
0978   0D19                                       
0979   0D19             MoveGenKing:
0980   0D19             
0981   0D19 F5                   push af
0982   0D1A C5                   push bc
0983   0D1B DD E5                push ix
0984   0D1D                      
0985   0D1D CD 43 09             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
0986   0D20                      
0987   0D20 3E 04                ld a,4       ; on E?
0988   0D22 BA                   cp d
0989   0D23 20 03                jr nz, CastleCantBe
0990   0D25 CD BD 0D             call CastleMOVES   ; add castling moves without check-verification
0991   0D28                      
0992   0D28             CastleCantBe:
0993   0D28                      
0994   0D28 DD 21 F8 0C          ld ix,kingMoves
0995   0D2C 06 08                ld b, 8
0996   0D2E                      
0997   0D2E             KingScan8moves:
0998   0D2E CD 40 0D             call KingTryMove
0999   0D31 DD 23                inc ix
1000   0D33 DD 23                inc ix
1001   0D35 DD 23                inc ix
1002   0D37 DD 23                inc ix
1003   0D39 10 F3                djnz KingScan8moves
1004   0D3B                                    
1005   0D3B DD E1                pop ix
1006   0D3D C1                   pop bc
1007   0D3E F1                   pop af
1008   0D3F C9                   ret
1009   0D40                      
1010   0D40             ; try move to that square
1011   0D40             KingTryMove:
1012   0D40 C5                   push bc
1013   0D41 D5                   push de
1014   0D42 DD E5                push ix
1015   0D44                      
1016   0D44 3E 00                ld a,0
1017   0D46 32 8F 0E             ld (CaptPiece),a
1018   0D49                               
1019   0D49 DD 7E 00             ld a, (ix)      ;given directions for a..h  -1,+1,=0
1020   0D4C DD 23                inc ix
1021   0D4E FE 3D                cp '='
1022   0D50 28 16                jr z, KgZero1
1023   0D52 FE 2D                cp '-'
1024   0D54 28 08                jr z, KgNegX      
1025   0D56 7A                   ld a,d
1026   0D57 3C                   inc a           ;a=direction +1 of X 
1027   0D58 FE 08                cp 8
1028   0D5A 30 59                jr nc, KgOver
1029   0D5C 18 09                jr KgCanOk1  
1030   0D5E             KgNegX:
1031   0D5E 3E 00                ld a,0          ;a=direction -1 of X
1032   0D60 BA                   cp d
1033   0D61 38 02                jr c, KgCanSubtrX
1034   0D63 18 50                jr KgOver
1035   0D65             KgCanSubtrX:         
1036   0D65 7A                   ld a,d
1037   0D66 3D                   dec a 
1038   0D67             KgCanOk1:
1039   0D67 57                   ld d,a         
1040   0D68 DD 23       KgZero1: inc ix
1041   0D6A                      
1042   0D6A DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,=0
1043   0D6D DD 23                inc ix
1044   0D6F FE 3D                cp '='
1045   0D71 28 16                jr z, KgZero2        
1046   0D73 FE 2D                cp '-'
1047   0D75 28 08                jr z, KgNegY
1048   0D77 7B                   ld a,e
1049   0D78 3C                   inc a          ;a=direction +1 of Y  
1050   0D79 FE 08                cp 8
1051   0D7B 30 38                jr nc, KgOver
1052   0D7D 18 09                jr KgCanOk2   
1053   0D7F             KgNegY:
1054   0D7F 3E 00                ld a,0         ;a=direction -1 of Y
1055   0D81 BB                   cp e
1056   0D82 38 02                jr c, KgCanSubtrY
1057   0D84 18 2F                jr KgOver
1058   0D86             KgCanSubtrY:         
1059   0D86 7B                   ld a, e
1060   0D87 3D                   dec a
1061   0D88             KgCanOk2:
1062   0D88 5F                   ld e,a
1063   0D89 DD 23       KgZero2: inc ix         
1064   0D8B                      
1065   0D8B CD 54 09             call StoreSqToMove    ;new SQt,hl        
1066   0D8E             
1067   0D8E 3A 81 01             ld a, (SIDE)
1068   0D91 FE 01                cp 1
1069   0D93 28 0C                jr z,KgThisBlack
1070   0D95 CD 70 0E             call IsBlack           ; enemy?
1071   0D98 38 13                jr c,KgCaptMove
1072   0D9A CD 51 0E             call IsWhite           ; our?
1073   0D9D 38 16                jr c,KgOver
1074   0D9F 18 11                jr KgAdd        
1075   0DA1             KgThisBlack:         
1076   0DA1 CD 51 0E             call IsWhite           ; enemy?
1077   0DA4 38 07                jr c,KgCaptMove
1078   0DA6 CD 70 0E             call IsBlack           ; our?                        
1079   0DA9 38 0A                jr c,KgOver
1080   0DAB 18 05                jr KgAdd
1081   0DAD             KgCaptMove:
1082   0DAD 3E 01                ld a,1
1083   0DAF 32 8F 0E             ld (CaptPiece),a
1084   0DB2             KgAdd:
1085   0DB2 CD 97 0E             call AddMove
1086   0DB5             KgOver:
1087   0DB5 FD E5                push iy
1088   0DB7 E1                   pop hl
1089   0DB8                      
1090   0DB8 DD E1                pop ix
1091   0DBA D1                   pop de
1092   0DBB C1                   pop bc
1093   0DBC C9                   ret 
1094   0DBD             
1095   0DBD             ; Add castling moves to list
1096   0DBD             CastleMOVES:
1097   0DBD                                              
1098   0DBD 3E 00                ld a,0
1099   0DBF 32 8F 0E             ld (CaptPiece),a      
1100   0DC2 3E 01                ld a,1
1101   0DC4 32 91 0E             ld (CastlMove),a
1102   0DC7                      
1103   0DC7 0E 01                ld c,1       ; directions 0-King side, 1-Queen side
1104   0DC9             CastleDirScan:       
1105   0DC9 3A 82 01             ld a, (CASTLES)
1106   0DCC 47                   ld b,a       ; b contains castlings flags
1107   0DCD 7B                   ld a,e
1108   0DCE FE 07                cp 7         ; detect king
1109   0DD0 20 06                jr nz, CstlWhite
1110   0DD2 CB 38                srl b        ; simply roll castling flags for black
1111   0DD4 CB 38                srl b
1112   0DD6 18 04                jr CstlBegin
1113   0DD8             CstlWhite:
1114   0DD8 FE 00                cp 0
1115   0DDA 20 56                jr nz, CastleBrk    
1116   0DDC             CstlBegin:
1117   0DDC D5                   push de
1118   0DDD 3E 00                ld a,0
1119   0DDF B9                   cp c
1120   0DE0 28 22                jr z, CstlQside       
1121   0DE2 78                   ld a,b
1122   0DE3 CB 47                bit 0,a
1123   0DE5 28 3F                jr z,CstlLoop
1124   0DE7             CstEmpty1:
1125   0DE7 14                   inc d
1126   0DE8 23                   inc hl
1127   0DE9 7A                   ld a,d
1128   0DEA FE 07                cp 7
1129   0DEC 28 07                jr z, CstlGood1
1130   0DEE CD 3B 0E             call IsEmpty
1131   0DF1 30 33                jr nc, CstlLoop
1132   0DF3 18 F2                jr CstEmpty1
1133   0DF5             CstlGood1:
1134   0DF5 15                   dec d              ; back h1->g1  or h8->g8
1135   0DF6 2B                   dec hl
1136   0DF7 3A 8D 08             ld a,(SQi)
1137   0DFA 3C                   inc a
1138   0DFB 3C                   inc a
1139   0DFC 32 8E 08             ld (SQt),a
1140   0DFF CD 97 0E             call AddMove
1141   0E02 18 22                jr CstlLoop
1142   0E04             CstlQside:
1143   0E04 78                   ld a,b
1144   0E05 CB 48                bit 1,b
1145   0E07 28 1D                jr z,CstlLoop
1146   0E09             CstEmpty2:          
1147   0E09 15                   dec d
1148   0E0A 2B                   dec hl
1149   0E0B 7A                   ld a,d
1150   0E0C FE 00                cp 0
1151   0E0E 28 07                jr z, CstlGood2
1152   0E10 CD 3B 0E             call IsEmpty
1153   0E13 30 11                jr nc, CstlLoop
1154   0E15 18 F2                jr CstEmpty2
1155   0E17             CstlGood2:
1156   0E17 14                   inc d
1157   0E18 14                   inc d              ; back a1->c1  or a8->c8
1158   0E19 23                   inc hl
1159   0E1A 23                   inc hl
1160   0E1B 3A 8D 08             ld a,(SQi)
1161   0E1E 3D                   dec a
1162   0E1F 3D                   dec a
1163   0E20 32 8E 08             ld (SQt),a
1164   0E23 CD 97 0E             call AddMove         
1165   0E26             CstlLoop:
1166   0E26 D1                   pop de
1167   0E27 3E 00                ld a,0
1168   0E29 B9                   cp c
1169   0E2A 28 06                jr z,CastleBrk
1170   0E2C 0D                   dec c
1171   0E2D                      
1172   0E2D FD E5                push iy
1173   0E2F E1                   pop hl   ; restore hl
1174   0E30                      
1175   0E30 18 97                jr CastleDirScan    ;Next direction
1176   0E32                      
1177   0E32             CastleBrk:         
1178   0E32 FD E5                push iy
1179   0E34 E1                   pop hl   ; restore hl
1180   0E35                      
1181   0E35 3E 00                ld a,0
1182   0E37 32 91 0E             ld (CastlMove),a                    
1183   0E3A             
1184   0E3A C9                   ret
1185   0E3B             
1186   0E3B             ;END
1187   0E3B             
1188   0E3B             ;BEGIN of ========== Is empty square?
1189   0E3B             
1190   0E3B             IsEmpty:
1191   0E3B 7E                   ld a, (hl)
1192   0E3C FE 00                cp 0
1193   0E3E 28 04                jr z, EmptySqIs
1194   0E40 37                   scf
1195   0E41 3F                   ccf
1196   0E42 18 01                jr EmptySqOver
1197   0E44             EmptySqIs:
1198   0E44 37                   scf
1199   0E45             EmptySqOver:
1200   0E45 C9                   ret           
1201   0E46             ;END
1202   0E46             
1203   0E46             ;BEGIN of ========== Is square occupied?
1204   0E46             
1205   0E46             IsOccupied:
1206   0E46 7E                   ld a, (hl)
1207   0E47 FE 00                cp 0
1208   0E49 28 04                jr z, OccupiedSqIs
1209   0E4B 37                   scf
1210   0E4C 3F                   ccf
1211   0E4D 18 01                jr OccupiedSqOver
1212   0E4F             OccupiedSqIs:
1213   0E4F 37                   scf
1214   0E50             OccupiedSqOver:
1215   0E50 C9                   ret           
1216   0E51             ;END
1217   0E51             
1218   0E51             
1219   0E51             ;BEGIN of ========== Is piece white?
1220   0E51             
1221   0E51             IsWhite:
1222   0E51 7E                   ld a, (hl)
1223   0E52 FE 50                cp 'P'
1224   0E54 28 18                jr z, WhitePcIs
1225   0E56 FE 4E                cp 'N'
1226   0E58 28 14                jr z, WhitePcIs
1227   0E5A FE 42                cp 'B'
1228   0E5C 28 10                jr z, WhitePcIs
1229   0E5E FE 52                cp 'R'
1230   0E60 28 0C                jr z, WhitePcIs
1231   0E62 FE 51                cp 'Q'
1232   0E64 28 08                jr z, WhitePcIs
1233   0E66 FE 4B                cp 'K'
1234   0E68 28 04                jr z, WhitePcIs
1235   0E6A 37                   scf
1236   0E6B 3F                   ccf
1237   0E6C 18 01                jr WhitePcOver
1238   0E6E             WhitePcIs:
1239   0E6E 37                   scf
1240   0E6F             WhitePcOver:
1241   0E6F C9                   ret    
1242   0E70             
1243   0E70             ;END
1244   0E70             
1245   0E70             ;BEGIN of ========== Is piece black?
1246   0E70             
1247   0E70             IsBlack:
1248   0E70 7E                   ld a, (hl)
1249   0E71 FE 70                cp 'p'
1250   0E73 28 18                jr z, BlackPcIs
1251   0E75 FE 6E                cp 'n'
1252   0E77 28 14                jr z, BlackPcIs
1253   0E79 FE 62                cp 'b'
1254   0E7B 28 10                jr z, BlackPcIs
1255   0E7D FE 72                cp 'r'
1256   0E7F 28 0C                jr z, BlackPcIs
1257   0E81 FE 71                cp 'q'
1258   0E83 28 08                jr z, BlackPcIs
1259   0E85 FE 6B                cp 'k'
1260   0E87 28 04                jr z, BlackPcIs
1261   0E89 37                   scf
1262   0E8A 3F                   ccf
1263   0E8B 18 01                jr BlackPcOver
1264   0E8D             BlackPcIs:
1265   0E8D 37                   scf
1266   0E8E             BlackPcOver:
1267   0E8E C9                   ret    
1268   0E8F             
1269   0E8F             ;END
1270   0E8F             
1271   0E8F             ;BEGIN of ========== ADD NEW MOVE to the list with verification
1272   0E8F             
1273   0E8F             ;various flags
1274   0E8F 00          CaptPiece:  .byte 0
1275   0E90 00          PromoPcId:  .byte 0
1276   0E91 00          CastlMove:  .byte 0
1277   0E92             
1278   0E92             AddMovPromo:
1279   0E92 3E 04                ld a,4
1280   0E94 32 90 0E             ld (PromoPcId),a        ; pawns may promote, so this counter is like promoted-piece-id of Q,R.B.N
1281   0E97             AddMove:
1282   0E97 F5                   push af
1283   0E98                      
1284   0E98 CD 26 13             call ValidateKingCheck  ; this verifies if king is attacked after movement, or can not castle
1285   0E9B FE 00                cp 0
1286   0E9D 28 02                jr z,AddMLegal          ; if valid move
1287   0E9F                      
1288   0E9F 18 59                jr fAddMVover
1289   0EA1                      
1290   0EA1             AddMLegal:
1291   0EA1 3A 8F 08             ld a, (MateDetect)
1292   0EA4 FE 00                cp 0
1293   0EA6 28 07                jr z, AddMNormalCase
1294   0EA8                     
1295   0EA8 3E 02                ld a,2                  ; we found a legal move, so not checkmate
1296   0EAA 32 8F 08             ld (MateDetect),a
1297   0EAD 18 4B                jr fAddMVover   
1298   0EAF                      
1299   0EAF             AddMNormalCase:         
1300   0EAF                               
1301   0EAF C5                   push bc
1302   0EB0 DD E5                push ix
1303   0EB2 DD 21 F2 02          ld ix, NEXT_MVCNT
1304   0EB6 DD 4E 00             ld c, (ix)     ;n
1305   0EB9 06 00                ld b, 0
1306   0EBB DD 34 00             inc (ix)       ;n=n+1
1307   0EBE DD 21 F3 02          ld ix, NEXT_MOVES
1308   0EC2 CB 21                sla c
1309   0EC4 CB 21                sla c
1310   0EC6 DD 09                add ix, bc     ;n*(piece,from,to,flags)
1311   0EC8 FD 7E 00             ld a, (iy)     ;piece
1312   0ECB FE 61                cp 'a'
1313   0ECD 38 02                jr c, addMVupperAlready
1314   0ECF D6 20                sub 32         ;to uppercase
1315   0ED1                      
1316   0ED1             addMVupperAlready:         
1317   0ED1 DD 77 00             ld (ix), a
1318   0ED4 DD 23                inc ix
1319   0ED6                              
1320   0ED6 3A 8D 08             ld a, (SQi)    ;from square
1321   0ED9 DD 77 00             ld (ix), a
1322   0EDC DD 23                inc ix
1323   0EDE                              
1324   0EDE 3A 8E 08             ld a, (SQt)    ;to square
1325   0EE1 DD 77 00             ld (ix), a
1326   0EE4 DD 23                inc ix
1327   0EE6                      
1328   0EE6                      ; and add one byte for flags
1329   0EE6                      
1330   0EE6 3A 8F 0E             ld a, (CaptPiece)
1331   0EE9 47                   ld b, a                ; bit 0 - captured a piece
1332   0EEA             
1333   0EEA 3A 90 0E             ld a, (PromoPcId)
1334   0EED FE 00                cp 0
1335   0EEF 28 25                jr z, addMVnoprom
1336   0EF1                               
1337   0EF1 3A 8E 08             ld a, (SQt)    ;to
1338   0EF4 FE 38                cp 64-8        ;row 8?
1339   0EF6 38 04                jr c, addMVq
1340   0EF8 18 06                jr addMVpromos
1341   0EFA                      
1342   0EFA             fAddMVover:
1343   0EFA 18 41                jr AddMVover 
1344   0EFC                      
1345   0EFC             addMVq:
1346   0EFC FE 08                cp 8           ;row 1?
1347   0EFE 30 16                jr nc, addMVnoprom
1348   0F00             
1349   0F00             addMVpromos:         
1350   0F00 CB C8                set 1,b                ; bit 1 - promotion, bits 2,3 - promoted piece Nr. Q=3,R=2,B=1,N=0   
1351   0F02 3A 90 0E             ld a, (PromoPcId)
1352   0F05 3D                   dec a
1353   0F06 32 90 0E             ld (PromoPcId),a
1354   0F09 FE 00                cp 0
1355   0F0B 28 03                jr z, addMVp2
1356   0F0D                      
1357   0F0D CD 97 0E             call AddMove          ; promotion move for all other pieces, check detection lags here     
1358   0F10                      
1359   0F10             addMVp2:        
1360   0F10 CB 27                sla a
1361   0F12 CB 27                sla a
1362   0F14 B0                   or b
1363   0F15 47                   ld b,a       
1364   0F16                
1365   0F16             addMVnoprom:
1366   0F16 3A 91 0E             ld a, (CastlMove)
1367   0F19 FE 00                cp 0
1368   0F1B 28 02                jr z, addMVnoCastle
1369   0F1D CB E0                set 4,b                ; bit 4 - castling indicator
1370   0F1F             addMVnoCastle:
1371   0F1F             
1372   0F1F 3A 83 01             ld a, (ENPSQ)
1373   0F22 FE FF                cp $ff
1374   0F24 28 09                jr z,addMVnoEP 
1375   0F26 4F                   ld c,a
1376   0F27 3A 8E 08             ld a, (SQt)
1377   0F2A B9                   cp c
1378   0F2B 20 02                jr nz,addMVnoEP
1379   0F2D CB E8                set 5,b                ; bit 5 - en-passant capture
1380   0F2F                                             ; bit 6 - later for check+ detection
1381   0F2F                                             ; bit 7 - later for checkmate detection
1382   0F2F             addMVnoEP:
1383   0F2F                                                 
1384   0F2F DD 70 00             ld (ix), b
1385   0F32 DD 23                inc ix
1386   0F34                      
1387   0F34 DD E1                pop ix
1388   0F36 C1                   pop bc        
1389   0F37                                                                                         
1390   0F37 CD 98 16             call MakeMove         ; check+ detection action, with checkmate detection later
1391   0F3A CD 8A 19             call UnMakeMove
1392   0F3D                                      
1393   0F3D             AddMVover:
1394   0F3D F1                   pop af         
1395   0F3E C9                   ret
1396   0F3F             
1397   0F3F             ;END
1398   0F3F             
1399   0F3F             
1400   0F3F             ;BEGIN of ========== Composes notation string for output for current list of generated moves
1401   0F3F             ;                   (last by MOVE GENs) 
1402   0F3F             
1403   0F3F             MovesToStr:
1404   0F3F F5                   push af
1405   0F40 C5                   push bc
1406   0F41 D5                   push de
1407   0F42 DD E5                push ix
1408   0F44                      
1409   0F44 11 86 01             ld de, NEXT_MVSTR
1410   0F47 DD 21 F2 02          ld ix, NEXT_MVCNT
1411   0F4B             
1412   0F4B DD 46 00             ld b,(ix)
1413   0F4E DD 21 F3 02          ld ix, NEXT_MOVES
1414   0F52 78                   ld a, b
1415   0F53 FE 00                cp 0
1416   0F55 28 5B                jr z, MV2sEndSymb 
1417   0F57                      
1418   0F57             MV2sToLoop:
1419   0F57             
1420   0F57 DD 7E 00             ld a, (ix)   ; piece
1421   0F5A FE 50                cp 'P'
1422   0F5C 28 02                jr z, MV2sNoPieceNotate
1423   0F5E 12                   ld (de),a
1424   0F5F 13                   inc de
1425   0F60             MV2sNoPieceNotate:
1426   0F60 DD 23                inc ix
1427   0F62                             
1428   0F62 CD 08 10             call MC2getSQ   ; from square
1429   0F65 13                   inc de    
1430   0F66 13                   inc de
1431   0F67 CD 08 10             call MC2getSQ   ; to square
1432   0F6A 1B                   dec de    
1433   0F6B 1B                   dec de
1434   0F6C                                        
1435   0F6C DD 7E 00             ld a, (ix)    ; flags
1436   0F6F CB 67                bit 4,a
1437   0F71 28 05                jr z,MV2sNoCastle
1438   0F73 CD E9 0F             call MC2sCASTLEs   ; redraws castling 0-0 or 0-0-0      
1439   0F76 18 1B                jr MV2sNoProm    
1440   0F78             MV2sNoCastle:
1441   0F78 DD 7E 00             ld a, (ix)    ; flags again
1442   0F7B CB 47                bit 0,a
1443   0F7D 28 04                jr z, MV2sNoCapt
1444   0F7F 3E 78                ld a, 'x'
1445   0F81 18 02                jr MV2xTo
1446   0F83             MV2sNoCapt:
1447   0F83 3E 2D                ld a, '-'
1448   0F85             MV2xTo:         
1449   0F85 12                   ld (de),a
1450   0F86 13                   inc de        
1451   0F87 13                   inc de
1452   0F88 13                   inc de
1453   0F89                             
1454   0F89 DD 7E 00             ld a, (ix)    ; possibly promotion
1455   0F8C CB 4F                bit 1,a
1456   0F8E 28 03                jr z, MV2sNoProm
1457   0F90                      
1458   0F90 CD BF 0F             call MV2sPromotion ; add piece promotion text =Q..N 
1459   0F93             
1460   0F93             MV2sNoProm:
1461   0F93 DD 7E 00             ld a, (ix)    ; possibly check+
1462   0F96 CB 77                bit 6,a
1463   0F98 28 0F                jr z, MV2sNoCheck
1464   0F9A                      
1465   0F9A DD 7E 00             ld a, (ix)    ; possibly checkmate
1466   0F9D CB 7F                bit 7,a
1467   0F9F 28 04                jr z, MV2sJustCheck
1468   0FA1             
1469   0FA1 3E 23                ld a, '#'
1470   0FA3 18 02                jr MV2sCk1
1471   0FA5                      
1472   0FA5             MV2sJustCheck:         
1473   0FA5 3E 2B                ld a, '+'
1474   0FA7 12          MV2sCk1: ld (de),a        
1475   0FA8 13                   inc de         
1476   0FA9                      
1477   0FA9             MV2sNoCheck:                     
1478   0FA9 DD 23                inc ix
1479   0FAB                              
1480   0FAB 3E 2C                ld a, ','
1481   0FAD 12                   ld (de),a        
1482   0FAE 13                   inc de
1483   0FAF                      
1484   0FAF 10 A6                djnz MV2sToLoop
1485   0FB1 1B                   dec de
1486   0FB2                      
1487   0FB2             MV2sEndSymb:         
1488   0FB2 3E 24                ld a, '$'
1489   0FB4 12                   ld (de),a         
1490   0FB5 13                   inc de
1491   0FB6 3E 00                ld a, 0
1492   0FB8 12                   ld (de),a 
1493   0FB9                              
1494   0FB9 DD E1                pop ix
1495   0FBB D1                   pop de
1496   0FBC C1                   pop bc
1497   0FBD F1                   pop af
1498   0FBE C9                   ret
1499   0FBF             
1500   0FBF             MV2sPromotion:
1501   0FBF             
1502   0FBF 3E 3D                ld a, '='
1503   0FC1 12                   ld (de),a
1504   0FC2 13                   inc de
1505   0FC3                               
1506   0FC3 DD 7E 00             ld a, (ix)    ; which piece?
1507   0FC6 CB 3F                srl a
1508   0FC8 CB 3F                srl a
1509   0FCA E6 03                and 3         ; 0..3 piece Id
1510   0FCC FE 03                cp 3          ; Queen?
1511   0FCE 20 04                jr nz, MC2sNoQ
1512   0FD0 3E 51                ld a, 'Q'
1513   0FD2 18 12                jr MC2sPrId         
1514   0FD4 FE 02       MC2sNoQ: cp 2          ; Rook?
1515   0FD6 20 04                jr nz, MC2sNoR
1516   0FD8 3E 52                ld a, 'R'
1517   0FDA 18 0A                jr MC2sPrId        
1518   0FDC FE 01       MC2sNoR: cp 1          ; Bishop?
1519   0FDE 20 04                jr nz, MC2sNoB
1520   0FE0 3E 42                ld a, 'B'
1521   0FE2 18 02                jr MC2sPrId
1522   0FE4 3E 4E       MC2sNoB: ld a, 'N'     ; Knight
1523   0FE6             MC2sPrId:
1524   0FE6 12                   ld (de),a
1525   0FE7 13                   inc de
1526   0FE8 C9                   ret
1527   0FE9                       
1528   0FE9             MC2sCASTLEs:           ; simply rewrites characters in buffer 
1529   0FE9             
1530   0FE9 13                   inc de
1531   0FEA 1A                   ld a,(de)
1532   0FEB 1B                   dec de
1533   0FEC 1B                   dec de
1534   0FED 1B                   dec de
1535   0FEE 1B                   dec de
1536   0FEF FE 63                cp 'c'
1537   0FF1 20 08                jr nz,MC2sShort       
1538   0FF3 3E 30                ld a, '0'     ; 0-0-0
1539   0FF5 12                   ld (de),a
1540   0FF6 13                   inc de
1541   0FF7 3E 2D                ld a, '-'
1542   0FF9 12                   ld (de),a
1543   0FFA 13                   inc de
1544   0FFB             MC2sShort:
1545   0FFB 3E 30                ld a, '0'     ; just 0-0 part
1546   0FFD 12                   ld (de),a
1547   0FFE 13                   inc de
1548   0FFF 3E 2D                ld a, '-'
1549   1001 12                   ld (de),a
1550   1002 13                   inc de
1551   1003 3E 30                ld a, '0'
1552   1005 12                   ld (de),a
1553   1006 13                   inc de                           
1554   1007             
1555   1007 C9                   ret
1556   1008             ; get square and store to text string
1557   1008             MC2getSQ:
1558   1008 DD 7E 00             ld a, (ix)
1559   100B E6 07                and 7
1560   100D C6 61                add a, 'a'
1561   100F 12                   ld (de),a        
1562   1010 13                   inc de
1563   1011 DD 7E 00             ld a, (ix)
1564   1014 CB 3F                srl a
1565   1016 CB 3F                srl a
1566   1018 CB 3F                srl a
1567   101A C6 31                add a, '1'
1568   101C 12                   ld (de),a
1569   101D DD 23                inc ix
1570   101F C9                   ret
1571   1020             
1572   1020             ; printing of current legal moves to output
1573   1020             MovesOut:
1574   1020 D5                   push de
1575   1021 11 86 01             ld de, NEXT_MVSTR
1576   1024 CD 8F 2A             call PrintString
1577   1027 D1                   pop de
1578   1028 C9                   ret
1579   1029             
1580   1029             ;END        
1581   1029             
1582   1029             ;BEGIN of ========== SET FEN position on BOARD and variables
1583   1029             ;
1584   1029             ; parameter: a-reg
1585   1029             ;  0 - set by using startFEN
1586   1029             ;  1 - set fen provided in IX register
1587   1029             ;
1588   1029             SetFEN:
1589   1029 F5                   push af
1590   102A C5                   push bc
1591   102B D5                   push de
1592   102C E5                   push hl
1593   102D             
1594   102D FE 00                cp 0
1595   102F 28 05                jr z, SetFENstartpos
1596   1031 DD E5                push ix
1597   1033 D1                   pop de   ;de contains FEN address now
1598   1034 18 03                jr SetFENp
1599   1036             SetFENstartpos:         
1600   1036 11 07 01             ld de, startFEN
1601   1039 3E FF       SetFENp: ld a,$ff
1602   103B 32 84 01             ld (WKSQ),a
1603   103E 32 85 01             ld (BKSQ),a
1604   1041 CD 70 12             call SetSqScan
1605   1044 CD 79 12             call ScanSqNxt
1606   1047 06 40                ld b, 64
1607   1049             setBoardSquare:
1608   1049 1A                   ld a, (de)
1609   104A 13                   inc de
1610   104B FE 2F                cp '/'
1611   104D 28 FA                jr z, setBoardSquare
1612   104F 4F                   ld c, a
1613   1050 FE 31                cp '1'
1614   1052 38 16                jr c, notFenDigit  ;ifA<'1' then jump
1615   1054 FE 39                cp '9'
1616   1056 30 12                jr nc, notFenDigit ;ifA>='9' then jump
1617   1058 D6 30                sub '0'
1618   105A 4F                   ld c,a
1619   105B             setFenEmptyPiece:
1620   105B 36 00                ld (hl), 0
1621   105D CD 79 12             call ScanSqNxt
1622   1060 0D                   dec c
1623   1061 05                   dec b
1624   1062 79                   ld a,c
1625   1063 FE 00                cp 0
1626   1065 20 F4                jr nz, setFenEmptyPiece
1627   1067 04                   inc b
1628   1068 18 1A                jr nextFenPiece
1629   106A             notFenDigit:
1630   106A 77                   ld (hl),a
1631   106B FE 4B                cp 'K'
1632   106D 20 07                jr nz, setFenNoWK
1633   106F CD 9F 12             call GetScanSQ
1634   1072 32 84 01             ld (WKSQ),a
1635   1075 7E                   ld a,(hl)
1636   1076             setFenNoWK:
1637   1076 FE 6B                cp 'k'
1638   1078 20 07                jr nz, setFenNoBK
1639   107A CD 9F 12             call GetScanSQ
1640   107D 32 85 01             ld (BKSQ),a
1641   1080 7E                   ld a,(hl)
1642   1081             setFenNoBK:         
1643   1081 CD 79 12             call ScanSqNxt
1644   1084             nextFenPiece:
1645   1084 10 C3                djnz setBoardSquare
1646   1086                      
1647   1086 13                   inc de                 ; detects which side to move
1648   1087 1A                   ld a, (de)
1649   1088 FE 77                cp 'w'
1650   108A 20 04                jr nz,setFenBlackMv
1651   108C 3E 00                ld a,0
1652   108E 18 02                jr setFenCol2Mv
1653   1090             setFenBlackMv:
1654   1090 3E 01                ld a,1
1655   1092             setFenCol2Mv:
1656   1092 32 81 01             ld (SIDE),a
1657   1095 13                   inc de
1658   1096 13                   inc de
1659   1097             
1660   1097 06 00                ld b,0           
1661   1099             setFenCastlings:
1662   1099 1A                   ld a, (de)
1663   109A 13                   inc de
1664   109B FE 20                cp ' '
1665   109D 28 24                jr z,setFenCsOver ; break loop
1666   109F              
1667   109F FE 2D                cp '-'
1668   10A1 28 1E                jr z,setFenCs     ; just skip
1669   10A3             
1670   10A3 FE 4B                cp 'K'
1671   10A5 20 04                jr nz,setFenC2
1672   10A7 CB C0                set 0,b
1673   10A9 18 16                jr setFenCs
1674   10AB             setFenC2:
1675   10AB FE 51                cp 'Q'
1676   10AD 20 04                jr nz,setFenC3
1677   10AF CB C8                set 1,b
1678   10B1 18 0E                jr setFenCs
1679   10B3             setFenC3:
1680   10B3 FE 6B                cp 'k'
1681   10B5 20 04                jr nz,setFenC4
1682   10B7 CB D0                set 2,b
1683   10B9 18 06                jr setFenCs
1684   10BB             setFenC4:
1685   10BB FE 71                cp 'q'
1686   10BD 20 02                jr nz,setFenCs
1687   10BF CB D8                set 3,b     
1688   10C1             setFenCs:
1689   10C1 18 D6                jr setFenCastlings ;just go next      
1690   10C3             setFenCsOver:
1691   10C3 78                   ld a,b
1692   10C4 32 82 01             ld (CASTLES),a
1693   10C7                      
1694   10C7 1A                   ld a, (de)           ; is en-passant square provided?
1695   10C8 13                   inc de
1696   10C9 FE 2D                cp '-'
1697   10CB 28 10                jr z,setFenNoEnp     ; just skip
1698   10CD D6 61                sub 'a'
1699   10CF 47                   ld b,a         
1700   10D0 1A                   ld a, (de)
1701   10D1 13                   inc de
1702   10D2 D6 31                sub '1'
1703   10D4 CB 27                sla a
1704   10D6 CB 27                sla a
1705   10D8 CB 27                sla a       
1706   10DA B0                   or b                 ; reg-a = given en-passant square
1707   10DB 18 02                jr setFenENPsq     
1708   10DD             setFenNoEnp:
1709   10DD 3E FF                ld a,$ff
1710   10DF             setFenENPsq:
1711   10DF 32 83 01             ld (ENPSQ),a         ; save en-passant square
1712   10E2             
1713   10E2 13                   inc de
1714   10E3 3E 00                ld a,0
1715   10E5 32 0B 04             ld (MOVE_CNT),a
1716   10E8                                                                                                                                                                                                                
1717   10E8 E1                   pop hl
1718   10E9 D1                   pop de
1719   10EA C1                   pop bc
1720   10EB F1                   pop af
1721   10EC C9                   ret
1722   10ED             
1723   10ED             ;END
1724   10ED             
1725   10ED             ;BEGIN of ========== GET FEN position from BOARD and variables
1726   10ED             ;
1727   10ED             ; parameter:  address in DE register for resulting string,
1728   10ED             ;   ends with $, can be printed right after
1729   10ED             ;
1730   10ED             GetFEN:
1731   10ED F5                   push af
1732   10EE C5                   push bc
1733   10EF D5                   push de
1734   10F0 E5                   push hl
1735   10F1 DD E5                push ix
1736   10F3                      
1737   10F3 D5                   push de
1738   10F4 DD E1                pop ix        ; ix = de
1739   10F6                   
1740   10F6 CD 70 12             call SetSqScan
1741   10F9 06 40                ld b,64
1742   10FB 16 00                ld d,0        ; current column
1743   10FD             getBoardSquare:
1744   10FD                               
1745   10FD 7A                   ld a,d
1746   10FE FE 08                cp 8           ; if slash for new line
1747   1100 20 09                jr nz,getBoNsl
1748   1102                      
1749   1102 3E 2F                ld a,'/'
1750   1104 DD 77 00             ld (ix),a
1751   1107 DD 23                inc ix
1752   1109 16 00                ld d,0
1753   110B             getBoNsl:
1754   110B CD 79 12             call ScanSqNxt
1755   110E 7E                   ld a, (hl)
1756   110F             
1757   110F FE 00                cp 0
1758   1111 28 06                jr z,getBo0
1759   1113 FE 20                cp ' '
1760   1115 28 02                jr z,getBo0  ; if empty square or space
1761   1117 18 1E                jr getBoNo0
1762   1119             getBo0:         
1763   1119 7A                   ld a,d
1764   111A FE 00                cp 0
1765   111C 20 04                jr nz,getBoC2
1766   111E 3E 31       getBo1:  ld a,'1'          ; first space
1767   1120 18 15                jr getBoNo0
1768   1122             getBoC2:
1769   1122 DD 2B                dec ix         
1770   1124 DD 7E 00             ld a,(ix)
1771   1127 DD 23                inc ix
1772   1129 D6 31                sub '1'
1773   112B 38 F1                jr c,getBo1         
1774   112D FE 08                cp 8
1775   112F 30 ED                jr nc,getBo1
1776   1131 DD 2B                dec ix         
1777   1133 DD 7E 00             ld a,(ix)
1778   1136 3C                   inc a            ; char+1 counter of empty squares
1779   1137             getBoNo0:
1780   1137 DD 77 00             ld (ix),a
1781   113A DD 23                inc ix
1782   113C                      
1783   113C 14                   inc d
1784   113D 10 BE                djnz getBoardSquare  ; scan all 64 squares    
1785   113F                      
1786   113F CD DE 11             call getBo_      ; space
1787   1142                      
1788   1142 3A 81 01             ld a,(SIDE)      ; side to move
1789   1145 FE 00                cp 0
1790   1147 20 04                jr nz,getBoB
1791   1149 3E 77                ld a,'w'
1792   114B 18 02                jr getBoSd
1793   114D 3E 62       getBoB:  ld a,'b'
1794   114F DD 77 00    getBoSd: ld (ix),a
1795   1152 DD 23                inc ix
1796   1154                               
1797   1154 CD DE 11             call getBo_
1798   1157             
1799   1157 3A 82 01             ld a,(CASTLES)
1800   115A 47                   ld b,a
1801   115B E6 0F                and %00001111
1802   115D FE 00                cp 0
1803   115F 28 2E                jr z,getBoNoCst
1804   1161 CB 40                bit 0,b
1805   1163 28 07                jr z,getBnWK
1806   1165 3E 4B                ld a,'K'
1807   1167 DD 77 00             ld (ix),a
1808   116A DD 23                inc ix
1809   116C             getBnWK:  
1810   116C CB 48                bit 1,b
1811   116E 28 07                jr z,getBnWQ
1812   1170 3E 51                ld a,'Q'
1813   1172 DD 77 00             ld (ix),a
1814   1175 DD 23                inc ix
1815   1177             getBnWQ:  
1816   1177 CB 50                bit 2,b
1817   1179 28 07                jr z,getBnBK
1818   117B 3E 6B                ld a,'k'
1819   117D DD 77 00             ld (ix),a
1820   1180 DD 23                inc ix
1821   1182             getBnBK:  
1822   1182 CB 58                bit 3,b
1823   1184 28 0C                jr z,getBoCsOver
1824   1186 3E 71                ld a,'q'
1825   1188 DD 77 00             ld (ix),a
1826   118B DD 23                inc ix         
1827   118D 18 03                jr getBoCsOver
1828   118F                               
1829   118F             getBoNoCst:
1830   118F CD E6 11             call getBoM    ; sign - 
1831   1192             getBoCsOver:
1832   1192             
1833   1192 CD DE 11             call getBo_
1834   1195             
1835   1195 3A 83 01             ld a,(ENPSQ)   ; add en-passant info
1836   1198 FE FF                cp $ff
1837   119A 28 1A                jr z,getBoNoEp
1838   119C 47                   ld b,a
1839   119D E6 07                and 7
1840   119F C6 61                add a,'a'
1841   11A1 DD 77 00             ld (ix),a
1842   11A4 DD 23                inc ix
1843   11A6 78                   ld a,b
1844   11A7 CB 3F                srl a
1845   11A9 CB 3F                srl a
1846   11AB CB 3F                srl a
1847   11AD C6 31                add a,'1'
1848   11AF DD 77 00             ld (ix),a
1849   11B2 DD 23                inc ix
1850   11B4 18 03                jr getBoEpOver
1851   11B6             getBoNoEp:
1852   11B6 CD E6 11             call getBoM    ; sign - 
1853   11B9             getBoEpOver:
1854   11B9 CD DE 11             call getBo_
1855   11BC             
1856   11BC 3E 30                ld a,'0'       ; ignore halfmoves
1857   11BE DD 77 00             ld (ix),a
1858   11C1 DD 23                inc ix
1859   11C3                      
1860   11C3 CD DE 11             call getBo_
1861   11C6                      
1862   11C6 3A 0B 04             ld a,(MOVE_CNT)
1863   11C9 CB 3F                srl a          ; =1+int(/2)
1864   11CB C6 31                add a,'1'
1865   11CD DD 77 00             ld (ix),a
1866   11D0 DD 23                inc ix
1867   11D2                      
1868   11D2 3E 24                ld a,'$'
1869   11D4 DD 77 00             ld (ix),a
1870   11D7                      
1871   11D7 DD E1                pop ix                                                                                                                                                                                           
1872   11D9 E1                   pop hl
1873   11DA D1                   pop de
1874   11DB C1                   pop bc
1875   11DC F1                   pop af
1876   11DD C9                   ret
1877   11DE                      
1878   11DE 3E 20       getBo_:  ld a,' '
1879   11E0 DD 77 00             ld (ix),a
1880   11E3 DD 23                inc ix
1881   11E5 C9                   ret         
1882   11E6 3E 2D       getBoM:  ld a,'-'
1883   11E8 DD 77 00             ld (ix),a
1884   11EB DD 23                inc ix
1885   11ED C9                   ret         
1886   11EE                      
1887   11EE             
1888   11EE             ;END
1889   11EE             
1890   11EE             ;BEGIN of ========== BOARD printing out
1891   11EE             
1892   11EE             BoardOut:
1893   11EE 2E 2E 2E 2E         .byte "........", 13, 10   ;output string
1893   11F2 2E 2E 2E 2E 
1893   11F6 0D 0A 
1894   11F8 2E 2E 2E 2E         .byte "........", 13, 10
1894   11FC 2E 2E 2E 2E 
1894   1200 0D 0A 
1895   1202 2E 2E 2E 2E         .byte "........", 13, 10
1895   1206 2E 2E 2E 2E 
1895   120A 0D 0A 
1896   120C 2E 2E 2E 2E         .byte "........", 13, 10
1896   1210 2E 2E 2E 2E 
1896   1214 0D 0A 
1897   1216 2E 2E 2E 2E         .byte "........", 13, 10
1897   121A 2E 2E 2E 2E 
1897   121E 0D 0A 
1898   1220 2E 2E 2E 2E         .byte "........", 13, 10
1898   1224 2E 2E 2E 2E 
1898   1228 0D 0A 
1899   122A 2E 2E 2E 2E         .byte "........", 13, 10
1899   122E 2E 2E 2E 2E 
1899   1232 0D 0A 
1900   1234 2E 2E 2E 2E         .byte "........", 13, 10
1900   1238 2E 2E 2E 2E 
1900   123C 0D 0A 
1901   123E 24 00               .byte "$", 0   
1902   1240                     
1903   1240             printBOARD:
1904   1240 F5                   push af
1905   1241 C5                   push bc
1906   1242 D5                   push de
1907   1243 E5                   push hl
1908   1244 06 08                ld b, 8
1909   1246 CD 70 12             call SetSqScan
1910   1249 11 EE 11             ld de, BoardOut
1911   124C             printBoardLine:
1912   124C 0E 08                ld c, 8
1913   124E             printCharsInLine:         
1914   124E CD 79 12             call ScanSqNxt
1915   1251 7E                   ld a, (hl)
1916   1252 FE 00                cp 0
1917   1254 20 02                jr nz, printCh1
1918   1256 3E 20                ld a, ' '            ; Empty square     
1919   1258             printCh1:
1920   1258 12                   ld (de), a
1921   1259 13                   inc de
1922   125A 0D                   dec c
1923   125B 79                   ld a,c
1924   125C FE 00                cp 0
1925   125E 20 EE                jr nz, printCharsInLine   ; 8x8
1926   1260 13                   inc de                    ; chr(13)+chr(10)
1927   1261 13                   inc de
1928   1262 10 E8                djnz printBoardLine
1929   1264             
1930   1264 11 EE 11             ld de, BoardOut
1931   1267 CD 8F 2A             call PrintString
1932   126A             
1933   126A E1                   pop hl
1934   126B D1                   pop de
1935   126C C1                   pop bc
1936   126D F1                   pop af
1937   126E C9                   ret
1938   126F             ;END
1939   126F             
1940   126F             
1941   126F             ;BEGIN of ========== BOARD scanning A1,B1,...,H1,A2,B2...,H8
1942   126F             
1943   126F             ; board order on screen or FEN notation is A8,B8,...,H8,A7,B7.... H1
1944   126F             ; so we go to square 57 then scan to 63, then jump to 49 ... till last square is 7 
1945   126F             
1946   126F 00          ScanSqC:  .byte 0   ;counter 1..8, reg HL contains pointer to BOARD square 
1947   1270             
1948   1270             SetSqScan:
1949   1270 21 6F 12             ld hl, ScanSqC
1950   1273 36 00                ld (hl),0              ; +1 for first loop 
1951   1275 21 77 01             ld hl, BOARD+64-8-1
1952   1278 C9                   ret
1953   1279             ScanSqNxt:
1954   1279 F5                   push af         
1955   127A C5                   push bc
1956   127B DD E5                push ix
1957   127D DD 21 6F 12          ld ix, ScanSqC
1958   1281 DD 34 00             inc (ix)
1959   1284 DD 7E 00             ld a,(ix)
1960   1287 FE 09                cp 8+1
1961   1289 28 06                jr z, ScanSqNxtRow
1962   128B 23                   inc hl                 ;just next square
1963   128C             retSqScan:         
1964   128C DD E1                pop ix
1965   128E C1                   pop bc
1966   128F F1                   pop af
1967   1290 C9                   ret
1968   1291             ScanSqNxtRow:
1969   1291 3E 01                ld a,1
1970   1293 DD 77 00             ld (ix),a
1971   1296 01 0F 00             ld bc, 8+7           ;square of previous row, -7
1972   1299 37                   scf
1973   129A 3F                   ccf
1974   129B ED 42                sbc hl, bc           ;there is no sub oper., so we use sbc                          
1975   129D 18 ED                jr retSqScan
1976   129F             GetScanSQ:                   ; returns current square I
1977   129F C5                   push bc
1978   12A0 E5                   push hl
1979   12A1 01 40 01             ld bc, BOARD
1980   12A4 37                   scf
1981   12A5 3F                   ccf
1982   12A6 ED 42                sbc hl, bc          ; difference BOARD - hl-reg
1983   12A8                       
1984   12A8 E5                   push hl
1985   12A9 C1                   pop bc
1986   12AA 79                   ld a,c              ; will contain square Nr.
1987   12AB E1                   pop hl
1988   12AC C1                   pop bc
1989   12AD C9                   ret
1990   12AE             
1991   12AE             ;END
1992   12AE             
1993   12AE             
1994   12AE             ;BEGIN of ========== KING CHECK+ DETECTION
1995   12AE             ;
1996   12AE             ; on return a-reg 1-is check, 0-not check
1997   12AE             ;
1998   12AE 00          SQ_ck_i:      .byte 0   ; storing to restore later  
1999   12AF 00          SQ_ck_t:      .byte 0
2000   12B0 00          CastlMove_ck: .byte 0
2001   12B1 00          PromoPcId_ck: .byte 0
2002   12B2 00          CaptPiece_ck: .byte 0
2003   12B3             
2004   12B3             IsCheck:
2005   12B3 FD E5               push iy
2006   12B5 E5                  push hl
2007   12B6                     
2008   12B6 3A 91 0E            ld a,(CastlMove)
2009   12B9 32 B0 12            ld (CastlMove_ck),a
2010   12BC 3A 90 0E            ld a,(PromoPcId)
2011   12BF 32 B1 12            ld (PromoPcId_ck),a
2012   12C2 3A 8F 0E            ld a,(CaptPiece)
2013   12C5 32 B2 12            ld (CaptPiece_ck),a
2014   12C8                             
2015   12C8 3E 00               ld a,0    
2016   12CA 32 91 0E            ld (CastlMove),a
2017   12CD 32 90 0E            ld (PromoPcId),a
2018   12D0 32 8F 0E            ld (CaptPiece),a 
2019   12D3                                   
2020   12D3 3A 8D 08            ld a, (SQi)      ; save
2021   12D6 32 AE 12            ld (SQ_ck_i),a
2022   12D9 3A 8E 08            ld a, (SQt)
2023   12DC 32 AF 12            ld (SQ_ck_t),a
2024   12DF 3A 81 01            ld a, (SIDE)
2025   12E2 FE 00               cp 0
2026   12E4 20 05               jr nz,IsCkBlack
2027   12E6 3A 84 01            ld a,(WKSQ)
2028   12E9 18 03               jr IsChSt
2029   12EB             IsCkBlack:
2030   12EB 3A 85 01            ld a,(BKSQ)        
2031   12EE             IsChSt: 
2032   12EE 32 8E 08            ld (SQt),a      
2033   12F1 32 8D 08            ld (SQi),a
2034   12F4 CD 62 17            call MM_hl        ; position hl to the square of king
2035   12F7                                     
2036   12F7 E5                  push hl
2037   12F8 FD E1               pop iy            ; contains square of king
2038   12FA                     
2039   12FA CD 26 13            call ValidateKingCheck
2040   12FD F5                  push af
2041   12FE                     
2042   12FE 3A AE 12            ld a, (SQ_ck_i)  ;restore
2043   1301 32 8D 08            ld (SQi),a
2044   1304 3A AF 12            ld a, (SQ_ck_t)
2045   1307 32 8E 08            ld (SQt),a
2046   130A                     
2047   130A 3A B0 12            ld a,(CastlMove_ck)
2048   130D 32 91 0E            ld (CastlMove),a
2049   1310 3A B1 12            ld a,(PromoPcId_ck)
2050   1313 32 90 0E            ld (PromoPcId),a
2051   1316 3A B2 12            ld a,(CaptPiece_ck)
2052   1319 32 8F 0E            ld (CaptPiece),a
2053   131C                     
2054   131C F1                  pop af
2055   131D                     
2056   131D E1                  pop hl
2057   131E FD E1               pop iy
2058   1320 C9                  ret        
2059   1321                     
2060   1321             ;END
2061   1321             
2062   1321             
2063   1321             ;BEGIN of ========== VALIDATE KING CHECK
2064   1321             ;
2065   1321             ; Usually king validation is done by opposit movement generation with king capture detection.
2066   1321             ; As it takes long to try all moves, we better verify square-attackers.
2067   1321             ; This gives advantage that only really legal moves are in the list without further iterations.
2068   1321             ;
2069   1321             ; on return a=0 on valid move, 1-not valid
2070   1321             
2071   1321 00          SQ_i:     .byte 0   
2072   1322 00          SQ_t:     .byte 0
2073   1323 00          SQ1:      .byte 0   ;contains flag that this square is nearby (+-1 sq)
2074   1324 00          SQk:      .byte 0   ;king square after movement
2075   1325 00          SQc:      .byte 0   ;square for castle checking
2076   1326             
2077   1326                       
2078   1326             ValidateKingCheck:
2079   1326                                   
2080   1326 C5                   push bc
2081   1327 D5                   push de
2082   1328 E5                   push hl
2083   1329 DD E5                push ix
2084   132B                      
2085   132B FD E5                push iy
2086   132D E1                   pop hl              ;set back pointer to square of piece
2087   132E                      
2088   132E 3A 8E 08             ld a,(SQt)          ;save values
2089   1331 32 22 13             ld (SQ_t),a
2090   1334 3A 8D 08             ld a,(SQi)
2091   1337 32 21 13             ld (SQ_i),a
2092   133A                      
2093   133A 3A 8D 08             ld a,(SQi)
2094   133D 47                   ld b,a
2095   133E 3A 84 01             ld a,(WKSQ)
2096   1341 B8                   cp b
2097   1342 20 05                jr nz,V_notWKing
2098   1344 32 24 13             ld (SQk),a                                  
2099   1347 18 2B                jr V_ifCastl       ; castling of white king?
2100   1349             V_notWKing:
2101   1349 3A 85 01             ld a,(BKSQ)
2102   134C B8                   cp b
2103   134D 20 05                jr nz,V_notKing
2104   134F 32 24 13             ld (SQk),a
2105   1352 18 20                jr V_ifCastl       ; castling of black king?
2106   1354             V_notKing:
2107   1354 3A 81 01             ld a,(SIDE)
2108   1357 FE 00                cp 0
2109   1359 20 08                jr nz, V_blackPc
2110   135B 3A 84 01             ld a,(WKSQ)
2111   135E 32 24 13             ld (SQk),a 
2112   1361 18 06                jr V_Pc1
2113   1363             V_blackPc:
2114   1363 3A 85 01             ld a,(BKSQ)
2115   1366 32 24 13             ld (SQk),a
2116   1369 47          V_Pc1:   ld b,a
2117   136A CD EC 13             call V_hl_setpos   ; new position of hl at square of king
2118   136D CD 10 14             call ValidateKSq   ; if check after movement to?        
2119   1370 30 64                jr nc,KgNotValid  
2120   1372 18 5E                jr KgIsValid                  
2121   1374             V_ifCastl:                         
2122   1374 3A 91 0E             ld a, (CastlMove)
2123   1377 FE 00                cp 0
2124   1379 28 4B                jr z, V_noCastl
2125   137B                      
2126   137B 78                   ld a,b
2127   137C 32 25 13             ld (SQc),a
2128   137F                                        ; castling, b-reg contains king position already
2129   137F CD 10 14             call ValidateKSq  ; if check?
2130   1382 30 52                jr nc,KgNotValid
2131   1384             
2132   1384 3A 25 13             ld a,(SQc)
2133   1387 47                   ld b,a                
2134   1388 3A 22 13             ld a,(SQ_t)
2135   138B B8                   cp b
2136   138C 38 1C                jr c, V_decWCstl
2137   138E                                        
2138   138E CD A0 13             call V_CstlInc
2139   1391 CD 10 14             call ValidateKSq  ; f1,f8 under check?
2140   1394 30 40                jr nc,KgNotValid
2141   1396                      
2142   1396 CD A0 13             call V_CstlInc
2143   1399 CD 10 14             call ValidateKSq  ; g1,g8 under check?
2144   139C 30 38                jr nc,KgNotValid
2145   139E                      
2146   139E 18 32                jr KgIsValid
2147   13A0                      
2148   13A0             V_CstlInc:
2149   13A0 3A 25 13             ld a,(SQc)
2150   13A3 3C                   inc a
2151   13A4 32 25 13             ld (SQc),a
2152   13A7 47                   ld b,a
2153   13A8 23                   inc hl
2154   13A9 C9                   ret   
2155   13AA                               
2156   13AA             V_decWCstl:
2157   13AA CD BC 13             call V_CstlDec
2158   13AD CD 10 14             call ValidateKSq  ; d1,d8 under check?
2159   13B0 30 24                jr nc,KgNotValid
2160   13B2                      
2161   13B2 CD BC 13             call V_CstlDec
2162   13B5 CD 10 14             call ValidateKSq  ; c1,c8 under check?
2163   13B8 30 1C                jr nc,KgNotValid
2164   13BA                      
2165   13BA 18 16                jr KgIsValid
2166   13BC             
2167   13BC             V_CstlDec:
2168   13BC 3A 25 13             ld a,(SQc)
2169   13BF 3D                   dec a
2170   13C0 32 25 13             ld (SQc),a
2171   13C3 47                   ld b,a
2172   13C4 2B                   dec hl
2173   13C5 C9                   ret 
2174   13C6                               
2175   13C6             V_noCastl:
2176   13C6 3A 8E 08             ld a,(SQt)        ; move to under check?
2177   13C9 47                   ld b,a
2178   13CA CD EC 13             call V_hl_setpos  ; new position of hl at square of king         
2179   13CD CD 10 14             call ValidateKSq
2180   13D0 30 04                jr nc,KgNotValid                          
2181   13D2             
2182   13D2             KgIsValid:         
2183   13D2 3E 00                ld a,0
2184   13D4 18 02                jr KgVret         
2185   13D6             KgNotValid:
2186   13D6 3E 01                ld a,1
2187   13D8             KgVret:
2188   13D8             
2189   13D8 F5                   push af
2190   13D9 3A 22 13             ld a,(SQ_t)          ;restore values
2191   13DC 32 8E 08             ld (SQt),a
2192   13DF 3A 21 13             ld a,(SQ_i)
2193   13E2 32 8D 08             ld (SQi),a
2194   13E5 F1                   pop af
2195   13E6                      
2196   13E6 DD E1                pop ix
2197   13E8 E1                   pop hl
2198   13E9 D1                   pop de
2199   13EA C1                   pop bc
2200   13EB C9                   ret
2201   13EC                                                                                                                                              
2202   13EC             ; reposition of hl pointer to square, by calculation
2203   13EC             V_hl_setpos:
2204   13EC C5                   push bc
2205   13ED 78                   ld a,b
2206   13EE 32 8D 08             ld (SQi),a
2207   13F1                      
2208   13F1 06 00                ld b,0
2209   13F3 3A 21 13             ld a,(SQ_i)
2210   13F6 4F                   ld c,a
2211   13F7 3A 8D 08             ld a,(SQi)
2212   13FA 91                   sub c
2213   13FB 38 04                jr c, V_StDistNeg
2214   13FD 4F                   ld c,a
2215   13FE 09                   add hl,bc              ;new hl position sq-forward
2216   13FF 18 0D                jr V_hl_rdy1
2217   1401             V_StDistNeg:
2218   1401 3A 8D 08             ld a,(SQi)
2219   1404 4F                   ld c,a
2220   1405 3A 21 13             ld a,(SQ_i)         
2221   1408 91                   sub c
2222   1409 4F                   ld c,a                         
2223   140A 37                   scf
2224   140B 3F                   ccf
2225   140C ED 42                sbc hl,bc              ;new hl position sq-backward
2226   140E             V_hl_rdy1:
2227   140E C1                   pop bc
2228   140F C9                   ret
2229   1410             
2230   1410             ; detect if given square (in b) is under attack of opponent
2231   1410               
2232   1410             ValidateKSq:
2233   1410                                               
2234   1410 78                   ld a,b
2235   1411 32 8D 08             ld (SQi),a
2236   1414             
2237   1414 CD 43 09             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]  
2238   1417                                                                
2239   1417                      ; try to attack this square in SQi (threat comes from SQt)
2240   1417             
2241   1417                      ; diognals
2242   1417 DD 21 84 0B          ld ix,bishopMoves
2243   141B 06 04                ld b, 4
2244   141D                      
2245   141D             DiognalScan4directions:
2246   141D             
2247   141D D5                   push de
2248   141E 3E 01                ld a,1
2249   1420 32 23 13             ld (SQ1),a
2250   1423             DiognalLoop:
2251   1423 CD 78 14             call DiognalAttacks
2252   1426 FE 00                cp 0
2253   1428 28 F9                jr z,DiognalLoop
2254   142A D1                   pop de
2255   142B FE 02                cp 2
2256   142D 28 46                jr z,NotValidKgSq
2257   142F                                       
2258   142F DD 23                inc ix
2259   1431 DD 23                inc ix
2260   1433 DD 23                inc ix
2261   1435 DD 23                inc ix
2262   1437                      
2263   1437 10 E4                djnz DiognalScan4directions        
2264   1439                      
2265   1439                      ; horizontals and verticals       
2266   1439 DD 21 CB 0A          ld ix,rookMoves
2267   143D 06 04                ld b, 4
2268   143F                      
2269   143F             HorzVertScan4directions:
2270   143F             
2271   143F D5                   push de
2272   1440 3E 01                ld a,1
2273   1442 32 23 13             ld (SQ1),a
2274   1445             HorzVertLoop:
2275   1445 CD 52 15             call HorzVertAttacks
2276   1448 FE 00                cp 0
2277   144A 28 F9                jr z,HorzVertLoop
2278   144C D1                   pop de
2279   144D FE 02                cp 2
2280   144F 28 24                jr z,NotValidKgSq
2281   1451                           
2282   1451 DD 23                inc ix
2283   1453 DD 23                inc ix
2284   1455 DD 23                inc ix
2285   1457 DD 23                inc ix
2286   1459                      
2287   1459 10 E4                djnz HorzVertScan4directions
2288   145B             
2289   145B                      ; knights       
2290   145B DD 21 35 0C          ld ix, knightMoves
2291   145F 06 08                ld b, 8
2292   1461             VKnightScan8moves:
2293   1461 CD 18 16             call KnightAttacks
2294   1464 FE 02                cp 2
2295   1466 28 0D                jr z,NotValidKgSq
2296   1468 DD 23                inc ix
2297   146A DD 23                inc ix
2298   146C DD 23                inc ix
2299   146E DD 23                inc ix
2300   1470 10 EF                djnz VKnightScan8moves
2301   1472                      
2302   1472             ValidKgSq:
2303   1472 37                   scf
2304   1473 18 02                jr ValidKgSqRet
2305   1475             NotValidKgSq:
2306   1475 37                   scf
2307   1476 3F                   ccf
2308   1477             ValidKgSqRet:
2309   1477 C9                   ret
2310   1478             
2311   1478             
2312   1478             ; look for diognal-attacks to that direction
2313   1478             DiognalAttacks:
2314   1478             
2315   1478 C5                   push bc
2316   1479 E5                   push hl
2317   147A DD E5                push ix
2318   147C                                       
2319   147C DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1
2320   147F DD 23                inc ix
2321   1481 FE 2D                cp '-'
2322   1483 28 08                jr z, V_BsNegX      
2323   1485 7A                   ld a,d
2324   1486 3C                   inc a           ;a=direction +1 of X 
2325   1487 FE 08                cp 8
2326   1489 30 66                jr nc, V_BsSt
2327   148B 18 09                jr V_BsCanOk1  
2328   148D             V_BsNegX:
2329   148D 3E 00                ld a,0          ;a=direction -1 of X
2330   148F BA                   cp d
2331   1490 38 02                jr c, V_BsCanSubtrX
2332   1492 18 5D                jr V_BsSt
2333   1494             V_BsCanSubtrX:         
2334   1494 7A                   ld a,d
2335   1495 3D                   dec a 
2336   1496             V_BsCanOk1:
2337   1496 57                   ld d,a         
2338   1497 DD 23                inc ix
2339   1499                      
2340   1499 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1
2341   149C DD 23                inc ix
2342   149E FE 2D                cp '-'
2343   14A0 28 08                jr z, V_BsNegY
2344   14A2 7B                   ld a,e
2345   14A3 3C                   inc a          ;a=direction +1 of Y  
2346   14A4 FE 08                cp 8
2347   14A6 30 49                jr nc, V_BsSt
2348   14A8 18 09                jr V_BsCanOk2   
2349   14AA             V_BsNegY:
2350   14AA 3E 00                ld a,0         ;a=direction -1 of Y
2351   14AC BB                   cp e
2352   14AD 38 02                jr c, V_BsCanSubtrY
2353   14AF 18 40                jr V_BsSt
2354   14B1             V_BsCanSubtrY:         
2355   14B1 7B                   ld a, e
2356   14B2 3D                   dec a
2357   14B3             V_BsCanOk2:
2358   14B3 5F                   ld e,a
2359   14B4 DD 23                inc ix         
2360   14B6                      
2361   14B6 CD 54 09             call StoreSqToMove    ;new SQt,hl        
2362   14B9                      
2363   14B9 3A 8E 08             ld a, (SQt)
2364   14BC 47                   ld b,a
2365   14BD 3A 21 13             ld a, (SQ_i)
2366   14C0 B8                   cp b
2367   14C1 28 5C                jr z,V_cont           ; if piece is on that square then will be empty
2368   14C3 3A 22 13             ld a, (SQ_t)
2369   14C6 B8                   cp b
2370   14C7 28 1E                jr z,V_IsThisK       ; if piece goes to that square
2371   14C9                                           ; then if piece is not king then
2372   14C9                                           ; our king is protected                             
2373   14C9 CD 3B 0E             call IsEmpty
2374   14CC 38 51                jr c,V_cont       
2375   14CE                      
2376   14CE 3A 81 01             ld a, (SIDE)
2377   14D1 FE 01                cp 1
2378   14D3 28 4E                jr z,V_BsThisBlack
2379   14D5                      
2380   14D5             V_BsThisWhite:         
2381   14D5 CD 70 0E             call IsBlack           ; enemy?
2382   14D8 30 37                jr nc,V_NoBlack
2383   14DA                      
2384   14DA FE 6B                cp 'k'
2385   14DC 20 17                jr nz, V_NoBK
2386   14DE                      
2387   14DE 3A 23 13    V_Sq1:   ld a, (SQ1)            ; nearby square
2388   14E1 FE 01                cp 1
2389   14E3 20 0C                jr nz,V_BsSt
2390   14E5 18 26                jr V_dont              ; king or pawn beats 
2391   14E7                      
2392   14E7             V_IsThisK:                      ; king can not protect self
2393   14E7 3A 24 13             ld a,(SQk)
2394   14EA 47                   ld b,a
2395   14EB 3A 21 13             ld a,(SQ_i)
2396   14EE B8                   cp b
2397   14EF 28 2E                jr z, V_cont           ; our king goes to this direction, continue
2398   14F1                                             ; stop, our piece protects anyway
2399   14F1             
2400   14F1 3E 01       V_BsSt:  ld a,1                 ; stop to this direction, our piece protects king
2401   14F3 18 51                jr V_BsOver
2402   14F5                       
2403   14F5             V_NoBK:    
2404   14F5 FE 62                cp 'b'
2405   14F7 28 14                jr z, V_dont           ; bishop beats
2406   14F9 FE 71                cp 'q'
2407   14FB 28 10                jr z, V_dont           ; queen beats
2408   14FD FE 70                cp 'p'
2409   14FF 20 F0                jr nz, V_BsSt          ; otherwise knight and cant beat
2410   1501                      
2411   1501 3A 8D 08             ld a,(SQi)             ; pawn direction verif. black pawn is above
2412   1504 47                   ld b,a
2413   1505 3A 8E 08             ld a,(SQt)           
2414   1508 B8                   cp b
2415   1509 30 D3                jr nc,V_Sq1
2416   150B 18 E4                jr V_BsSt
2417   150D             
2418   150D 3E 02       V_dont:  ld a,2                 ; stop and not valid move, king in check+
2419   150F 18 35                jr V_BsOver 
2420   1511             V_NoBlack:
2421   1511 CD 51 0E             call IsWhite           ; our?
2422   1514 38 DB                jr c,V_BsSt
2423   1516 18 07                jr V_cont
2424   1518             V_NoWhite:
2425   1518 CD 70 0E             call IsBlack           ; our?
2426   151B 38 D4                jr c,V_BsSt
2427   151D 18 00                jr V_cont
2428   151F             V_cont:         
2429   151F 3E 00                ld a,0                 ; continue after to this direction
2430   1521 18 23                jr V_BsOver
2431   1523                              
2432   1523             V_BsThisBlack:         
2433   1523 CD 51 0E             call IsWhite           ; enemy?
2434   1526 30 F0                jr nc, V_NoWhite
2435   1528             
2436   1528 FE 4B                cp 'K'
2437   152A 20 02                jr nz, V_NoWK
2438   152C 18 B0                jr V_Sq1
2439   152E             V_NoWK:    
2440   152E FE 42                cp 'B'
2441   1530 28 DB                jr z, V_dont           ; bishop beats
2442   1532 FE 51                cp 'Q'
2443   1534 28 D7                jr z, V_dont           ; queen beats
2444   1536 FE 50                cp 'P'
2445   1538 20 B7                jr nz, V_BsSt          ; otherwise knight and cant beat
2446   153A                      
2447   153A 3A 8D 08             ld a,(SQi)             ; pawn direction verif. white pawn is below
2448   153D 47                   ld b,a
2449   153E 3A 8E 08             ld a,(SQt)           
2450   1541 B8                   cp b
2451   1542 38 9A                jr c,V_Sq1
2452   1544 18 AB                jr V_BsSt
2453   1546                    
2454   1546             V_BsOver:
2455   1546             
2456   1546 F5                   push af
2457   1547 3E 00                ld a,0
2458   1549 32 23 13             ld (SQ1),a      ;next square will be not nearby in that direction anyway
2459   154C F1                   pop af
2460   154D                      
2461   154D DD E1                pop ix
2462   154F E1                   pop hl
2463   1550 C1                   pop bc
2464   1551 C9                   ret 
2465   1552             
2466   1552             ; look for horizontal-vertical-attacks to that direction
2467   1552             HorzVertAttacks:
2468   1552             
2469   1552 C5                   push bc
2470   1553 E5                   push hl
2471   1554 DD E5                push ix
2472   1556                               
2473   1556 DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,=0
2474   1559 DD 23                inc ix
2475   155B FE 3D                cp '='
2476   155D 28 16                jr z, V_RkZero1
2477   155F FE 2D                cp '-'
2478   1561 28 08                jr z, V_RkNegX      
2479   1563 7A                   ld a,d
2480   1564 3C                   inc a           ;a=direction +1 of X 
2481   1565 FE 08                cp 8
2482   1567 30 66                jr nc, V_RkSt
2483   1569 18 09                jr V_RkCanOk1  
2484   156B             V_RkNegX:
2485   156B 3E 00                ld a,0          ;a=direction -1 of X
2486   156D BA                   cp d
2487   156E 38 02                jr c, V_RkCanSubtrX
2488   1570 18 5D                jr V_RkSt
2489   1572             V_RkCanSubtrX:         
2490   1572 7A                   ld a,d
2491   1573 3D                   dec a 
2492   1574             V_RkCanOk1:
2493   1574 57                   ld d,a         
2494   1575             V_RkZero1:
2495   1575 DD 23                inc ix 
2496   1577 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,=0
2497   157A DD 23                inc ix
2498   157C FE 3D                cp '='
2499   157E 28 16                jr z, V_RkZero2        
2500   1580 FE 2D                cp '-'
2501   1582 28 08                jr z, V_RkNegY
2502   1584 7B                   ld a,e
2503   1585 3C                   inc a          ;a=direction +1 of Y  
2504   1586 FE 08                cp 8
2505   1588 30 45                jr nc, V_RkSt
2506   158A 18 09                jr V_RkCanOk2   
2507   158C             V_RkNegY:
2508   158C 3E 00                ld a,0         ;a=direction -1 of Y
2509   158E BB                   cp e
2510   158F 38 02                jr c, V_RkCanSubtrY
2511   1591 18 3C                jr V_RkSt
2512   1593             V_RkCanSubtrY:         
2513   1593 7B                   ld a, e
2514   1594 3D                   dec a
2515   1595             V_RkCanOk2:
2516   1595 5F                   ld e,a
2517   1596             V_RkZero2:
2518   1596 DD 23                inc ix         
2519   1598                      
2520   1598 CD 54 09             call StoreSqToMove    ;new SQt,hl
2521   159B                             
2522   159B 3A 8E 08             ld a, (SQt)
2523   159E 47                   ld b,a
2524   159F 3A 21 13             ld a, (SQ_i)
2525   15A2 B8                   cp b
2526   15A3 28 26                jr z,V_Rkcont           ; if piece is on that square then will be empty
2527   15A5 3A 22 13             ld a, (SQ_t)
2528   15A8 B8                   cp b
2529   15A9 28 28                jr z,V_RkIsThisK       ; if piece goes to that square
2530   15AB                                             ; then if piece is not king then
2531   15AB                                             ; our king is protected
2532   15AB CD 3B 0E             call IsEmpty
2533   15AE 38 1B                jr c,V_Rkcont
2534   15B0                      
2535   15B0 3A 81 01             ld a, (SIDE)
2536   15B3 FE 01                cp 1
2537   15B5 28 40                jr z,V_RkThisBlack
2538   15B7                      
2539   15B7             V_RkThisWhite:         
2540   15B7 CD 70 0E             call IsBlack           ; enemy?
2541   15BA 30 2D                jr nc,V_RkNoBlack
2542   15BC                      
2543   15BC FE 6B                cp 'k'
2544   15BE 20 1F                jr nz, V_RkNoBK
2545   15C0                      
2546   15C0 3A 23 13    V_RkSq1: ld a, (SQ1)            ; nearby square
2547   15C3 FE 01                cp 1
2548   15C5 20 08                jr nz,V_RkSt
2549   15C7                      ;otherwise king beats our king
2550   15C7                      
2551   15C7             V_Rkdont:
2552   15C7 3E 02                ld a,2                 ; stop and not valid move, king in check+
2553   15C9 18 41                jr V_RkOver
2554   15CB             V_Rkcont:         
2555   15CB 3E 00                ld a,0                 ; continue after to this direction
2556   15CD 18 3D                jr V_RkOver
2557   15CF                      
2558   15CF 3E 01       V_RkSt:  ld a,1                 ; stop to this direction, our piece protects king
2559   15D1 18 39                jr V_RkOver
2560   15D3                                
2561   15D3             V_RkIsThisK:                    ; king can not protect itself
2562   15D3 3A 24 13             ld a,(SQk)
2563   15D6 47                   ld b,a
2564   15D7 3A 21 13             ld a,(SQ_i)
2565   15DA B8                   cp b
2566   15DB 28 EE                jr z, V_Rkcont         ; our king goes to this direction, continue
2567   15DD                                             ; stop, our piece protects anyway
2568   15DD 18 F0                jr V_RkSt                       
2569   15DF                       
2570   15DF             V_RkNoBK:    
2571   15DF FE 72                cp 'r'
2572   15E1 28 E4                jr z, V_Rkdont           ; rook beats
2573   15E3 FE 71                cp 'q'
2574   15E5 28 E0                jr z, V_Rkdont           ; queen beats
2575   15E7 18 E6                jr V_RkSt                ; otherwise can not beat
2576   15E9             V_RkNoBlack:
2577   15E9 CD 51 0E             call IsWhite           ; our?
2578   15EC 38 E1                jr c,V_RkSt
2579   15EE 18 DB                jr V_Rkcont
2580   15F0             V_RkNoWhite:
2581   15F0 CD 70 0E             call IsBlack           ; our?
2582   15F3 38 DA                jr c,V_RkSt
2583   15F5 18 D4                jr V_Rkcont                 
2584   15F7             V_RkThisBlack:         
2585   15F7 CD 51 0E             call IsWhite           ; enemy?
2586   15FA 30 F4                jr nc,V_RkNoWhite
2587   15FC             
2588   15FC FE 4B                cp 'K'
2589   15FE 20 02                jr nz, V_RkNoWK
2590   1600 18 BE                jr V_RkSq1
2591   1602             V_RkNoWK:    
2592   1602 FE 52                cp 'R'
2593   1604 28 C1                jr z, V_Rkdont           ; rook beats
2594   1606 FE 51                cp 'Q'
2595   1608 28 BD                jr z, V_Rkdont           ; queen beats
2596   160A 18 C3                jr V_RkSt                ; otherwise can not beat  
2597   160C             
2598   160C             V_RkOver:
2599   160C F5                   push af
2600   160D 3E 00                ld a,0
2601   160F 32 23 13             ld (SQ1),a      ;next square will be not nearby in that direction anyway
2602   1612 F1                   pop af
2603   1613                      
2604   1613 DD E1                pop ix
2605   1615 E1                   pop hl
2606   1616 C1                   pop bc
2607   1617 C9                   ret 
2608   1618             
2609   1618             ; look for knight-attack
2610   1618             KnightAttacks:
2611   1618 C5                   push bc
2612   1619 D5                   push de
2613   161A E5                   push hl
2614   161B DD E5                push ix
2615   161D                              
2616   161D DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,-2,+2
2617   1620 DD 23                inc ix
2618   1622 FE 2D                cp '-'
2619   1624 28 0A                jr z, V_KnNegX
2620   1626 DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of X      
2621   1629 82                   add a,d
2622   162A FE 08                cp 8
2623   162C 30 62                jr nc, V_KnNo
2624   162E 18 0D                jr V_KnCanOk1  
2625   1630             V_KnNegX:
2626   1630 DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of X
2627   1633 3D                   dec a
2628   1634 BA                   cp d
2629   1635 38 02                jr c, V_KnCanSubtrX
2630   1637 18 57                jr V_KnNo
2631   1639             V_KnCanSubtrX:         
2632   1639 7A                   ld a, d
2633   163A DD 96 00             sub (ix)    
2634   163D             V_KnCanOk1:
2635   163D 57                   ld d,a         
2636   163E DD 23                inc ix
2637   1640                      
2638   1640 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,-2,+2
2639   1643 DD 23                inc ix
2640   1645 FE 2D                cp '-'
2641   1647 28 0A                jr z, V_KnNegY
2642   1649 DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of Y  
2643   164C 83                   add a,e
2644   164D FE 08                cp 8
2645   164F 30 3F                jr nc, V_KnNo
2646   1651 18 0D                jr V_KnCanOk2   
2647   1653             V_KnNegY:
2648   1653 DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of Y
2649   1656 3D                   dec a 
2650   1657 BB                   cp e
2651   1658 38 02                jr c, V_KnCanSubtrY
2652   165A 18 34                jr V_KnNo
2653   165C             V_KnCanSubtrY:         
2654   165C 7B                   ld a, e
2655   165D DD 96 00             sub (ix)
2656   1660             V_KnCanOk2:
2657   1660 5F                   ld e, a
2658   1661 DD 23                inc ix         
2659   1663                      
2660   1663 CD 54 09             call StoreSqToMove    ;new SQt,hl
2661   1666                             
2662   1666 CD 3B 0E             call IsEmpty
2663   1669 38 25                jr c,V_KnNo
2664   166B                      
2665   166B 3A 8E 08             ld a, (SQt)
2666   166E 47                   ld b,a
2667   166F 3A 22 13             ld a, (SQ_t)
2668   1672 B8                   cp b
2669   1673 20 02                jr nz, V_KnIsKn
2670   1675 18 19                jr V_KnNo              ; we beat this piece
2671   1677             
2672   1677             V_KnIsKn:         
2673   1677 3A 81 01             ld a, (SIDE)
2674   167A FE 01                cp 1
2675   167C 28 07                jr z, V_KnThisKingBlack
2676   167E             V_KnThisKingWhite:         
2677   167E 7E                   ld a,(hl)
2678   167F FE 6E                cp 'n'                 ; knight?
2679   1681 28 09                jr z,V_Kndont
2680   1683 18 0B                jr V_KnNo              ; otherwise our
2681   1685             V_KnThisKingBlack:         
2682   1685 7E                   ld a,(hl)
2683   1686 FE 4E                cp 'N'                 ; knight?
2684   1688 28 02                jr z,V_Kndont
2685   168A 18 04                jr V_KnNo              ; otherwise our    
2686   168C             V_Kndont:
2687   168C 3E 02                ld a,2                 ; not valid move, king in check+
2688   168E 18 02                jr V_KnOver
2689   1690             V_KnNo:         
2690   1690 3E 00                ld a,0                 ; not attacked
2691   1692             V_KnOver:
2692   1692 DD E1                pop ix
2693   1694 E1                   pop hl
2694   1695 D1                   pop de
2695   1696 C1                   pop bc
2696   1697 C9                   ret 
2697   1698             ;END
2698   1698             
2699   1698             
2700   1698             ;BEGIN of ========== MAKE MOVE
2701   1698             ;
2702   1698             ; Make move on BOARD
2703   1698             ; SQi - from square
2704   1698             ; SQt - to square
2705   1698             ; PromoPcId - id of piece to promote = 4-queen,3-rook,2-bishop,1-knight, 0-no promotion
2706   1698             ;
2707   1698             
2708   1698             MakeMove:
2709   1698             
2710   1698 F5                   push af
2711   1699 C5                   push bc
2712   169A D5                   push de
2713   169B E5                   push hl
2714   169C DD E5                push ix
2715   169E FD E5                push iy
2716   16A0                      
2717   16A0 DD 21 F2 02          ld ix, NEXT_MVCNT
2718   16A4 DD 46 00             ld b,(ix)
2719   16A7 DD 21 F3 02          ld ix, NEXT_MOVES
2720   16AB 78                   ld a, b
2721   16AC FE 00                cp 0
2722   16AE 20 02                jr nz, MKMthereAre
2723   16B0             
2724   16B0 18 75                jr fMKMEnd
2725   16B2                      
2726   16B2             MKMthereAre: 
2727   16B2 1E 00                ld e,0       ; flag that found
2728   16B4             
2729   16B4             MKMToLoop:
2730   16B4 C5                   push bc
2731   16B5 DD E5                push ix
2732   16B7             
2733   16B7 DD 7E 00             ld a, (ix)   ; notated piece
2734   16BA 57                   ld d,a
2735   16BB DD 23                inc ix
2736   16BD             
2737   16BD 3A 8D 08             ld a, (SQi)
2738   16C0 47                   ld b,a
2739   16C1 DD 7E 00             ld a, (ix)   ; from square
2740   16C4 B8                   cp b
2741   16C5 20 7B                jr nz, MKMnotMV
2742   16C7                      
2743   16C7 DD 23                inc ix            
2744   16C9 3A 8E 08             ld a, (SQt)
2745   16CC 4F                   ld c,a
2746   16CD DD 7E 00             ld a, (ix)   ; to square
2747   16D0 B9                   cp c
2748   16D1 20 6F                jr nz, MKMnotMV
2749   16D3                      
2750   16D3 CD 70 17             call MKifPromoTheSame ; verifies if promoted piece the same in list
2751   16D6 FE 01                cp 1                  ; actually we can ignore it, because undo just places
2752   16D8 20 68                jr nz, MKMnotMV      ; back a pawn
2753   16DA                      
2754   16DA                      ; ok, this move. Let's do it
2755   16DA                      
2756   16DA CD 98 17             call MKMcastlesDO   ; saves castling flags and verifies rooks
2757   16DD                                                  
2758   16DD CD 81 18             call MKMsaveEPSQ
2759   16E0                      
2760   16E0 DD 2B                dec ix         
2761   16E2 DD 7E 00             ld a, (ix)   ; from square
2762   16E5 CD 62 17             call MM_hl
2763   16E8 7E                   ld a,(hl)
2764   16E9 57                   ld d,a       ; save piece
2765   16EA                      
2766   16EA CD 0E 18             call UpdateKingSQ   ; and castling flags too
2767   16ED                               
2768   16ED CD 6C 17             call MM_0    ; empty square now
2769   16F0                      
2770   16F0 DD 23                inc ix
2771   16F2 DD 7E 00             ld a, (ix)   ; to square
2772   16F5 CD 62 17             call MM_hl
2773   16F8                      
2774   16F8 D5                   push de
2775   16F9 56                   ld d,(hl)    ; save captured piece
2776   16FA                      
2777   16FA 7E                   ld a,(hl)
2778   16FB FE 00                cp 0
2779   16FD 28 03                jr z, MM_noCapture  ;en-passant is not in list
2780   16FF                      
2781   16FF CD AB 18             call MM_capt2list   ;should save last captured piece in list   
2782   1702                      
2783   1702             MM_noCapture:         
2784   1702                      
2785   1702 D1                   pop de       ; restore our piece
2786   1703                      
2787   1703 7A                   ld a,d
2788   1704 77                   ld (hl),a    ; just place our piece here
2789   1705                               
2790   1705 DD 23                inc ix
2791   1707 DD 7E 00             ld a, (ix)     ; flags
2792   170A CB 67                bit 4,a        ; castling
2793   170C 28 03                jr z,MMNoCastle
2794   170E                      
2795   170E CD BB 18             call  MMcastles          
2796   1711                                         
2797   1711             MMNoCastle:
2798   1711 DD 7E 00             ld a, (ix)     ; flags    
2799   1714 CB 4F                bit 1,a        ; possibly promotion
2800   1716 28 03                jr z, MMNoProm
2801   1718                      
2802   1718 CD 17 19             call MMPromotion ; put new piece on board         
2803   171B             MMNoProm:
2804   171B DD 7E 00             ld a, (ix)     ; flags
2805   171E CB 6F                bit 5,a        ; en-passant 
2806   1720 28 09                jr z,MMNoEP
2807   1722             
2808   1722 CD 48 19             call MMEnPass  ; en-passant capture
2809   1725 18 04                jr MMNoEP                                          
2810   1727             
2811   1727 18 2B       fMKMEnd: jr MKMEnd
2812   1729             
2813   1729 18 89       fMKMToLoop: jr MKMToLoop      ; jump far                                            
2814   172B                                                                                                                                                    
2815   172B             MMNoEP:                                         
2816   172B 1E 01                ld e,1         ; we found already
2817   172D                              
2818   172D CD FB 17             call Swap_Sides   ; Swap
2819   1730 CD B3 12             call IsCheck
2820   1733 FE 00                cp 0
2821   1735 28 08                jr z, MKMnoCheck
2822   1737                      
2823   1737 DD 7E 00             ld a, (ix)     ; flags
2824   173A CB F7                set 6,a        ; bit 6 - check
2825   173C DD 77 00             ld (ix),a      ; save to flags
2826   173F             MKMnoCheck:         
2827   173F                      
2828   173F CD A8 17             call MKMsave2Hist ; Save history
2829   1742             MKMnotMV:
2830   1742 DD E1                pop ix
2831   1744                      
2832   1744 DD 23                inc ix        ; piece
2833   1746 DD 23                inc ix        ; from
2834   1748 DD 23                inc ix        ; to
2835   174A DD 23                inc ix        ; flags
2836   174C             
2837   174C C1                   pop bc
2838   174D                      
2839   174D 7B                   ld a,e
2840   174E FE 01                cp 1
2841   1750 28 02                jr z, MKMEnd
2842   1752 10 D5                djnz fMKMToLoop
2843   1754             
2844   1754             MKMEnd:
2845   1754             
2846   1754 7B                   ld a,e
2847   1755 FE 00                cp 0
2848   1757 20 00                jr nz, MKMfoundmove
2849   1759             MKMfoundmove:
2850   1759 FD E1                pop iy                                                                                                   
2851   175B DD E1                pop ix
2852   175D E1                   pop hl
2853   175E D1                   pop de
2854   175F C1                   pop bc
2855   1760 F1                   pop af
2856   1761 C9                   ret
2857   1762                      
2858   1762             MM_hl:                        ; reposition of hl to square provided in a-reg
2859   1762 C5                   push bc
2860   1763 06 00                ld b,0
2861   1765 4F                   ld c,a
2862   1766 21 40 01             ld hl, BOARD
2863   1769 09                   add hl,bc            ; points to piece to move
2864   176A C1                   pop bc
2865   176B C9                   ret
2866   176C             
2867   176C 3E 00       MM_0:    ld a,0               ; empty square now 
2868   176E 77                   ld (hl),a 
2869   176F C9                   ret
2870   1770             
2871   1770             ; verifies promoted piece
2872   1770             MKifPromoTheSame:
2873   1770 C5                   push bc
2874   1771 3A 90 0E             ld a, (PromoPcId)
2875   1774 FE 00                cp 0
2876   1776 28 1C                jr z, MKsamePromo
2877   1778 3D                   dec a
2878   1779 47                   ld b,a
2879   177A DD 23                inc ix
2880   177C DD 7E 00             ld a, (ix)       ; flags
2881   177F 4F                   ld c,a
2882   1780 DD 2B                dec ix
2883   1782 CB 4F                bit 1,a
2884   1784 28 0E                jr z, MKsamePromo
2885   1786 79                   ld a,c
2886   1787 CB 3F                srl a
2887   1789 CB 3F                srl a
2888   178B E6 03                and 3
2889   178D B8                   cp b
2890   178E 28 04                jr z, MKsamePromo
2891   1790 3E 00                ld a,0
2892   1792 18 02                jr MKsamePover                           
2893   1794             MKsamePromo:
2894   1794 3E 01                ld a,1
2895   1796             MKsamePover:
2896   1796 C1                   pop bc
2897   1797 C9                   ret
2898   1798             
2899   1798             ; works on castling flags          
2900   1798             MKMcastlesDO:
2901   1798 F5                   push af
2902   1799 3A 82 01             ld a,(CASTLES)
2903   179C 32 AA 18             ld (Cstl2hist),a   ; save for history
2904   179F FE 00                cp 0
2905   17A1 28 03                jr z,MKMNoRvf
2906   17A3 CD 40 18             call MKMUpdateRookMvCapt
2907   17A6             MKMNoRvf:
2908   17A6 F1                   pop af         
2909   17A7 C9                   ret
2910   17A8             
2911   17A8             ; Saves move into history of moves made
2912   17A8             MKMsave2Hist:
2913   17A8 E5                   push hl
2914   17A9 C5                   push bc
2915   17AA 06 00                ld b,0
2916   17AC 3A 0B 04             ld a,(MOVE_CNT)
2917   17AF 4F                   ld c,a
2918   17B0 3C                   inc a
2919   17B1 32 0B 04             ld (MOVE_CNT),a
2920   17B4 21 0C 04             ld hl, MOVE_HIST
2921   17B7                      
2922   17B7 FE 3C                cp 60
2923   17B9 38 07                jr c,slowBcAdd1     
2924   17BB CB 21                sla c
2925   17BD CB 21                sla c      ; 4*c
2926   17BF                       ;1.byte = from sq
2927   17BF                       ;2.byte = to sq
2928   17BF                       ;3.byte = flags and promoted to
2929   17BF                       ;4.byte = castling flags, en-passant square before
2930   17BF 09                   add hl,bc
2931   17C0 18 04                jr overBcAdd1         
2932   17C2             slowBcAdd1:         
2933   17C2 09                   add hl,bc
2934   17C3 09                   add hl,bc
2935   17C4 09                   add hl,bc
2936   17C5 09                   add hl,bc
2937   17C6             overBcAdd1:         
2938   17C6                      
2939   17C6                               
2940   17C6 3A 8D 08             ld a,(SQi)
2941   17C9 77                   ld (hl),a  ; from
2942   17CA 23                   inc hl
2943   17CB 3A 8E 08             ld a,(SQt) ; to
2944   17CE 77                   ld (hl),a
2945   17CF 23                   inc hl
2946   17D0 DD 7E 00             ld a, (ix) ; flags with piece promoted
2947   17D3 77                   ld (hl),a  ;
2948   17D4 23                   inc hl
2949   17D5 3A A9 18             ld a,(EnPs2hist)
2950   17D8 FE FF                cp $ff
2951   17DA 28 0C                jr z,EnP0hs
2952   17DC FE 20                cp 32
2953   17DE 30 04                jr nc,EnPBlackHs
2954   17E0 D6 0F                sub 15    ;a3=1...h3=8
2955   17E2 18 06                jr EnPSvhs 
2956   17E4             EnPBlackHs:
2957   17E4 D6 1F                sub 31    ;a6=9...h6=16
2958   17E6 18 02                jr EnPSvhs
2959   17E8 3E 00       EnP0hs:  ld a,0
2960   17EA 47          EnPSvhs: ld b,a
2961   17EB 3A AA 18             ld a,(Cstl2hist)
2962   17EE CB 27                sla a           ; 4 shifts
2963   17F0 CB 27                sla a
2964   17F2 CB 27                sla a
2965   17F4 CB 27                sla a
2966   17F6 B0                   or b
2967   17F7 77                   ld (hl),a  ; save en-passant square and castling info that was before
2968   17F8 C1                   pop bc
2969   17F9 E1                   pop hl
2970   17FA C9                   ret
2971   17FB             
2972   17FB             ; Just swap both sides
2973   17FB             Swap_Sides:
2974   17FB F5                   push af
2975   17FC 3A 81 01             ld a,(SIDE)       ; swap sides
2976   17FF FE 00                cp 0
2977   1801 28 04                jr z,SwSdBl
2978   1803 3E 00                ld a,0
2979   1805 18 02                jr SwSdSt
2980   1807 3E 01       SwSdBl:  ld a,1
2981   1809 32 81 01    SwSdSt:  ld (SIDE),a
2982   180C F1                   pop af
2983   180D C9                   ret
2984   180E                      
2985   180E             ; save king square         
2986   180E             UpdateKingSQ:
2987   180E 7A                   ld a,d
2988   180F FE 4B                cp 'K'
2989   1811 20 16                jr nz,MKMnoWK1
2990   1813 79                   ld a,c
2991   1814 32 84 01             ld (WKSQ),a
2992   1817 FE 04                cp 4
2993   1819 28 0C                jr z,KingStillE1
2994   181B F5                   push af
2995   181C 3A 82 01             ld a,(CASTLES)
2996   181F E6 FC                and %11111100
2997   1821 32 82 01             ld (CASTLES),a
2998   1824 F1                   pop af         
2999   1825 18 18                jr MKMkingOut         
3000   1827             KingStillE1:         
3001   1827 18 16                jr MKMkingOut         
3002   1829             MKMnoWK1:          
3003   1829 FE 6B                cp 'k'
3004   182B 20 12                jr nz,MKMkingOut
3005   182D 79                   ld a,c
3006   182E 32 85 01             ld (BKSQ),a
3007   1831 FE 3C                cp 60
3008   1833 28 0A                jr z,KingStillE8
3009   1835 F5                   push af
3010   1836 3A 82 01             ld a,(CASTLES)
3011   1839 E6 F3                and %11110011
3012   183B 32 82 01             ld (CASTLES),a         
3013   183E F1                   pop af
3014   183F             KingStillE8:         
3015   183F                      
3016   183F             MKMkingOut:
3017   183F C9                   ret
3018   1840             
3019   1840             ; if rook has moved or has been captured, clear and save castling flags
3020   1840             MKMUpdateRookMvCapt:
3021   1840 D5                   push de
3022   1841 3A 82 01             ld a,(CASTLES)
3023   1844 57                   ld d,a
3024   1845 78                   ld a,b        ;from
3025   1846 CD 65 18             call MKMiWKK
3026   1849 CD 6C 18             call MKMiWKQ
3027   184C CD 73 18             call MKMiBKK
3028   184F CD 7A 18             call MKMiBKQ
3029   1852 79                   ld a,c        ;to
3030   1853 CD 65 18             call MKMiWKK
3031   1856 CD 6C 18             call MKMiWKQ
3032   1859 CD 73 18             call MKMiBKK
3033   185C CD 7A 18             call MKMiBKQ
3034   185F 7A                   ld a,d
3035   1860 32 82 01             ld (CASTLES),a
3036   1863 D1                   pop de
3037   1864 C9                   ret
3038   1865                      
3039   1865 FE 07       MKMiWKK: cp 7          ; is H1?
3040   1867 20 02                jr nz,MKMoWKK
3041   1869 CB 82                res 0,d       
3042   186B C9          MKMoWKK: ret
3043   186C FE 00       MKMiWKQ: cp 0          ; is A1?
3044   186E 20 02                jr nz,MKMoWKQ
3045   1870 CB 8A                res 1,d       
3046   1872 C9          MKMoWKQ: ret
3047   1873 FE 3F       MKMiBKK: cp 63         ; is H8?
3048   1875 20 02                jr nz,MKMoBKK
3049   1877 CB 92                res 2,d       
3050   1879 C9          MKMoBKK: ret
3051   187A FE 38       MKMiBKQ: cp 56         ; is A8?
3052   187C 20 02                jr nz,MKMoBKQ
3053   187E CB 9A                res 3,d       
3054   1880 C9          MKMoBKQ: ret
3055   1881             
3056   1881                       
3057   1881             
3058   1881                               
3059   1881             ; save new en-passant square
3060   1881             MKMsaveEPSQ:
3061   1881 3A 83 01             ld a,(ENPSQ)
3062   1884 32 A9 18             ld (EnPs2hist),a   ; save for history
3063   1887 3E FF                ld a,$ff
3064   1889 32 83 01             ld (ENPSQ),a
3065   188C 7A                   ld a,d
3066   188D FE 50                cp 'P'
3067   188F 20 17                jr nz, MKMnoeps
3068   1891 79                   ld a,c
3069   1892 D6 10                sub 16           ; are there 16 squares inbetween
3070   1894 B8                   cp b
3071   1895 28 08                jr z, MKMwEp     ; double move of white pawn
3072   1897                      ; try for black pawn
3073   1897 79                   ld a,c
3074   1898 C6 10                add a,16
3075   189A B8                   cp b
3076   189B 28 06                jr z, MKMbEp      ; double move of black pawn 
3077   189D 18 09                jr MKMnoeps
3078   189F C6 08       MKMwEp:  add a,8
3079   18A1 18 02                jr MKMsaveNewEp
3080   18A3 D6 08       MKMbEp:  sub 8
3081   18A5             MKMsaveNewEp:
3082   18A5 32 83 01             ld (ENPSQ),a
3083   18A8             MKMnoeps:
3084   18A8 C9                   ret                                    
3085   18A9             
3086   18A9 00          EnPs2hist: .byte 0        ; to save en-passant square for history later
3087   18AA             
3088   18AA 00          Cstl2hist: .byte 0        ; to save castling flags for history later
3089   18AB                                                                             
3090   18AB             ; saves captured piece in list         
3091   18AB             MM_capt2list:                      
3092   18AB E5                   push hl
3093   18AC 21 62 19             ld hl, UnMakeList
3094   18AF             MKMloop1:         
3095   18AF 7E                   ld a,(hl)
3096   18B0 FE 20                cp ' '
3097   18B2 28 03                jr z,MKMblankL1
3098   18B4 23                   inc hl
3099   18B5 18 F8                jr MKMloop1
3100   18B7             MKMblankL1:
3101   18B7 7A                   ld a,d
3102   18B8 77                   ld (hl),a       ; should save for next UnMakeMove      
3103   18B9 E1                   pop hl
3104   18BA C9                   ret
3105   18BB                      
3106   18BB             ; castling moves, should move rook too                 
3107   18BB             MMcastles:
3108   18BB E5                   push hl
3109   18BC 79                   ld a,c
3110   18BD FE 06                cp 6         ; g1?
3111   18BF 20 12                jr nz,MMNoG1
3112   18C1 3E 07                ld a, 7      ; rook on h1
3113   18C3 CD 62 17             call MM_hl
3114   18C6 CD 6C 17             call MM_0    ; empty square now
3115   18C9 3E 05                ld a, 5      ; f1
3116   18CB CD 62 17             call MM_hl
3117   18CE 3E 52                ld a,'R'
3118   18D0 77                   ld (hl),a
3119   18D1 18 42                jr MMoverC         
3120   18D3             MMNoG1:
3121   18D3 FE 02                cp 2         ; c1?
3122   18D5 20 12                jr nz,MMNoC1
3123   18D7 3E 00                ld a, 0      ; rook on a1
3124   18D9 CD 62 17             call MM_hl
3125   18DC CD 6C 17             call MM_0    ; empty square now
3126   18DF 3E 03                ld a, 3      ; d1
3127   18E1 CD 62 17             call MM_hl
3128   18E4 3E 52                ld a,'R'
3129   18E6 77                   ld (hl),a
3130   18E7 18 2C                jr MMoverC
3131   18E9             MMNoC1:
3132   18E9 FE 3E                cp 62        ; g8?
3133   18EB 20 12                jr nz,MMNoG8
3134   18ED 3E 3F                ld a, 63     ; rook on h8
3135   18EF CD 62 17             call MM_hl
3136   18F2 CD 6C 17             call MM_0    ; empty square now
3137   18F5 3E 3D                ld a, 61     ; f8
3138   18F7 CD 62 17             call MM_hl
3139   18FA 3E 72                ld a,'r'
3140   18FC 77                   ld (hl),a
3141   18FD 18 16                jr MMoverC
3142   18FF             MMNoG8:
3143   18FF FE 3A                cp 58        ; c8?
3144   1901 20 12                jr nz,MMoverC
3145   1903 3E 38                ld a, 56     ; rook on a8
3146   1905 CD 62 17             call MM_hl
3147   1908 CD 6C 17             call MM_0    ; empty square now
3148   190B 3E 3B                ld a, 59     ; d8
3149   190D CD 62 17             call MM_hl
3150   1910 3E 72                ld a,'r'
3151   1912 77                   ld (hl),a
3152   1913 18 00                jr MMoverC
3153   1915 E1          MMoverC: pop hl
3154   1916 C9                   ret
3155   1917             
3156   1917             ; promoted pieces
3157   1917             MMPromotion:
3158   1917                      ; which piece?
3159   1917 3A 90 0E             ld a, (PromoPcId)
3160   191A FE 04                cp 4          ; Queen?
3161   191C 20 04                jr nz, MMNoQ
3162   191E 3E 51                ld a, 'Q'
3163   1920 18 1A                jr MMPcPut        
3164   1922 FE 03       MMNoQ:   cp 3          ; Rook?
3165   1924 20 04                jr nz, MMNoR
3166   1926 3E 52                ld a, 'R'
3167   1928 18 12                jr MMPcPut        
3168   192A FE 02       MMNoR:   cp 2          ; Bishop?
3169   192C 20 04                jr nz, MMNoB
3170   192E 3E 42                ld a, 'B'
3171   1930 18 0A                jr MMPcPut
3172   1932 FE 01       MMNoB:   cp 1          ; Knight?  
3173   1934 20 04                jr nz, MMNoN
3174   1936 3E 4E                ld a, 'N'
3175   1938 18 02                jr MMPcPut
3176   193A 3E 51       MMNoN:   ld a, 'Q'     ; actually, should provide 3
3177   193C             
3178   193C             MMPcPut:
3179   193C 4F                   ld c,a        ; save
3180   193D 7A                   ld a,d
3181   193E FE 50                cp 'P'
3182   1940 28 04                jr z,MMPcWProm
3183   1942 3E 20                ld a,32
3184   1944 81                   add a,c
3185   1945 4F                   ld c,a        ; to lowercase
3186   1946             MMPcWProm:
3187   1946 71                   ld (hl),c
3188   1947 C9                   ret
3189   1948                      
3190   1948             ; en-passant capture         
3191   1948             MMEnPass:
3192   1948 E5                   push hl
3193   1949 7A                   ld a,d
3194   194A FE 50                cp 'P'
3195   194C 20 07                jr nz,MMPcBEnp         
3196   194E 3A 8E 08             ld a,(SQt)
3197   1951 D6 08                sub 8
3198   1953 18 05                jr MMEnp1
3199   1955             MMPcBEnp:
3200   1955 3A 8E 08             ld a,(SQt)
3201   1958 C6 08                add a,8
3202   195A CD 62 17    MMEnp1:  call MM_hl
3203   195D CD 6C 17             call MM_0    ; empty square now
3204   1960 E1                   pop hl
3205   1961 C9                   ret
3206   1962             ;END
3207   1962             
3208   1962             ;BEGIN of ========== UNMAKE MOVE
3209   1962             ;
3210   1962             ; UnMake move on BOARD (undo)
3211   1962             ; uses own history recordings in MOVE_HIST
3212   1962             ; which sets
3213   1962             ;  SQi - from square
3214   1962             ;  SQt - to square
3215   1962             ;   +also uses flags from history
3216   1962             
3217   1962                          ; we keep list of captured pieces to unmake later as stack
3218   1962 20 20 20 20 UnMakeList:    .byte "                                      ", 0     ;32+6 pieces
3218   1966 20 20 20 20 
3218   196A 20 20 20 20 
3218   196E 20 20 20 20 
3218   1972 20 20 20 20 
3218   1976 20 20 20 20 
3218   197A 20 20 20 20 
3218   197E 20 20 20 20 
3218   1982 20 20 20 20 
3218   1986 20 20 00 
3219   1989 00          flag_ix:       .byte 0      ; temporary flag of move made
3220   198A                     
3221   198A             UnMakeMove:
3222   198A F5                   push af
3223   198B C5                   push bc
3224   198C D5                   push de
3225   198D E5                   push hl
3226   198E DD E5                push ix
3227   1990 FD E5                push iy
3228   1992                      
3229   1992 CD ED 19             call UnMKrestoreFromHist       ; Restores from history
3230   1995                            
3231   1995 3A 8D 08             ld a, (SQi)   ; from square
3232   1998 47                   ld b,a
3233   1999                                
3234   1999 3A 8E 08             ld a, (SQt)   ; to square
3235   199C 4F                   ld c,a
3236   199D                              
3237   199D                      ; Let's undo it
3238   199D CD FB 17             call Swap_Sides   ; Swap sides
3239   19A0                      
3240   19A0 CD 62 17             call MM_hl
3241   19A3 56                   ld d,(hl)
3242   19A4 CD 6C 17             call MM_0      ; empty square now
3243   19A7                               
3244   19A7 3A 89 19             ld a, (flag_ix)     ; flags
3245   19AA CB 47                bit 0,a
3246   19AC 28 0A                jr z,UnMKnoCapture
3247   19AE                
3248   19AE 3A 89 19             ld a, (flag_ix)     ; flags
3249   19B1 CB 6F                bit 5,a             ; ignore en-passant case
3250   19B3 20 03                jr nz,UnMKnoCapture
3251   19B5              
3252   19B5 CD 42 1A             call UnMKCapturedPiece
3253   19B8             
3254   19B8             UnMKnoCapture:
3255   19B8                               
3256   19B8 3A 8D 08             ld a,(SQi)
3257   19BB CD 62 17             call MM_hl
3258   19BE 7A                   ld a,d
3259   19BF 77                   ld (hl),a       ; just place our piece back
3260   19C0             
3261   19C0 C5                   push bc
3262   19C1 48                   ld c,b          ; square-from
3263   19C2 CD 0E 18             call UpdateKingSQ
3264   19C5 C1                   pop bc
3265   19C6                      
3266   19C6 3A 89 19             ld a, (flag_ix)      ; flags
3267   19C9 CB 67                bit 4,a              ; castling      
3268   19CB 28 03                jr z,UnMKNoCastle
3269   19CD                      
3270   19CD CD 58 1A             call  UnMKcastles          
3271   19D0                                                   
3272   19D0             UnMKNoCastle:
3273   19D0 3A 89 19             ld a, (flag_ix)     ; flags    
3274   19D3 CB 4F                bit 1,a             ; possibly promotion
3275   19D5 28 03                jr z, UnMKNoProm
3276   19D7                      
3277   19D7 CD B4 1A             call UnMKPromotion  ; put pawn back on board         
3278   19DA             UnMKNoProm:
3279   19DA 3A 89 19             ld a, (flag_ix)     ; flags
3280   19DD CB 6F                bit 5,a             ; en-passant         
3281   19DF 28 03                jr z,UnMKNoEP
3282   19E1                      
3283   19E1 CD CA 1A             call UnMKEnPass  ; en-passant capture
3284   19E4             UnMKNoEP:                                     
3285   19E4                      ; en-passant square is updated before
3286   19E4             
3287   19E4             UnMKEnd:
3288   19E4             
3289   19E4 FD E1                pop iy                           
3290   19E6 DD E1                pop ix
3291   19E8 E1                   pop hl
3292   19E9 D1                   pop de
3293   19EA C1                   pop bc
3294   19EB F1                   pop af
3295   19EC C9                   ret
3296   19ED                      
3297   19ED             ; Get SQi,SQt, promoted piece from history
3298   19ED             UnMKrestoreFromHist:
3299   19ED E5                   push hl
3300   19EE C5                   push bc
3301   19EF 06 00                ld b,0
3302   19F1 3A 0B 04             ld a,(MOVE_CNT)
3303   19F4 3D                   dec a
3304   19F5 4F                   ld c,a
3305   19F6 32 0B 04             ld (MOVE_CNT),a
3306   19F9 21 0C 04             ld hl, MOVE_HIST
3307   19FC                      
3308   19FC FE 3C                cp 60
3309   19FE 38 07                jr c,slowBcAdd2
3310   1A00 CB 21                sla c
3311   1A02 CB 21                sla c      ; 4*c
3312   1A04                       ;1.byte = from sq
3313   1A04                       ;2.byte = to sq
3314   1A04                       ;3.byte = flags and promoted to
3315   1A04                       ;4.byte = en-passant square and castling info before
3316   1A04 09                   add hl,bc
3317   1A05 18 04                jr overBcAdd2         
3318   1A07             slowBcAdd2:         
3319   1A07 09                   add hl,bc
3320   1A08 09                   add hl,bc
3321   1A09 09                   add hl,bc
3322   1A0A 09                   add hl,bc
3323   1A0B             overBcAdd2:         
3324   1A0B             
3325   1A0B 7E                   ld a,(hl)
3326   1A0C 32 8D 08             ld (SQi),a
3327   1A0F 23                   inc hl
3328   1A10 7E                   ld a,(hl)
3329   1A11 32 8E 08             ld (SQt),a
3330   1A14 23                   inc hl
3331   1A15 7E                   ld a,(hl)
3332   1A16 32 89 19             ld (flag_ix),a
3333   1A19 23                   inc hl
3334   1A1A 7E                   ld a,(hl)
3335   1A1B 47                   ld b,a
3336   1A1C E6 0F                and %00001111
3337   1A1E FE 00                cp 0
3338   1A20 28 0C                jr z,unmkEp0
3339   1A22 FE 09                cp 9
3340   1A24 30 04                jr nc,unmkBlackEp
3341   1A26 C6 0F                add a,15            ; a3=16...
3342   1A28 18 06                jr unmkEpS
3343   1A2A             unmkBlackEp:         
3344   1A2A C6 1F                add a,31            ; a6=40...
3345   1A2C 18 02                jr unmkEpS         
3346   1A2E 3E FF       unmkEp0: ld a,$ff
3347   1A30 32 83 01    unmkEpS: ld (ENPSQ),a      ; restore ENPSQ
3348   1A33 78                   ld a,b
3349   1A34 CB 3F                srl a
3350   1A36 CB 3F                srl a
3351   1A38 CB 3F                srl a    ; 4 shifts
3352   1A3A CB 3F                srl a
3353   1A3C 32 82 01             ld (CASTLES),a    ; restore castling info    
3354   1A3F C1                   pop bc
3355   1A40 E1                   pop hl
3356   1A41 C9                   ret
3357   1A42             
3358   1A42             ; Get captured piece from list and put back
3359   1A42             UnMKCapturedPiece:                      
3360   1A42             
3361   1A42 D5                   push de
3362   1A43 11 62 19             ld de, UnMakeList
3363   1A46             UnMKloop1:        
3364   1A46 1A                   ld a,(de)
3365   1A47 FE 20                cp ' '
3366   1A49 28 03                jr z,UnMKblankL1
3367   1A4B 13                   inc de
3368   1A4C 18 F8                jr UnMKloop1
3369   1A4E             UnMKblankL1:
3370   1A4E 1B                   dec de
3371   1A4F 1A                   ld a,(de)       ; should be a previous MakeMove
3372   1A50 F5                   push af
3373   1A51 3E 20                ld a,' '
3374   1A53 12                   ld (de),a       ; clear this
3375   1A54 F1                   pop af
3376   1A55 D1                   pop de
3377   1A56 77                   ld (hl),a       ; place back captured piece   
3378   1A57 C9                   ret     
3379   1A58                                                                   
3380   1A58             ; castling moves, should move rook back too                 
3381   1A58             UnMKcastles:
3382   1A58 E5                   push hl
3383   1A59 79                   ld a,c
3384   1A5A FE 06                cp 6         ; g1?
3385   1A5C 20 12                jr nz,UnMKNoG1
3386   1A5E 3E 05                ld a, 5      ; rook on f1
3387   1A60 CD 62 17             call MM_hl
3388   1A63 CD 6C 17             call MM_0    ; empty square now
3389   1A66 3E 07                ld a, 7      ; h1
3390   1A68 CD 62 17             call MM_hl
3391   1A6B 3E 52                ld a,'R'
3392   1A6D 77                   ld (hl),a
3393   1A6E 18 42                jr UnMKoverC         
3394   1A70             UnMKNoG1:
3395   1A70 FE 02                cp 2         ; c1?
3396   1A72 20 12                jr nz,UnMKNoC1
3397   1A74 3E 03                ld a, 3      ; rook on d1
3398   1A76 CD 62 17             call MM_hl
3399   1A79 CD 6C 17             call MM_0    ; empty square now
3400   1A7C 3E 00                ld a, 0      ; a1
3401   1A7E CD 62 17             call MM_hl
3402   1A81 3E 52                ld a,'R'
3403   1A83 77                   ld (hl),a
3404   1A84 18 2C                jr UnMKoverC
3405   1A86             UnMKNoC1:
3406   1A86 FE 3E                cp 62        ; g8?
3407   1A88 20 12                jr nz,UnMKNoG8
3408   1A8A 3E 3D                ld a, 61     ; rook on f8
3409   1A8C CD 62 17             call MM_hl
3410   1A8F CD 6C 17             call MM_0    ; empty square now
3411   1A92 3E 3F                ld a, 63     ; h8
3412   1A94 CD 62 17             call MM_hl
3413   1A97 3E 72                ld a,'r'
3414   1A99 77                   ld (hl),a
3415   1A9A 18 16                jr UnMKoverC
3416   1A9C             UnMKNoG8:
3417   1A9C FE 3A                cp 58        ; c8?
3418   1A9E 20 12                jr nz,UnMKoverC
3419   1AA0 3E 3B                ld a, 59     ; rook on d8
3420   1AA2 CD 62 17             call MM_hl
3421   1AA5 CD 6C 17             call MM_0    ; empty square now
3422   1AA8 3E 38                ld a, 56     ; a8
3423   1AAA CD 62 17             call MM_hl
3424   1AAD 3E 72                ld a,'r'
3425   1AAF 77                   ld (hl),a
3426   1AB0 18 00                jr UnMKoverC
3427   1AB2             UnMKoverC:
3428   1AB2 E1                   pop hl
3429   1AB3 C9                   ret
3430   1AB4             
3431   1AB4             ; promoted pieces
3432   1AB4             UnMKPromotion:
3433   1AB4 E5                   push hl
3434   1AB5 3E 07                ld a,7
3435   1AB7 B9                   cp c
3436   1AB8 38 04                jr c,UnMKwhitePw
3437   1ABA 3E 70                ld a,'p'
3438   1ABC 18 02                jr UnMKPw
3439   1ABE             UnMKwhitePw:
3440   1ABE 3E 50                ld a,'P'
3441   1AC0 57          UnMKPw:  ld d,a
3442   1AC1 3A 8D 08             ld a,(SQi)
3443   1AC4 CD 62 17             call MM_hl         
3444   1AC7 72                   ld (hl),d
3445   1AC8 E1                   pop hl
3446   1AC9 C9                   ret
3447   1ACA                       
3448   1ACA             ; en-passant capture         
3449   1ACA             UnMKEnPass:
3450   1ACA E5                   push hl
3451   1ACB 7A                   ld a,d
3452   1ACC FE 50                cp 'P'
3453   1ACE 20 0C                jr nz,UnMKPcBEnp         
3454   1AD0 3A 8E 08             ld a,(SQt)
3455   1AD3 D6 08                sub 8
3456   1AD5 CD 62 17             call MM_hl
3457   1AD8 36 70                ld (hl),'p'
3458   1ADA 18 0A                jr UnMKEnp1
3459   1ADC             UnMKPcBEnp:
3460   1ADC 3A 8E 08             ld a,(SQt)
3461   1ADF C6 08                add a,8
3462   1AE1 CD 62 17             call MM_hl
3463   1AE4 36 50                ld (hl),'P'
3464   1AE6             UnMKEnp1:
3465   1AE6 E1                   pop hl
3466   1AE7 C9                   ret
3467   1AE8                              
3468   1AE8             ;END         
3469   1AE8             
3470   1AE8             
3471   1AE8             ;BEGIN of ========== KING CHECKMATE DETECTION
3472   1AE8             ;;
3473   1AE8             ; It verifies check+ moves of the list for possible movement.
3474   1AE8             ; Makes it slower, anyway correct for complete notation.
3475   1AE8             ; Sets bit-7 for checkmate moves.
3476   1AE8             ;
3477   1AE8             LookForCheckmates:
3478   1AE8             
3479   1AE8 3A 8F 08             ld a, (MateDetect)
3480   1AEB FE 00                cp 0
3481   1AED 20 6F                jr nz, CKMEnd
3482   1AEF                              
3483   1AEF DD 21 F2 02          ld ix, NEXT_MVCNT
3484   1AF3 DD 46 00             ld b,(ix)
3485   1AF6 DD 21 F3 02          ld ix, NEXT_MOVES
3486   1AFA 78                   ld a, b
3487   1AFB FE 00                cp 0
3488   1AFD 28 5F                jr z,CKMEnd
3489   1AFF                      
3490   1AFF             CKMToLoop:
3491   1AFF DD 23                inc ix        ; piece
3492   1B01 DD 23                inc ix        ; from
3493   1B03 DD 23                inc ix        ; to
3494   1B05 DD 7E 00             ld a,(ix)     ; flags
3495   1B08 CB 77                bit 6,a
3496   1B0A 28 4E                jr z, CKMnoCheck
3497   1B0C DD 2B                dec ix
3498   1B0E DD 2B                dec ix
3499   1B10 DD 7E 00             ld a,(ix)
3500   1B13 32 8D 08             ld (SQi),a
3501   1B16 DD 23                inc ix
3502   1B18 DD 7E 00             ld a,(ix)
3503   1B1B 32 8E 08             ld (SQt),a
3504   1B1E DD 23                inc ix
3505   1B20 DD 7E 00             ld a,(ix)     ; flags
3506   1B23 CB 4F                bit 1,a       
3507   1B25 28 0C                jr z, CKMnoPromo
3508   1B27 DD 7E 00             ld a,(ix)     ; flags again       
3509   1B2A CB 3F                srl a
3510   1B2C CB 3F                srl a
3511   1B2E E6 03                and 3
3512   1B30 3C                   inc a
3513   1B31 18 02                jr CKMpcProm
3514   1B33             CKMnoPromo:
3515   1B33 3E 00                ld a,0
3516   1B35             CKMpcProm:         
3517   1B35 32 90 0E             ld (PromoPcId),a
3518   1B38 CD 98 16             call MakeMove  ; make this move again
3519   1B3B                      
3520   1B3B 3E 01                ld a,1
3521   1B3D 32 8F 08             ld (MateDetect),a            
3522   1B40 CD 90 08             call GenMoves  ; finds any legal move
3523   1B43                      
3524   1B43 CD 8A 19             call UnMakeMove  ; unmake
3525   1B46                      
3526   1B46 3A 8F 08             ld a,(MateDetect)
3527   1B49 FE 02                cp 2           ; is there any?
3528   1B4B 28 08                jr z, CKMnoMate
3529   1B4D                      
3530   1B4D DD 7E 00             ld a,(ix)     ; flags again
3531   1B50 CB FF                set 7,a       ; bit 7 - checkmate
3532   1B52 DD 77 00             ld (ix),a     ; save flag   
3533   1B55                      
3534   1B55             CKMnoMate:
3535   1B55 3E 00                ld a,0
3536   1B57 32 8F 08             ld (MateDetect),a
3537   1B5A                                                                                                                             
3538   1B5A             CKMnoCheck:
3539   1B5A DD 23                inc ix
3540   1B5C 10 A1                djnz CKMToLoop
3541   1B5E             
3542   1B5E             CKMEnd:                           
3543   1B5E C9                   ret
3544   1B5F                      
3545   1B5F             ;END 
3546   1B5F             
3547   1B5F             
3548   1B5F             
3549   1B5F             
3550   1B5F             ;BEGIN of ========== DEBUG tool
3551   1B5F             
3552   1B5F             ; Put call DEBUGs in ASM to see that I got here
3553   1B5F                      
3554   1B5F 44 45 42 55 debugstr: .byte "DEBUG!$", 0  ; outputs this when reaches
3554   1B63 47 21 24 00 
3555   1B67             
3556   1B67             DEBUGs:
3557   1B67             
3558   1B67 D5                   push de
3559   1B68 11 5F 1B             ld de, debugstr
3560   1B6B CD 8F 2A             call PrintString
3561   1B6E D1                   pop de
3562   1B6F C9                   ret            
3563   1B70             
3564   1B70 44 45 42 55         .byte "DEBUGZ",0    ; put in code to find via debugger
3564   1B74 47 5A 00 
3565   1B77             ;END
3566   1B77                                
3567   1B77             ;BEGIN of ========== COUNTER for large loop of 65536 maximum value
3568   1B77             ;
3569   1B77             ; just imitates 2byte integer in 8-bit registers
3570   1B77             
3571   1B77 00          Il:      .byte 0
3572   1B78 00          Ih:      .byte 0
3573   1B79             
3574   1B79             
3575   1B79 32 78 1B    LD_Ix:   ld (Ih),a  ; sets a-reg x 256 value to counter
3576   1B7C 3E 00                ld a,0
3577   1B7E 32 77 1B             ld (Il),a
3578   1B81 C9                   ret
3579   1B82             
3580   1B82 C5          DEC_I:   push bc
3581   1B83 3A 77 1B             ld a,(Il)
3582   1B86 4F                   ld c,a
3583   1B87 3A 78 1B             ld a,(Ih)
3584   1B8A 47                   ld b,a
3585   1B8B 0B                   dec bc
3586   1B8C 79                   ld a,c
3587   1B8D 32 77 1B             ld (Il),a
3588   1B90 78                   ld a,b
3589   1B91 32 78 1B             ld (Ih),a
3590   1B94 3E 00                ld a,0
3591   1B96 B8                   cp b
3592   1B97 20 06                jr nz, IsNo0_I
3593   1B99 B9                   cp c
3594   1B9A 20 03                jr nz, IsNo0_I
3595   1B9C 37                   scf       ; sets CF on empty counter
3596   1B9D 18 02                jr Is0ret
3597   1B9F 37          IsNo0_I: scf
3598   1BA0 3F                   ccf
3599   1BA1 C1          Is0ret:  pop bc
3600   1BA2 C9                   ret
3601   1BA3             ;END
3602   1BA3                    
3603   1BA3             ;        
3604   1BA3             ; INCLUDES        
3605   1BA3             ;        
3606   1BA3             
3607   1BA3             #ifdef PGN_COMPILE
3608   1BA3                       #include "ChessU2.ASM"     ; simplified USER interface and grahics
0001+  1BA3             ;=======================================
0002+  1BA3             ;
0003+  1BA3             ; Graphics part of chess program ChessY2K
0004+  1BA3             ;
0005+  1BA3             ;=======================================
0006+  1BA3             ;
0007+  1BA3             ; USER INTERFACE 2 (simplified for PGN replay only)
0008+  1BA3             ;
0009+  1BA3             ; Uses VRAM even too much for chess needs.
0010+  1BA3             ; Will be good for presentation recording.
0011+  1BA3             ;
0012+  1BA3             
0013+  1BA3 00          Stylo:     .byte 0   ; just ignored in PGN case
0014+  1BA4             
0015+  1BA4 00          RplyMs:    .byte 0   ; position in MOVE_str for replayer
0016+  1BA5                                                     
0017+  1BA5 00          Grph_Exit: .byte 0        ; 1 on ESC exit 
0018+  1BA6             
0019+  1BA6             PiecesIX:
0020+  1BA6 9F A1 47 A0         .word dtSQW+6, dtSQB+6
0021+  1BAA 8F 99 37 98         .word dtWPW+6, dtWPB+6, dtWNW+6, dtWNB+6, dtWBW+6, dtWBB+6
0021+  1BAE DF 96 87 95 
0021+  1BB2 7F 91 27 90 
0022+  1BB6 EF 9E 97 9D         .word dtWRW+6, dtWRB+6, dtWQW+6, dtWQB+6, dtWKW+6, dtWKB+6
0022+  1BBA 3F 9C E7 9A 
0022+  1BBE 2F 94 D7 92 
0023+  1BC2 6F 89 17 88         .word dtBPW+6, dtBPB+6, dtBNW+6, dtBNB+6, dtBBW+6, dtBBB+6
0023+  1BC6 BF 86 67 85 
0023+  1BCA 5F 81 07 80 
0024+  1BCE CF 8E 77 8D         .word dtBRW+6, dtBRB+6, dtBQW+6, dtBQB+6, dtBKW+6, dtBKB+6         
0024+  1BD2 1F 8C C7 8A 
0024+  1BD6 0F 84 B7 82 
0025+  1BDA             
0026+  1BDA             
0027+  1BDA             
0028+  1BDA             VRAMcopy:       ; for each piece, to know that was copied to VRAM
0029+  1BDA 00 00 00 00         .word 0,0,0,0,0,0,0,0,0,0,0,0,0
0029+  1BDE 00 00 00 00 
0029+  1BE2 00 00 00 00 
0029+  1BE6 00 00 00 00 
0029+  1BEA 00 00 00 00 
0029+  1BEE 00 00 00 00 
0029+  1BF2 00 00 
0030+  1BF4             VRAMcpXY:       ; for each piece, holds HL (X,Y coord.)
0031+  1BF4 00 00 00 00         .word 0,0,0,0,0,0,0,0,0,0,0,0,0 
0031+  1BF8 00 00 00 00 
0031+  1BFC 00 00 00 00 
0031+  1C00 00 00 00 00 
0031+  1C04 00 00 00 00 
0031+  1C08 00 00 00 00 
0031+  1C0C 00 00 
0032+  1C0E 00 00 00 00         .word 0,0,0,0,0,0,0,0,0,0,0,0,0
0032+  1C12 00 00 00 00 
0032+  1C16 00 00 00 00 
0032+  1C1A 00 00 00 00 
0032+  1C1E 00 00 00 00 
0032+  1C22 00 00 00 00 
0032+  1C26 00 00 
0033+  1C28             
0034+  1C28 00          VRAMcirc: .byte 0 ; to know that sign copied to VRAM
0035+  1C29             
0036+  1C29                             ; the same for masks of black and white pieces
0037+  1C29                             ; Masks are used when piece is moving.
0038+  1C29                             ; Simple square redraw is used after animation is over.
0039+  1C29             PiecesMskIX:
0040+  1C29 CF B1 7F B4         .word dtWP+6, dtWN+6, dtWB+6, dtWR+6, dtWQ+6, dtWK+6
0040+  1C2D 2F B7 DF B9 
0040+  1C31 8F BC 41 BF 
0041+  1C35 27 B3 D7 B5         .word dtBP+6, dtBN+6, dtBB+6, dtBR+6, dtBQ+6, dtBK+6
0041+  1C39 87 B8 37 BB 
0041+  1C3D E9 BD 99 C0 
0042+  1C41 00 00 00 00 VRAMcpMsk:    .word 0,0,0,0,0,0
0042+  1C45 00 00 00 00 
0042+  1C49 00 00 00 00 
0043+  1C4D 00 00 00 00 VRAMcpMskXY:  .word 0,0,0,0,0,0,0,0,0,0,0,0  
0043+  1C51 00 00 00 00 
0043+  1C55 00 00 00 00 
0043+  1C59 00 00 00 00 
0043+  1C5D 00 00 00 00 
0043+  1C61 00 00 00 00 
0044+  1C65             
0045+  1C65 2F B0 67 B1 CircIX: .word dtWhiteToMove+6, dtBlackNotToMove+6, dtWhiteNotToMove+6, dtBlackToMove+6
0045+  1C69 97 B0 FF B0 
0046+  1C6D                                                                                                                                                                                                                    
0047+  1C6D             GraphicsS:
0048+  1C6D                      
0049+  1C6D                      ; loads datas of graphics in memory from file
0050+  1C6D CD BA 27             call ChessY2K_GraphDatas_load
0051+  1C70                         
0052+  1C70 3E 00                ld a,0         
0053+  1C72 32 A5 1B             ld (Grph_Exit),a          ; starting...
0054+  1C75                      
0055+  1C75 CD C0 29             call SetScreen5By30h      ; set Screen 5 by using BIOS
0056+  1C78 CD C7 29             call DisableScreenBy30h   ; do not display
0057+  1C7B CD E6 2A             call Copy_VdpRegs         ; save VDP regs
0058+  1C7E CD 2E 2A             call VDPfaster            ; optimize VDP, sprites off
0059+  1C81                      
0060+  1C81 21 D6 27             ld hl, tbPalettes         ;
0061+  1C84 CD FA 29             call SetPaletteByTable    ; defines 16colors
0062+  1C87 CD DA 1C             call SetGraphics0         ; most graphics inits
0063+  1C8A CD 77 24             call PutMSXlogo           ; put MSX lable on screen
0064+  1C8D CD D7 25             call PutToMove            ; draws and saves rounded-sign which side to move
0065+  1C90                                                ;  (and saves to VRAM too)
0066+  1C90                         
0067+  1C90                      ;1.draw just squares
0068+  1C90 CD B1 24             call PutFrame             ; puts frame for board
0069+  1C93 CD A8 1D             call Draw0Board           ; just draw empty board without pieces
0070+  1C96                      
0071+  1C96                      ;2 create copy of pictures in VRAM      
0072+  1C96 CD 98 1D             call SetPMapFEN           ; sets special board for saving at XY in VRAM to know later
0073+  1C99 CD C8 20             call DrawBoard            ; draws complete board with pieces and saves bitmaps
0074+  1C9C CD A8 1D             call Draw0Board           ; just draw empty board to overwrite glitches
0075+  1C9F CD B1 24             call PutFrame             ; redraw frame - with no defects
0076+  1CA2             
0077+  1CA2                      ;3 set chess position to play from
0078+  1CA2 CD C9 1D             call SetFENbyMode         ; set position according mode
0079+  1CA5 CD C8 20             call DrawBoard            ; now uses saved pieces
0080+  1CA8 CD D7 25             call PutToMove            ; redraw using saved
0081+  1CAB                      
0082+  1CAB 3E 00                ld a,0
0083+  1CAD CD 27 2B             call SetPage              ; Page to display
0084+  1CB0 CD CC 29             call EnableScreenBy30h    ; display on
0085+  1CB3                      
0086+  1CB3 CD 90 08             call GenMoves             ; And generate first moves too.
0087+  1CB6                      
0088+  1CB6 CD 44 2A             call InkeyKeyBy30h      ; keypress detect
0089+  1CB9 32 CB 26             ld (PreKeyWas),a         ; saves last key
0090+  1CBC             
0091+  1CBC             LOOP_GRAPHICS:
0092+  1CBC CD 44 2A             call InkeyKeyBy30h        ; keypress detect
0093+  1CBF FE 00                cp 0
0094+  1CC1 28 03                jr z, no_key_pressed
0095+  1CC3             
0096+  1CC3 CD CC 26             call Cursor_Key_Controls  ; keyboard, cursor by arrow-keys
0097+  1CC6             no_key_pressed:
0098+  1CC6                             
0099+  1CC6 CD 76 1F             call ANIMATION            ; process animations, if there should be
0100+  1CC9             
0101+  1CC9 3A A5 1B             ld a,(Grph_Exit)
0102+  1CCC FE 00                cp 0                      ; Exit on ESC 
0103+  1CCE 28 EC                jr z,LOOP_GRAPHICS                                                                    
0104+  1CD0                                   
0105+  1CD0 CD 15 2D             call RestoreColors
0106+  1CD3 CD FD 2A             call Rest_VdpRegs         ; restore VDP regs
0107+  1CD6 CD 52 2A             call SetScreen0By30h      ; set Screen 0
0108+  1CD9                      
0109+  1CD9 C9                   ret
0110+  1CDA                      
0111+  1CDA             ; set page 0, color 0, vdp for drawing
0112+  1CDA             
0113+  1CDA             SetGraphics0:
0114+  1CDA F5                   push af
0115+  1CDB E5                   push hl
0116+  1CDC                      
0117+  1CDC 3E 00                ld a,0
0118+  1CDE CD 25 2A             call SetBackgrColor       ; sets color by number
0119+  1CE1 3E 00                ld a,0
0120+  1CE3 CD 27 2B             call SetPage              ; Page to display
0121+  1CE6                               
0122+  1CE6 3E 00                ld a,0
0123+  1CE8 21 00 00             ld hl,0
0124+  1CEB CD 3A 2B             call Set_Vdp_Write        ; gona send to vdp
0125+  1CEE                      
0126+  1CEE E1                   pop hl
0127+  1CEF F1                   pop af
0128+  1CF0 C9                   ret 
0129+  1CF1             
0130+  1CF1 38 2F 38 2F emptyFEN:    .byte "8/8/8/8/8/8/8/8 w - - 0 1",0
0130+  1CF5 38 2F 38 2F 
0130+  1CF9 38 2F 38 2F 
0130+  1CFD 38 2F 38 20 
0130+  1D01 77 20 2D 20 
0130+  1D05 2D 20 30 20 
0130+  1D09 31 00 
0131+  1D0B 38 2F 50 50 piecemapFEN: .byte "8/PPpp4/NNnn4/BBbb4/RRrr4/QQqq4/KKkk4/8 w - - 0 1",0
0131+  1D0F 70 70 34 2F 
0131+  1D13 4E 4E 6E 6E 
0131+  1D17 34 2F 42 42 
0131+  1D1B 62 62 34 2F 
0131+  1D1F 52 52 72 72 
0131+  1D23 34 2F 51 51 
0131+  1D27 71 71 34 2F 
0131+  1D2B 4B 4B 6B 6B 
0131+  1D2F 34 2F 38 20 
0131+  1D33 77 20 2D 20 
0131+  1D37 2D 20 30 20 
0131+  1D3B 31 00 
0132+  1D3D 24          wasSetUpFEN: .byte "$"
0133+  1D3E                          .ds 90
0134+  1D98             
0135+  1D98             SetPMapFEN:                        ; set special FEN for piece bitmaps
0136+  1D98 F5                   push af
0137+  1D99 DD E5                push ix
0138+  1D9B 3E 01                ld a,1
0139+  1D9D DD 21 0B 1D          ld ix, piecemapFEN
0140+  1DA1 CD 29 10             call SetFEN
0141+  1DA4 DD E1                pop ix
0142+  1DA6 F1                   pop af
0143+  1DA7 C9                   ret
0144+  1DA8                     
0145+  1DA8             Draw0Board:                        ; draws an empty board without pieces 
0146+  1DA8 F5                   push af
0147+  1DA9 DD E5                push ix               
0148+  1DAB CD BF 1D             call SetEmptyFEN          ; set empty board      
0149+  1DAE 3E 01                ld a,1
0150+  1DB0 32 DE 20             ld (DrItFl),a
0151+  1DB3 CD C8 20             call DrawBoard            ; just draw empty board without pieces
0152+  1DB6 3E 00                ld a,0
0153+  1DB8 32 DE 20             ld (DrItFl),a
0154+  1DBB DD E1                pop ix
0155+  1DBD F1                   pop af 
0156+  1DBE C9                   ret
0157+  1DBF                      
0158+  1DBF             SetEmptyFEN:                 ; this sets an empty board position
0159+  1DBF 3E 01                ld a,1
0160+  1DC1 DD 21 F1 1C          ld ix, emptyFEN
0161+  1DC5 CD 29 10             call SetFEN         
0162+  1DC8 C9                   ret
0163+  1DC9                      
0164+  1DC9             SetFENbyMode:                ; sets position by mode
0165+  1DC9 F5                   push af        
0166+  1DCA 3E 00                ld a,0              ; set default position
0167+  1DCC 32 A4 1B             ld (RplyMs),a       ; set replayer position to 0         
0168+  1DCF CD 29 10             call SetFEN
0169+  1DD2 F1                   pop af
0170+  1DD3 C9                   ret
0171+  1DD4                      
0172+  1DD4                      
0173+  1DD4             ;-----------------------------------------------------
0174+  1DD4             ;
0175+  1DD4             ; Chess move
0176+  1DD4             ;.
0177+  1DD4             ; Moves piece on board and screen.
0178+  1DD4             ; SQi - from square
0179+  1DD4             ; SQt - to square
0180+  1DD4             ; PromoPcId - id of piece to promote = 4-queen,3-rook,2-bishop,1-knight, 0-no promotion
0181+  1DD4                      
0182+  1DD4             Chess_Move_Real:
0183+  1DD4 CD 98 16             call MakeMove            ; Goes when animation is over
0184+  1DD7 CD 32 1E             call AfterChessMovement
0185+  1DDA C9                   ret
0186+  1DDB             
0187+  1DDB             ;--------------------------------------------------------
0188+  1DDB             ;
0189+  1DDB             ; Undo chess animated chess move
0190+  1DDB             ;
0191+  1DDB             Chess_UnMake_Move_U:
0192+  1DDB F5                   push af
0193+  1DDC C5                   push bc
0194+  1DDD D5                   push de
0195+  1DDE E5                   push hl
0196+  1DDF                                                                                                            
0197+  1DDF 21 0B 04             ld hl, MOVE_CNT
0198+  1DE2 4E                   ld c,(hl)
0199+  1DE3 21 0C 04             ld hl, MOVE_HIST
0200+  1DE6 79                   ld a, c
0201+  1DE7 FE 00                cp 0
0202+  1DE9 28 3B                jr z, Unmake_end_action
0203+  1DEB 06 00                ld b,0
0204+  1DED             
0205+  1DED 0D                   dec c
0206+  1DEE 09                   add hl,bc
0207+  1DEF 09                   add hl,bc
0208+  1DF0 09                   add hl,bc
0209+  1DF1 09                   add hl,bc
0210+  1DF2                      
0211+  1DF2 7E                   ld a,(hl)        ; from
0212+  1DF3 32 10 1F             ld (Move_sq_t),a ; move backward animation
0213+  1DF6 57                   ld d,a
0214+  1DF7 23                   inc hl
0215+  1DF8 7E                   ld a,(hl)        ; to    
0216+  1DF9 32 0F 1F             ld (Move_sq_f),a
0217+  1DFC 5F                   ld e,a
0218+  1DFD 23                   inc hl
0219+  1DFE 7E                   ld a,(hl)        ; flags
0220+  1DFF                      
0221+  1DFF 0E 00                ld c,0         
0222+  1E01 CB 6F                bit 5,a      ; if en-passant capture
0223+  1E03 28 09                jr z,NoEnPassUnmakeMove
0224+  1E05                      
0225+  1E05 7B                   ld a,e
0226+  1E06 E6 07                and 7
0227+  1E08 4F                   ld c,a          ;X of en-passant square
0228+  1E09 7A                   ld a,d
0229+  1E0A E6 F8                and %11111000   ;Y of en-passant square
0230+  1E0C B1                   or c
0231+  1E0D 4F                   ld c,a
0232+  1E0E             NoEnPassUnmakeMove:
0233+  1E0E 79                   ld a,c
0234+  1E0F 32 1D 1F             ld (Move_Enp),a ; save en-p.square for animation    
0235+  1E12                                        
0236+  1E12 7E                   ld a, (hl)   ; flags                
0237+  1E13 CB 67                bit 4,a      ; if castling
0238+  1E15 28 07                jr z,UnmakeNoCastling
0239+  1E17                      
0240+  1E17 0E 01                ld c,1
0241+  1E19 EB                   ex de,hl
0242+  1E1A CD CD 1E             call SetCastlesForLater
0243+  1E1D EB                   ex de,hl             
0244+  1E1E                               
0245+  1E1E             UnmakeNoCastling:
0246+  1E1E 3E 01                ld a,1
0247+  1E20 32 22 1F             ld (AnimUnMk),a
0248+  1E23 CD 24 1F             call setAnimation        ; animate it and unmake move
0249+  1E26                      
0250+  1E26             Unmake_end_action:
0251+  1E26 E1                   pop hl
0252+  1E27 D1                   pop de
0253+  1E28 C1                   pop bc
0254+  1E29 F1                   pop af
0255+  1E2A C9                   ret
0256+  1E2B             
0257+  1E2B             ; Does actual unmake on chess board
0258+  1E2B             Chess_Unmake_Move_Real:
0259+  1E2B CD 8A 19             call UnMakeMove            ; Goes when animation is over
0260+  1E2E CD 32 1E             call AfterChessMovement
0261+  1E31 C9                   ret                                                                       
0262+  1E32             
0263+  1E32             ;
0264+  1E32             ; Action right after chess make/unmake move
0265+  1E32             ; Redraws 2 squares after movement
0266+  1E32             ; Regenerates next moves
0267+  1E32             ;
0268+  1E32             AfterChessMovement:
0269+  1E32 F5                   push af
0270+  1E33 C5                   push bc
0271+  1E34 3A 0F 1F             ld a,(Move_sq_f)
0272+  1E37 4F                   ld c,a             
0273+  1E38 CD DF 20             call DrawSquare
0274+  1E3B 3A 10 1F             ld a,(Move_sq_t)
0275+  1E3E 4F                   ld c,a             
0276+  1E3F CD DF 20             call DrawSquare
0277+  1E42 C1                   pop bc
0278+  1E43 F1                   pop af
0279+  1E44 CD 90 08             call GenMoves  ; And generate next moves too
0280+  1E47 CD D7 25             call PutToMove ; redraws which side to move
0281+  1E4A C9                   ret
0282+  1E4B                      
0283+  1E4B             ;--------------------------------------------------------
0284+  1E4B             ;
0285+  1E4B             ; Finds which move is this to process correctly on screen.
0286+  1E4B             ;
0287+  1E4B             
0288+  1E4B             LocateWhichMove:
0289+  1E4B             
0290+  1E4B C5                   push bc
0291+  1E4C D5                   push de
0292+  1E4D E5                   push hl
0293+  1E4E DD E5                push ix
0294+  1E50                      
0295+  1E50 1E 00                ld e,0   ; flag that found
0296+  1E52                                                                                   
0297+  1E52 DD 21 F2 02          ld ix, NEXT_MVCNT
0298+  1E56 DD 46 00             ld b,(ix)
0299+  1E59 DD 21 F3 02          ld ix, NEXT_MOVES
0300+  1E5D 78                   ld a, b
0301+  1E5E FE 00                cp 0
0302+  1E60 28 64                jr z, ValidLookExit
0303+  1E62             
0304+  1E62 3A 0F 1F             ld a,(Move_sq_f)
0305+  1E65 67                   ld h,a
0306+  1E66 3A 10 1F             ld a,(Move_sq_t)
0307+  1E69 6F                   ld l,a
0308+  1E6A             
0309+  1E6A             isValidLoop:
0310+  1E6A             
0311+  1E6A DD 7E 00             ld a, (ix)   ; notated piece
0312+  1E6D DD 23                inc ix
0313+  1E6F DD 7E 00             ld a, (ix)   ; from square
0314+  1E72 32 8D 08             ld (SQi),a        
0315+  1E75 DD 23                inc ix               
0316+  1E77 DD 7E 00             ld a, (ix)   ; to square
0317+  1E7A 32 8E 08             ld (SQt),a
0318+  1E7D DD 23                inc ix   
0319+  1E7F DD 7E 00             ld a, (ix)   ; flags and promoted piece
0320+  1E82 0E 00                ld c,0
0321+  1E84 CB 4F                bit 1,a      ; if promotion
0322+  1E86 28 02                jr z,ValidNoPromo
0323+  1E88 0E 04                ld c,4       ; then queen (or will be set after movement)
0324+  1E8A             ValidNoPromo:
0325+  1E8A 79                   ld a,c
0326+  1E8B 32 90 0E             ld (PromoPcId),a
0327+  1E8E                                      
0328+  1E8E 3A 8D 08             ld a,(SQi)      ; verify movement
0329+  1E91 BC                   cp h
0330+  1E92 20 2E                jr nz, ValidNotThisMove
0331+  1E94                              
0332+  1E94 3A 8E 08             ld a,(SQt)
0333+  1E97 BD                   cp l
0334+  1E98 20 28                jr nz, ValidNotThisMove
0335+  1E9A             
0336+  1E9A DD 7E 00             ld a, (ix)   ; flags                
0337+  1E9D 0E 00                ld c,0         
0338+  1E9F CB 6F                bit 5,a      ; if en-passant capture
0339+  1EA1 28 09                jr z,ValidNoEnPassMove
0340+  1EA3                      
0341+  1EA3 7D                   ld a,l
0342+  1EA4 E6 07                and 7
0343+  1EA6 4F                   ld c,a          ;X of en-passant square
0344+  1EA7 7C                   ld a,h
0345+  1EA8 E6 F8                and %11111000   ;Y of en-passant square
0346+  1EAA B1                   or c 
0347+  1EAB 4F                   ld c,a
0348+  1EAC             ValidNoEnPassMove:
0349+  1EAC 79                   ld a,c
0350+  1EAD 32 1D 1F             ld (Move_Enp),a ; save en-p.square for animation    
0351+  1EB0                                        
0352+  1EB0 DD 7E 00             ld a, (ix)   ; flags                
0353+  1EB3 CB 67                bit 4,a      ; if castling
0354+  1EB5 28 05                jr z,ValidNoCastling
0355+  1EB7                      
0356+  1EB7 0E 00                ld c,0
0357+  1EB9 CD CD 1E             call SetCastlesForLater
0358+  1EBC                               
0359+  1EBC             ValidNoCastling:
0360+  1EBC 18 00                jr ValidIsThis   
0361+  1EBE                      
0362+  1EBE             ValidIsThis:       ; ok, this move        
0363+  1EBE 1E 01                ld e,1
0364+  1EC0 18 04                jr ValidLookExit
0365+  1EC2                      
0366+  1EC2             ValidNotThisMove:
0367+  1EC2 DD 23                inc ix        
0368+  1EC4 10 A4                djnz isValidLoop
0369+  1EC6                               
0370+  1EC6             ValidLookExit:
0371+  1EC6 7B                   ld a,e
0372+  1EC7 DD E1                pop ix
0373+  1EC9 E1                   pop hl
0374+  1ECA D1                   pop de
0375+  1ECB C1                   pop bc
0376+  1ECC C9                   ret
0377+  1ECD             
0378+  1ECD             ; save castling rook info for animation later
0379+  1ECD             ; set before reg-c  = 0 for makemove, 1 for unmake move               
0380+  1ECD             SetCastlesForLater:
0381+  1ECD 7D                   ld a,l       ; square to
0382+  1ECE FE 06                cp 6
0383+  1ED0 28 0E                jr z,thisValidE1G1 ; e1g1
0384+  1ED2 FE 02                cp 2
0385+  1ED4 28 0F                jr z,thisValidE1C1 ; e1c1
0386+  1ED6 FE 3E                cp 62
0387+  1ED8 28 10                jr z,thisValidE8G8 ; e8g8
0388+  1EDA FE 3A                cp 58
0389+  1EDC 28 11                jr z,thisValidE8C8 ; e8c8
0390+  1EDE 18 2E                jr ValidCstlNot
0391+  1EE0             thisValidE1G1:
0392+  1EE0 21 07 05             ld hl,$0507      ; h1f1
0393+  1EE3 18 0D                jr ValidSetCastles         
0394+  1EE5             thisValidE1C1:
0395+  1EE5 21 00 03             ld hl,$0300      ; a1c1
0396+  1EE8 18 08                jr ValidSetCastles         
0397+  1EEA             thisValidE8G8:
0398+  1EEA 21 3F 3D             ld hl,$3D3F      ; h8f8
0399+  1EED 18 03                jr ValidSetCastles         
0400+  1EEF             thisValidE8C8:
0401+  1EEF 21 38 3B             ld hl,$3B38      ; a8c8
0402+  1EF2             ValidSetCastles:
0403+  1EF2 79                   ld a,c
0404+  1EF3 FE 00                cp 0
0405+  1EF5 20 0A                jr nz, unMakeCastlesCase
0406+  1EF7 7D                   ld a,l
0407+  1EF8 32 1F 1F             ld (MvC_sq_f2),a
0408+  1EFB 7C                   ld a,h
0409+  1EFC 32 20 1F             ld (MvC_sq_t2),a
0410+  1EFF 18 08                jr ValidSaveCstl
0411+  1F01             unMakeCastlesCase:
0412+  1F01 7C                   ld a,h
0413+  1F02 32 1F 1F             ld (MvC_sq_f2),a
0414+  1F05 7D                   ld a,l
0415+  1F06 32 20 1F             ld (MvC_sq_t2),a
0416+  1F09             ValidSaveCstl:         
0417+  1F09 3E 01                ld a,1
0418+  1F0B 32 1E 1F             ld (Move_Cstl),a ; save for animation    
0419+  1F0E             ValidCstlNot:
0420+  1F0E C9                   ret
0421+  1F0F                      
0422+  1F0F             ;----------------------------------------------------|
0423+  1F0F             ;
0424+  1F0F             ;  This draws moving piece.
0425+  1F0F             ;  Should be on timer interrupt.
0426+  1F0F             ;  Anyway doesnt matter on emulators.  
0427+  1F0F             ;  Uses lots of VRAM (video memory), just because
0428+  1F0F             ;  it is best MSX has and can manage fast.
0429+  1F0F             ;
0430+  1F0F             
0431+  1F0F 00          Move_sq_f: .byte 0   ; from square
0432+  1F10 00          Move_sq_t: .byte 0   ; to square
0433+  1F11 00          Move_X_f:  .byte 0   ; from X on screen
0434+  1F12 00          Move_Y_f:  .byte 0   ; Y
0435+  1F13 00          Move_X_t:  .byte 0   ; to X
0436+  1F14 00          Move_Y_t:  .byte 0   ; to Y
0437+  1F15 00          Move_X:    .byte 0   ; current X 
0438+  1F16 00          Move_Y:    .byte 0   ; current Y
0439+  1F17 00          Move_DX:   .byte 0   ; dx in dots (kinda y=a*x+c in asm)
0440+  1F18 00          Move_DXn:  .byte 0   ; to 0-right, 1-left
0441+  1F19 00          Move_DY:   .byte 0   ; dy in dots
0442+  1F1A 00          Move_DYn:  .byte 0   ; to 0-down, 1-up
0443+  1F1B             
0444+  1F1B 00          MovePc_f:  .byte 0   ; holds piece on square from (as we remove while animating)
0445+  1F1C 00          MovePc_t:  .byte 0   ; holds piece on square to
0446+  1F1D             
0447+  1F1D 00          Move_Enp:  .byte 0   ; square if en-passant capturing
0448+  1F1E             
0449+  1F1E 00          Move_Cstl: .byte 0   ; 1 if castling king (to start for rook after)
0450+  1F1F 00          MvC_sq_f2: .byte 0   ; for rook movement squares from->to
0451+  1F20 00          MvC_sq_t2: .byte 0   ;
0452+  1F21 00          AnimI:     .byte 0   ; counter 0..25
0453+  1F22 00          AnimUnMk:  .byte 0   ; 1 if UnMake case
0454+  1F23 00          Move_sq_p: .byte 0   ; contains piece promoted
0455+  1F24             
0456+  1F24             setAnimation:           ; provide square numbers
0457+  1F24 F5                       push af
0458+  1F25 C5                       push bc
0459+  1F26 D5                       push de
0460+  1F27 E5                       push hl
0461+  1F28                          
0462+  1F28 A8                       xor b    ; b=0
0463+  1F29 3A 0F 1F                 ld a,(Move_sq_f)            
0464+  1F2C CD F4 1F                 call ObtainHLboardBySq
0465+  1F2F 56                       ld d,(hl)
0466+  1F30 70                       ld (hl),b
0467+  1F31 4F                       ld c,a
0468+  1F32 CD DF 20                 call DrawSquare          ; now empty while moving
0469+  1F35 CD 82 23                 call GetHLbySquare       ; set X,Y
0470+  1F38 7A                       ld a,d
0471+  1F39 32 1B 1F                 ld (MovePc_f),a
0472+  1F3C 7C                       ld a,h
0473+  1F3D 32 11 1F                 ld (Move_X_f),a          ; from
0474+  1F40 32 15 1F                 ld (Move_X),a            ; now X
0475+  1F43 7D                       ld a,l
0476+  1F44 32 12 1F                 ld (Move_Y_f),a
0477+  1F47 32 16 1F                 ld (Move_Y),a            ; now Y
0478+  1F4A                          
0479+  1F4A A8                       xor b
0480+  1F4B 3A 10 1F                 ld a,(Move_sq_t)
0481+  1F4E CD F4 1F                 call ObtainHLboardBySq
0482+  1F51 56                       ld d,(hl)
0483+  1F52 70                       ld (hl),b
0484+  1F53 4F                       ld c,a
0485+  1F54 CD DF 20                 call DrawSquare          ; now empty while moving                         
0486+  1F57 CD 82 23                 call GetHLbySquare       ; set X,Y
0487+  1F5A 7A                       ld a,d
0488+  1F5B 32 1C 1F                 ld (MovePc_t),a
0489+  1F5E 7C                       ld a,h
0490+  1F5F 32 13 1F                 ld (Move_X_t),a          ; to
0491+  1F62 7D                       ld a,l
0492+  1F63 32 14 1F                 ld (Move_Y_t),a
0493+  1F66                          
0494+  1F66 3E 19                    ld a,25                  ;25ticks
0495+  1F68 32 21 1F                 ld (AnimI),a             ;counter
0496+  1F6B                          
0497+  1F6B CD 00 20                 call AnimGetDXDY         ; calculate dx,dy
0498+  1F6E                          
0499+  1F6E                          ; save board as it is in our large VRAM
0500+  1F6E                          ;call COPY_BOARD2VRAM_outside
0501+  1F6E                          
0502+  1F6E CD 79 21                 call Save26squaresVRAM   ; saving path of piece to draw without defects
0503+  1F71                          
0504+  1F71 E1                       pop hl
0505+  1F72 D1                       pop de
0506+  1F73 C1                       pop bc
0507+  1F74 F1                       pop af
0508+  1F75 C9                       ret            
0509+  1F76             
0510+  1F76             ANIMATION:
0511+  1F76 F5                       push af
0512+  1F77 3A 21 1F                 ld a,(AnimI)
0513+  1F7A FE 00                    cp 0
0514+  1F7C 28 74                    jr z, AnimNONE ;if No animation
0515+  1F7E                          
0516+  1F7E C5                       push bc
0517+  1F7F D5                       push de
0518+  1F80 E5                       push hl
0519+  1F81                          
0520+  1F81 CD E7 21                 call RestoreIsquareFromVRAM ;prepares and draws animation square
0521+  1F84 CD 91 20                 call GetNewAnimXY ; next X,Y
0522+  1F87                                       
0523+  1F87 3A 21 1F                 ld a,(AnimI)
0524+  1F8A 3D                       dec a
0525+  1F8B 32 21 1F                 ld (AnimI),a
0526+  1F8E FE 00                    cp 0
0527+  1F90 20 5D                    jr nz, AnimTickOver  ;On counter=0 animation is over
0528+  1F92                          
0529+  1F92 CD E7 21                 call RestoreIsquareFromVRAM ;restore last
0530+  1F95                          
0531+  1F95 3A 1B 1F                 ld a,(MovePc_f)
0532+  1F98 4F                       ld c,a
0533+  1F99 3A 0F 1F                 ld a,(Move_sq_f)
0534+  1F9C CD F4 1F                 call ObtainHLboardBySq
0535+  1F9F 71                       ld (hl),c
0536+  1FA0                          
0537+  1FA0 3A 1C 1F                 ld a,(MovePc_t)
0538+  1FA3 4F                       ld c,a
0539+  1FA4 3A 10 1F                 ld a,(Move_sq_t)
0540+  1FA7 CD F4 1F                 call ObtainHLboardBySq
0541+  1FAA 71                       ld (hl),c
0542+  1FAB             
0543+  1FAB 3A 1E 1F                 ld a,(Move_Cstl)
0544+  1FAE                          
0545+  1FAE FE 02                    cp 2
0546+  1FB0 28 0C                    jr z,wasCastleAnim
0547+  1FB2                                      
0548+  1FB2 3A 22 1F                 ld a,(AnimUnMk)
0549+  1FB5 FE 00                    cp 0
0550+  1FB7 20 0C                    jr nz,AnimUnMakeCase
0551+  1FB9                                                                 
0552+  1FB9 CD D4 1D                 call Chess_Move_Real          ; does actual chess movements
0553+  1FBC 18 0A                    jr Anim_enp_too
0554+  1FBE                          
0555+  1FBE             wasCastleAnim:
0556+  1FBE 3E 00                    ld a,0
0557+  1FC0 32 1E 1F                 ld (Move_Cstl),a              ; after castling rook has made its move
0558+  1FC3 18 2A                    jr AnimTickOver
0559+  1FC5             AnimUnMakeCase:
0560+  1FC5 CD 2B 1E                 call Chess_Unmake_Move_Real   ; does actual chess undo movements
0561+  1FC8             Anim_enp_too:          
0562+  1FC8 3A 1D 1F                 ld a,(Move_Enp)
0563+  1FCB FE 00                    cp 0
0564+  1FCD 28 06                    jr z,AnimNoEnpRedraw
0565+  1FCF C5                       push bc
0566+  1FD0 4F                       ld c,a
0567+  1FD1 CD DF 20                 call DrawSquare      ; remove en-passant piece visually
0568+  1FD4 C1                       pop bc             
0569+  1FD5             AnimNoEnpRedraw:
0570+  1FD5             
0571+  1FD5             setCastleAnim:
0572+  1FD5 3A 1E 1F                 ld a,(Move_Cstl)
0573+  1FD8 FE 00                    cp 0
0574+  1FDA 28 13                    jr z,AnimTickOver
0575+  1FDC 3C                       inc a            
0576+  1FDD 32 1E 1F                 ld (Move_Cstl),a
0577+  1FE0 3A 1F 1F                 ld a,(MvC_sq_f2)
0578+  1FE3 32 0F 1F                 ld (Move_sq_f),a
0579+  1FE6 3A 20 1F                 ld a,(MvC_sq_t2)
0580+  1FE9 32 10 1F                 ld (Move_sq_t),a
0581+  1FEC CD 24 1F                 call setAnimation  ; set new animation for rook now
0582+  1FEF                          
0583+  1FEF                     
0584+  1FEF             AnimTickOver:
0585+  1FEF E1                       pop hl             
0586+  1FF0 D1                       pop de
0587+  1FF1 C1                       pop bc
0588+  1FF2 F1          AnimNONE:    pop af
0589+  1FF3 C9                       ret                              
0590+  1FF4                          
0591+  1FF4             ;---------------------------------------------
0592+  1FF4             ;determine HL by square number in a-reg
0593+  1FF4             ObtainHLboardBySq:           
0594+  1FF4 F5                       push af
0595+  1FF5 C5                       push bc
0596+  1FF6 21 40 01                 ld hl,BOARD
0597+  1FF9 4F                       ld c,a
0598+  1FFA 06 00                    ld b,0
0599+  1FFC 09                       add hl,bc
0600+  1FFD C1                       pop bc
0601+  1FFE F1                       pop af
0602+  1FFF C9                       ret
0603+  2000                          
0604+  2000             ;---------------------------------------------
0605+  2000             ; determine DX,DY step for animated piece                                                                     
0606+  2000             AnimGetDXDY:
0607+  2000             
0608+  2000 3A 11 1F                 ld a,(Move_X_f)
0609+  2003 47                       ld b,a             
0610+  2004 3A 13 1F                 ld a,(Move_X_t)
0611+  2007 B8                       cp b
0612+  2008 28 2E                    jr z,AnimDX0
0613+  200A 38 16                    jr c,decAnimDX ;if toX<fromX
0614+  200C                                                                             
0615+  200C 3A 0F 1F                 ld a,(Move_sq_f)
0616+  200F E6 07                    and 7
0617+  2011 4F                       ld c,a
0618+  2012 3A 10 1F                 ld a,(Move_sq_t)
0619+  2015 E6 07                    and 7
0620+  2017 91                       sub c            ; a = dx
0621+  2018 32 17 1F                 ld (Move_DX),a
0622+  201B 3E 00                    ld a,0
0623+  201D 32 18 1F                 ld (Move_DXn),a
0624+  2020 18 1E                    jr AnimGetDY
0625+  2022             decAnimDX:               
0626+  2022 3A 10 1F                 ld a,(Move_sq_t)
0627+  2025 E6 07                    and 7
0628+  2027 4F                       ld c,a
0629+  2028 3A 0F 1F                 ld a,(Move_sq_f)
0630+  202B E6 07                    and 7
0631+  202D 91                       sub c            ; a = -dx
0632+  202E 32 17 1F                 ld (Move_DX),a
0633+  2031 3E 01                    ld a,1
0634+  2033 32 18 1F                 ld (Move_DXn),a
0635+  2036 18 08                    jr AnimGetDY           
0636+  2038             AnimDX0:
0637+  2038 3E 00                    ld a,0
0638+  203A 32 17 1F                 ld (Move_DX),a
0639+  203D 32 18 1F                 ld (Move_DXn),a
0640+  2040             AnimGetDY:             
0641+  2040 3A 12 1F                 ld a,(Move_Y_f)
0642+  2043 47                       ld b,a             
0643+  2044 3A 14 1F                 ld a,(Move_Y_t)
0644+  2047 B8                       cp b
0645+  2048 28 3E                    jr z,AnimDY0
0646+  204A 38 1E                    jr c,decAnimDY ;if toY<fromY
0647+  204C                          
0648+  204C 3A 0F 1F                 ld a,(Move_sq_f)
0649+  204F CB 3F                    srl a
0650+  2051 CB 3F                    srl a
0651+  2053 CB 3F                    srl a
0652+  2055 4F                       ld c,a
0653+  2056 3A 10 1F                 ld a,(Move_sq_t)
0654+  2059 CB 3F                    srl a
0655+  205B CB 3F                    srl a
0656+  205D CB 3F                    srl a
0657+  205F 91                       sub c            ; a = -dy
0658+  2060 32 19 1F                 ld (Move_DY),a
0659+  2063 3E 01                    ld a,1
0660+  2065 32 1A 1F                 ld (Move_DYn),a
0661+  2068 18 26                    jr AnimGetDXover            
0662+  206A                          
0663+  206A             decAnimDY:
0664+  206A 3A 10 1F                 ld a,(Move_sq_t)
0665+  206D CB 3F                    srl a
0666+  206F CB 3F                    srl a
0667+  2071 CB 3F                    srl a
0668+  2073 4F                       ld c,a
0669+  2074 3A 0F 1F                 ld a,(Move_sq_f)
0670+  2077 CB 3F                    srl a
0671+  2079 CB 3F                    srl a
0672+  207B CB 3F                    srl a
0673+  207D 91                       sub c            ; a = dy
0674+  207E 32 19 1F                 ld (Move_DY),a
0675+  2081 3E 00                    ld a,0
0676+  2083 32 1A 1F                 ld (Move_DYn),a
0677+  2086 18 08                    jr AnimGetDXover
0678+  2088             AnimDY0:
0679+  2088 3E 00                    ld a,0
0680+  208A 32 19 1F                 ld (Move_DY),a
0681+  208D 32 1A 1F                 ld (Move_DYn),a
0682+  2090                          
0683+  2090             AnimGetDXover:
0684+  2090 C9                       ret
0685+  2091             
0686+  2091             
0687+  2091             ;---------------------------------------------
0688+  2091             ;
0689+  2091             ; Sets new X,Y on animation tick
0690+  2091             ;
0691+  2091             GetNewAnimXY:
0692+  2091 F5                       push af
0693+  2092 C5                       push bc
0694+  2093 D5                       push de
0695+  2094                          
0696+  2094 3A 15 1F                 ld a,(Move_X)
0697+  2097 57                       ld d,a
0698+  2098 3A 16 1F                 ld a,(Move_Y)
0699+  209B 5F                       ld e,a
0700+  209C                                           ; determine new X
0701+  209C 3A 17 1F                 ld a,(Move_DX)
0702+  209F 47                       ld b,a           ; save dx
0703+  20A0 3A 18 1F                 ld a,(Move_DXn)
0704+  20A3 FE 01                    cp 1
0705+  20A5 28 04                    jr z,decAnimXmv
0706+  20A7 7A                       ld a,d
0707+  20A8 80                       add a,b          ; new X=X+dx
0708+  20A9 18 02                    jr newXforAnim
0709+  20AB             decAnimXmv:               
0710+  20AB 7A                       ld a,d
0711+  20AC 90                       sub b            ; new X=X-dx            
0712+  20AD             newXforAnim:             
0713+  20AD 32 15 1F                 ld (Move_X),a
0714+  20B0                                           ; determine new Y
0715+  20B0                                           
0716+  20B0 3A 19 1F                 ld a,(Move_DY)
0717+  20B3 47                       ld b,a           ; save dy
0718+  20B4 3A 1A 1F                 ld a,(Move_DYn)
0719+  20B7 FE 01                    cp 1
0720+  20B9 28 04                    jr z,decAnimYmv
0721+  20BB 7B                       ld a,e
0722+  20BC 80                       add a,b          ; new Y=Y+dy
0723+  20BD 18 02                    jr newYforAnim                              
0724+  20BF             decAnimYmv:               
0725+  20BF 7B                       ld a,e
0726+  20C0 90                       sub b            ; new Y=Y-dy 
0727+  20C1             newYforAnim:
0728+  20C1 32 16 1F                 ld (Move_Y),a
0729+  20C4 D1                       pop de
0730+  20C5 C1                       pop bc
0731+  20C6 F1                       pop af
0732+  20C7 C9                       ret
0733+  20C8                         
0734+  20C8             ;----------------------------------------------------|
0735+  20C8             ;
0736+  20C8             ;  Draws board on screen.
0737+  20C8             ;  
0738+  20C8             ;
0739+  20C8             DrawBoard:
0740+  20C8 F5                   push af
0741+  20C9 C5                   push bc
0742+  20CA CD 70 12             call SetSqScan          ; draw order A8,...,H8,A7...,A1,...,H1
0743+  20CD 06 40                ld b,64
0744+  20CF             DrawBoScan:
0745+  20CF CD 79 12             call ScanSqNxt
0746+  20D2 CD 9F 12             call GetScanSQ
0747+  20D5 4F                   ld c,a                  ; current square
0748+  20D6 CD DF 20             call DrawSquare
0749+  20D9 10 F4                djnz DrawBoScan        ; scan all squares
0750+  20DB C1                   pop bc
0751+  20DC F1                   pop af
0752+  20DD C9                   ret
0753+  20DE             
0754+  20DE             ;
0755+  20DE             ;  Draws piece or just empty square by 
0756+  20DE             ;       square in C-reg [0..63]
0757+  20DE             ;
0758+  20DE 00          DrItFl: .byte 0     ;should draw anyway flag
0759+  20DF             
0760+  20DF             DrawSquare:
0761+  20DF F5                   push af
0762+  20E0 C5                   push bc
0763+  20E1 D5                   push de
0764+  20E2 E5                   push hl
0765+  20E3 DD E5                push ix
0766+  20E5 06 00                ld b,0
0767+  20E7 21 40 01             ld hl,BOARD
0768+  20EA 09                   add hl,bc
0769+  20EB 7E                   ld a,(hl)
0770+  20EC FE 00                cp 0
0771+  20EE 20 02                jr nz, notE0_
0772+  20F0 3E 20                ld a,' '
0773+  20F2 CD 82 23    notE0_:  call GetHLbySquare       ; set X,Y
0774+  20F5 CD AF 23             call GetWhiteSqFlagInE   ; and determine E flag     
0775+  20F8 CD C1 23             call GetPieceIdx    ; convert to index from pn..QK
0776+  20FB 4F                   ld c,a              ; c=index
0777+  20FC EB                   ex de,hl            ; de = hl
0778+  20FD                              
0779+  20FD 3A DE 20             ld a,(DrItFl)
0780+  2100 FE 01                cp 1
0781+  2102 28 0B                jr z,pc2VRAM1       ; should draw anyway     
0782+  2104                      
0783+  2104 21 DA 1B             ld hl,VRAMcopy
0784+  2107 06 00                ld b,0
0785+  2109 09                   add hl,bc         
0786+  210A 7E                   ld a,(hl)       
0787+  210B FE 01                cp 1
0788+  210D 28 28                jr z,pc2VRAM2       ; if saved before, just copy
0789+  210F                                          ; else create bitmap
0790+  210F             pc2VRAM1:                                       
0791+  210F                      ;DRAW and SAVE a copy                
0792+  210F 3E 01                ld a,1
0793+  2111 77                   ld (hl),a           ; bitmap saved flag
0794+  2112 EB                   ex de,hl            ; hl = X,Y
0795+  2113 79                   ld a,c              ; index of piece or square
0796+  2114 CD E7 23             call GetPieceIX     ; get ix-address
0797+  2117 11 1A 1A             ld de,$1A1A         ;26x26
0798+  211A CD 70 2B             call HMMC           ;copy RAM -> VRAM
0799+  211D                      
0800+  211D CD 1D 24             call SaveMaskToo    ; save MASK on first init
0801+  2120                      
0802+  2120 3A DE 20             ld a,(DrItFl)
0803+  2123 FE 01                cp 1
0804+  2125 28 4B                jr z,overDrawSqPc   ; if draws empty board 
0805+  2127                      
0806+  2127 EB                   ex de,hl            ; de = hl
0807+  2128                      
0808+  2128 21 F4 1B             ld hl,VRAMcpXY      ; save X,Y for piece index
0809+  212B 06 00                ld b,0
0810+  212D 09                   add hl,bc
0811+  212E 09                   add hl,bc         
0812+  212F 72                   ld (hl),d           ;save X
0813+  2130 23                   inc hl
0814+  2131 73                   ld (hl),e           ;save Y
0815+  2132                      
0816+  2132 CD EA 22             call COPY2VRAMoutside
0817+  2135                       
0818+  2135 18 3B                jr overDrawSqPc
0819+  2137                          
0820+  2137             pc2VRAM2:         
0821+  2137                      ;COPY piece back to square
0822+  2137                      
0823+  2137 21 F4 1B             ld hl,VRAMcpXY      ; get X,Y by piece index
0824+  213A 06 00                ld b,0
0825+  213C 09                   add hl,bc
0826+  213D 09                   add hl,bc         
0827+  213E 7E                   ld a,(hl)           ;saved X
0828+  213F 32 85 2D             ld (HC_p+0),a       ;X
0829+  2142 23                   inc hl
0830+  2143 7E                   ld a,(hl)           ;saved Y
0831+  2144 32 87 2D             ld (HC_p+2),a       ;Y
0832+  2147             
0833+  2147 7A                   ld a,d
0834+  2148 32 89 2D             ld (HC_p+4),a       ;to X   
0835+  214B 7B                   ld a,e
0836+  214C 32 8B 2D             ld (HC_p+6),a       ;to Y
0837+  214F 3E 19                ld a,$19
0838+  2151 32 8D 2D             ld (HC_p+8),a       ;25
0839+  2154 32 8F 2D             ld (HC_p+10),a      ;25
0840+  2157 AF                   xor a
0841+  2158 32 86 2D             ld (HC_p+1),a        
0842+  215B 32 8A 2D             ld (HC_p+5),a       ;X
0843+  215E 32 8C 2D             ld (HC_p+7),a       ;Y
0844+  2161 32 8E 2D             ld (HC_p+9),a       ;dots
0845+  2164 32 90 2D             ld (HC_p+11),a      ;dots
0846+  2167 32 91 2D             ld (HC_p+12),a      ;DIX/DIY
0847+  216A 3E 01                ld a,%00000001
0848+  216C 32 88 2D             ld (HC_p+3),a       ;256+Y
0849+  216F CD 92 2D             call HMMMf          ;copy VRAM -> VRAM to visible area        
0850+  2172             
0851+  2172             overDrawSqPc:         
0852+  2172 DD E1                pop ix
0853+  2174 E1                   pop hl
0854+  2175 D1                   pop de
0855+  2176 C1                   pop bc
0856+  2177 F1                   pop af
0857+  2178 C9                   ret
0858+  2179                      
0859+  2179             ;-------------------------------------------------
0860+  2179             ;
0861+  2179             ;
0862+  2179             ; Saving 26 squares in VRAM as background for
0863+  2179             ;      moving piece all way long
0864+  2179             ;
0865+  2179             Save26squaresVRAM:
0866+  2179 F5                   push af
0867+  217A C5                   push bc
0868+  217B D5                   push de
0869+  217C                      
0870+  217C 3A 15 1F             ld a,(Move_X)
0871+  217F 57                   ld d,a
0872+  2180 3A 16 1F             ld a,(Move_Y)
0873+  2183 5F                   ld e,a
0874+  2184 D5                   push de             ; save X,Y                            
0875+  2185                      
0876+  2185 06 1A                ld b,26
0877+  2187 11 00 00             ld de,0
0878+  218A             Loop26squares:
0879+  218A F3                   di                 
0880+  218B 3A 15 1F             ld a,(Move_X)       ;X
0881+  218E D6 04                sub 4               ;X-4   reserve
0882+  2190 32 85 2D             ld (HC_p+0),a
0883+  2193 3A 16 1F             ld a,(Move_Y)       ;Y
0884+  2196 D6 04                sub 4               ;Y-4
0885+  2198 32 87 2D             ld (HC_p+2),a
0886+  219B                      
0887+  219B CD 91 20             call GetNewAnimXY   ; new X,Y
0888+  219E                               
0889+  219E 7A                   ld a,d
0890+  219F 32 89 2D             ld (HC_p+4),a       ;to X
0891+  21A2 7B                   ld a,e
0892+  21A3 32 8B 2D             ld (HC_p+6),a       ;to Y (+next byte)   put in columns
0893+  21A6 3E 20                ld a,$20
0894+  21A8 32 8D 2D             ld (HC_p+8),a       ;32
0895+  21AB 32 8F 2D             ld (HC_p+10),a      ;32
0896+  21AE AF                   xor a         
0897+  21AF 32 86 2D             ld (HC_p+1),a       ;X
0898+  21B2 32 88 2D             ld (HC_p+3),a       ;Y
0899+  21B5 32 8A 2D             ld (HC_p+5),a       ;
0900+  21B8 32 8E 2D             ld (HC_p+9),a       ;dots
0901+  21BB 32 90 2D             ld (HC_p+11),a      ;dots
0902+  21BE 32 91 2D             ld (HC_p+12),a      ;DIX/DIY
0903+  21C1 3E 03                ld a,%00000011
0904+  21C3 32 8C 2D             ld (HC_p+7),a       ; 512+Y down
0905+  21C6 CD 92 2D             call HMMMf          ;copy VRAM -> VRAM outside visible screen
0906+  21C9                      
0907+  21C9 3E 20                ld a,$20
0908+  21CB 83                   add a,e
0909+  21CC 5F                   ld e,a
0910+  21CD FE C0                cp $20*6
0911+  21CF 20 07                jr nz,L26clmnNxt
0912+  21D1 1E 00                ld e,0             ; next column
0913+  21D3 3E 20                ld a,$20
0914+  21D5 82                   add a,d
0915+  21D6 57                   ld d,a
0916+  21D7 FB                   ei
0917+  21D8             L26clmnNxt:
0918+  21D8 10 B0                djnz Loop26squares     
0919+  21DA                      
0920+  21DA D1                   pop de             ; restore X,Y
0921+  21DB 7A                   ld a,d
0922+  21DC 32 15 1F             ld (Move_X),a
0923+  21DF 7B                   ld a,e
0924+  21E0 32 16 1F             ld (Move_Y),a
0925+  21E3                     
0926+  21E3 D1                   pop de
0927+  21E4 C1                   pop bc
0928+  21E5 F1                   pop af
0929+  21E6 C9                   ret
0930+  21E7             
0931+  21E7             ;
0932+  21E7             ; This: 1) copies background (1..26 saved before) to VRAM-holder
0933+  21E7             ;       2) copies mask of piece logically to VRAM-holder
0934+  21E7             ;       3) copies holder to board on display
0935+  21E7             ;
0936+  21E7             
0937+  21E7             
0938+  21E7             RestoreIsquareFromVRAM:
0939+  21E7 F5                   push af
0940+  21E8 C5                   push bc
0941+  21E9 D5                   push de
0942+  21EA                      
0943+  21EA 3A 21 1F             ld a,(AnimI)
0944+  21ED 47                   ld b,a
0945+  21EE 3E 19                ld a,25
0946+  21F0 90                   sub b
0947+  21F1                      
0948+  21F1 47                   ld b,a              ; counter I = 0..25
0949+  21F2 11 00 00             ld de,0  
0950+  21F5 FE 00                cp 0
0951+  21F7 28 10                jr z,L2_26theSq
0952+  21F9             Loop26SqToFindXY:
0953+  21F9             
0954+  21F9 3E 20                ld a,$20
0955+  21FB 83                   add a,e
0956+  21FC 5F                   ld e,a
0957+  21FD FE C0                cp $20*6
0958+  21FF 20 06                jr nz,L2_26clmnNxt
0959+  2201 1E 00                ld e,0             ; next column
0960+  2203 3E 20                ld a,$20
0961+  2205 82                   add a,d
0962+  2206 57                   ld d,a
0963+  2207             L2_26clmnNxt:
0964+  2207 10 F0                djnz Loop26SqToFindXY
0965+  2209             L2_26theSq:                             
0966+  2209 CD 16 22             call Back2Holder     ; put backgroound in holder
0967+  220C                      
0968+  220C CD 50 22             call DrawAnimPiece   ; draws animation piece to holder (mask with transp.)
0969+  220F                      
0970+  220F CD AA 22             call Holder2Screen   ; put holder on board in right place
0971+  2212             
0972+  2212 D1                   pop de
0973+  2213 C1                   pop bc
0974+  2214 F1                   pop af
0975+  2215 C9                   ret
0976+  2216             
0977+  2216             ;----------------------------------
0978+  2216             ; Puts background in holder
0979+  2216             
0980+  2216             Back2Holder:
0981+  2216 F3                   di
0982+  2217 7A                   ld a,d
0983+  2218 32 85 2D             ld (HC_p+0),a
0984+  221B 7B                   ld a,e
0985+  221C 32 87 2D             ld (HC_p+2),a
0986+  221F 3E DF                ld a,255-$20
0987+  2221 32 89 2D             ld (HC_p+4),a       ;to X
0988+  2224 3E B1                ld a,209-$20
0989+  2226 32 8B 2D             ld (HC_p+6),a       ;to Y (+next byte) in column
0990+  2229 3E 20                ld a,$20
0991+  222B 32 8D 2D             ld (HC_p+8),a       ;32
0992+  222E 32 8F 2D             ld (HC_p+10),a      ;32
0993+  2231 AF                   xor a         
0994+  2232 32 86 2D             ld (HC_p+1),a       ;X
0995+  2235 32 8A 2D             ld (HC_p+5),a       ;
0996+  2238 32 8E 2D             ld (HC_p+9),a       ;dots
0997+  223B 32 90 2D             ld (HC_p+11),a      ;dots
0998+  223E 32 91 2D             ld (HC_p+12),a      ;DIX/DIY
0999+  2241 3E 01                ld a,%00000001
1000+  2243 32 8C 2D             ld (HC_p+7),a       ; 256+Y down
1001+  2246 3E 03                ld a,%00000011
1002+  2248 32 88 2D             ld (HC_p+3),a       ; 512+Y down
1003+  224B CD 92 2D             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1004+  224E FB                   ei
1005+  224F C9                   ret
1006+  2250                               
1007+  2250             ;------------------------------------------------------
1008+  2250             ;
1009+  2250             ; Prepares mask of piece in VRAM holder on background
1010+  2250             ;
1011+  2250             ;                  
1012+  2250             DrawAnimPiece:
1013+  2250                          
1014+  2250                          ; Was before as bad style:
1015+  2250                          ; restore board as it is in our large VRAM
1016+  2250                          ;call RESTORE_BOARD_VRAM_outside
1017+  2250                          
1018+  2250                          ;COPY mask of piece (logical VRAM->VRAM)
1019+  2250 F3                       di        
1020+  2251 3A 1B 1F                 ld a,(MovePc_f)
1021+  2254 FE 00                    cp 0
1022+  2256 20 03                    jr nz,DrawAnimNormPiece
1023+  2258 3A 1C 1F                 ld a,(MovePc_t)        ;castling rook moving
1024+  225B             DrawAnimNormPiece:             
1025+  225B 1E 00                    ld e,0
1026+  225D CD C1 23                 call GetPieceIdx       ;get index of piece
1027+  2260 CB 3F                    srl a
1028+  2262 3D                       dec a
1029+  2263 4F                       ld c,a
1030+  2264 21 4D 1C                 ld hl,VRAMcpMskXY      ; get X,Y by piece index             
1031+  2267 06 00                    ld b,0
1032+  2269 09                       add hl,bc              ; offset
1033+  226A 09                       add hl,bc
1034+  226B                                                
1035+  226B 7E                       ld a,(hl)           ;saved X
1036+  226C 32 BD 2D                 ld (LM_p+0),a       ;X
1037+  226F 23                       inc hl
1038+  2270 7E                       ld a,(hl)           ;saved Y        
1039+  2271 32 BF 2D                 ld (LM_p+2),a       ;Y
1040+  2274             
1041+  2274                          ;ld a,(Move_X)
1042+  2274 3E E3                    ld a,255-$20+4
1043+  2276 32 C1 2D                 ld (LM_p+4),a       ;to X   
1044+  2279                          ;ld a,(Move_Y)
1045+  2279 3E B5                    ld a,209-$20+4
1046+  227B 32 C3 2D                 ld (LM_p+6),a       ;to Y
1047+  227E 3E 19                    ld a,$19
1048+  2280 32 C5 2D                 ld (LM_p+8),a       ;25
1049+  2283 32 C7 2D                 ld (LM_p+10),a      ;25
1050+  2286 AF                       xor a
1051+  2287 32 BE 2D                 ld (LM_p+1),a
1052+  228A                          ;ld (LM_p+7),a       
1053+  228A 32 C2 2D                 ld (LM_p+5),a       ;Y
1054+  228D 32 C6 2D                 ld (LM_p+9),a       ;dots
1055+  2290 32 C8 2D                 ld (LM_p+11),a      ;dots
1056+  2293 32 C9 2D                 ld (LM_p+12),a      ;DIX/DIY
1057+  2296 3E 01                    ld a,%00000001
1058+  2298 32 C0 2D                 ld (LM_p+3),a       ;256+Y
1059+  229B 3E 01                    ld a,%00000001
1060+  229D 32 C4 2D                 ld (LM_p+7),a       ;256+Y
1061+  22A0 3E 08                    ld a,%00001000      ;TIMP copy
1062+  22A2 32 CA 2D                 ld (LM_p+13),a      ;logical
1063+  22A5 CD CB 2D                 call LMMMf          ;copy VRAM -> VRAM without transparent color
1064+  22A8                                              ;to visible area
1065+  22A8 FB                       ei                                 
1066+  22A9 C9                       ret
1067+  22AA             
1068+  22AA             ;----------------------------------
1069+  22AA             ; Puts holder on board
1070+  22AA             
1071+  22AA             Holder2Screen:                             ; draw holder to screen with piece
1072+  22AA F3                   di
1073+  22AB 3E DF                ld a,255-$20                
1074+  22AD 32 85 2D             ld (HC_p+0),a
1075+  22B0 3E B1                ld a,209-$20
1076+  22B2 32 87 2D             ld (HC_p+2),a
1077+  22B5 3A 15 1F             ld a,(Move_X)
1078+  22B8 D6 04                sub 4               ;X-4
1079+  22BA 32 89 2D             ld (HC_p+4),a       ;to X
1080+  22BD 3A 16 1F             ld a,(Move_Y)
1081+  22C0 D6 04                sub 4               ;Y-4
1082+  22C2 32 8B 2D             ld (HC_p+6),a       ;to Y (+next byte)
1083+  22C5 3E 20                ld a,$20
1084+  22C7 32 8D 2D             ld (HC_p+8),a       ;32
1085+  22CA 32 8F 2D             ld (HC_p+10),a      ;32
1086+  22CD AF                   xor a         
1087+  22CE 32 86 2D             ld (HC_p+1),a       ;X
1088+  22D1 32 8A 2D             ld (HC_p+5),a       ;
1089+  22D4 32 8C 2D             ld (HC_p+7),a       ;         
1090+  22D7 32 8E 2D             ld (HC_p+9),a       ;dots
1091+  22DA 32 90 2D             ld (HC_p+11),a      ;dots
1092+  22DD 32 91 2D             ld (HC_p+12),a      ;DIX/DIY
1093+  22E0 3E 01                ld a,%00000001
1094+  22E2 32 88 2D             ld (HC_p+3),a       ;from holder 256+Y down
1095+  22E5 CD 92 2D             call HMMMf          ;copy VRAM -> VRAM
1096+  22E8 FB                   ei
1097+  22E9 C9                   ret
1098+  22EA                                                
1099+  22EA             ;-------------------------------------------------
1100+  22EA             ;
1101+  22EA             ;BOARD copying to third screen
1102+  22EA             ; Fast but takes much VRAM.
1103+  22EA             ; Not used but working. It is sick to use VRAM like this.
1104+  22EA             ;-------------------------------------------------
1105+  22EA             COPY2VRAMoutside:
1106+  22EA 7A                   ld a,d              ;X
1107+  22EB 32 85 2D             ld (HC_p+0),a
1108+  22EE 32 89 2D             ld (HC_p+4),a       ;to X
1109+  22F1 7B                   ld a,e              ;Y
1110+  22F2 32 87 2D             ld (HC_p+2),a
1111+  22F5 32 8B 2D             ld (HC_p+6),a       ;to Y (+next byte)
1112+  22F8 3E 19                ld a,$19
1113+  22FA 32 8D 2D             ld (HC_p+8),a       ;25
1114+  22FD 32 8F 2D             ld (HC_p+10),a      ;25
1115+  2300 AF                   xor a         
1116+  2301 32 86 2D             ld (HC_p+1),a       ;X
1117+  2304 32 88 2D             ld (HC_p+3),a       ;Y
1118+  2307 32 8A 2D             ld (HC_p+5),a       ;
1119+  230A 32 8E 2D             ld (HC_p+9),a       ;dots
1120+  230D 32 90 2D             ld (HC_p+11),a      ;dots
1121+  2310 32 91 2D             ld (HC_p+12),a      ;DIX/DIY
1122+  2313 3E 01                ld a,%00000001
1123+  2315 32 8C 2D             ld (HC_p+7),a       ; 256+Y down
1124+  2318 CD 92 2D             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1125+  231B C9                   ret
1126+  231C             
1127+  231C             COPY_BOARD2VRAM_outside:     ;SAVES
1128+  231C F5                   push af
1129+  231D AF                   xor a               ;=0
1130+  231E 32 85 2D             ld (HC_p+0),a       ;X
1131+  2321 32 89 2D             ld (HC_p+4),a       ;to X             
1132+  2324 32 87 2D             ld (HC_p+2),a       ;Y
1133+  2327 32 8B 2D             ld (HC_p+6),a       ;to Y (+next 2 bits)
1134+  232A 3E C8                ld a,$19*8
1135+  232C 32 8D 2D             ld (HC_p+8),a       ;25*8
1136+  232F 32 8F 2D             ld (HC_p+10),a      ;25*8
1137+  2332 AF                   xor a        
1138+  2333 32 86 2D             ld (HC_p+1),a       ;X
1139+  2336 32 88 2D             ld (HC_p+3),a       ;Y
1140+  2339 32 8A 2D             ld (HC_p+5),a       ;
1141+  233C 32 8E 2D             ld (HC_p+9),a       ;dots
1142+  233F 32 90 2D             ld (HC_p+11),a      ;dots
1143+  2342 32 91 2D             ld (HC_p+12),a      ;DIX/DIY
1144+  2345 3E 03                ld a,%00000011
1145+  2347 32 8C 2D             ld (HC_p+7),a       ; 512+Y down
1146+  234A CD 92 2D             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1147+  234D F1                   pop af
1148+  234E C9                   ret
1149+  234F                      
1150+  234F             RESTORE_BOARD_VRAM_outside:  ;RESTORES 
1151+  234F F5                   push af
1152+  2350 AF                   xor a               ;=0
1153+  2351 32 85 2D             ld (HC_p+0),a       ;X
1154+  2354 32 89 2D             ld (HC_p+4),a       ;to X             
1155+  2357 32 87 2D             ld (HC_p+2),a       ;Y (+next 2 bits)
1156+  235A 32 8B 2D             ld (HC_p+6),a       ;to Y
1157+  235D 3E C8                ld a,$19*8
1158+  235F 32 8D 2D             ld (HC_p+8),a       ;25*8
1159+  2362 32 8F 2D             ld (HC_p+10),a      ;25*8
1160+  2365 AF                   xor a        
1161+  2366 32 86 2D             ld (HC_p+1),a       ;X
1162+  2369 32 8C 2D             ld (HC_p+7),a       ;to Y
1163+  236C 32 8A 2D             ld (HC_p+5),a       ;
1164+  236F 32 8E 2D             ld (HC_p+9),a       ;dots
1165+  2372 32 90 2D             ld (HC_p+11),a      ;dots
1166+  2375 32 91 2D             ld (HC_p+12),a      ;DIX/DIY
1167+  2378 3E 03                ld a,%00000011
1168+  237A 32 88 2D             ld (HC_p+3),a       ; 512+Y down
1169+  237D CD 92 2D             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1170+  2380 F1                   pop af
1171+  2381 C9                   ret
1172+  2382                        
1173+  2382             ; calculates HL screen coordinates X,Y by square number
1174+  2382             ; provide square in c-reg
1175+  2382             GetHLbySquare:
1176+  2382 F5                   push af
1177+  2383 C5                   push bc
1178+  2384 D5                   push de
1179+  2385 21 B4 05             ld hl,$05D2-$0005-$0019
1180+  2388 79                   ld a,c
1181+  2389 E6 07                and 7
1182+  238B                           ; X- a..h of table
1183+  238B                      ;cp 2
1184+  238B                      ;jp c,GetHLx_
1185+  238B                      ;push bc
1186+  238B                      ;ld bc,$0100
1187+  238B                      ;add hl,bc      ; one pixel visal correction to the right
1188+  238B                      ;pop bc
1189+  238B             GetHLx_:         
1190+  238B 11 00 19             ld de,$1900
1191+  238E             GetHLbySqX:
1192+  238E FE 00                cp 0
1193+  2390 28 04                jr z,GetHLokSqX
1194+  2392 19                   add hl,de
1195+  2393 3D                   dec a
1196+  2394 18 F8                jr GetHLbySqX        
1197+  2396             GetHLokSqX:
1198+  2396 79                   ld a,c
1199+  2397 CB 3F                srl a
1200+  2399 CB 3F                srl a
1201+  239B CB 3F                srl a
1202+  239D                           ; Y- 1..8 of table
1203+  239D 11 19 00             ld de,$0019
1204+  23A0             GetHLbySqY:
1205+  23A0 FE 00                cp 0
1206+  23A2 28 07                jr z,GetHLokSqY
1207+  23A4 37                   scf
1208+  23A5 3F                   ccf
1209+  23A6 ED 52                sbc hl,de
1210+  23A8 3D                   dec a
1211+  23A9 18 F5                jr GetHLbySqY        
1212+  23AB             GetHLokSqY:
1213+  23AB D1                   pop de
1214+  23AC C1                   pop bc
1215+  23AD F1                   pop af
1216+  23AE C9                   ret
1217+  23AF                      
1218+  23AF             ; calculates white square in e-reg flag by square number (a-reg)
1219+  23AF             GetWhiteSqFlagInE:
1220+  23AF F5                   push af
1221+  23B0 79                   ld a,c
1222+  23B1 E6 07                and 7
1223+  23B3 5F                   ld e,a    ; X- a..h of table
1224+  23B4                      
1225+  23B4 79                   ld a,c
1226+  23B5 CB 3F                srl a
1227+  23B7 CB 3F                srl a
1228+  23B9 CB 3F                srl a
1229+  23BB                                ; Y- 1..8 of table
1230+  23BB 83                   add a,e
1231+  23BC E6 01                and 1     ;mod2
1232+  23BE 5F                   ld e,a    ; contains flag
1233+  23BF F1                   pop af
1234+  23C0 C9                   ret
1235+  23C1                               
1236+  23C1             ;----------------------------------------------------|
1237+  23C1                      ; locates index in array of pieces datas
1238+  23C1                      ; a-piece char of p..K
1239+  23C1                      ; e - square is white flag
1240+  23C1                      ; on return a contains index
1241+  23C1                                             
1242+  23C1             GetPieceIdx:
1243+  23C1 C5                   push bc
1244+  23C2 D5                   push de
1245+  23C3 E5                   push hl
1246+  23C4 21 DA 23             ld hl,pieceL
1247+  23C7 06 0D                ld b,13
1248+  23C9 16 00                ld d,0
1249+  23CB             GetPcIxLoop:
1250+  23CB BE                   cp (hl)
1251+  23CC 28 04                jr z,GetPcIx1
1252+  23CE 23                   inc hl
1253+  23CF 14                   inc d
1254+  23D0 10 F9                djnz GetPcIxLoop               
1255+  23D2             GetPcIx1:
1256+  23D2 CB 22                sla d  ; x2
1257+  23D4 7B                   ld a,e ;black or white square?; 
1258+  23D5 82                   add a,d
1259+  23D6 E1                   pop hl
1260+  23D7 D1                   pop de
1261+  23D8 C1                   pop bc
1262+  23D9 C9                   ret        
1263+  23DA             
1264+  23DA 20 50 4E 42 pieceL:  .byte " PNBRQKpnbrqk"
1264+  23DE 52 51 4B 70 
1264+  23E2 6E 62 72 71 
1264+  23E6 6B 
1265+  23E7             
1266+  23E7                      ;and position IX after
1267+  23E7             GetPieceIX:
1268+  23E7 C5                   push bc
1269+  23E8 E5                   push hl
1270+  23E9 06 00                ld b,0
1271+  23EB 4F                   ld c,a
1272+  23EC CB 21                sla c    ; offset
1273+  23EE DD 21 A6 1B          ld ix, PiecesIX
1274+  23F2 DD 09                add ix,bc
1275+  23F4 DD 6E 00             ld l,(ix)
1276+  23F7 DD 23                inc ix
1277+  23F9 DD 66 00             ld h,(ix)
1278+  23FC E5                   push hl
1279+  23FD DD E1                pop ix   ;now IX contains address
1280+  23FF E1                   pop hl
1281+  2400 C1                   pop bc
1282+  2401 C9                   ret
1283+  2402             
1284+  2402                      ;to determine IX for mask
1285+  2402             GetPieceMskIX:
1286+  2402 C5                   push bc
1287+  2403 E5                   push hl
1288+  2404 06 00                ld b,0
1289+  2406 4F                   ld c,a
1290+  2407 CB 21                sla c
1291+  2409 DD 21 29 1C          ld ix, PiecesMskIX     ; offset of masks
1292+  240D DD 09                add ix,bc
1293+  240F DD 6E 00             ld l,(ix)
1294+  2412 DD 23                inc ix
1295+  2414 DD 66 00             ld h,(ix)
1296+  2417 E5                   push hl
1297+  2418 DD E1                pop ix   ;now IX contains address
1298+  241A E1                   pop hl
1299+  241B C1                   pop bc
1300+  241C C9                   ret
1301+  241D             
1302+  241D             ; This copie mask of piece to VRAM
1303+  241D             SaveMaskToo:
1304+  241D F5                   push af         ; and save the mask of piece too - to see it moving after
1305+  241E C5                   push bc
1306+  241F D5                   push de
1307+  2420 E5                   push hl
1308+  2421 DD E5                push ix
1309+  2423 79                   ld a,c
1310+  2424 FE 02                cp 2
1311+  2426 38 47                jr c, pcMsk2VRAMno
1312+  2428 CB 3F                srl a
1313+  242A 3D                   dec a           ; a = index PpNn....Kk      
1314+  242B 4F                   ld c,a
1315+  242C 06 00                ld b,0
1316+  242E 21 41 1C             ld hl,VRAMcpMsk
1317+  2431 09                   add hl,bc       ; hl contains flag if piece has been saved to VRAM
1318+  2432 7E                   ld a,(hl)
1319+  2433 FE 01                cp 1
1320+  2435 28 38                jr z,pcMsk2VRAMno
1321+  2437 3E 01                ld a,1
1322+  2439 77                   ld (hl),a       ; now will be saved
1323+  243A 79                   ld a,c
1324+  243B CD 02 24             call GetPieceMskIX  ; get ix-address for mask
1325+  243E 11 1A 1A             ld de,$1A1A         ;26x26
1326+  2441 26 7B                ld h,$10 + $19*3
1327+  2443 2E 10                ld l,$10
1328+  2445 79                   ld a,c
1329+  2446 FE 06                cp 6                ;for PNBRQK 0..5
1330+  2448 38 07                jr c,pcMskSetY
1331+  244A 7C                   ld a,h
1332+  244B C6 19                add a,$19           ; set next column for black pieces
1333+  244D 67                   ld h,a
1334+  244E 79                   ld a,c
1335+  244F D6 06                sub 6
1336+  2451             pcMskSetY:         
1337+  2451 FE 00                cp 0
1338+  2453 28 09                jr z,pcMskGoodY
1339+  2455 3D                   dec a
1340+  2456 F5                   push af
1341+  2457 7D                   ld a,l
1342+  2458 C6 19                add a,$19
1343+  245A 6F                   ld l,a
1344+  245B F1                   pop af
1345+  245C 18 F3                jr pcMskSetY
1346+  245E             pcMskGoodY:
1347+  245E CD 70 2B             call HMMC           ;copy mask RAM -> VRAM                  
1348+  2461             
1349+  2461 EB                   ex de,hl            ; de = hl
1350+  2462 21 4D 1C             ld hl,VRAMcpMskXY   ; save X,Y for mask of piece index
1351+  2465 06 00                ld b,0
1352+  2467 09                   add hl,bc
1353+  2468 09                   add hl,bc         
1354+  2469 72                   ld (hl),d           ;save X
1355+  246A 23                   inc hl
1356+  246B 73                   ld (hl),e           ;save Y
1357+  246C                      
1358+  246C CD EA 22             call COPY2VRAMoutside
1359+  246F                      
1360+  246F             pcMsk2VRAMno:        
1361+  246F DD E1                pop ix
1362+  2471 E1                   pop hl
1363+  2472 D1                   pop de
1364+  2473 C1                   pop bc
1365+  2474 F1                   pop af
1366+  2475 C9                   ret
1367+  2476             
1368+  2476 00          VRAM_msx .byte 0  ; flag that VRAM contains it
1369+  2477             
1370+  2477             ; Puts MSX logo on screen
1371+  2477             PutMSXlogo:
1372+  2477 F5                   push af
1373+  2478 C5                   push bc
1374+  2479 D5                   push de
1375+  247A E5                   push hl
1376+  247B DD E5                push ix
1377+  247D                      
1378+  247D 3A 76 24             ld a,(VRAM_msx)
1379+  2480 FE 00                cp 0
1380+  2482 20 1A                jr nz,PutMSXlog_Copy
1381+  2484                              
1382+  2484 26 DD                ld h,255-$22
1383+  2486 2E AF                ld l,209-$22
1384+  2488 11 0C 1E             ld de,$1E0C
1385+  248B DD 21 F1 C1          ld ix, dtMSXlogo+6     ; top
1386+  248F CD 70 2B             call HMMC              ;copy RAM -> VRAM
1387+  2492 0E 00                ld c,0
1388+  2494 CD 41 25             call COPY_frames2VRAM_outside ;the same as for frame  
1389+  2497                      
1390+  2497 3E 01                ld a,1
1391+  2499 32 76 24             ld (VRAM_msx),a
1392+  249C 18 0C                jr PutMSXex
1393+  249E                               
1394+  249E             PutMSXlog_Copy:
1395+  249E 26 DD                ld h,255-$22
1396+  24A0 2E AF                ld l,209-$22
1397+  24A2 11 0C 1E             ld de,$1E0C            ; copy from VRAM outside > VRAM on screen
1398+  24A5 0E 00                ld c,0
1399+  24A7 CD 8C 25             call COPY_frames_fromVRAM
1400+  24AA                      
1401+  24AA             PutMSXex:                                                                                                                                                        
1402+  24AA DD E1                pop ix
1403+  24AC E1                   pop hl
1404+  24AD D1                   pop de
1405+  24AE C1                   pop bc        
1406+  24AF F1                   pop af
1407+  24B0 C9                   ret                  
1408+  24B1             
1409+  24B1                      
1410+  24B1             ; Puts frame for chess board
1411+  24B1             PutFrame:
1412+  24B1 F5                   push af
1413+  24B2 C5                   push bc
1414+  24B3 D5                   push de
1415+  24B4 E5                   push hl
1416+  24B5 DD E5                push ix
1417+  24B7 3A 40 25             ld a,(VRAM_frame)
1418+  24BA FE 00                cp 0
1419+  24BC 20 4F                jr nz,CopyFramesFromVRAM
1420+  24BE                                ; DRAW and SAVE
1421+  24BE 21 00 00             ld hl,0
1422+  24C1 11 08 D2             ld de,$D208
1423+  24C4 DD 21 E1 AC          ld ix, dtFRUP+6     ; top
1424+  24C8 CD 70 2B             call HMMC           ;copy RAM -> VRAM
1425+  24CB 0E 01                ld c,1
1426+  24CD CD 41 25             call COPY_frames2VRAM_outside
1427+  24D0             
1428+  24D0 21 00 00             ld hl,0
1429+  24D3 11 D2 08             ld de,$08D2
1430+  24D6 DD 21 45 A6          ld ix, dtFRLF+6     ; left
1431+  24DA CD 70 2B             call HMMC           ;copy RAM -> VRAM
1432+  24DD 0E 02                ld c,2
1433+  24DF CD 41 25             call COPY_frames2VRAM_outside
1434+  24E2             
1435+  24E2 21 00 CA             ld hl,$D200-$0800
1436+  24E5 11 D2 08             ld de,$08D2
1437+  24E8 DD 21 93 A9          ld ix, dtFRRT+6     ; right
1438+  24EC CD 70 2B             call HMMC           ;copy RAM -> VRAM
1439+  24EF 0E 00                ld c,0
1440+  24F1 CD 41 25             call COPY_frames2VRAM_outside
1441+  24F4                      
1442+  24F4 21 CA 00             ld hl,$00D2-$0008
1443+  24F7 11 08 D2             ld de,$D208
1444+  24FA DD 21 F7 A2          ld ix, dtFRDN+6     ; bottom
1445+  24FE CD 70 2B             call HMMC           ;copy RAM -> VRAM
1446+  2501 0E 00                ld c,0
1447+  2503 CD 41 25             call COPY_frames2VRAM_outside
1448+  2506                      
1449+  2506 3E 01                ld a,1
1450+  2508 32 40 25             ld (VRAM_frame),a
1451+  250B                      
1452+  250B 18 2C                jr PutFramesEx
1453+  250D                      
1454+  250D             CopyFramesFromVRAM:
1455+  250D 21 00 00             ld hl,0
1456+  2510 11 08 D2             ld de,$D208         ; top
1457+  2513 0E 01                ld c,1         
1458+  2515 CD 8C 25             call COPY_frames_fromVRAM
1459+  2518             
1460+  2518 21 00 00             ld hl,0
1461+  251B 11 D2 08             ld de,$08D2         ; left 
1462+  251E 0E 02                ld c,2           
1463+  2520 CD 8C 25             call COPY_frames_fromVRAM
1464+  2523             
1465+  2523 21 00 CA             ld hl,$D200-$0800
1466+  2526 11 D2 08             ld de,$08D2         ; right
1467+  2529 0E 00                ld c,0         
1468+  252B CD 8C 25             call COPY_frames_fromVRAM
1469+  252E                      
1470+  252E 21 CA 00             ld hl,$00D2-$0008
1471+  2531 11 08 D2             ld de,$D208         ; bottom
1472+  2534 0E 00                ld c,0         
1473+  2536 CD 8C 25             call COPY_frames_fromVRAM
1474+  2539             
1475+  2539             PutFramesEx:
1476+  2539 DD E1                pop ix
1477+  253B E1                   pop hl
1478+  253C D1                   pop de
1479+  253D C1                   pop bc
1480+  253E F1                   pop af
1481+  253F C9                   ret
1482+  2540             
1483+  2540 00          VRAM_frame:  .byte 0         ; 1 if frame saved to VRAM
1484+  2541             
1485+  2541             ; if c=0 then use XY of HL as it is
1486+  2541             ; if c=1 then upper border of frame
1487+  2541             ; if c=2 then left border of frame
1488+  2541             COPY_frames2VRAM_outside:     ;SAVES FRAME
1489+  2541 F5                   push af
1490+  2542 E5                   push hl
1491+  2543 7C                   ld a,h
1492+  2544 32 85 2D             ld (HC_p+0),a       ;X = H
1493+  2547 7D                   ld a,l            
1494+  2548 32 87 2D             ld (HC_p+2),a       ;Y = L
1495+  254B 7A                   ld a,d
1496+  254C 32 8D 2D             ld (HC_p+8),a       ;D width
1497+  254F 7B                   ld a,e
1498+  2550 32 8F 2D             ld (HC_p+10),a      ;E height
1499+  2553 AF                   xor a        
1500+  2554 32 86 2D             ld (HC_p+1),a       ;X
1501+  2557 32 88 2D             ld (HC_p+3),a       ;Y
1502+  255A 32 8A 2D             ld (HC_p+5),a       ;
1503+  255D 32 8E 2D             ld (HC_p+9),a       ;dots
1504+  2560 32 90 2D             ld (HC_p+11),a      ;dots
1505+  2563 32 91 2D             ld (HC_p+12),a      ;DIX/DIY
1506+  2566 3E 03                ld a,%00000011
1507+  2568 32 8C 2D             ld (HC_p+7),a       ; 512+Y down
1508+  256B                      
1509+  256B 79                   ld a,c
1510+  256C FE 01                cp 1
1511+  256E 28 06                jr z,CPYfrUP
1512+  2570 FE 02                cp 2
1513+  2572 28 07                jr z,CPYfrLF
1514+  2574 18 08                jr CPY_asItIs        
1515+  2576             CPYfrUP:
1516+  2576 21 D4 00             ld hl,$00D2+$0002
1517+  2579 18 03                jr CPY_asItIs
1518+  257B             CPYfrLF:
1519+  257B 21 00 D4             ld hl,$D200+$0200
1520+  257E             
1521+  257E             CPY_asItIs:
1522+  257E 7C                   ld a,h
1523+  257F 32 89 2D             ld (HC_p+4),a       ;to X
1524+  2582 7D                   ld a,l
1525+  2583 32 8B 2D             ld (HC_p+6),a       ;to Y (+next 2 bits)
1526+  2586 E1                   pop hl
1527+  2587 CD 92 2D             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1528+  258A F1                   pop af
1529+  258B C9                   ret
1530+  258C                      
1531+  258C             COPY_frames_fromVRAM:        ;Copies back FRAME from VRAM
1532+  258C F5                   push af
1533+  258D E5                   push hl
1534+  258E 7C                   ld a,h
1535+  258F 32 89 2D             ld (HC_p+4),a       ;to X
1536+  2592 7D                   ld a,l            
1537+  2593 32 8B 2D             ld (HC_p+6),a       ;to Y (+next 2 bits)
1538+  2596 7A                   ld a,d
1539+  2597 32 8D 2D             ld (HC_p+8),a       ;D width
1540+  259A 7B                   ld a,e
1541+  259B 32 8F 2D             ld (HC_p+10),a      ;E height
1542+  259E AF                   xor a        
1543+  259F 32 86 2D             ld (HC_p+1),a       ;X
1544+  25A2 32 8C 2D             ld (HC_p+7),a       ;to Y
1545+  25A5 32 8A 2D             ld (HC_p+5),a       ;
1546+  25A8 32 8E 2D             ld (HC_p+9),a       ;dots
1547+  25AB 32 90 2D             ld (HC_p+11),a      ;dots
1548+  25AE 32 91 2D             ld (HC_p+12),a      ;DIX/DIY
1549+  25B1 3E 03                ld a,%00000011
1550+  25B3 32 88 2D             ld (HC_p+3),a       ; 512+Y down
1551+  25B6                      
1552+  25B6 79                   ld a,c
1553+  25B7 FE 01                cp 1
1554+  25B9 28 06                jr z,BCPYfrUP
1555+  25BB FE 02                cp 2
1556+  25BD 28 07                jr z,BCPYfrLF
1557+  25BF 18 08                jr BCPY_asItIs        
1558+  25C1             BCPYfrUP:
1559+  25C1 21 D4 00             ld hl,$00D2+$0002
1560+  25C4 18 03                jr BCPY_asItIs
1561+  25C6             BCPYfrLF:
1562+  25C6 21 00 D4             ld hl,$D200+$0200
1563+  25C9             
1564+  25C9             BCPY_asItIs:
1565+  25C9 7C                   ld a,h
1566+  25CA 32 85 2D             ld (HC_p+0),a       ;X = H
1567+  25CD 7D                   ld a,l
1568+  25CE 32 87 2D             ld (HC_p+2),a       ;Y = L
1569+  25D1 E1                   pop hl
1570+  25D2 CD 92 2D             call HMMMf          ;copy VRAM outside visible screen -> VRAM
1571+  25D5 F1                   pop af
1572+  25D6 C9                   ret
1573+  25D7             
1574+  25D7                             
1575+  25D7                      
1576+  25D7             ; Puts rounded identification about side to move
1577+  25D7             
1578+  25D7             PutToMove:
1579+  25D7 F5                   push af
1580+  25D8 C5                   push bc
1581+  25D9 D5                   push de
1582+  25DA E5                   push hl
1583+  25DB DD E5                push ix
1584+  25DD                      
1585+  25DD DD 21 65 1C          ld ix,CircIX
1586+  25E1                               
1587+  25E1 3A 28 1C             ld a,(VRAMcirc)
1588+  25E4 FE 00                cp 0
1589+  25E6 20 30                jr nz,circ2VRAM2
1590+  25E8                                                  
1591+  25E8                      ;DRAW and SAVE a copy                
1592+  25E8 3E 01                ld a,1
1593+  25EA 32 28 1C             ld (VRAMcirc),a     ; bitmap saved flag
1594+  25ED                      
1595+  25ED 06 00                ld b,0       ; loop 4 bitmaps
1596+  25EF 26 00                ld h,0       ; X
1597+  25F1             Save2VRAMsgnLoop:
1598+  25F1 C5                   push bc
1599+  25F2                      
1600+  25F2 DD E5                push ix            ; table of bitmaps
1601+  25F4 CD 52 26             call GetIXfrom4tb  ; ix - address in VRAM for current bitmap
1602+  25F7                      
1603+  25F7 2E C3                ld l,209-$E    ; hl = X,Y
1604+  25F9                      
1605+  25F9 EB                   ex de,hl       ; de = hl
1606+  25FA CD EA 22             call COPY2VRAMoutside  ; copy blank to put sign on it with transp.logical                 
1607+  25FD EB                   ex de,hl                          
1608+  25FE                                                          
1609+  25FE 11 0E 0E             ld de,$0E0E    ; 14x14
1610+  2601 CD 70 2B             call HMMC      ;copy RAM -> VRAM
1611+  2604                 
1612+  2604 CD 60 26             call SgCopy2VRAMtrsp  ;copies 13x13 (w/o transparent)
1613+  2607                      
1614+  2607 DD E1                pop ix
1615+  2609 DD 23                inc ix
1616+  260B DD 23                inc ix
1617+  260D                      
1618+  260D 7C                   ld a,h
1619+  260E C6 0E                add a,$E       ; X=X+14
1620+  2610 67                   ld h,a
1621+  2611                      
1622+  2611 C1                   pop bc
1623+  2612 04                   inc b
1624+  2613 78                   ld a,b
1625+  2614 FE 04                cp 4
1626+  2616 20 D9                jr nz,Save2VRAMsgnLoop       
1627+  2618                        
1628+  2618             circ2VRAM2:         
1629+  2618                      ;COPY sign from VRAM which side to move
1630+  2618                      
1631+  2618 26 00                ld h,0                  ;from X for case "white to move" (bitmaps are placed horizontally)
1632+  261A 2E C3                ld l,209-$E             ;from Y
1633+  261C                      
1634+  261C 3A 81 01             ld a,(SIDE)
1635+  261F FE 00                cp 0
1636+  2621 28 0A                jr z,SgWhite2Move
1637+  2623 DD 23                inc ix
1638+  2625 DD 23                inc ix
1639+  2627 DD 23                inc ix
1640+  2629 DD 23                inc ix   ;will use two bitmaps at addr+4 
1641+  262B 26 1C                ld h,$E+$E              ;from X for case "black to move"            
1642+  262D             SgWhite2Move:
1643+  262D                      
1644+  262D DD E5                push ix                 ; table of bitmaps
1645+  262F CD 52 26             call GetIXfrom4tb       ; ix - address in VRAM for current bitmap of white side
1646+  2632                      
1647+  2632 16 D2                ld d,204+6
1648+  2634 1E C2                ld e,204-10
1649+  2636                      
1650+  2636 CD 97 26             call SgCopy2Board  ;white sign
1651+  2639                      
1652+  2639 DD E1                pop ix ; restore table of bitmaps
1653+  263B DD 23                inc ix
1654+  263D DD 23                inc ix ; to next bitmap pointer
1655+  263F             
1656+  263F CD 52 26             call GetIXfrom4tb  ; ix - address in VRAM for current bitmap of black side
1657+  2642                      
1658+  2642 7C                   ld a,h
1659+  2643 C6 0E                add a,$E       ; X=X+14
1660+  2645 67                   ld h,a
1661+  2646                      
1662+  2646 1E 08                ld e,8
1663+  2648 CD 97 26             call SgCopy2Board  ;black sign
1664+  264B                      
1665+  264B DD E1                pop ix
1666+  264D E1                   pop hl
1667+  264E D1                   pop de
1668+  264F C1                   pop bc
1669+  2650 F1                   pop af
1670+  2651 C9                   ret
1671+  2652             
1672+  2652             GetIXfrom4tb:
1673+  2652 D5                   push de
1674+  2653 DD 5E 00             ld e,(ix)
1675+  2656 DD 23                inc ix
1676+  2658 DD 56 00             ld d,(ix)
1677+  265B                               
1678+  265B D5                   push de
1679+  265C DD E1                pop ix         ; ix - address in VRAM
1680+  265E D1                   pop de
1681+  265F C9                   ret
1682+  2660             
1683+  2660             ;Copy with logical transparent
1684+  2660             SgCopy2VRAMtrsp: 
1685+  2660                      
1686+  2660 7C                   ld a,h              ;X
1687+  2661 32 BD 2D             ld (LM_p+0),a       ;
1688+  2664 32 C1 2D             ld (LM_p+4),a       ;to X          
1689+  2667 7D                   ld a,l              ;Y
1690+  2668 32 BF 2D             ld (LM_p+2),a       ;
1691+  266B 32 C3 2D             ld (LM_p+6),a       ;to Y         
1692+  266E 3E 0E                ld a,$E
1693+  2670 32 C5 2D             ld (LM_p+8),a       ;14
1694+  2673 32 C7 2D             ld (LM_p+10),a      ;14
1695+  2676 AF                   xor a
1696+  2677 32 BE 2D             ld (LM_p+1),a
1697+  267A 32 C2 2D             ld (LM_p+5),a       ;
1698+  267D 32 C0 2D             ld (LM_p+3),a       ;            
1699+  2680 32 C6 2D             ld (LM_p+9),a       ;dots
1700+  2683 32 C8 2D             ld (LM_p+11),a      ;dots
1701+  2686 32 C9 2D             ld (LM_p+12),a      ;DIX/DIY
1702+  2689 3E 01                ld a,%00000001
1703+  268B 32 C4 2D             ld (LM_p+7),a       ;256+Y
1704+  268E 3E 08                ld a,%00001000      ;TIMP copy
1705+  2690 32 CA 2D             ld (LM_p+13),a      ;logical
1706+  2693 CD CB 2D             call LMMMf          ;copy VRAM -> VRAM without transparent color
1707+  2696 C9                   ret                 ;to invisible area          
1708+  2697                      
1709+  2697             SgCopy2Board:
1710+  2697             
1711+  2697 7C                   ld a,h              ;saved X
1712+  2698 32 85 2D             ld (HC_p+0),a       ;X
1713+  269B 7D                   ld a,l              ;saved Y                      
1714+  269C 32 87 2D             ld (HC_p+2),a       ;Y
1715+  269F 7A                   ld a,d         
1716+  26A0 32 89 2D             ld (HC_p+4),a       ;to X
1717+  26A3 7B                   ld a,e         
1718+  26A4 32 8B 2D             ld (HC_p+6),a       ;to Y (+next 2 bits)
1719+  26A7 3E 0E                ld a,$E
1720+  26A9 32 8D 2D             ld (HC_p+8),a       ;14
1721+  26AC 32 8F 2D             ld (HC_p+10),a      ;14
1722+  26AF AF                   xor a        
1723+  26B0 32 86 2D             ld (HC_p+1),a       ;X
1724+  26B3 32 8C 2D             ld (HC_p+7),a       ;to Y
1725+  26B6 32 8A 2D             ld (HC_p+5),a       ;
1726+  26B9 32 8E 2D             ld (HC_p+9),a       ;dots
1727+  26BC 32 90 2D             ld (HC_p+11),a      ;dots
1728+  26BF 32 91 2D             ld (HC_p+12),a      ;DIX/DIY
1729+  26C2 3E 01                ld a,%00000001
1730+  26C4 32 88 2D             ld (HC_p+3),a       ; 256+Y
1731+  26C7 CD 92 2D             call HMMMf          ;copy VRAM outside visible screen -> VRAM on board                         
1732+  26CA C9                   ret
1733+  26CB             
1734+  26CB             ;------------------------------------------------------
1735+  26CB             ; KEY CONTROLLER
1736+  26CB             ; a-reg contains ASCII code of last key pressed
1737+  26CB             ;
1738+  26CB             
1739+  26CB 00          PreKeyWas:  .byte 0
1740+  26CC             
1741+  26CC             Cursor_Key_Controls:
1742+  26CC             
1743+  26CC F5                   push af
1744+  26CD C5                   push bc
1745+  26CE                      
1746+  26CE FE 7A                cp 'z'             ; If Z was pressed, double action
1747+  26D0 20 0C                jr nz, CkeyIf_z
1748+  26D2             CkeyZ:         
1749+  26D2                                         ; use the same key that was before
1750+  26D2 3A CB 26             ld a,(PreKeyWas)
1751+  26D5 4F                   ld c,a
1752+  26D6 3E 00                ld a,0
1753+  26D8 32 CB 26             ld (PreKeyWas),a
1754+  26DB 79                   ld a,c
1755+  26DC 18 1B                jr CkeyWhatKeyCode         
1756+  26DE             CkeyIf_z:
1757+  26DE FE 5A                cp 'Z'
1758+  26E0 28 F0                jr z, CkeyZ
1759+  26E2 FE 2F                cp '/'
1760+  26E4 28 EC                jr z, CkeyZ
1761+  26E6 FE 7E                cp '~'
1762+  26E8 28 E8                jr z, CkeyZ
1763+  26EA FE 7C                cp '|'
1764+  26EC 28 E4                jr z, CkeyZ     ; bunch of the same keys
1765+  26EE             CkeyNormal:
1766+  26EE                 
1767+  26EE 4F                   ld c,a
1768+  26EF 3A CB 26             ld a,(PreKeyWas)
1769+  26F2 B9                   cp c
1770+  26F3 28 29                jr z,CkeyNo       ; the same, emulator may be too fast
1771+  26F5 79                   ld a,c
1772+  26F6 32 CB 26             ld (PreKeyWas),a  ; key now
1773+  26F9                      
1774+  26F9             CkeyWhatKeyCode:
1775+  26F9 FE 1B                cp 27
1776+  26FB 20 07                jr nz, CkeyIf_space
1777+  26FD 3E 01                ld a,1                     ; Exit on ESC
1778+  26FF 32 A5 1B             ld (Grph_Exit),a
1779+  2702 18 1A                jr CkeyNo
1780+  2704                               
1781+  2704             CkeyIf_space:                  
1782+  2704 FE 20                cp 32
1783+  2706 20 05                jr nz, CkeyIfEnter
1784+  2708             CkeySpace:                         ; SPACE pressed
1785+  2708 CD 28 27             call DO_Replay_Move
1786+  270B 18 11                jr CkeyNo
1787+  270D                      
1788+  270D             CkeyIfEnter:
1789+  270D FE 0D                cp 13
1790+  270F 28 F7                jr z, CkeySpace           ; the same as space
1791+  2711             
1792+  2711             CKeyPsetup:
1793+  2711              
1794+  2711 FE 75                cp 'u'                      ; If U was pressed, try undomove
1795+  2713 20 05                jr nz, CkeyIf_u
1796+  2715             CkeyU:        
1797+  2715 CD DB 1D             call Chess_UnMake_Move_U    ; unmake last move
1798+  2718 18 04                jr CkeyNo
1799+  271A             CkeyIf_u:
1800+  271A FE 55                cp 'U'
1801+  271C 28 F7                jr z, CkeyU
1802+  271E                      
1803+  271E             CkeyIfNoU:
1804+  271E             
1805+  271E             CkeyNo:
1806+  271E C1                   pop bc
1807+  271F F1                   pop af
1808+  2720 C9                   ret 
1809+  2721                                                                                                                                                               
1810+  2721 21 21 21 21          .byte "!!!!!!",0                 
1810+  2725 21 21 00 
1811+  2728             ;-----------------------------------------------------------
1812+  2728             ;
1813+  2728             ; Process replay of one move
1814+  2728             ;
1815+  2728             ;-----------------------------------------------------------
1816+  2728             DO_Replay_Move:
1817+  2728 F5                   push af
1818+  2729 C5                   push bc
1819+  272A D5                   push de
1820+  272B 11 EB 33             ld de, MOVE_str
1821+  272E 3A A4 1B             ld a,(RplyMs)
1822+  2731 47                   ld b,a
1823+  2732 FE 00                cp 0
1824+  2734 28 1A                jr z,RplyTo0
1825+  2736             RplyLoopMv:
1826+  2736 13                   inc de
1827+  2737 13                   inc de
1828+  2738 13                   inc de
1829+  2739 13                   inc de
1830+  273A 1A                   ld a,(de)
1831+  273B FE 20                cp 32
1832+  273D 20 01                jr nz,RplyNskp1
1833+  273F 13                   inc de          ;skip promotion
1834+  2740             RplyNskp1:
1835+  2740 13                   inc de         
1836+  2741 1A                   ld a,(de)
1837+  2742 FE 20                cp 32
1838+  2744 20 1F                jr nz,RplyNoMv
1839+  2746 FE 00                cp 0
1840+  2748 20 1B                jr nz,RplyNoMv
1841+  274A FE 24                cp '$'
1842+  274C 20 17                jr nz,RplyNoMv
1843+  274E             
1844+  274E 10 E6                djnz RplyLoopMv
1845+  2750             RplyTo0:
1846+  2750                      
1847+  2750 CD 69 27             call GetSQi_2animate
1848+  2753 CD 4B 1E             call LocateWhichMove   ; finds in generated move list
1849+  2756                      
1850+  2756 3E 00                ld a,0
1851+  2758 32 22 1F             ld (AnimUnMk),a
1852+  275B CD 24 1F             call setAnimation        ; animate it and make move
1853+  275E                      
1854+  275E 3A A4 1B             ld a,(RplyMs)
1855+  2761 3C                   inc a
1856+  2762 32 A4 1B             ld (RplyMs),a
1857+  2765             RplyNoMv:       
1858+  2765 D1                   pop de
1859+  2766 C1                   pop bc
1860+  2767 F1                   pop af
1861+  2768 C9                   ret
1862+  2769             
1863+  2769             GetSQi_2animate:
1864+  2769 CD 6D 08            call MbySgetSQ
1865+  276C 32 8D 08            ld (SQi),a
1866+  276F 32 0F 1F            ld (Move_sq_f),a
1867+  2772 CD 6D 08            call MbySgetSQ
1868+  2775 32 8E 08            ld (SQt),a
1869+  2778 32 10 1F            ld (Move_sq_t),a
1870+  277B 1A                  ld a,(de)
1871+  277C FE 20               cp ' '
1872+  277E 20 03               jr nz,MQbyPromPiece
1873+  2780 1B                  dec de
1874+  2781 18 20               jr MQbyNoN        
1875+  2783             MQbyPromPiece:
1876+  2783 FE 71               cp 'q'
1877+  2785 20 04               jr nz,MQbyNoQ
1878+  2787 3E 04               ld a,4
1879+  2789 18 1A               jr MQbyProm
1880+  278B FE 72       MQbyNoQ: cp 'r'       
1881+  278D 20 04               jr nz,MQbyNoR
1882+  278F 3E 03               ld a,3
1883+  2791 18 12               jr MQbyProm
1884+  2793 FE 62       MQbyNoR: cp 'b'       
1885+  2795 20 04               jr nz,MQbyNoB
1886+  2797 3E 02               ld a,2
1887+  2799 18 0A               jr MQbyProm
1888+  279B FE 6E       MQbyNoB: cp 'n'       
1889+  279D 20 04               jr nz,MQbyNoN
1890+  279F 3E 01               ld a,1
1891+  27A1 18 02               jr MQbyProm
1892+  27A3 3E 00       MQbyNoN: ld a,0             ; not promoted       
1893+  27A5             MQbyProm:
1894+  27A5 32 90 0E            ld (PromoPcId),a
1895+  27A8 32 23 1F            ld (Move_sq_p),a
1896+  27AB C9                  ret
1897+  27AC                     
1898+  27AC 00          Loaded2VRAM: .byte 0       ; pre-loading of datas from file just once,
1899+  27AD                                        ; after the VRAM memory could be used only.
1900+  27AD                                        
1901+  27AD             Chess_GraphDatas_address:   .equ $8000         ; address where to load module
1902+  27AD             
1903+  27AD             Chess_GraphDatas_filename:
1904+  27AD 00 43 48 45            .byte 0, "CHESSPI CO2",0            ; name of file
1904+  27B1 53 53 50 49 
1904+  27B5 20 43 4F 32 
1904+  27B9 00 
1905+  27BA             
1906+  27BA             ChessY2K_GraphDatas_load:
1907+  27BA F5                      push af
1908+  27BB 3A AC 27                ld a,(Loaded2VRAM)
1909+  27BE                         
1910+  27BE FE 00                   cp 0
1911+  27C0 20 12                   jr nz,GraphDatas_ok
1912+  27C2             
1913+  27C2 E5                      push hl
1914+  27C3 D5                      push de
1915+  27C4 21 AD 27                ld hl,Chess_GraphDatas_filename
1916+  27C7 11 00 80                ld de,Chess_GraphDatas_address
1917+  27CA CD F7 2D                call diskload                     ; loads datas
1918+  27CD D1                      pop de
1919+  27CE E1                      pop hl
1920+  27CF                         
1921+  27CF 3E 01                   ld a,1
1922+  27D1 32 AC 27                ld (Loaded2VRAM),a                ; VRAM ok
1923+  27D4             GraphDatas_ok:
1924+  27D4 F1                      pop af
1925+  27D5 C9                      ret
1926+  27D6                         
1927+  27D6             ;
1928+  27D6             ; Defines labels to access datas after loading.
1929+  27D6             ; This was genereated by "export" operator of tasm
1930+  27D6             ; in ChessIP.ASM
1931+  27D6             ;
1932+  27D6             
1933+  27D6             
1934+  27D6             dtBBB            .EQU  $8001
1935+  27D6             dtBBW            .EQU  $8159
1936+  27D6             dtBKB            .EQU  $82b1
1937+  27D6             dtBKW            .EQU  $8409
1938+  27D6             dtBNB            .EQU  $8561
1939+  27D6             dtBNW            .EQU  $86b9
1940+  27D6             dtBPB            .EQU  $8811
1941+  27D6             dtBPW            .EQU  $8969
1942+  27D6             dtBQB            .EQU  $8ac1
1943+  27D6             dtBQW            .EQU  $8c19
1944+  27D6             dtBRB            .EQU  $8d71
1945+  27D6             dtBRW            .EQU  $8ec9
1946+  27D6             dtWBB            .EQU  $9021
1947+  27D6             dtWBW            .EQU  $9179
1948+  27D6             dtWKB            .EQU  $92d1
1949+  27D6             dtWKW            .EQU  $9429
1950+  27D6             dtWNB            .EQU  $9581
1951+  27D6             dtWNW            .EQU  $96d9
1952+  27D6             dtWPB            .EQU  $9831
1953+  27D6             dtWPW            .EQU  $9989
1954+  27D6             dtWQB            .EQU  $9ae1
1955+  27D6             dtWQW            .EQU  $9c39
1956+  27D6             dtWRB            .EQU  $9d91
1957+  27D6             dtWRW            .EQU  $9ee9
1958+  27D6             dtSQB            .EQU  $a041
1959+  27D6             dtSQW            .EQU  $a199
1960+  27D6             dtFRDN           .EQU  $a2f1
1961+  27D6             dtFRLF           .EQU  $a63f
1962+  27D6             dtFRRT           .EQU  $a98d
1963+  27D6             dtFRUP           .EQU  $acdb
1964+  27D6             dtWhiteToMove    .EQU  $b029
1965+  27D6             dtWhiteNotToMove .EQU  $b091
1966+  27D6             dtBlackToMove    .EQU  $b0f9
1967+  27D6             dtBlackNotToMove .EQU  $b161
1968+  27D6             dtWP             .EQU  $b1c9
1969+  27D6             dtBP             .EQU  $b321
1970+  27D6             dtWN             .EQU  $b479
1971+  27D6             dtBN             .EQU  $b5d1
1972+  27D6             dtWB             .EQU  $b729
1973+  27D6             dtBB             .EQU  $b881
1974+  27D6             dtWR             .EQU  $b9d9
1975+  27D6             dtBR             .EQU  $bb31
1976+  27D6             dtWQ             .EQU  $bc89
1977+  27D6             dtBQ             .EQU  $bde3
1978+  27D6             dtWK             .EQU  $bf3b
1979+  27D6             dtBK             .EQU  $c093
1980+  27D6             dtMSXlogo        .EQU  $c1eb
1981+  27D6             
1982+  27D6             
1983+  27D6                         ;                                                                               
1984+  27D6                         ; Data files for pieces Colour of piece (B or W) 
1985+  27D6                         ;   + Name of piece ("KQRBNP" or empty square)
1986+  27D6                         ;   + colour of square under (read black bishop on black square)
1987+  27D6             
1988+  27D6             tbPalettes:
1989+  27D6                         ;table of colours Nr,R,G,B
1990+  27D6                         ;  thanks to bmp2msx software (http://www.imasy.or.jp/~hra/)
1991+  27D6 00 06 06 05         .byte $0,6,6,5
1992+  27DA 01 05 03 02         .byte $1,5,3,2
1993+  27DE 02 00 00 00         .byte $2,0,0,0
1994+  27E2 03 07 07 06         .byte $3,7,7,6
1995+  27E6 04 05 04 03         .byte $4,5,4,3
1996+  27EA 05 05 05 05         .byte $5,5,5,5
1997+  27EE 06 06 06 06         .byte $6,6,6,6
1998+  27F2 07 03 02 02         .byte $7,3,2,2
1999+  27F6 08 03 03 03         .byte $8,3,3,3
2000+  27FA 09 06 05 04         .byte $9,6,5,4
2001+  27FE 0A 04 04 03         .byte $A,4,4,3
2002+  2802 0B 01 01 01         .byte $B,1,1,1
2003+  2806 0C 02 01 01         .byte $C,2,1,1
2004+  280A 0D 06 05 06         .byte $D,6,5,6
2005+  280E 0E 01 01 02         .byte $E,1,1,2
2006+  2812 0F 01 02 01         .byte $F,1,2,1
2007+  2816                     
2008+  2816             ReplayMovePiece:
2009+  2816                      ;push de
2010+  2816                      ;ld de,MOVE_str
2011+  2816                      ;call MbyStrMove
2012+  2816                      ;pop de
2013+  2816 C9                   ret 3609   2817                                                  ; for replays only
3610   2817~            #else
3611   2817~                      #include "ChessUI.ASM"     ; USER interface and grahics
3612   2817~                                                 ; with cursor and pos.setup
3613   2817             #endif
3614   2817             
3615   2817                       #include "ChessMN.ASM"     ; MENU choices
0001+  2817             ;=======================================
0002+  2817             ;
0003+  2817             ; MAIN loop and MENU for ChessY2K
0004+  2817             ;
0005+  2817             ;=======================================
0006+  2817             
0007+  2817 00          _menuI:     .byte 0   ;Current menu item to choose
0008+  2818 00          _exitMn:    .byte 0   ;internal to know that exit 
0009+  2819             
0010+  2819             ChessMN:
0011+  2819             
0012+  2819                     
0013+  2819             MAINLOOP:
0014+  2819 3E 00                ld a,0
0015+  281B 32 17 28             ld (_menuI),a
0016+  281E CD 70 28             call MainMenu
0017+  2821 3A 17 28             ld a,(_menuI)
0018+  2824 FE 00                cp 0
0019+  2826 20 02                jr nz, ItemNo0
0020+  2828 18 45                jr EXIT_ALL        
0021+  282A             ItemNo0:
0022+  282A FE 01                cp 1
0023+  282C 20 16                jr nz, ItemNo1
0024+  282E                      
0025+  282E 3A EB 33             ld a,(MOVE_str)
0026+  2831 FE 00                cp 0
0027+  2833 28 35                jr z,LoopM
0028+  2835                      
0029+  2835             #ifdef PGN_COMPILE 
0030+  2835                     
0031+  2835 3E 00                ld a,%00000000         ; no cursor,can't dragmove, just replaymoves
0032+  2837 32 A3 1B             ld (Stylo),a 
0033+  283A             
0034+  283A CD 6D 1C             call GraphicsS         ; user interface for chess program
0035+  283D                      
0036+  283D 3E 00                ld a,0
0037+  283F 32 A3 1B             ld (Stylo),a
0038+  2842             #endif                   
0039+  2842 18 26                jr LoopM
0040+  2844             ItemNo1:      
0041+  2844 FE 02                cp 2
0042+  2846 20 0F                jr nz, ItemNo2
0043+  2848             
0044+  2848 3E 03                ld a,%00000011         ; cursor,can dragmove
0045+  284A 32 A3 1B             ld (Stylo),a 
0046+  284D                      
0047+  284D CD 6D 1C             call GraphicsS         ; user interface for chess program
0048+  2850                      
0049+  2850 3E 00                ld a,0
0050+  2852 32 A3 1B             ld (Stylo),a 
0051+  2855             
0052+  2855 18 13                jr LoopM
0053+  2857             
0054+  2857             ItemNo2:
0055+  2857 FE 03                cp 3
0056+  2859 20 0F                jr nz, ItemNo3
0057+  285B             
0058+  285B 3E 05                ld a,%00000101         ; cursor,can setup pieces
0059+  285D 32 A3 1B             ld (Stylo),a 
0060+  2860                      
0061+  2860 CD 6D 1C             call GraphicsS         ; user interface for chess program
0062+  2863                      
0063+  2863 3E 00                ld a,0
0064+  2865 32 A3 1B             ld (Stylo),a 
0065+  2868             
0066+  2868 18 00                jr LoopM
0067+  286A                     
0068+  286A             ItemNo3:         
0069+  286A             LoopM:   
0070+  286A             
0071+  286A CD 7E 08             call UndoAllMoves   ; good refresh
0072+  286D                      
0073+  286D 18 AA                jr MAINLOOP
0074+  286F                           
0075+  286F                      
0076+  286F             EXIT_ALL:
0077+  286F             
0078+  286F C9                   ret
0079+  2870                      
0080+  2870             
0081+  2870             MainMenu:
0082+  2870                         
0083+  2870 CD 5E 2A                call ClearScreenBy30h
0084+  2873 CD 95 29                call LastFENwasSet        ; to know FEN set up
0085+  2876 21 D6 27                ld hl, tbPalettes         ; in datas of ChessUI  
0086+  2879 CD FA 29                call SetPaletteByTable    ; defines 16colors                 
0087+  287C                                                    
0088+  287C 3E 00                   ld a,0
0089+  287E 32 18 28                ld (_exitMn),a
0090+  2881 3E 01                   ld a,1
0091+  2883                                                 
0092+  2883             #ifdef PGN_COMPILE                       
0093+  2883~            #else
0094+  2883~                        inc a                    ; can not access first choice
0095+  2883             #endif            
0096+  2883 32 17 28                ld (_menuI),a
0097+  2886                         
0098+  2886 CD 44 2A                call InkeyKeyBy30h      ; keypress detect
0099+  2889 32 56 29                ld (_keymnbf),a         ; saves last key
0100+  288C                                     
0101+  288C             MENULOOP:                           ; Loop till ESC pressed
0102+  288C CD BA 28                call DrawChoices
0103+  288F CD 44 2A                call InkeyKeyBy30h      ; keypress detect
0104+  2892                         
0105+  2892                         ;cp 27
0106+  2892                         ;jr z,EscEXIT
0107+  2892                         
0108+  2892 CD 57 29                call MenuKeyPress       ; Selection or other item
0109+  2895 18 0A                   jr Menu2loop
0110+  2897             
0111+  2897             EscEXIT:
0112+  2897 3E 00                   ld a,0            
0113+  2899 32 17 28                ld (_menuI),a           ; nothing selected
0114+  289C 3E 01                   ld a,1            
0115+  289E 32 18 28                ld (_exitMn),a
0116+  28A1             Menu2loop:            
0117+  28A1                                                 
0118+  28A1 3A 18 28                ld a,(_exitMn)
0119+  28A4 FE 00                   cp 0
0120+  28A6 28 E4                   jr z, MENULOOP
0121+  28A8                         
0122+  28A8 21 01 01                ld hl,$0101             ; locate left upper corner
0123+  28AB CD 80 2A                call LocatePosBy30h
0124+  28AE 3E 01                   ld a,1                  ; display cursor
0125+  28B0 32 A9 FC                ld (CSRSW),a
0126+  28B3 CD 5E 2A                call ClearScreenBy30h   ; and clear the screen
0127+  28B6 CD 15 2D                call RestoreColors      ; restores default MSX colors
0128+  28B9                                                  
0129+  28B9 C9                      ret
0130+  28BA             
0131+  28BA             ;------------- draws menu items
0132+  28BA             DrawChoices:
0133+  28BA F5                      push af
0134+  28BB C5                      push bc
0135+  28BC D5                      push de
0136+  28BD E5                      push hl
0137+  28BE                         
0138+  28BE                         ;ld a,2
0139+  28BE                         ;ld (FORCLR),a           ; set color black
0140+  28BE                         ;call SetColorBy30h
0141+  28BE                     
0142+  28BE 21 05 04                ld hl,$0405
0143+  28C1 CD 80 2A                call LocatePosBy30h
0144+  28C4             
0145+  28C4 11 0C 29                ld de, MNheader
0146+  28C7                         
0147+  28C7 3E 00                   ld a,0                  ; do not display cursor
0148+  28C9 32 A9 FC                ld (CSRSW),a
0149+  28CC                          
0150+  28CC CD 8F 2A                call PrintString
0151+  28CF                         
0152+  28CF 2E 07                   ld l,7 ; row
0153+  28D1 06 00                   ld b,0 ; 3 choices
0154+  28D3 11 2C 29                ld de, MNchoices
0155+  28D6             MNchScan:   
0156+  28D6 04                      inc b          
0157+  28D7 2C                      inc l  ; next row
0158+  28D8 26 04                   ld h,4 ; col
0159+  28DA             
0160+  28DA CD 80 2A                call LocatePosBy30h
0161+  28DD                      
0162+  28DD CD 8F 2A                call PrintString
0163+  28E0                   
0164+  28E0 E5                      push hl
0165+  28E1 EB                      ex de,hl    ; hl = de
0166+  28E2 C5                      push bc
0167+  28E3 01 20 00                ld bc,32
0168+  28E6 09                      add hl,bc
0169+  28E7 C1                      pop bc
0170+  28E8 EB                      ex de,hl    ; de = hl+32 now
0171+  28E9 E1                      pop hl
0172+  28EA                         
0173+  28EA D5                      push de
0174+  28EB 26 01                   ld h,1 ; col
0175+  28ED CD 80 2A                call LocatePosBy30h            
0176+  28F0 3A 17 28                ld a,(_menuI)
0177+  28F3 B8                      cp b
0178+  28F4 20 05                   jr nz,MNchNotI
0179+  28F6 11 4C 29                ld de,MnSelector    ; selector char
0180+  28F9 18 03                   jr MNchSelI
0181+  28FB 11 51 29    MNchNotI:   ld de,MnSpace        ;space
0182+  28FE CD 8F 2A    MNchSelI:   call PrintString
0183+  2901 D1                      pop de
0184+  2902                                                 
0185+  2902 3E 01                   ld a,MNitems
0186+  2904 B8                      cp b           
0187+  2905 20 CF                   jr nz,MNchScan          
0188+  2907                         
0189+  2907 E1                      pop hl
0190+  2908 D1                      pop de
0191+  2909 C1                      pop bc
0192+  290A F1                      pop af
0193+  290B C9                      ret
0194+  290C                         
0195+  290C             
0196+  290C 4D 53 58 20 MNheader:   .byte "MSX chessY2K project          $",0
0196+  2910 63 68 65 73 
0196+  2914 73 59 32 4B 
0196+  2918 20 70 72 6F 
0196+  291C 6A 65 63 74 
0196+  2920 20 20 20 20 
0196+  2924 20 20 20 20 
0196+  2928 20 20 24 00 
0197+  292C             
0198+  292C             
0199+  292C             #ifdef PGN_COMPILE
0200+  292C             
0201+  292C             MNitems:    .equ 1
0202+  292C             MNchoices:
0203+  292C 52 65 70 6C             .byte "Replay chess game from PGN    $",0
0203+  2930 61 79 20 63 
0203+  2934 68 65 73 73 
0203+  2938 20 67 61 6D 
0203+  293C 65 20 66 72 
0203+  2940 6F 6D 20 50 
0203+  2944 47 4E 20 20 
0203+  2948 20 20 24 00 
0204+  294C                         
0205+  294C~            #else
0206+  294C~            
0207+  294C~            MNitems:    .equ 3
0208+  294C~            MNchoices:
0209+  294C~                        .byte "Replay PGN (other module)     $",0
0210+  294C~                        .byte "Move pieces by using cursor   $",0
0211+  294C~                        .byte "Set positon for diagram       $",0
0212+  294C             #endif
0213+  294C             
0214+  294C 2D 3E 20 24 MnSelector: .byte "-> $",0
0214+  2950 00 
0215+  2951 20 20 20 24 MnSpace:    .byte "   $",0
0215+  2955 00 
0216+  2956             
0217+  2956 00          _keymnbf:   .byte 0  ; key pressed before
0218+  2957             
0219+  2957             ; this checks which key as been pressed
0220+  2957             MenuKeyPress:
0221+  2957 F5                      push af
0222+  2958 C5                      push bc
0223+  2959                         
0224+  2959 FE 00                   cp 0
0225+  295B 28 35                   jr z,MNnoAct
0226+  295D                         
0227+  295D 47                      ld b,a
0228+  295E 3A 56 29                ld a,(_keymnbf)
0229+  2961 B8                      cp b
0230+  2962 28 2E                   jr z, MNnoAct
0231+  2964 78                      ld a,b
0232+  2965 32 56 29                ld (_keymnbf),a
0233+  2968                         
0234+  2968 FE 20                   cp 32
0235+  296A 20 11                   jr nz,MNnoSpace
0236+  296C             MNspaceKey:
0237+  296C             
0238+  296C 3A 17 28                ld a,(_menuI)
0239+  296F FE 01                   cp 1
0240+  2971 20 03                   jr nz,noPGNsub
0241+  2973             
0242+  2973                         ; submenu of PGN files
0243+  2973 CD AF 29                call ChessY2K_pgn_module
0244+  2976                         
0245+  2976                         ;jr MNnoAct
0246+  2976             
0247+  2976 3E 01       noPGNsub:   ld a,1
0248+  2978 32 18 28                ld (_exitMn),a     ; Item has been selected, exit menu and DO action
0249+  297B 18 15                   jr MNnoAct             
0250+  297D FE 0D       MNnoSpace:  cp 13
0251+  297F 20 02                   jr nz,MNnoEnter
0252+  2981 18 E9                   jr MNspaceKey
0253+  2983             MNnoEnter:
0254+  2983 3A 17 28                ld a,(_menuI)
0255+  2986 FE 01                   cp MNitems
0256+  2988 28 03                   jr z, MNitemNxt0
0257+  298A 3C                      inc a ; next item                     
0258+  298B 18 02                   jr MNitemNxt1            
0259+  298D 3E 01       MNitemNxt0: ld a,1 
0260+  298F             
0261+  298F             #ifdef PGN_COMPILE                       
0262+  298F~            #else
0263+  298F~                        inc a                    ; can not access first choice
0264+  298F~                                                 ; (1st reserved for other module)
0265+  298F             #endif
0266+  298F             
0267+  298F 32 17 28    MNitemNxt1: ld (_menuI),a
0268+  2992                         
0269+  2992             MNnoAct:            
0270+  2992 C1                      pop bc
0271+  2993 F1                      pop af
0272+  2994 C9                      ret
0273+  2995             
0274+  2995             ;
0275+  2995             ; This outputs FEN for last position set up
0276+  2995             ;           
0277+  2995             LastFENwasSet:
0278+  2995 21 12 01                ld hl,$0112
0279+  2998 CD 80 2A                call LocatePosBy30h
0280+  299B 11 3D 1D                ld de,wasSetUpFEN
0281+  299E CD 8F 2A                call PrintString   ; print out FEN
0282+  29A1 C9                      ret
0283+  29A2             
0284+  29A2             ;This module has been separated to avoid 
0285+  29A2             ; internal problems
0286+  29A2             ;              
0287+  29A2             Chess_PG_module_address:   .equ $8000         ; address where to load module
0288+  29A2             Chess_PG_module_filename:
0289+  29A2 00 43 48 45            .byte 0, "CHESSPG CO2",0           ; name of module file
0289+  29A6 53 53 50 47 
0289+  29AA 20 43 4F 32 
0289+  29AE 00 
0290+  29AF                   
0291+  29AF             ChessY2K_pgn_module:
0292+  29AF             #ifdef PGN_COMPILE
0293+  29AF E5                      push hl
0294+  29B0 D5                      push de
0295+  29B1 21 A2 29                ld hl,Chess_PG_module_filename
0296+  29B4 11 00 80                ld de,Chess_PG_module_address
0297+  29B7 CD F7 2D                call diskload                     ; loads module
0298+  29BA CD 00 80                call Chess_PG_module_address      ; starts main sub-procedure
0299+  29BD D1                      pop de
0300+  29BE E1                      pop hl
0301+  29BF             #endif             
0302+  29BF C9                      ret
0303+  29C0             
0304+  29C0                     3616   29C0             
3617   29C0                       #include "VDPs.ASM"        ; VDP video functions
0001+  29C0             ;=======================================
0002+  29C0             ;
0003+  29C0             ; VDP functions
0004+  29C0             ;
0005+  29C0             ;=======================================
0006+  29C0             
0007+  29C0             ; Provides:
0008+  29C0             ;----------------------------------------------------------------------
0009+  29C0             ; (1) Just working LAME part for Hello World of MSX VDP
0010+  29C0             ;         (put pixels on screen)
0011+  29C0             ;----------------------------------------------------------------------
0012+  29C0             ;
0013+  29C0             ; These functions provide MSX2 drawing from .COM module.
0014+  29C0             ; LAME part can put pixels and that's all.
0015+  29C0             ; Screen is 212 lines x 128 bytes per line of 2-pixels.
0016+  29C0             ;
0017+  29C0             ; In reality, prepare to spend days on MSX-hardcore:
0018+  29C0             ; manuals, forums, not-working samples, no-hello-worlds, etc. 
0019+  29C0             ; .BIN loaded from BASIC is not the same as .COM
0020+  29C0             ; 64kb-s is less then Bios+DOS+BASIC+programs+etc. require -
0021+  29C0             ; so it crashes silently by rewriting in the same memory addresses.
0022+  29C0             ; Lots of functions described by techies just crash the emulator. 
0023+  29C0             ; BASIC is for drawings!, not assembler.
0024+  29C0             ; And video memory should be used as much possible (page 0-3, not LAME!),
0025+  29C0             ; because MSX has lots of video memory compared to programmable RAM.
0026+  29C0             ;
0027+  29C0             ; Hello world .com that puts 2-pixels in left upper and right lower corner.
0028+  29C0             ; 
0029+  29C0             ;   org $100
0030+  29C0             ;   call SetScreen5By30h
0031+  29C0             ;   ld de,0
0032+  29C0             ;   call LocateHL_byXY_inDE
0033+  29C0             ;   ld a,$77
0034+  29C0             ;   call VDPdraw2pixels    
0035+  29C0             ;   ld d,127
0036+  29C0             ;   ld e,211
0037+  29C0             ;   call LocateHL_byXY_inDE
0038+  29C0             ;   ld a,$88
0039+  29C0             ;   call VDPdraw2pixels
0040+  29C0             ;   call PressKeyBy30h
0041+  29C0             ;   call SetScreen0By30h
0042+  29C0             ;   ret
0043+  29C0             ;         
0044+  29C0             
0045+  29C0             
0046+  29C0             SetScreen5By30h:
0047+  29C0 3E 05                ld    a,$05      ; Screen 5      
0048+  29C2 F7                   rst   30h
0049+  29C3 80                   .byte $80        ; BIOS slot (when nothing is loaded)  
0050+  29C4 5F 00                .word $005f      ; CHGMOD CALL 5Fh
0051+  29C6 C9                   ret
0052+  29C7                      
0053+  29C7             DisableScreenBy30h:       ; Before...
0054+  29C7 F7                   rst   30h
0055+  29C8 80                   .byte $80        
0056+  29C9 41 00                .word $0041      ; Disables screen display      
0057+  29CB C9                   ret
0058+  29CC                      
0059+  29CC             EnableScreenBy30h:        ; When drawings are finished... 
0060+  29CC F7                   rst   30h
0061+  29CD 80                   .byte $80               
0062+  29CE 44 00                .word $0044      ; Enables screen display  
0063+  29D0 C9                   ret
0064+  29D1             
0065+  29D1             LocateHL_byXY_inDE:       ; Procedure calculates hl offset and sets VDP for writing
0066+  29D1 F3                   di
0067+  29D2 F5                   push af
0068+  29D3 C5                   push bc
0069+  29D4 D5                   push de
0070+  29D5 E5                   push hl
0071+  29D6 DD E5                push ix
0072+  29D8 6A                   ld l,d           ; regs d=x[0..127]
0073+  29D9 7B                   ld a,e           ;      e=y[0..211]
0074+  29DA 11 00 00             ld de,0
0075+  29DD CB 47                bit 0,a
0076+  29DF 28 02                jr z,no2add128bits
0077+  29E1 1E 80                ld e,$80
0078+  29E3             no2add128bits:
0079+  29E3 1F                   rra
0080+  29E4 67                   ld h,a
0081+  29E5 19                   add hl,de
0082+  29E6 AF                   xor a 
0083+  29E7 CD F2 29             call SetVDPwriteBy30h  ; now will write at this position
0084+  29EA DD E1                pop ix
0085+  29EC E1                   pop hl
0086+  29ED D1                   pop de
0087+  29EE C1                   pop bc
0088+  29EF F1                   pop af
0089+  29F0 FB                   ei
0090+  29F1 C9                   ret                                          
0091+  29F2                                       ; This prepares for "pixeling"
0092+  29F2             SetVDPwriteBy30h:         ; hl,contains initial address
0093+  29F2 F7                   rst   30h
0094+  29F3 80                   .byte $80 
0095+  29F4 71 01                .word $0171      ; NSTWRT Sets up the VDP for writing wit full VRAM address
0096+  29F6 C9                   ret         
0097+  29F7             
0098+  29F7             VDPdraw2pixels:           ; Put 2 pixels by sending one byte with 2 colour Nr. (bits 0-3,4-7)
0099+  29F7 D3 98                out ($98),a      ; send this sequently
0100+  29F9 C9                   ret
0101+  29FA                      
0102+  29FA                              
0103+  29FA             SetPaletteByTable:        ; Sets colors by given RGB-table in HL-reg
0104+  29FA F5                   push af         
0105+  29FB C5                   push bc
0106+  29FC E5                   push hl
0107+  29FD 06 10                ld b,$10             ; 16 colours
0108+  29FF             SPcoLoop:
0109+  29FF F3                   di
0110+  2A00 7E                   ld   a,(hl)
0111+  2A01 23                   inc  hl
0112+  2A02 D3 99                out  ($99),a          ; colour Nr.
0113+  2A04 3E 90                ld   a, 128+16
0114+  2A06 D3 99                out  ($99),a         
0115+  2A08 7E                   ld   a,(hl)            ; red
0116+  2A09 23                   inc  hl
0117+  2A0A 23                   inc  hl
0118+  2A0B CB 27                sla  a
0119+  2A0D CB 27                sla  a
0120+  2A0F CB 27                sla  a
0121+  2A11 CB 27                sla  a                 ; bits 4-7
0122+  2A13 4F                   ld   c,a
0123+  2A14 7E                   ld   a,(hl)            ; blue bits 0-3
0124+  2A15 2B                   dec  hl
0125+  2A16 B1                   or   c
0126+  2A17 D3 9A                out  ($9A),a 
0127+  2A19 7E                   ld   a,(hl)            ; green bits 0-3
0128+  2A1A 23                   inc  hl
0129+  2A1B 23                   inc  hl
0130+  2A1C D3 9A                out  ($9A),a
0131+  2A1E FB                   ei 
0132+  2A1F 10 DE                djnz SPcoLoop
0133+  2A21 E1                   pop  hl         
0134+  2A22 C1                   pop  bc
0135+  2A23 F1                   pop  af 
0136+  2A24 C9                   ret
0137+  2A25                      
0138+  2A25             SetBackgrColor:               ; Sets background color by A=Nr.              
0139+  2A25 F3                   di
0140+  2A26 D3 99                out  ($99),a        ; a=[0..15]
0141+  2A28 3E 87                ld   a,128+7
0142+  2A2A D3 99                out  ($99),a        
0143+  2A2C FB                   ei
0144+  2A2D C9                   ret
0145+  2A2E             
0146+  2A2E             VDPfaster:                   ; working with memory only, no sprite collisions and other things slowing down VDP
0147+  2A2E F5                   push af
0148+  2A2F F3                   di
0149+  2A30 3E 0A                ld   a, %00001010 ; sprites off (bit1), VRAM quantity (bit3)- Affects how VDP performs refresh on DRAM chips   
0150+  2A32 D3 99                out  ($99),a
0151+  2A34 3E 88                ld   a, 128+8     
0152+  2A36 D3 99                out  ($99),a
0153+  2A38 FB                   ei
0154+  2A39 F1                   pop af
0155+  2A3A C9                   ret
0156+  2A3B                                                                                                                      
0157+  2A3B             PressKeyBy30h:               ; wait for keypress
0158+  2A3B F7                   rst   30h
0159+  2A3C 80                   .byte $80 
0160+  2A3D 9F 00                .word $009f
0161+  2A3F             ClearKeyBy30h:
0162+  2A3F F7                   rst   30h
0163+  2A40 80                   .byte $80 
0164+  2A41 56 01                .word $0156         ; clear key buffer after             
0165+  2A43 C9                   ret
0166+  2A44             
0167+  2A44             InkeyKeyBy30h:               ; detects if there is a keypress
0168+  2A44 F7                   rst   30h
0169+  2A45 80                   .byte $80 
0170+  2A46 9C 00                .word $009c
0171+  2A48 28 05                jr z,InkeyK_none
0172+  2A4A CD 3B 2A             call PressKeyBy30h  ; if is then detects code
0173+  2A4D 18 02                jr InkeyK_ret
0174+  2A4F             InkeyK_none:
0175+  2A4F 3E 00                ld a,0
0176+  2A51             InkeyK_ret:         
0177+  2A51 C9                   ret
0178+  2A52                                                 
0179+  2A52             SetScreen0By30h:             ; set back screen0
0180+  2A52 3E 00                ld    a,0      
0181+  2A54 F7                   rst   30h
0182+  2A55 80                   .byte $80
0183+  2A56 5F 00                .word $005f
0184+  2A58 C9                   ret
0185+  2A59                      
0186+  2A59             SetScreenABy30h:             ; set screen by A-reg
0187+  2A59 F7                   rst   30h
0188+  2A5A 80                   .byte $80
0189+  2A5B 5F 00                .word $005f
0190+  2A5D C9                   ret 
0191+  2A5E                      
0192+  2A5E             ClearScreenBy30h:            ; clears screen
0193+  2A5E F5                   push af
0194+  2A5F C5                   push bc
0195+  2A60 D5                   push de
0196+  2A61 AF                   xor a          
0197+  2A62 F7                   rst   30h
0198+  2A63 80                   .byte $80
0199+  2A64 C3 00                .word $00c3
0200+  2A66 D1                   pop de
0201+  2A67 C1                   pop bc
0202+  2A68 F1                   pop af
0203+  2A69 C9                   ret
0204+  2A6A                      
0205+  2A6A             LINL40: .equ $F3AE
0206+  2A6A                             
0207+  2A6A             SetMode80:
0208+  2A6A F5                  push af
0209+  2A6B 3E 50               ld a,80
0210+  2A6D 32 AE F3            ld (LINL40),a    ;width 80
0211+  2A70 CD 52 2A            call SetScreen0By30h
0212+  2A73 F1                  pop af
0213+  2A74 C9                  ret
0214+  2A75             SetMode40:
0215+  2A75 F5                  push af
0216+  2A76 3E 28               ld a,40
0217+  2A78 32 AE F3            ld (LINL40),a    ;width 40
0218+  2A7B CD 52 2A            call SetScreen0By30h
0219+  2A7E F1                  pop af
0220+  2A7F C9                  ret 
0221+  2A80                              
0222+  2A80             LocatePosBy30h:              ; Locate at position H (column) L (row) on screen
0223+  2A80 F7                   rst   30h
0224+  2A81 80                   .byte $80
0225+  2A82 C6 00                .word $00c6
0226+  2A84 C9                   ret
0227+  2A85             PutCharBy30h:                ; Put char reg-a = ascii code      
0228+  2A85 F7                   rst   30h
0229+  2A86 80                   .byte $80
0230+  2A87 A2 00                .word $00a2
0231+  2A89 C9                   ret
0232+  2A8A             PrintLineBy30h:
0233+  2A8A F7                   rst   30h
0234+  2A8B 80                   .byte $80
0235+  2A8C A2 00                .word $00a2
0236+  2A8E C9                   ret
0237+  2A8F             
0238+  2A8F             CALL_5:   .equ $F37D         ;output string to screen
0239+  2A8F             ; prints string that ends with $
0240+  2A8F             ; de-reg points to string in address
0241+  2A8F             ; 
0242+  2A8F             PrintString:
0243+  2A8F F5                   push af
0244+  2A90 C5                   push bc
0245+  2A91 D5                   push de
0246+  2A92 E5                   push hl
0247+  2A93 DD E5                push ix
0248+  2A95 FD E5                push iy
0249+  2A97 0E 09                ld c, 9       ; function for CALL 5
0250+  2A99 CD 7D F3             call CALL_5   ; MSX printing
0251+  2A9C FD E1                pop iy
0252+  2A9E DD E1                pop ix
0253+  2AA0 E1                   pop hl
0254+  2AA1 D1                   pop de
0255+  2AA2 C1                   pop bc
0256+  2AA3 F1                   pop af
0257+  2AA4 C9                   ret
0258+  2AA5                                      
0259+  2AA5                      
0260+  2AA5             FORCLR:  .equ  $F3E9         ; foreground color 
0261+  2AA5             BAKCLR:  .equ  $F3EA         ; background color
0262+  2AA5             BDRCLR:  .equ  $F3EB         ; bordercolor
0263+  2AA5             SetColorBy30h:
0264+  2AA5 F7                   rst   30h           ; set color scheme by using FORCLR,BAKCLR,BDRCLR
0265+  2AA6 80                   .byte $80
0266+  2AA7 62 00                .word $0062
0267+  2AA9 C9                   ret
0268+  2AAA                      
0269+  2AAA             CSRSW:   .equ $FCA9         ; to set cursor display switch (0-not to show)        
0270+  2AAA             CSTYLE:  .equ $FCAA         ; to set cursor style (0-full,2-underline)
0271+  2AAA                 
0272+  2AAA                             
0273+  2AAA                      
0274+  2AAA             ;--------------------------------------
0275+  2AAA             ; (2) ADVANCED functions, if You love VDP
0276+  2AAA             ;
0277+  2AAA             ; Use of pages,
0278+  2AAA             ; buffered copy of RAM->VRAM, RAM->RAM
0279+  2AAA             ;--------------------------------------
0280+  2AAA             ;
0281+  2AAA             ;
0282+  2AAA             ; Check if a v9958 is available (if so, return nz)
0283+  2AAA             ; Initialize address (v9958)
0284+  2AAA             ; (MSX+,MSXturboR video chip)
0285+  2AAA             ;
0286+  2AAA 00          v9958:        .byte      0             ;>1 = v9958 present
0287+  2AAB             
0288+  2AAB F3          v9958_Check:  di                       ;Test for v9958
0289+  2AAC 3E 01                     ld    a,1                ;Set s$1
0290+  2AAE D3 99                     out   ($99),a
0291+  2AB0 3E 8F                     ld    a,15+128
0292+  2AB2 D3 99                     out   ($99),a
0293+  2AB4 1A                        ld    a,(de)             ;Waste some time...
0294+  2AB5 DB 99                     in    a,($99)
0295+  2AB7 F5                        push  af
0296+  2AB8 3E 00                     ld    a,0
0297+  2ABA D3 99                     out   ($99),a
0298+  2ABC 3E 8F                     ld    a,15+128
0299+  2ABE D3 99                     out   ($99),a            ;Set s$0
0300+  2AC0 FB                        ei
0301+  2AC1 F1                        pop   af
0302+  2AC2 E6 3C                     and   %00111100          ;v9938? RET with Z
0303+  2AC4 32 AA 2A                  ld    (v9958),a
0304+  2AC7 C9                        ret
0305+  2AC8             
0306+  2AC8             ;-----------------------------------------
0307+  2AC8             ;         
0308+  2AC8             ; These routines are the know-how scripts
0309+  2AC8             ; by VDP profies. In fact, dont use without
0310+  2AC8             ; knowing what is all about. Read manuals.
0311+  2AC8             ;
0312+  2AC8             ;-----------------------------------------
0313+  2AC8             
0314+  2AC8 00 00 00 00 VDP: .word  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0314+  2ACC 00 00 00 00 
0314+  2AD0 00 00 00 00 
0314+  2AD4 00 00 00 00 
0314+  2AD8 00 00 00 00 
0314+  2ADC 00 00 00 00 
0314+  2AE0 00 00 00 00 
0314+  2AE4 00 00 
0315+  2AE6             
0316+  2AE6             ;
0317+  2AE6             ;Copy the VDP-registers' settings to array VDP.
0318+  2AE6             ;Afterwards, read the VDP-registers with LD A,(VDP + r)
0319+  2AE6             ;(this should be placed at the start of a program)
0320+  2AE6             ;
0321+  2AE6 21 C8 2A    Copy_VdpRegs: ld      hl,VDP+0
0322+  2AE9 11 C8 2A                  ld      de,VDP+0
0323+  2AEC 01 08 00                  ld      bc,8
0324+  2AEF ED B0                     ldir
0325+  2AF1 21 D0 2A                  ld      hl,VDP+8
0326+  2AF4 11 D0 2A                  ld      de,VDP+8
0327+  2AF7 01 11 00                  ld      bc,17
0328+  2AFA ED B0                     ldir
0329+  2AFC C9                        ret
0330+  2AFD             
0331+  2AFD             
0332+  2AFD             ;
0333+  2AFD             ;Restore the VDP-registers' settings.
0334+  2AFD             ;(this should be placed at the end of a program)
0335+  2AFD             ;
0336+  2AFD 01 00 08    Rest_VdpRegs: ld      bc,$0800
0337+  2B00 21 C8 2A                  ld      hl,VDP+0
0338+  2B03 CD 15 2B                  call    Rest_VdpSub
0339+  2B06 01 08 10                  ld      bc,$1008
0340+  2B09 21 D0 2A                  ld      hl,VDP+8
0341+  2B0C CD 15 2B                  call    Rest_VdpSub
0342+  2B0F 01 19 03                  ld      bc,$0319
0343+  2B12 21 24 2B                  ld      hl,Vdp3zero    ;a jp Restore_Vdp_Sub is implied
0344+  2B15 7E          Rest_VdpSub:  ld      a,(hl)
0345+  2B16 23                        inc     hl
0346+  2B17 F3                        di
0347+  2B18 D3 99                     out     ($99),a
0348+  2B1A 79                        ld      a,c
0349+  2B1B F6 80                     or      128
0350+  2B1D FB                        ei
0351+  2B1E D3 99                     out     ($99),a
0352+  2B20 0C                        inc     c
0353+  2B21 10 F2                     djnz    Rest_VdpSub
0354+  2B23 C9                        ret
0355+  2B24             
0356+  2B24 00 00 00    Vdp3zero:    .byte      0,0,0
0357+  2B27             
0358+  2B27             
0359+  2B27             ;
0360+  2B27             ;Set page = A [0..3] in screen 5.
0361+  2B27             ;
0362+  2B27             SetPage:
0363+  2B27 87                  add     a,a ;x32
0364+  2B28 87                  add     a,a
0365+  2B29 87                  add     a,a
0366+  2B2A 87                  add     a,a
0367+  2B2B 87                  add     a,a
0368+  2B2C C6 1F               add     a,31
0369+  2B2E 32 CA 2A            ld      (VDP+2),a
0370+  2B31 F3                  di
0371+  2B32 D3 99               out     ($99),a
0372+  2B34 3E 82               ld      a,2+128
0373+  2B36 FB                  ei
0374+  2B37 D3 99               out     ($99),a
0375+  2B39 C9                  ret
0376+  2B3A                     
0377+  2B3A             ;
0378+  2B3A             ;Set VDP port $98 to start writing at address AHL (17-bit)
0379+  2B3A             ;
0380+  2B3A             ;
0381+  2B3A             ; Left upper corner of each pages:
0382+  2B3A             ;   0 -> A=0,HL=$0000
0383+  2B3A             ;   1 -> A=0,HL=$8000
0384+  2B3A             ;   2 -> A=1,HL=$0000
0385+  2B3A             ;   3 -> A=1,HL=$8000
0386+  2B3A             ;
0387+  2B3A             
0388+  2B3A             
0389+  2B3A             Set_Vdp_Write:           ; A(1bit),HL(16bits) input
0390+  2B3A                     
0391+  2B3A CB 04               rlc   h
0392+  2B3C 17                  rla
0393+  2B3D CB 04               rlc   h
0394+  2B3F 17                  rla
0395+  2B40 CB 3C               srl   h
0396+  2B42 CB 3C               srl   h
0397+  2B44 F3                  di
0398+  2B45 D3 99               out   ($99),a
0399+  2B47 3E 8E               ld    a,14+128
0400+  2B49 D3 99               out   ($99),a
0401+  2B4B 7D                  ld    a,l
0402+  2B4C 00                  nop
0403+  2B4D D3 99               out   ($99),a
0404+  2B4F 7C                  ld    a,h
0405+  2B50 F6 40               or    64
0406+  2B52 FB                  ei
0407+  2B53 D3 99               out   ($99),a
0408+  2B55 C9                  ret
0409+  2B56             
0410+  2B56             ;
0411+  2B56             ;Set VDP port $98 to start reading at address AHL (17-bit)
0412+  2B56             ;
0413+  2B56             SetVdp_Read:
0414+  2B56 CB 04               rlc     h
0415+  2B58 17                  rla
0416+  2B59 CB 04               rlc     h
0417+  2B5B 17                  rla
0418+  2B5C CB 3C               srl     h
0419+  2B5E CB 3C               srl     h
0420+  2B60 F3                  di
0421+  2B61 D3 99               out     ($99),a       ;set bits 15-17
0422+  2B63 3E 8E               ld      a,128+14
0423+  2B65 D3 99               out     ($99),a
0424+  2B67 7D                  ld      a,l           ;set bits 0-7
0425+  2B68 00                  nop
0426+  2B69 D3 99               out     ($99),a
0427+  2B6B 7C                  ld      a,h           ;set bits 8-14
0428+  2B6C FB                  ei                    ; + read access
0429+  2B6D D3 99               out     ($99),a
0430+  2B6F C9                  ret
0431+  2B70                     
0432+  2B70             ;****************************************************************
0433+  2B70             ; HMMC (High speed move CPU to VRAM)
0434+  2B70             ; Screen size 256x212 dots, each byte is color Nr. for 2-pixels 
0435+  2B70             ;
0436+  2B70             ; Copies data from memory to block in VRAM
0437+  2B70             ; The same as in basic COPY file.pic TO (x,y)-(x+D-1,y+E-1)
0438+  2B70             ;
0439+  2B70             ; RAM [IX] => VRAM (H,L)-(+D,+E)
0440+  2B70             ;
0441+  2B70             ; set ix = memory address of data to write to VRAM
0442+  2B70             ; set h,l,d,e for rectangle to put in
0443+  2B70             ; D,E mod 2 = 0 !
0444+  2B70             ;****************************************************************
0445+  2B70             
0446+  2B70             HMMC:  
0447+  2B70 F3                   di
0448+  2B71 F5                   push af
0449+  2B72 C5                   push bc
0450+  2B73 E5                   push hl
0451+  2B74 DD E5                push ix      
0452+  2B76 3E 00                ld a,0         
0453+  2B78 CD DD 2B             call hmmc_wait_VDP
0454+  2B7B 3E 24                ld a,36         ;command register R#36
0455+  2B7D D3 99                out ($99),a
0456+  2B7F 3E 91                ld a,128+17     ;VDP(17)<=36
0457+  2B81 D3 99                out ($99),a
0458+  2B83 AF                   xor a           ;ld a,0
0459+  2B84 0E 9B                ld c,$9b
0460+  2B86 ED 61                out (c),h       ;X
0461+  2B88 ED 79                out (c),a
0462+  2B8A ED 69                out (c),l       ;Y
0463+  2B8C ED 79                out (c),a
0464+  2B8E ED 51                out (c),d       ;DX in dots
0465+  2B90 ED 79                out (c),a       ;
0466+  2B92 ED 59                out (c),e       ;DY in dots
0467+  2B94 ED 79                out (c),a       ;
0468+  2B96                         
0469+  2B96 DD 66 00             ld h,(ix)       ;first byte of data
0470+  2B99 ED 61                out (c),h       
0471+  2B9B             
0472+  2B9B ED 79                out (c),a       ;DIX and DIY = 0     
0473+  2B9D 3E F0                ld a,%11110000
0474+  2B9F ED 79                out (c),a      ; command to do it
0475+  2BA1 3E AC                ld a,128+44
0476+  2BA3 D3 99                out ($99),a
0477+  2BA5 3E 91                ld a,128+17
0478+  2BA7 D3 99                out ($99),a    ; VDP(17)<=44                        
0479+  2BA9             hmmc_Loop:
0480+  2BA9 3E 02                ld a,2
0481+  2BAB CD CB 2B             call hmmc_Status
0482+  2BAE CB 7F                bit 7,a        ; TR? transferring?
0483+  2BB0 28 F7                jr z, hmmc_Loop
0484+  2BB2 CB 47                bit 0,a        ; CE? is over?
0485+  2BB4 28 09                jr z, hmmc_exit                       
0486+  2BB6 DD 23                inc ix
0487+  2BB8 DD 7E 00             ld a,(ix)
0488+  2BBB D3 9B                out ($9b),a
0489+  2BBD 18 EA                jr hmmc_Loop                                                      
0490+  2BBF             hmmc_exit:
0491+  2BBF 3E 00                ld a,0
0492+  2BC1 CD CB 2B             call hmmc_Status
0493+  2BC4 DD E1                pop ix
0494+  2BC6 E1                   pop hl
0495+  2BC7 C1                   pop bc
0496+  2BC8 F1                   pop af
0497+  2BC9 FB                   ei
0498+  2BCA C9                   ret                                                                                                                                                                                                                  
0499+  2BCB                                                                                                                                                                                                                                                                                         
0500+  2BCB             hmmc_Status:
0501+  2BCB D3 99                out ($99),a
0502+  2BCD 3E 8F                ld a,$8f
0503+  2BCF D3 99                out ($99),a
0504+  2BD1 DB 99                in a,($99)
0505+  2BD3 F5                   push af
0506+  2BD4 AF                   xor a
0507+  2BD5 D3 99                out ($99),a
0508+  2BD7 3E 8F                ld a,$8f
0509+  2BD9 D3 99                out ($99),a
0510+  2BDB F1                   pop af
0511+  2BDC C9                   ret
0512+  2BDD             hmmc_wait_VDP:
0513+  2BDD 3E 02                ld a,2
0514+  2BDF CD CB 2B             call hmmc_Status
0515+  2BE2 E6 01                and 1
0516+  2BE4 20 F7                jr nz,hmmc_wait_VDP
0517+  2BE6 AF                   xor a
0518+  2BE7 CD CB 2B             call hmmc_Status
0519+  2BEA C9                   ret
0520+  2BEB             
0521+  2BEB             ;****************************************************************
0522+  2BEB             ;  HMMM (High speed move VRAM to VRAM)
0523+  2BEB             ;        to use, set H, L, D, E, B, C and go
0524+  2BEB             ;        VRAM (H,L)-(+D,+E) ---> VRAM (B,C)
0525+  2BEB             ; DE is difference -not absolute values
0526+  2BEB             ; byte DIX,DIY=0, explained:
0527+  2BEB             ; The 0 copies the block starting from the upper left, the 1 from right/bottom.
0528+  2BEB             ; what's the difference? when copying overlapping source/destination
0529+  2BEB             ; (a scroller for example)
0530+  2BEB             ; when scrolling from right to left DIX/DIY can both be 0
0531+  2BEB             ;  but copying from left to right DIX must be 1. just figure it out...
0532+  2BEB             ; Then give coord.positive from right upper corner to left.
0533+  2BEB             ;****************************************************************
0534+  2BEB             
0535+  2BEB             HMMM:
0536+  2BEB F3                   di
0537+  2BEC F5                   push af
0538+  2BED C5                   push bc              
0539+  2BEE CD 27 2C             call VDPready
0540+  2BF1 3E 20                ld  a,32
0541+  2BF3 D3 99                out ($99),a
0542+  2BF5 3E 91                ld  a,128+17
0543+  2BF7 D3 99                out ($99),a     ;R#17 := 32
0544+  2BF9 D5                   push de
0545+  2BFA C5                   push bc
0546+  2BFB AF                   xor a           ;ld a,0
0547+  2BFC D1                   pop de          ;de = bc now
0548+  2BFD 0E 9B                ld c,$9b
0549+  2BFF ED 61                out (c),h       ;X from
0550+  2C01 ED 79                out (c),a
0551+  2C03 ED 69                out (c),l       ;Y from
0552+  2C05 ED 79                out (c),a
0553+  2C07 ED 51                out (c),d       ;X to
0554+  2C09 ED 79                out (c),a       ;
0555+  2C0B ED 59                out (c),e       ;Y to
0556+  2C0D ED 79                out (c),a
0557+  2C0F D1                   pop de          ;de = de now
0558+  2C10 ED 51                out (c),d       ;DX in dots
0559+  2C12 ED 79                out (c),a       ;
0560+  2C14 ED 59                out (c),e       ;DY in dots
0561+  2C16 ED 79                out (c),a       ;
0562+  2C18 ED 79                out (c),a       ;dummy
0563+  2C1A ED 79                out (c),a       ;DIX and DIY = 0
0564+  2C1C 3E D0                ld  a,%11010000 ;HMMM command
0565+  2C1E ED 79                out (c),a       ;do it
0566+  2C20 CD 27 2C             call VDPready
0567+  2C23 C1                   pop bc
0568+  2C24 F1                   pop af
0569+  2C25 FB                   ei
0570+  2C26 C9                   ret
0571+  2C27                                             
0572+  2C27             VDPready:
0573+  2C27 3E 02               ld   a,2
0574+  2C29 F3                  di
0575+  2C2A D3 99               out  ($99),a          ;select status register 2
0576+  2C2C 3E 8F               ld   a,128+15
0577+  2C2E D3 99               out  ($99),a
0578+  2C30 DB 99               in   a,($99)
0579+  2C32 1F                  rra
0580+  2C33 3E 00               ld   a,0
0581+  2C35 D3 99               out  ($99),a
0582+  2C37 3E 8F               ld   a,128+15
0583+  2C39 D3 99               out  ($99),a
0584+  2C3B FB                  ei
0585+  2C3C 38 E9               jr   c,VDPready    ;wait till previous VDP execution is over (CE)
0586+  2C3E C9                  ret
0587+  2C3F             
0588+  2C3F             ;
0589+  2C3F             ; Sets display mode to width 80
0590+  2C3F             ; Use then SetScreen0By30h to set back width 40
0591+  2C3F             ;
0592+  2C3F             VDPsetMode80:        
0593+  2C3F             
0594+  2C3F F3                  di
0595+  2C40 3E 04               ld   a,%00000100
0596+  2C42 D3 99               out  ($99),a
0597+  2C44 3E 80               ld   a,128+0
0598+  2C46 D3 99               out  ($99),a
0599+  2C48 3E 70               ld   a,%01110000
0600+  2C4A D3 99               out  ($99),a
0601+  2C4C 3E 81               ld   a,128+1
0602+  2C4E D3 99               out  ($99),a
0603+  2C50 AF                  xor a
0604+  2C51 D3 99               out  ($99),a
0605+  2C53 3E 88               ld   a,128+8
0606+  2C55 D3 99               out  ($99),a
0607+  2C57 AF                  xor a
0608+  2C58 D3 99               out  ($99),a
0609+  2C5A 3E 89               ld   a,128+9
0610+  2C5C D3 99               out  ($99),a
0611+  2C5E FB                  ei
0612+  2C5F C9                  ret
0613+  2C60                                                     
0614+  2C60             ;        
0615+  2C60             ;Disable the screen.
0616+  2C60             ;
0617+  2C60             Disable_Scr:
0618+  2C60 3A C9 2A            ld      a,(VDP+1)
0619+  2C63 E6 BF               and     %10111111
0620+  2C65 32 C9 2A            ld      (VDP+1),a
0621+  2C68 F3                  di
0622+  2C69 D3 99               out     ($99),a
0623+  2C6B 3E 81               ld      a,128+1
0624+  2C6D FB                  ei
0625+  2C6E D3 99               out     ($99),a
0626+  2C70 C9                  ret
0627+  2C71             
0628+  2C71             ;
0629+  2C71             ;Enable the screen.
0630+  2C71             ;
0631+  2C71             Enable_Scr:
0632+  2C71 3A C9 2A            ld      a,(VDP+1)
0633+  2C74 F6 40               or      %01000000
0634+  2C76 32 C9 2A            ld      (VDP+1),a
0635+  2C79 F3                  di
0636+  2C7A D3 99               out     ($99),a
0637+  2C7C 3E 81               ld      a,128+1
0638+  2C7E FB                  ei
0639+  2C7F D3 99               out     ($99),a
0640+  2C81 C9                  ret
0641+  2C82             
0642+  2C82             ;
0643+  2C82             ;Enable the sprites.
0644+  2C82             ;
0645+  2C82 3A D0 2A    Sprites_On:   ld      a,(VDP+8)
0646+  2C85 E6 FD                     and     %11111101
0647+  2C87 32 D0 2A                  ld      (VDP+8),a
0648+  2C8A F3                        di
0649+  2C8B D3 99                     out     ($99),a
0650+  2C8D 3E 88                     ld      a,8+128
0651+  2C8F FB                        ei
0652+  2C90 D3 99                     out     ($99),a
0653+  2C92 C9                        ret
0654+  2C93             
0655+  2C93             ;
0656+  2C93             ;Disable the sprites.
0657+  2C93             ;
0658+  2C93 3A D0 2A    Sprites_Off:  ld      a,(VDP+8)
0659+  2C96 F6 02                     or      %00000010
0660+  2C98 32 D0 2A                  ld      (VDP+8),a
0661+  2C9B F3                        di
0662+  2C9C D3 99                     out     ($99),a
0663+  2C9E 3E 88                     ld      a,8+128
0664+  2CA0 FB                        ei
0665+  2CA1 D3 99                     out     ($99),a
0666+  2CA3 C9                        ret
0667+  2CA4             ;
0668+  2CA4             ; set 16x16 sprites
0669+  2CA4             ;         
0670+  2CA4             VDPsprites16x16:
0671+  2CA4 3A C9 2A                  ld      a,(VDP+1)
0672+  2CA7 F6 02                     or      %00000010
0673+  2CA9 32 C9 2A                  ld      (VDP+1),a
0674+  2CAC F3                        di
0675+  2CAD D3 99                     out     ($99),a
0676+  2CAF 3E 81                     ld      a,1+128
0677+  2CB1 FB                        ei
0678+  2CB2 D3 99                     out     ($99),a
0679+  2CB4 C9                        ret
0680+  2CB5             
0681+  2CB5 00 00 00 00 ColPal_:    .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 
0681+  2CB9 00 00 00 00 
0681+  2CBD 00 00 00 00 
0681+  2CC1 00 00 00 00 
0681+  2CC5 00 00 00 00 
0681+  2CC9 00 00 00 00 
0681+  2CCD 00 00 00 00 
0681+  2CD1 00 00 00 00 
0682+  2CD5             
0683+  2CD5             Color16defaultPalettes:
0684+  2CD5                         ;table of colours Nr,R,G,B
0685+  2CD5 00 00 00 00         .byte $0,0,0,0
0686+  2CD9 01 00 00 00         .byte $1,0,0,0
0687+  2CDD 02 01 06 01         .byte $2,1,6,1
0688+  2CE1 03 03 07 03         .byte $3,3,7,3
0689+  2CE5 04 01 01 07         .byte $4,1,1,7
0690+  2CE9 05 02 03 07         .byte $5,2,3,7
0691+  2CED 06 05 01 01         .byte $6,5,1,1
0692+  2CF1 07 02 06 07         .byte $7,2,6,7
0693+  2CF5 08 07 01 01         .byte $8,7,1,1
0694+  2CF9 09 07 03 03         .byte $9,7,3,3
0695+  2CFD 0A 06 06 01         .byte $A,6,6,1
0696+  2D01 0B 06 06 04         .byte $B,6,6,4
0697+  2D05 0C 01 04 01         .byte $C,1,4,1
0698+  2D09 0D 06 02 05         .byte $D,6,2,5
0699+  2D0D 0E 05 05 05         .byte $E,5,5,5
0700+  2D11 0F 07 07 07         .byte $F,7,7,7
0701+  2D15                     
0702+  2D15             ;Restores default MSX color palettes
0703+  2D15             RestoreColors:
0704+  2D15 E5                       push hl
0705+  2D16 21 D5 2C                 ld hl, Color16defaultPalettes 
0706+  2D19 CD FA 29                 call SetPaletteByTable    ; defines 16colors
0707+  2D1C E1                       pop hl
0708+  2D1D C9                       ret
0709+  2D1E             
0710+  2D1E             ;****************************************************************
0711+  2D1E             ; draws LINE 
0712+  2D1E             ;        to use, set H, L, D, E, B, A and go
0713+  2D1E             ;        draw LINE (H,L)-(D,E) with color B, log-op A
0714+  2D1E             ; H,L,D,E absolute values
0715+  2D1E             ;****************************************************************
0716+  2D1E             
0717+  2D1E             LINE:
0718+  2D1E F3                   di
0719+  2D1F F5                   push af
0720+  2D20 C5                   push bc
0721+  2D21 D5                   push de
0722+  2D22 E5                   push hl
0723+  2D23                      
0724+  2D23 F5                   push af          ;save LOGICAL OPERATION
0725+  2D24 C5                   push bc          ;save COLOR            
0726+  2D25 CD 27 2C             call VDPready
0727+  2D28 3E 24                ld  a,36
0728+  2D2A D3 99                out ($99),a
0729+  2D2C 3E 91                ld  a,128+17
0730+  2D2E D3 99                out ($99),a     ;R#17 := 36
0731+  2D30 AF                   xor a           ;ld a,0
0732+  2D31 0E 9B                ld c,$9b
0733+  2D33 ED 61                out (c),h       ;X from
0734+  2D35 ED 79                out (c),a
0735+  2D37 ED 69                out (c),l       ;Y from
0736+  2D39 ED 79                out (c),a
0737+  2D3B              
0738+  2D3B 7C                   ld a,h          ;make DX and DIX
0739+  2D3C 92                   sub d
0740+  2D3D 16 04                ld  d,%00000100
0741+  2D3F 30 04                jr nc,gLINE1
0742+  2D41 16 00                ld  d,%00000000
0743+  2D43 ED 44                neg
0744+  2D45 67          gLINE1:  ld h,a          ;H := DX , D := DIX
0745+  2D46 7D                   ld a,l          ;make DY and DIY
0746+  2D47 93                   sub e
0747+  2D48 1E 08                ld  e,%00001000
0748+  2D4A 30 04                jr nc,gLINE2
0749+  2D4C 1E 00                ld  e,%00000000
0750+  2D4E ED 44                neg
0751+  2D50 6F          gLINE2:  ld l,a          ;L := DY , E := DIY
0752+  2D51 BC                   cp h            ;make Maj and Min
0753+  2D52 38 0D                jr c,gLINE3
0754+  2D54 AF                   xor a
0755+  2D55 ED 69                out (c),l           ;long side
0756+  2D57 ED 79                out (c),a
0757+  2D59 ED 61                out (c),h           ;short side
0758+  2D5B ED 79                out (c),a
0759+  2D5D 3E 01                ld  a,%00000001     ;MAJ := 1
0760+  2D5F 18 0B                jr gLINE4
0761+  2D61             
0762+  2D61 AF          gLINE3:  xor a
0763+  2D62 ED 61                out (c),h           ;NX
0764+  2D64 ED 79                out (c),a
0765+  2D66 ED 69                out (c),l           ;NY
0766+  2D68 ED 79                out (c),a
0767+  2D6A 3E 00                ld  a,%00000000     ;MAJ := 0
0768+  2D6C             
0769+  2D6C B2          gLINE4:  or d
0770+  2D6D B3                   or e           ;A := DIX , DIY , MAJ
0771+  2D6E E1                   pop hl         ;H := COLOR
0772+  2D6F ED 61                out (c),h
0773+  2D71 ED 79                out (c),a
0774+  2D73 F1                   pop af         ;A := LOGICAL OPERATION
0775+  2D74 F6 70                or  %01110000
0776+  2D76 ED 79                out (c),a
0777+  2D78 3E 8F                ld  a,$8F
0778+  2D7A ED 79                out (c),a
0779+  2D7C                      
0780+  2D7C CD 27 2C             call VDPready
0781+  2D7F E1                   pop hl         
0782+  2D80 D1                   pop de         
0783+  2D81 C1                   pop bc
0784+  2D82 F1                   pop af
0785+  2D83 FB                   ei
0786+  2D84 C9                   ret
0787+  2D85              
0788+  2D85             
0789+  2D85             ;***************************************************************************
0790+  2D85             ;  HMMM with 2byte addressing (far copy), for not simplest case
0791+  2D85             ;  word size parameters for H, L, D, E, B, C, DIX/DIY byte
0792+  2D85             ;***************************************************************************
0793+  2D85             
0794+  2D85 00 00 00 00 HC_p     .word 0,0,0,0,0,0
0794+  2D89 00 00 00 00 
0794+  2D8D 00 00 00 00 
0795+  2D91 00                   .byte 0    ;DIX,DIY, just =0
0796+  2D92             
0797+  2D92             HMMMf:
0798+  2D92 F3                   di
0799+  2D93 F5                   push af
0800+  2D94 C5                   push bc
0801+  2D95 D5                   push de
0802+  2D96 E5                   push hl
0803+  2D97                              
0804+  2D97 CD 27 2C             call VDPready
0805+  2D9A 3E 20                ld  a,32
0806+  2D9C D3 99                out ($99),a
0807+  2D9E 3E 91                ld  a,128+17
0808+  2DA0 D3 99                out ($99),a     ;R#17 := 32
0809+  2DA2 21 85 2D             ld hl,HC_p
0810+  2DA5 0E 9B                ld c,$9b
0811+  2DA7 06 0C                ld b,12         ;6x2bytes
0812+  2DA9 ED B3                otir
0813+  2DAB AF                   xor a     
0814+  2DAC ED 79                out (c),a       ;dummy
0815+  2DAE ED A3                outi            ;DIX and DIY
0816+  2DB0 3E D0                ld  a,%11010000 ;HMMM command
0817+  2DB2 ED 79                out (c),a       ;do it
0818+  2DB4 CD 27 2C             call VDPready
0819+  2DB7 E1                   pop hl
0820+  2DB8 D1                   pop de
0821+  2DB9 C1                   pop bc
0822+  2DBA F1                   pop af
0823+  2DBB FB                   ei
0824+  2DBC C9                   ret
0825+  2DBD             
0826+  2DBD             ;***************************************************************************
0827+  2DBD             ;  LMMM with 2byte addressing (far copy), for not simplest case
0828+  2DBD             ;  VRAM (H,L)-(D,E) ---> VRAM (B,C)  with logical operation 
0829+  2DBD             ;  word size parameters for H, L, D, E, B, C, DIX/DIY byte, Logical_A byte
0830+  2DBD             ;***************************************************************************
0831+  2DBD             
0832+  2DBD 00 00 00 00 LM_p     .word 0,0,0,0,0,0
0832+  2DC1 00 00 00 00 
0832+  2DC5 00 00 00 00 
0833+  2DC9 00                   .byte 0    ;DIX,DIY, just =0
0834+  2DCA 00                   .byte 0    ;LOGICAL IMP=0 (just copy), TIMP bit3=1 copy no transparents
0835+  2DCB             LMMMf:
0836+  2DCB F3                   di
0837+  2DCC F5                   push af
0838+  2DCD C5                   push bc
0839+  2DCE D5                   push de
0840+  2DCF E5                   push hl
0841+  2DD0                              
0842+  2DD0 CD 27 2C             call VDPready
0843+  2DD3 3E 20                ld  a,32
0844+  2DD5 D3 99                out ($99),a
0845+  2DD7 3E 91                ld  a,128+17
0846+  2DD9 D3 99                out ($99),a     ;R#17 := 32
0847+  2DDB 21 BD 2D             ld hl,LM_p
0848+  2DDE 0E 9B                ld c,$9b
0849+  2DE0 06 0C                ld b,12         ;6x2bytes
0850+  2DE2 ED B3                otir
0851+  2DE4 AF                   xor a     
0852+  2DE5 ED 79                out (c),a       ;dummy
0853+  2DE7 ED A3                outi            ;DIX and DIY
0854+  2DE9 7E                   ld a,(hl)       ; +logical
0855+  2DEA F6 90                or %10010000    ;LMMM command
0856+  2DEC ED 79                out (c),a       ;do it
0857+  2DEE CD 27 2C             call VDPready
0858+  2DF1 E1                   pop hl
0859+  2DF2 D1                   pop de
0860+  2DF3 C1                   pop bc
0861+  2DF4 F1                   pop af
0862+  2DF5 FB                   ei
0863+  2DF6 C9                   ret
3618   2DF7                       #include "DISKs.ASM"       ; disk function diskload
0001+  2DF7             ;=======================================
0002+  2DF7             ;
0003+  2DF7             ; Disk functions (working)
0004+  2DF7             ;
0005+  2DF7             ;     diskload - to load small file into memory knowing that it works
0006+  2DF7             ;     readFF - buffered reading of 255 bytes of file into memory
0007+  2DF7             ;                (safe diskload for larger file)
0008+  2DF7             ;     dirload - to load directory structure into memory as string
0009+  2DF7             
0010+  2DF7             ;=======================================
0011+  2DF7             ;
0012+  2DF7             ; Usage1:
0013+  2DF7             ;        ld hl,filename_
0014+  2DF7             ;        ld de,$2000
0015+  2DF7             ;        call diskload
0016+  2DF7             ;filename_:
0017+  2DF7             ;        .byte 0,"myfile  com",0  
0018+  2DF7             ;
0019+  2DF7             ; (use exact file name space!)
0020+  2DF7             ;
0021+  2DF7             ;
0022+  2DF7             ; Usage2:
0023+  2DF7             ;        ld hl,filename_
0024+  2DF7             ;scanfile_:
0025+  2DF7             ;        call readFF
0026+  2DF7             ;        cp 0
0027+  2DF7             ;        jr z,scanover_
0028+  2DF7             ;        ld b,a
0029+  2DF7             ;        push de
0030+  2DF7             ;scanrecord_:
0031+  2DF7             ;        ld a,(de)   ;byte is here
0032+  2DF7             ;        inc de
0033+  2DF7             ;        djnz scanrecord_
0034+  2DF7             ;        pop de
0035+  2DF7             ;        jr scanfile_
0036+  2DF7             ;scanover_: 
0037+  2DF7             ;
0038+  2DF7             ;
0039+  2DF7             ; Usage3:
0040+  2DF7             ;        ld hl,willcard_
0041+  2DF7             ;        ld de,$2000
0042+  2DF7             ;        call dirload 
0043+  2DF7             ;willcard_:
0044+  2DF7             ;        .byte 0,"??????? COM",0  ;
0045+  2DF7             ;     
0046+  2DF7             ;    
0047+  2DF7             f_setdma:     .equ     26
0048+  2DF7             f_read:       .equ     39
0049+  2DF7             f_open:       .equ     15
0050+  2DF7             f_close:      .equ     16
0051+  2DF7             
0052+  2DF7             f_search1     .equ     $11
0053+  2DF7             f_search2     .equ     $12
0054+  2DF7             
0055+  2DF7             f_bdos:       .equ     $F37D   ; Call $5
0056+  2DF7             
0057+  2DF7             
0058+  2DF7             ; load file in address de
0059+  2DF7             diskload:
0060+  2DF7 F5                  push af
0061+  2DF8 C5                  push bc
0062+  2DF9 D5                  push de
0063+  2DFA E5                  push hl
0064+  2DFB DD E5               push ix
0065+  2DFD FD E5               push iy
0066+  2DFF                     
0067+  2DFF 3E 01               ld a,1
0068+  2E01 32 1E 2E            ld (loadflag),a
0069+  2E04                     
0070+  2E04 D5                  push de
0071+  2E05 CD 28 2F            call f_setfcb
0072+  2E08 CD 3F 2F            call f_openf
0073+  2E0B 2A 81 2F            ld hl,(f_bleng)
0074+  2E0E D1                  pop de
0075+  2E0F CD 55 2F            call f_loadf
0076+  2E12 CD 68 2F            call f_closef
0077+  2E15                     
0078+  2E15 FD E1               pop iy
0079+  2E17 DD E1               pop ix
0080+  2E19 E1                  pop hl
0081+  2E1A D1                  pop de
0082+  2E1B C1                  pop bc
0083+  2E1C F1                  pop af
0084+  2E1D C9                  ret
0085+  2E1E                     
0086+  2E1E 01          loadflag: .byte   1   ; should be 0 on return if loaded
0087+  2E1F             
0088+  2E1F 00          stop_rdFF .byte   0   ; set 1 to stop reading
0089+  2E20             ; scan file, buffer in address de
0090+  2E20             readFF:
0091+  2E20 C5                  push bc
0092+  2E21 D5                  push de
0093+  2E22 E5                  push hl
0094+  2E23 DD E5               push ix
0095+  2E25 FD E5               push iy
0096+  2E27                     
0097+  2E27 3A 7B 2E            ld a,(rd_opn)
0098+  2E2A FE 00               cp 0
0099+  2E2C 20 08               jr nz,rd_overOpnFile
0100+  2E2E                     
0101+  2E2E D5                  push de
0102+  2E2F CD 28 2F            call f_setfcb
0103+  2E32 CD 3F 2F            call f_openf
0104+  2E35 D1                  pop de
0105+  2E36                 
0106+  2E36             rd_overOpnFile:
0107+  2E36             
0108+  2E36 3E 00               ld a,0
0109+  2E38 32 80 2F            ld (f_groot+1),a
0110+  2E3B 67                  ld h,a
0111+  2E3C 3E 01               ld a,$1   ; read 255 bytes only
0112+  2E3E 32 7F 2F            ld (f_groot),a
0113+  2E41 2E FF               ld l,$ff
0114+  2E43                     
0115+  2E43 3A 7B 2E            ld a,(rd_opn)
0116+  2E46 FE 00               cp 0
0117+  2E48 20 08               jr nz,rd_over2
0118+  2E4A 32 1F 2E            ld (stop_rdFF),a                        
0119+  2E4D CD 55 2F            call f_loadf
0120+  2E50 18 0D               jr rd_over3
0121+  2E52             rd_over2:
0122+  2E52 3A 1F 2E            ld a,(stop_rdFF)
0123+  2E55 FE 00               cp 0
0124+  2E57 20 10               jr nz,rd_StopRd
0125+  2E59 11 71 2F            ld de,f_fcb
0126+  2E5C CD 5F 2F            call f_rdit
0127+  2E5F             rd_over3:
0128+  2E5F 3E 01               ld a,1
0129+  2E61 32 7B 2E            ld (rd_opn),a
0130+  2E64                     
0131+  2E64 7D                  ld a,l
0132+  2E65 FE 00               cp 0
0133+  2E67 20 0A               jr nz,rd_outExit
0134+  2E69             rd_StopRd:
0135+  2E69 CD 68 2F            call f_closef
0136+  2E6C 3E 00               ld a,0
0137+  2E6E 32 7B 2E            ld (rd_opn),a
0138+  2E71 FE 00               cp 0
0139+  2E73                           
0140+  2E73             rd_outExit:        
0141+  2E73 FD E1               pop iy
0142+  2E75 DD E1               pop ix
0143+  2E77 E1                  pop hl
0144+  2E78 D1                  pop de
0145+  2E79 C1                  pop bc
0146+  2E7A C9                  ret
0147+  2E7B             
0148+  2E7B 00          rd_opn: .byte 0
0149+  2E7C                  
0150+  2E7C             ;
0151+  2E7C             ; searches directory files
0152+  2E7C             ;   that match hl willcard
0153+  2E7C             ;   and stores result in address de
0154+  2E7C             ;
0155+  2E7C             ; separator ","
0156+  2E7C             ; ends with "$"
0157+  2E7C             ;
0158+  2E7C             ;  So, print the directory structure after by simple:
0159+  2E7C             ;         ld c, 9
0160+  2E7C             ;         call 5
0161+  2E7C             ;
0162+  2E7C 00          f_found .byte 0   ; counter of files found
0163+  2E7D             
0164+  2E7D             dirload:
0165+  2E7D F5                  push af
0166+  2E7E C5                  push bc
0167+  2E7F D5                  push de
0168+  2E80 E5                  push hl
0169+  2E81 DD E5               push ix
0170+  2E83 FD E5               push iy
0171+  2E85                     
0172+  2E85 3E 00               ld      a,0
0173+  2E87 32 7C 2E            ld      (f_found),a
0174+  2E8A                     
0175+  2E8A CD 10 2F            call    f_sv_save ; save de
0176+  2E8D                     
0177+  2E8D CD 28 2F            call    f_setfcb
0178+  2E90 2A 81 2F            ld      hl,(f_bleng)
0179+  2E93             
0180+  2E93 E5                  push    hl
0181+  2E94 11 E8 2E            ld      de,f_dma                                                                                                                                                                                          
0182+  2E97 0E 1A               ld      c,f_setdma
0183+  2E99 CD 7D F3            call    f_bdos
0184+  2E9C 11 71 2F            ld      de,f_fcb
0185+  2E9F E1                  pop     hl                
0186+  2EA0                     
0187+  2EA0 0E 11               ld      c,f_search1  ; first search
0188+  2EA2 CD 7D F3            call    f_bdos
0189+  2EA5                     
0190+  2EA5             f_loopDirList:
0191+  2EA5             
0192+  2EA5 FE 00               cp 0
0193+  2EA7 20 28               jr nz,  f_errDirList
0194+  2EA9                     
0195+  2EA9                     ;----- save in list --|
0196+  2EA9 F5                  push    af
0197+  2EAA C5                  push    bc
0198+  2EAB D5                  push    de
0199+  2EAC E5                  push    hl
0200+  2EAD                     
0201+  2EAD 3A 7C 2E            ld      a,(f_found)
0202+  2EB0 3C                  inc     a
0203+  2EB1 32 7C 2E            ld      (f_found),a
0204+  2EB4                             
0205+  2EB4 CD 1B 2F            call    f_sv_rest ; restore de
0206+  2EB7                             
0207+  2EB7 FD E5               push    iy
0208+  2EB9 E1                  pop     hl   ; where file name is in DMA
0209+  2EBA 01 0B 00            ld      bc,11
0210+  2EBD ED B0               ldir         ; write 11 chars of filename
0211+  2EBF                     
0212+  2EBF 3E 2C               ld      a,','    ; separator
0213+  2EC1 12                  ld      (de),a
0214+  2EC2 13                  inc     de
0215+  2EC3             
0216+  2EC3 CD 10 2F            call    f_sv_save ; save new de
0217+  2EC6                     
0218+  2EC6 E1                  pop     hl
0219+  2EC7 D1                  pop     de
0220+  2EC8 C1                  pop     bc
0221+  2EC9 F1                  pop     af
0222+  2ECA                     ;---------------------|
0223+  2ECA                     
0224+  2ECA 0E 12               ld      c,f_search2  ; continue searching
0225+  2ECC CD 7D F3            call    f_bdos
0226+  2ECF                     
0227+  2ECF 18 D4               jr      f_loopDirList
0228+  2ED1                     
0229+  2ED1             f_errDirList:
0230+  2ED1             
0231+  2ED1 CD 1B 2F            call    f_sv_rest ; restore de
0232+  2ED4             
0233+  2ED4 3A 7C 2E            ld      a,(f_found)
0234+  2ED7 FE 00               cp      0
0235+  2ED9 28 01               jr      z, f_fxqx
0236+  2EDB 1B                  dec     de
0237+  2EDC 3E 24       f_fxqx: ld      a,'$'     ; it's over, put $
0238+  2EDE 12                  ld      (de),a
0239+  2EDF                     
0240+  2EDF FD E1               pop iy
0241+  2EE1 DD E1               pop ix
0242+  2EE3 E1                  pop hl
0243+  2EE4 D1                  pop de
0244+  2EE5 C1                  pop bc
0245+  2EE6 F1                  pop af
0246+  2EE7 C9                  ret
0247+  2EE8             
0248+  2EE8             f_dma:  .ds 40      ; to store searching results (a copy of fcb)
0249+  2F10             
0250+  2F10             ; need this crap because it uses all registers
0251+  2F10             f_sv_save:
0252+  2F10 F5                  push af
0253+  2F11 7A                  ld a,d
0254+  2F12 32 26 2F            ld (f_sv_w+0),a        
0255+  2F15 7B                  ld a,e
0256+  2F16 32 27 2F            ld (f_sv_w+1),a
0257+  2F19 F1                  pop af
0258+  2F1A C9                  ret
0259+  2F1B             f_sv_rest:
0260+  2F1B F5                  push af
0261+  2F1C 3A 26 2F            ld a,(f_sv_w+0)
0262+  2F1F 57                  ld d,a        
0263+  2F20 3A 27 2F            ld a,(f_sv_w+1)
0264+  2F23 5F                  ld e,a        
0265+  2F24 F1                  pop af
0266+  2F25 C9                  ret
0267+  2F26             
0268+  2F26 00 00       f_sv_w: .word 0
0269+  2F28                                
0270+  2F28             f_setfcb:
0271+  2F28 E5                    push hl
0272+  2F29 21 71 2F              ld hl,f_fcb+0
0273+  2F2C 11 72 2F              ld de,f_fcb+1
0274+  2F2F 01 24 00              ld bc,36
0275+  2F32 70                    ld (hl),b
0276+  2F33 ED B0                 ldir
0277+  2F35 E1                    pop hl
0278+  2F36 11 71 2F              ld de,f_fcb
0279+  2F39 01 0C 00              ld bc,12
0280+  2F3C ED B0                 ldir
0281+  2F3E C9                    ret
0282+  2F3F             
0283+  2F3F 11 71 2F    f_openf:  ld      de,f_fcb
0284+  2F42 0E 0F                 ld      c,f_open
0285+  2F44 CD 7D F3              call    f_bdos
0286+  2F47 21 01 00              ld      hl,1
0287+  2F4A 22 7F 2F              ld      (f_groot),hl
0288+  2F4D 2B                    dec     hl
0289+  2F4E 22 92 2F              ld      (f_blok),hl
0290+  2F51 22 94 2F              ld      (f_blok+2),hl
0291+  2F54 C9                    ret
0292+  2F55                                 
0293+  2F55 E5          f_loadf:  push    hl
0294+  2F56 0E 1A                 ld      c,f_setdma
0295+  2F58 CD 7D F3              call    f_bdos
0296+  2F5B 11 71 2F              ld      de,f_fcb
0297+  2F5E E1                    pop     hl
0298+  2F5F 0E 27       f_rdit:   ld      c,f_read
0299+  2F61 CD 7D F3              call    f_bdos    
0300+  2F64 32 1E 2E              ld      (loadflag),a  ;sets 0 if ok, 1 if can not load
0301+  2F67 C9                    ret
0302+  2F68 11 71 2F    f_closef: ld      de,f_fcb
0303+  2F6B 0E 10                 ld      c,f_close
0304+  2F6D CD 7D F3              call    f_bdos
0305+  2F70 C9                    ret
0306+  2F71             
0307+  2F71             
0308+  2F71             ; Good tutorial on MSX files at
0309+  2F71             ; http://fms.komkon.org/MSX/Handbook/th-3.txt
0310+  2F71             
0311+  2F71 00          f_fcb:    .byte    0
0312+  2F72 3F 3F 3F 3F           .byte    "???????????"   ;11 chars          
0312+  2F76 3F 3F 3F 3F 
0312+  2F7A 3F 3F 3F 
0313+  2F7D 00 00                 .word    0
0314+  2F7F 00 00       f_groot:  .word    0
0315+  2F81 00 00       f_bleng:  .word    0
0316+  2F83 00 00 00 00           .byte    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0316+  2F87 00 00 00 00 
0316+  2F8B 00 00 00 00 
0316+  2F8F 00 00 00 
0317+  2F92 00 00       f_blok:   .word    0
0318+  2F94 00 00                 .word    0
0319+  2F96             
0320+  2F96                                     3619   2F96                       #include "String.ASM"      ; most common string functions
0001+  2F96             ;-------------------------------------
0002+  2F96             ;
0003+  2F96             ; Most common String functions (MSX asm)
0004+  2F96             ; String can be 256 characters long maximum
0005+  2F96             ; 
0006+  2F96             ;
0007+  2F96             ; String ends with 0, 
0008+  2F96             ;  should be reserved bytes if string becomes longer,
0009+  2F96             ;   of course.
0010+  2F96             ;
0011+  2F96             ;-------------------------------------
0012+  2F96             ; 
0013+  2F96             
0014+  2F96             ; returns length of DE string in A, also sets Z
0015+  2F96             Str_Len:
0016+  2F96 C5                  push bc
0017+  2F97 D5                  push de
0018+  2F98 0E 00               ld c,0
0019+  2F9A             Str_LnScn:        
0020+  2F9A 1A                  ld a,(de)
0021+  2F9B FE 00               cp 0
0022+  2F9D 28 04               jr z,Str_LnEx
0023+  2F9F 13                  inc de
0024+  2FA0 0C                  inc c
0025+  2FA1 18 F7               jr Str_LnScn
0026+  2FA3             Str_LnEx:
0027+  2FA3 79                  ld a,c
0028+  2FA4 D1                  pop de        
0029+  2FA5 C1                  pop bc
0030+  2FA6 FE 00               cp 0
0031+  2FA8 C9                  ret
0032+  2FA9                     
0033+  2FA9             ; set empty string
0034+  2FA9             Str_Clear:
0035+  2FA9 F5                  push af
0036+  2FAA 3E 00               ld a,0
0037+  2FAC 12                  ld (de),a
0038+  2FAD F1                  pop af
0039+  2FAE C9                  ret
0040+  2FAF             
0041+  2FAF             
0042+  2FAF             
0043+  2FAF             ; Cuts string of DE at length=A [0..254]
0044+  2FAF             ;     (label+nn  is much faster)
0045+  2FAF             ;
0046+  2FAF             Str_Cut:
0047+  2FAF F5                   push af
0048+  2FB0 C5                   push bc
0049+  2FB1 E5                   push hl
0050+  2FB2 06 00                ld b,0
0051+  2FB4 4F                   ld c,a
0052+  2FB5 D5                   push de
0053+  2FB6 E1                   pop hl
0054+  2FB7 09                   add hl,bc
0055+  2FB8 3E 00                ld a,0
0056+  2FBA 77                   ld (hl),a
0057+  2FBB E1                   pop hl
0058+  2FBC C1                   pop bc
0059+  2FBD F1                   pop af
0060+  2FBE C9                   ret
0061+  2FBF                      
0062+  2FBF             ; compares string of DE with string of IX
0063+  2FBF             ; Returns: A=0 - strings are equal
0064+  2FBF             ;          A=1 - IX string starts with DE str.
0065+  2FBF             ;          A=2 - not equal
0066+  2FBF             ; 
0067+  2FBF             Str_Compare:
0068+  2FBF C5                   push bc
0069+  2FC0 D5                   push de
0070+  2FC1 DD E5                push ix
0071+  2FC3             Str_compScn:         
0072+  2FC3 DD 7E 00             ld a,(ix)
0073+  2FC6 FE 00                cp 0
0074+  2FC8 28 0E                jr z,Str_compL0   
0075+  2FCA 47                   ld b,a
0076+  2FCB 1A                   ld a,(de)
0077+  2FCC FE 00                cp 0
0078+  2FCE 28 17                jr z,Str_compN1
0079+  2FD0 B8                   cp b
0080+  2FD1 20 10                jr nz,Str_compNEq
0081+  2FD3 13                   inc de
0082+  2FD4 DD 23                inc ix
0083+  2FD6 18 EB                jr Str_compScn
0084+  2FD8             Str_compL0:
0085+  2FD8 1A                   ld a,(de)
0086+  2FD9 FE 00                cp 0
0087+  2FDB 28 02                jr z,Str_compEq
0088+  2FDD 18 04                jr Str_compNEq
0089+  2FDF             Str_compEq:
0090+  2FDF 3E 00                ld a,0
0091+  2FE1 18 06                jr Str_compEx
0092+  2FE3             Str_compNEq:
0093+  2FE3 3E 02                ld a,2
0094+  2FE5 18 02                jr Str_compEx         
0095+  2FE7             Str_compN1:
0096+  2FE7 3E 01                ld a,1
0097+  2FE9             Str_compEx:
0098+  2FE9 DD E1                pop ix
0099+  2FEB D1                   pop de
0100+  2FEC C1                   pop bc
0101+  2FED C9                   ret
0102+  2FEE             
0103+  2FEE             ; Copies string DE to IX
0104+  2FEE             Str_Copy:
0105+  2FEE F5                   push af
0106+  2FEF D5                   push de
0107+  2FF0 DD E5                push ix
0108+  2FF2             Str_CpyScn:
0109+  2FF2 1A                   ld a,(de)
0110+  2FF3 DD 77 00             ld (ix),a
0111+  2FF6 FE 00                cp 0
0112+  2FF8 28 05                jr z,StrCpyEx
0113+  2FFA 13                   inc de
0114+  2FFB DD 23                inc ix
0115+  2FFD 18 F3                jr Str_CpyScn
0116+  2FFF             StrCpyEx:                  
0117+  2FFF DD E1                pop ix
0118+  3001 D1                   pop de
0119+  3002 F1                   pop af
0120+  3003 C9                   ret
0121+  3004             
0122+  3004             ; Converts string DE to UpperCase
0123+  3004             Str_Upper:
0124+  3004 F5                   push af
0125+  3005 D5                   push de
0126+  3006             Str_UppScn:
0127+  3006 1A                   ld a,(de)
0128+  3007 FE 00                cp 0
0129+  3009 28 0E                jr z,Str_UppEx
0130+  300B FE 61                cp 'a'
0131+  300D 38 07                jr c,Str_UppNCnv
0132+  300F FE 7A                cp 'z'
0133+  3011 30 03                jr nc,Str_UppNCnv
0134+  3013 D6 20                sub 32
0135+  3015 12                   ld (de),a
0136+  3016             Str_UppNCnv:
0137+  3016 13                   inc de         
0138+  3017 18 ED                jr Str_UppScn
0139+  3019             Str_UppEx:         
0140+  3019 D1                   pop de
0141+  301A F1                   pop af
0142+  301B C9                   ret
0143+  301C             
0144+  301C             ; Converts string DE to LowerCase
0145+  301C             Str_Lower:
0146+  301C F5                   push af
0147+  301D D5                   push de
0148+  301E             Str_LwrScn:
0149+  301E 1A                   ld a,(de)
0150+  301F FE 00                cp 0
0151+  3021 28 0E                jr z,Str_LwrEx
0152+  3023 FE 41                cp 'A'
0153+  3025 38 07                jr c,Str_LwrNCnv
0154+  3027 FE 5A                cp 'Z'
0155+  3029 30 03                jr nc,Str_LwrNCnv
0156+  302B C6 20                add a,32
0157+  302D 12                   ld (de),a
0158+  302E             Str_LwrNCnv:
0159+  302E 13                   inc de         
0160+  302F 18 ED                jr Str_LwrScn
0161+  3031             Str_LwrEx:         
0162+  3031 D1                   pop de
0163+  3032 F1                   pop af
0164+  3033 C9                   ret
0165+  3034             
0166+  3034             ; Finds string DE in string IX first 254 bytes
0167+  3034             ; On return: A=position, starting from 0
0168+  3034             ; If not found then A=$ff                 
0169+  3034             Str_IndexOf:
0170+  3034 C5                   push bc
0171+  3035 D5                   push de
0172+  3036 DD E5                push ix
0173+  3038             
0174+  3038 06 00                ld b,0
0175+  303A             Str_InxScn:
0176+  303A DD 7E 00             ld a,(ix)
0177+  303D FE 00                cp 0
0178+  303F 20 04                jr nz,Str_InxCompr
0179+  3041 3E FF                ld a,$ff
0180+  3043 18 12                jr Str_InxEx
0181+  3045             Str_InxCompr:
0182+  3045 CD BF 2F             call Str_Compare
0183+  3048 FE 02                cp 2
0184+  304A 20 0A                jr nz,Str_InxFound
0185+  304C 04                   inc b
0186+  304D 3E FF                ld a,$ff
0187+  304F B8                   cp b
0188+  3050 28 05                jr z,Str_InxEx
0189+  3052 DD 23                inc ix
0190+  3054 18 E4                jr Str_InxScn
0191+  3056             Str_InxFound:
0192+  3056 78                   ld a,b 
0193+  3057             Str_InxEx:                  
0194+  3057 DD E1                pop ix
0195+  3059 D1                   pop de
0196+  305A C1                   pop bc
0197+  305B C9                   ret
0198+  305C             
0199+  305C             ;returns a=0 and Z flag set if string IX contains substring DE
0200+  305C             ; (length not limited)
0201+  305C             Str_Contains:
0202+  305C DD E5                push ix
0203+  305E             Str_Contai_Scn:
0204+  305E DD 7E 00             ld a,(ix)
0205+  3061 FE 00                cp 0
0206+  3063 20 04                jr nz,Str_Contai_Cont
0207+  3065 3E 02                ld a,2
0208+  3067 18 0D                jr Str_Contai_ex
0209+  3069             Str_Contai_Cont:      
0210+  3069 CD BF 2F             call Str_Compare
0211+  306C FE 02                cp 2
0212+  306E 20 04                jr nz,Str_Contai_found
0213+  3070 DD 23                inc ix
0214+  3072 18 EA                jr Str_Contai_Scn
0215+  3074             Str_Contai_found:
0216+  3074 3E 00                ld a,0
0217+  3076             Str_Contai_ex:          
0218+  3076 DD E1                pop ix
0219+  3078 FE 00                cp 0
0220+  307A C9                   ret
0221+  307B             
0222+  307B             ;
0223+  307B             ; Places substring of IX into DE
0224+  307B             ; c=starting char in IX, b-length in chars
0225+  307B             ;
0226+  307B             Str_Substr:
0227+  307B F5                   push af
0228+  307C C5                   push bc
0229+  307D D5                   push de
0230+  307E E5                   push hl       
0231+  307F             
0232+  307F DD E5                push ix
0233+  3081 E1                   pop hl
0234+  3082 79                   ld a,c
0235+  3083 FE 00                cp 0
0236+  3085 28 05                jr z,Str_SubAt0
0237+  3087 C5                   push bc
0238+  3088 06 00                ld b,0
0239+  308A 09                   add hl,bc   ; offset
0240+  308B C1                   pop bc
0241+  308C             Str_SubAt0:         
0242+  308C 48                   ld c,b
0243+  308D 06 00                ld b,0
0244+  308F ED B0                ldir        ; copy bc bytes from HL to DE addrs.
0245+  3091 3E 00                ld a,0
0246+  3093 12                   ld (de),a
0247+  3094                      
0248+  3094 E1                   pop hl
0249+  3095 D1                   pop de
0250+  3096 C1                   pop bc
0251+  3097 F1                   pop af
0252+  3098 C9                   ret
0253+  3099             
0254+  3099             ;
0255+  3099             ; Removes left spaces for string in DE
0256+  3099             ;
0257+  3099             Str_Ltrim:
0258+  3099 F5                   push af
0259+  309A C5                   push bc
0260+  309B D5                   push de
0261+  309C DD E5                push ix
0262+  309E                      
0263+  309E D5                   push de
0264+  309F DD E1                pop ix
0265+  30A1 0E 00                ld c,0
0266+  30A3             Str_LtrScn:         
0267+  30A3 1A                   ld a,(de)
0268+  30A4 FE 20                cp 32
0269+  30A6 20 05                jr nz,Str_LtrNS
0270+  30A8 13                   inc de
0271+  30A9 0E 01                ld c,1
0272+  30AB 18 F6                jr Str_LtrScn
0273+  30AD             Str_LtrNS:
0274+  30AD 79                   ld a,c
0275+  30AE FE 00                cp 0
0276+  30B0 28 03                jr z,Str_LtrEx
0277+  30B2 CD EE 2F             call Str_Copy
0278+  30B5             Str_LtrEx:
0279+  30B5 DD E1                pop ix
0280+  30B7 D1                   pop de
0281+  30B8 C1                   pop bc
0282+  30B9 F1                   pop af
0283+  30BA C9                   ret
0284+  30BB                      
0285+  30BB             ;
0286+  30BB             ; Removes right spaces for string in DE
0287+  30BB             ;
0288+  30BB             Str_Rtrim:
0289+  30BB F5                   push af
0290+  30BC D5                   push de         
0291+  30BD 1A                   ld a,(de)
0292+  30BE FE 00                cp 0
0293+  30C0 28 12                jr z,Str_RtrEx
0294+  30C2             Str_RtrRscn:
0295+  30C2 13                   inc de        
0296+  30C3 1A                   ld a,(de)
0297+  30C4 FE 00                cp 0
0298+  30C6 28 02                jr z,Str_Rtr1
0299+  30C8 18 F8                jr Str_RtrRscn
0300+  30CA             Str_Rtr1:
0301+  30CA 1B                   dec de
0302+  30CB FE 20                cp 32
0303+  30CD 20 05                jr nz,Str_RtrEx
0304+  30CF 3E 00                ld a,0
0305+  30D1 12                   ld (de),a
0306+  30D2 18 F6                jr Str_Rtr1
0307+  30D4             Str_RtrEx:
0308+  30D4 D1                   pop de
0309+  30D5 F1                   pop af
0310+  30D6 C9                   ret
0311+  30D7             
0312+  30D7             ; both trims
0313+  30D7             Str_Alltrim:
0314+  30D7 CD BB 30             call Str_Rtrim
0315+  30DA CD 99 30             call Str_Ltrim
0316+  30DD C9                   ret
0317+  30DE             
0318+  30DE             ;
0319+  30DE             ; Adds DE string at the end of IX string
0320+  30DE             ;
0321+  30DE             Str_Append:
0322+  30DE F5                   push af
0323+  30DF DD E5                push ix         
0324+  30E1 DD 7E 00             ld a,(ix)
0325+  30E4 FE 00                cp 0
0326+  30E6 28 0B                jr z,Str_App1
0327+  30E8             Str_AppRscn:
0328+  30E8 DD 23                inc ix        
0329+  30EA DD 7E 00             ld a,(ix)
0330+  30ED FE 00                cp 0
0331+  30EF 28 02                jr z,Str_App1
0332+  30F1 18 F5                jr Str_AppRscn
0333+  30F3             Str_App1:
0334+  30F3 CD EE 2F             call Str_Copy
0335+  30F6 DD E1                pop ix
0336+  30F8 F1                   pop af
0337+  30F9 C9                   ret
0338+  30FA             
0339+  30FA             ;
0340+  30FA             ; Replaces all DE substrings in IX string with HL string
0341+  30FA             ;
0342+  30FA             Str_Replace:
0343+  30FA F5                   push af
0344+  30FB C5                   push bc
0345+  30FC E5                   push hl
0346+  30FD DD E5                push ix
0347+  30FF                      
0348+  30FF CD 96 2F             call Str_Len
0349+  3102 4F                   ld c,a           ;c=Len(de-string)
0350+  3103 FE 00                cp 0
0351+  3105 28 47                jr z,Str_ReplNo
0352+  3107             Str_ReplLoop:        
0353+  3107 CD 34 30             call Str_IndexOf
0354+  310A FE FF                cp $ff
0355+  310C 28 40                jr z,Str_ReplNo
0356+  310E                      
0357+  310E D5                   push de
0358+  310F 47                   ld b,a
0359+  3110 11 54 31             ld de,Str_buf_
0360+  3113                      
0361+  3113 DD E5                push ix
0362+  3115             Str_ReplIy0:                   ; copy till substr...
0363+  3115 DD 7E 00             ld a,(ix)
0364+  3118 12                   ld (de),a
0365+  3119 78                   ld a,b
0366+  311A FE 00                cp 0
0367+  311C 28 06                jr z,Str_ReplIx0
0368+  311E DD 23                inc ix
0369+  3120 13                   inc de
0370+  3121 05                   dec b
0371+  3122 18 F1                jr Str_ReplIy0
0372+  3124             Str_ReplIx0:
0373+  3124             
0374+  3124 E5                   push hl
0375+  3125             Str_ReplIy1:                   ; copy new substring...         
0376+  3125 7E                   ld a,(hl)
0377+  3126 12                   ld (de),a
0378+  3127 FE 00                cp 0
0379+  3129 28 04                jr z,Str_ReplHl0
0380+  312B 23                   inc hl
0381+  312C 13                   inc de
0382+  312D 18 F6                jr Str_ReplIy1
0383+  312F             Str_ReplHl0:
0384+  312F E1                   pop hl
0385+  3130                      
0386+  3130 79                   ld a,c
0387+  3131             Str_ReplSkp1:         
0388+  3131 DD 23                inc ix                 ; skip substr
0389+  3133 3D                   dec a
0390+  3134 20 FB                jr nz,Str_ReplSkp1
0391+  3136             Str_ReplIy3:                    ; copy all string after...
0392+  3136 DD 7E 00             ld a,(ix)
0393+  3139 12                   ld (de),a
0394+  313A FE 00                cp 0
0395+  313C 28 05                jr z,Str_ReplIx3
0396+  313E DD 23                inc ix
0397+  3140 13                   inc de
0398+  3141 18 F3                jr Str_ReplIy3
0399+  3143             Str_ReplIx3:
0400+  3143 DD E1                pop ix
0401+  3145                      
0402+  3145 11 54 31             ld de,Str_buf_
0403+  3148 CD EE 2F             call Str_Copy        ; copy new string to IX 
0404+  314B             
0405+  314B D1                   pop de
0406+  314C 18 B9                jr Str_ReplLoop        ; to replace all occurrances
0407+  314E             Str_ReplNo:         
0408+  314E DD E1                pop ix
0409+  3150 E1                   pop hl
0410+  3151 C1                   pop bc
0411+  3152 F1                   pop af
0412+  3153 C9                   ret
0413+  3154                      
0414+  3154             Str_buf_ .ds $100
0415+  3254 00                   .byte 0
0416+  3255             
0417+  3255             
0418+  3255             ;
0419+  3255             ; This truncates DE string where new line (ascii 10 or 13)
0420+  3255             ; If string is longer 254 chars then truncates at space char.
0421+  3255             ; Sets IX as pointer to next line starting character
0422+  3255             ; This supposed to get safe-as-much-possible string opeations.
0423+  3255             
0424+  3255             Str_Line:
0425+  3255 F5                   push af
0426+  3256 C5                   push bc
0427+  3257 D5                   push de
0428+  3258             
0429+  3258 01 00 00             ld bc,0
0430+  325B             Str_Ln_Scn:
0431+  325B 1A                   ld a,(de)       ; find end of line
0432+  325C FE 00                cp 0
0433+  325E 28 28                jr z,Str_Ln_q1
0434+  3260 FE 0D                cp 13
0435+  3262 28 24                jr z,Str_Ln_q1
0436+  3264 FE 0A                cp 10
0437+  3266 28 20                jr z,Str_Ln_q1
0438+  3268 13                   inc de
0439+  3269 0C                   inc c
0440+  326A 3E FF                ld a,$ff         ; reached 255?         
0441+  326C B9                   cp c
0442+  326D 20 EC                jr nz, Str_Ln_Scn
0443+  326F                      
0444+  326F             Str_Ln_fSpc:         
0445+  326F                                        
0446+  326F 1A                   ld a,(de)         ; if string too long then finds space near 254th position
0447+  3270 FE 20                cp ' '
0448+  3272 28 14                jr z,Str_Ln_q1    ; use this position and truncate string
0449+  3274 1B                   dec de
0450+  3275 0D                   dec c
0451+  3276 20 F7                jr nz,Str_Ln_fSpc
0452+  3278                                 
0453+  3278             Str_Ln_cL:
0454+  3278 1A                   ld a,(de)          ; if cant find space then just searches for line end
0455+  3279 FE 00                cp 0               ; to obtain new IX anyway
0456+  327B 28 0B                jr z,Str_Ln_q1
0457+  327D FE 0D                cp 13
0458+  327F 28 07                jr z,Str_Ln_q1
0459+  3281 FE 0A                cp 10
0460+  3283 28 03                jr z,Str_Ln_q1
0461+  3285 13                   inc de
0462+  3286 18 F0                jr Str_Ln_cL
0463+  3288                      
0464+  3288             Str_Ln_q1:
0465+  3288 3E 00                ld a,0          ; set to 0 till next line
0466+  328A 12                   ld (de),a
0467+  328B 13                   inc de
0468+  328C 1A                   ld a,(de)
0469+  328D FE 00                cp 0          
0470+  328F 28 F7                jr z,Str_Ln_q1
0471+  3291 FE 0D                cp 13
0472+  3293 28 F3                jr z,Str_Ln_q1
0473+  3295 FE 0A                cp 10
0474+  3297 28 EF                jr z,Str_Ln_q1
0475+  3299                      
0476+  3299 D5                   push de
0477+  329A DD E1                pop ix
0478+  329C                     
0479+  329C D1                   pop de
0480+  329D C1                   pop bc
0481+  329E F1                   pop af
0482+  329F C9                   ret
0483+  32A0             
0484+  32A0             ;
0485+  32A0             ; This removes all non-character symbols and sets TABs as 3 spaces
0486+  32A0             ; of string in DE.  Use after Str_Line not to lose line feeds.
0487+  32A0             ;                  
0488+  32A0             Str_CharsOnly:
0489+  32A0             
0490+  32A0 F5                   push af
0491+  32A1 D5                   push de
0492+  32A2 DD E5                push ix
0493+  32A4 D5                   push de
0494+  32A5 D5                   push de
0495+  32A6 DD E1                pop ix
0496+  32A8 11 54 31             ld de,Str_buf_
0497+  32AB             Str_CharsO_loop:
0498+  32AB DD 7E 00             ld a,(ix)
0499+  32AE FE 00                cp 0
0500+  32B0 28 1A                jr z, Str_CharsO_Ex
0501+  32B2 FE 09                cp 9
0502+  32B4 20 0C                jr nz, Str_CharsO_nTb
0503+  32B6 3E 20                ld a,' '
0504+  32B8 12                   ld (de),a
0505+  32B9 13                   inc de
0506+  32BA 12                   ld (de),a
0507+  32BB 13                   inc de
0508+  32BC             Str_CharsO_cpy:         
0509+  32BC 12                   ld (de),a
0510+  32BD 13                   inc de
0511+  32BE DD 23                inc ix
0512+  32C0 18 E9                jr Str_CharsO_loop
0513+  32C2             Str_CharsO_nTb:
0514+  32C2 FE 20                cp ' '
0515+  32C4 38 E5                jr c,Str_CharsO_loop
0516+  32C6 FE FF                cp $ff
0517+  32C8 28 E1                jr z,Str_CharsO_loop
0518+  32CA 18 F0                jr Str_CharsO_cpy
0519+  32CC             Str_CharsO_Ex:
0520+  32CC 12                   ld (de),a
0521+  32CD 11 54 31             ld de,Str_buf_
0522+  32D0 DD E1                pop ix
0523+  32D2 CD EE 2F             call Str_Copy        ; copy new string to IX 
0524+  32D5 DD E1                pop ix
0525+  32D7 D1                   pop de
0526+  32D8 F1                   pop af
0527+  32D9 C9                   ret
0528+  32DA             
0529+  32DA             ;
0530+  32DA             ; places value of integer in reg-a into DE string
0531+  32DA             ;
0532+  32DA             Str_itoa:
0533+  32DA F5                   push af
0534+  32DB C5                   push bc
0535+  32DC D5                   push de
0536+  32DD FE 00                cp 0
0537+  32DF 28 3E                jr z,Str_i2_0
0538+  32E1 FE C8                cp 200
0539+  32E3 30 26                jr nc,Str_i2a200
0540+  32E5 FE 64                cp 100
0541+  32E7 30 2C                jr nc,Str_i2a100
0542+  32E9 FE 0A                cp 10
0543+  32EB 30 03                jr nc,Str_i2a10
0544+  32ED 4F                   ld c,a
0545+  32EE 18 11                jr Str_i2q
0546+  32F0             Str_i2a10:
0547+  32F0 06 00                ld b,0
0548+  32F2             Str_i2a_l_10:         
0549+  32F2 FE 0A                cp 10
0550+  32F4 38 05                jr c,Str_i2a1
0551+  32F6 D6 0A                sub 10
0552+  32F8 04                   inc b
0553+  32F9 18 F7                jr Str_i2a_l_10
0554+  32FB             Str_i2a1:
0555+  32FB 4F                   ld c,a
0556+  32FC 3E 30                ld a,'0'
0557+  32FE 80                   add a,b
0558+  32FF 12                   ld (de),a
0559+  3300 13                   inc de
0560+  3301 3E 30       Str_i2q: ld a,'0'
0561+  3303 81                   add a,c
0562+  3304 12                   ld (de),a
0563+  3305 13                   inc de
0564+  3306 3E 00                ld a,0
0565+  3308 12                   ld (de),a
0566+  3309 18 18                jr Str_i2ex                  
0567+  330B             Str_i2a200:
0568+  330B D6 C8                sub 200
0569+  330D 4F                   ld c,a                 
0570+  330E 3E 32                ld a,'2'
0571+  3310 12                   ld (de),a
0572+  3311 13                   inc de
0573+  3312 79                   ld a,c         
0574+  3313 18 DB                jr Str_i2a10
0575+  3315             Str_i2a100:
0576+  3315 D6 64                sub 100
0577+  3317 4F                   ld c,a         
0578+  3318 3E 31                ld a,'1'
0579+  331A 12                   ld (de),a
0580+  331B 13                   inc de
0581+  331C 79                   ld a,c
0582+  331D 18 D1                jr Str_i2a10
0583+  331F             Str_i2_0:
0584+  331F 0E 00                ld c,0
0585+  3321 18 DE                jr Str_i2q        
0586+  3323             Str_i2ex:
0587+  3323 D1                   pop de
0588+  3324 C1                   pop bc
0589+  3325 F1                   pop af
0590+  3326 C9                   ret
0591+  3327                      
0592+  3327             ;
0593+  3327             ; places integer value of DE string into reg-a
0594+  3327             ;
0595+  3327             Str_atoi:
0596+  3327 C5                   push bc
0597+  3328 D5                   push de
0598+  3329 E5                   push hl
0599+  332A                      
0600+  332A EB                   ex de,hl ;hl=de
0601+  332B 11 00 00             ld de,0
0602+  332E 01 00 00             ld bc,0
0603+  3331             Str_a2iLoop:         
0604+  3331 7E                   ld a,(hl)
0605+  3332 23                   inc hl
0606+  3333 FE 00                cp 0
0607+  3335 28 1A                jr z, Str_a2ex
0608+  3337 FE 30                cp '0'
0609+  3339 38 16                jr c, Str_a2ex
0610+  333B FE 3A                cp '9'+1
0611+  333D 30 12                jr nc, Str_a2ex
0612+  333F 18 00                jr Str_a2digit
0613+  3341             Str_a2digit:
0614+  3341 D6 30                sub '0'
0615+  3343 4F                   ld c,a
0616+  3344 78                   ld a,b
0617+  3345 FE 00                cp 0
0618+  3347 28 0D                jr z,Str_a2ph1
0619+  3349 FE 01                cp 1
0620+  334B 28 0E                jr z,Str_a2ph2
0621+  334D FE 02                cp 2
0622+  334F 28 0A                jr z,Str_a2ph2   ; the same method  *10+a
0623+  3351             Str_a2ex:               
0624+  3351 7A                   ld a,d          ; store to A
0625+  3352 18 17                jr Str_a2iEx         
0626+  3354             Str_a2Lp:
0627+  3354 18 DB                jr Str_a2iLoop
0628+  3356                      
0629+  3356             Str_a2ph1:
0630+  3356 51                   ld d,c  ; ones, save
0631+  3357 06 01                ld b,1
0632+  3359 18 F9                jr Str_a2Lp
0633+  335B             
0634+  335B             Str_a2ph2:
0635+  335B 7A                   ld a,d           ;d*10 = (d*8)+(d*2)
0636+  335C CB 27                sla a   ; *2
0637+  335E                         
0638+  335E CB 22                sla d
0639+  3360 CB 22                sla d
0640+  3362 CB 22                sla d   ;*8
0641+  3364 82                   add a,d  ;+ = become tens
0642+  3365 81                   add a,c  ; +ones
0643+  3366 57                   ld d,a   ;save
0644+  3367 06 02                ld b,2         
0645+  3369 18 E9                jr Str_a2Lp
0646+  336B                      
0647+  336B             Str_a2iEx:
0648+  336B E1                   pop hl         
0649+  336C D1                   pop de
0650+  336D C1                   pop bc
0651+  336E C9                   ret
0652+  336F             
0653+  336F             ; finds tags in string IX and copies substring between them to DE address
0654+  336F             ; tags are strings addressed by hl (as left tag) and iy (as right tag)
0655+  336F             ; for example: <div>substring between</div>
0656+  336F             ; Separators should be at least 1char.
0657+  336F             ; If can't find left tag till 254th position then returns empty string.
0658+  336F             ; If can't find right tag then truncates substring at 255th position anyway. 
0659+  336F             ;
0660+  336F             Str_TagSubstr:
0661+  336F F5                   push af
0662+  3370 C5                   push bc
0663+  3371 D5                   push de
0664+  3372 E5                   push hl
0665+  3373 DD E5                push ix
0666+  3375                      
0667+  3375 D5                   push de
0668+  3376 EB                   ex de,hl   ; de=hl (left tag)
0669+  3377 0E 00                ld c,0
0670+  3379             Str_TagScn:
0671+  3379 0C                   inc c
0672+  337A 3E FF                ld a,$ff
0673+  337C B9                   cp c              ; if 255th reached
0674+  337D 28 15                jr z,Str_LTagNotFound
0675+  337F CD BF 2F             call Str_Compare
0676+  3382 DD 23                inc ix
0677+  3384 FE 02                cp 2
0678+  3386 28 F1                jr z,Str_TagScn
0679+  3388 CD 96 2F             call Str_Len ;calculates length of left tag
0680+  338B             Str_TagSkp1:
0681+  338B FE 01                cp 1
0682+  338D 28 08                jr z,Str_TagBr1
0683+  338F DD 23                inc ix
0684+  3391 3D                   dec a
0685+  3392 18 F7                jr Str_TagSkp1
0686+  3394                      
0687+  3394             Str_LTagNotFound:
0688+  3394 E1                   pop hl   ; hl = de where to store substring 
0689+  3395 18 1A                jr Str_TagBr2
0690+  3397                      
0691+  3397             Str_TagBr1:                  
0692+  3397                      
0693+  3397 FD E5                push iy
0694+  3399 D1                   pop de   ; de now = iy (right tag)
0695+  339A E1                   pop hl   ; hl = de where to store substring
0696+  339B                      
0697+  339B 0E 00                ld c,0
0698+  339D             Str_TagSc2:
0699+  339D CD BF 2F             call Str_Compare
0700+  33A0 FE 02                cp 2
0701+  33A2 20 0D                jr nz,Str_TagBr2
0702+  33A4                       
0703+  33A4 DD 7E 00             ld a,(ix)
0704+  33A7 77                   ld (hl),a
0705+  33A8 23                   inc hl
0706+  33A9 DD 23                inc ix
0707+  33AB 0C                   inc c
0708+  33AC 3E FF                ld a,$ff
0709+  33AE B9                   cp c              ; if 255th reached
0710+  33AF 20 EC                jr nz,Str_TagSc2
0711+  33B1             Str_TagBr2:
0712+  33B1 3E 00                ld a,0
0713+  33B3 77                   ld (hl),a   ; end of new string
0714+  33B4 DD E1                pop ix
0715+  33B6 E1                   pop hl
0716+  33B7 D1                   pop de
0717+  33B8 C1                   pop bc
0718+  33B9 F1                   pop af         
0719+  33BA C9                   ret
0720+  33BB                                 
0721+  33BB             
0722+  33BB             ;
0723+  33BB             ; Faster copy from IX to DE length of A
0724+  33BB             ;  (ignores 0)
0725+  33BB             ;
0726+  33BB             
0727+  33BB             Block_Copy_:
0728+  33BB FE 00                cp 0
0729+  33BD 28 10                jr z,Block_CpyExit
0730+  33BF F5                   push af
0731+  33C0 C5                   push bc
0732+  33C1 D5                   push de
0733+  33C2 E5                   push hl       
0734+  33C3             
0735+  33C3 DD E5                push ix
0736+  33C5 E1                   pop hl
0737+  33C6                      
0738+  33C6 4F                   ld c,a
0739+  33C7 06 00                ld b,0
0740+  33C9 ED B0                ldir        ; copy bc bytes from HL to DE addrs.
0741+  33CB                      
0742+  33CB E1                   pop hl
0743+  33CC D1                   pop de
0744+  33CD C1                   pop bc
0745+  33CE F1                   pop af
0746+  33CF             Block_CpyExit:         
0747+  33CF C9                   ret
0748+  33D0                      
0749+  33D0             ; sets to 0 block in DE length of A
0750+  33D0             Block_Clear_:
0751+  33D0 FE 00                cp 0
0752+  33D2 28 15                jr z,Block_ClrExit
0753+  33D4 F5                   push af
0754+  33D5 C5                   push bc
0755+  33D6 D5                   push de
0756+  33D7 E5                   push hl       
0757+  33D8             
0758+  33D8 4F                   ld c,a
0759+  33D9 0D                   dec c
0760+  33DA                      
0761+  33DA D5                   push de
0762+  33DB E1                   pop hl
0763+  33DC                      
0764+  33DC 3A EA 33             ld a,(Block_ch0)
0765+  33DF 77                   ld (hl),a
0766+  33E0 13                   inc de
0767+  33E1                      
0768+  33E1 06 00                ld b,0
0769+  33E3 ED B0                ldir        ; copy repeating 0 from HL to DE addrs.
0770+  33E5                              
0771+  33E5 E1                   pop hl
0772+  33E6 D1                   pop de
0773+  33E7 C1                   pop bc
0774+  33E8 F1                   pop af
0775+  33E9             Block_ClrExit:         
0776+  33E9 C9                   ret
0777+  33EA             
0778+  33EA 00          Block_ch0: .byte 0   ;uses this byte to set 0
0779+  33EB                                  ; (can set spaces or other)
0780+  33EB             
3620   33EB             
3621   33EB             JMP_0000: .equ $F3EF         ;good exit to DOS prompt for sure
3622   33EB             
3623   33EB             ; Exporting addresses to include them in other modules 
3624   33EB             ;      (recognises as labels)
3625   33EB             
3626   33EB             ; Container for UCI-string-of-moves in form "e2e4 e7e5 ... e1g1 ... b7b8q ... "
3627   33EB             ; (set before MOVE_byString usage)
3628   33EB 20 20 20 20 MOVE_str: .byte "                                                                "          
3628   33EF 20 20 20 20 
3628   33F3 20 20 20 20 
3628   33F7 20 20 20 20 
3628   33FB 20 20 20 20 
3628   33FF 20 20 20 20 
3628   3403 20 20 20 20 
3628   3407 20 20 20 20 
3628   340B 20 20 20 20 
3628   340F 20 20 20 20 
3628   3413 20 20 20 20 
3628   3417 20 20 20 20 
3628   341B 20 20 20 20 
3628   341F 20 20 20 20 
3628   3423 20 20 20 20 
3628   3427 20 20 20 20 
3629   342B 20 20 20 20           .byte "                                                                " 
3629   342F 20 20 20 20 
3629   3433 20 20 20 20 
3629   3437 20 20 20 20 
3629   343B 20 20 20 20 
3629   343F 20 20 20 20 
3629   3443 20 20 20 20 
3629   3447 20 20 20 20 
3629   344B 20 20 20 20 
3629   344F 20 20 20 20 
3629   3453 20 20 20 20 
3629   3457 20 20 20 20 
3629   345B 20 20 20 20 
3629   345F 20 20 20 20 
3629   3463 20 20 20 20 
3629   3467 20 20 20 20 
3630   346B 20 20 20 20           .byte "                                                                "
3630   346F 20 20 20 20 
3630   3473 20 20 20 20 
3630   3477 20 20 20 20 
3630   347B 20 20 20 20 
3630   347F 20 20 20 20 
3630   3483 20 20 20 20 
3630   3487 20 20 20 20 
3630   348B 20 20 20 20 
3630   348F 20 20 20 20 
3630   3493 20 20 20 20 
3630   3497 20 20 20 20 
3630   349B 20 20 20 20 
3630   349F 20 20 20 20 
3630   34A3 20 20 20 20 
3630   34A7 20 20 20 20 
3631   34AB 20 20 20 20           .byte "                                                                "
3631   34AF 20 20 20 20 
3631   34B3 20 20 20 20 
3631   34B7 20 20 20 20 
3631   34BB 20 20 20 20 
3631   34BF 20 20 20 20 
3631   34C3 20 20 20 20 
3631   34C7 20 20 20 20 
3631   34CB 20 20 20 20 
3631   34CF 20 20 20 20 
3631   34D3 20 20 20 20 
3631   34D7 20 20 20 20 
3631   34DB 20 20 20 20 
3631   34DF 20 20 20 20 
3631   34E3 20 20 20 20 
3631   34E7 20 20 20 20 
3632   34EB                       .ds $700
3633   3BEB                       ;2Kb of moves 
3634   3BEB                       
3635   3BEB                      .export startFEN
3636   3BEB                      .export MOVE_str
3637   3BEB                      .export BOARD
3638   3BEB                      .export SIDE
3639   3BEB                      .export CASTLES
3640   3BEB                      .export ENPSQ
3641   3BEB                      .export WKSQ
3642   3BEB                      .export BKSQ
3643   3BEB                      .export NEXT_MVSTR
3644   3BEB                      .export NEXT_MVCNT
3645   3BEB                      .export NEXT_MOVES
3646   3BEB                      .export MOVE_CNT
3647   3BEB                      .export MOVE_HIST
3648   3BEB                      .export GenMovesAndString
3649   3BEB                      .export MOVE_byString
3650   3BEB                      .export MbyStrMove
3651   3BEB                      .export UndoAllMoves
3652   3BEB                      .export SQi
3653   3BEB                      .export SQt
3654   3BEB                      .export GenMoves
3655   3BEB                      .export IsEmpty      
3656   3BEB                      .export IsOccupied
3657   3BEB                      .export IsWhite
3658   3BEB                      .export IsBlack
3659   3BEB                      .export CaptPiece
3660   3BEB                      .export PromoPcId
3661   3BEB                      .export CastlMove
3662   3BEB                      .export MovesToStr
3663   3BEB                      .export MovesOut
3664   3BEB                      .export SetFEN
3665   3BEB                      .export GetFEN
3666   3BEB                      .export BoardOut
3667   3BEB                      .export printBOARD        
3668   3BEB                      .export ScanSqC
3669   3BEB                      .export SetSqScan
3670   3BEB                      .export ScanSqNxt
3671   3BEB                      .export IsCheck  
3672   3BEB                      .export MakeMove
3673   3BEB                      .export Swap_Sides
3674   3BEB                      .export UnMakeMove
3675   3BEB                      .export DEBUGs
3676   3BEB                      .export LD_Ix
3677   3BEB                      .export DEC_I
3678   3BEB                      
3679   3BEB             endProgram:
3680   3BEB             .end
3681   3BEB             
3682   3BEB             
tasm: Number of errors = 0
