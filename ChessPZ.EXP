0001   0000             .title ChessY2K
0002   0000             
0003   0000             ;
0004   0000             ; Chess assembler ASM code for MSX
0005   0000             ;
0006   0000             ;  MSDOS:
0007   0000             ;     TASM -80 -b ChessY2K.ASM ChessY2K.com
0008   0000             ;     TASM -80 -b ChessPG.ASM ChessPG.co2
0009   0000             ;     TASM -80 -b ChessPI.ASM ChessPI.co2
0010   0000             ;  Then run ChessY2K.com on MSX-DOS1
0011   0000             ;
0012   0000             ; Date: sep.,oct. 2012
0013   0000             ;  updated nov.2014
0014   0000             ;
0015   0000             ;Performance testing: 256 movement generations per minute on MSX machine -
0016   0000             ;                        not enaugh for chess but ok for pgn-viewer project.
0017   0000             
0018   0000             ;
0019   0000             ; Define PGN_COMPILE to compile separate module for pgn viewer replays
0020   0000             ; It can not be done in one .COM unfortunately - causes too much memory usage.
0021   0000             ; ChessPZ.COM is a compilation with no PGN version.
0022   0000             ; 
0023   0000             ;#define   PGN_COMPILE 1
0024   0000             
0025   0100                      .org $100      
0026   0100                                   
0027   0100             startProgram:
0028   0100 CD 0B 36             call ChessMN     ; process menu
0029   0103                                       ; chess logic is in this file
0030   0103                     
0031   0103 C3 EF F3             jp  JMP_0000     ; return to DOS
0032   0106 C9                   ret
0033   0107                             
0034   0107             startFEN:       
0035   0107 72 6E 62 71         .byte "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",0                       
0035   010B 6B 62 6E 72 
0035   010F 2F 70 70 70 
0035   0113 70 70 70 70 
0035   0117 70 2F 38 2F 
0035   011B 38 2F 38 2F 
0035   011F 38 2F 50 50 
0035   0123 50 50 50 50 
0035   0127 50 50 2F 52 
0035   012B 4E 42 51 4B 
0035   012F 42 4E 52 20 
0035   0133 77 20 4B 51 
0035   0137 6B 71 20 2D 
0035   013B 20 30 20 31 
0035   013F 00 
0036   0140             
0037   0140             
0038   0140             ; STATUSES OF CURRENT CHESS GAME 
0039   0140             
0040   0140             ; Current chess position
0041   0140             
0042   0140 61 31 20 20 BOARD:  .byte "a1    h1"        ;64 bytes of board
0042   0144 20 20 68 31 
0043   0148 61 32 20 20         .byte "a2    h2"
0043   014C 20 20 68 32 
0044   0150 20 20 20 20         .byte "        "
0044   0154 20 20 20 20 
0045   0158 20 20 20 20         .byte "        "
0045   015C 20 20 20 20 
0046   0160 20 20 20 20         .byte "        "
0046   0164 20 20 20 20 
0047   0168 20 20 20 20         .byte "        "
0047   016C 20 20 20 20 
0048   0170 20 20 20 20         .byte "        "
0048   0174 20 20 20 20 
0049   0178 61 38 20 20         .byte "a8    h8"
0049   017C 20 20 68 38 
0050   0180 00                  .byte 0
0051   0181                     
0052   0181 00          SIDE:     .byte 0       ; side to move 0-white, 1-black   
0053   0182 00          CASTLES:  .byte 0       ; castling allowance flags
0054   0183                                     ; if bits are set: 0 wK, 1 wQ, 2 bK, 3 bQ sides
0055   0183 FF          ENPSQ:    .byte $ff     ; en-passant square none
0056   0184 00          WKSQ:     .byte 0       ; square of white king
0057   0185 00          BKSQ:     .byte 0       ; square of black king
0058   0186             
0059   0186             ;
0060   0186             ; variables and arrays for next movement generation
0061   0186             ; (for printing and displaying)          
0062   0186 20 20 20 20 NEXT_MVSTR: .byte "                                                    "
0062   018A 20 20 20 20 
0062   018E 20 20 20 20 
0062   0192 20 20 20 20 
0062   0196 20 20 20 20 
0062   019A 20 20 20 20 
0062   019E 20 20 20 20 
0062   01A2 20 20 20 20 
0062   01A6 20 20 20 20 
0062   01AA 20 20 20 20 
0062   01AE 20 20 20 20 
0062   01B2 20 20 20 20 
0062   01B6 20 20 20 20 
0063   01BA 20 20 20 20             .byte "                                                    "
0063   01BE 20 20 20 20 
0063   01C2 20 20 20 20 
0063   01C6 20 20 20 20 
0063   01CA 20 20 20 20 
0063   01CE 20 20 20 20 
0063   01D2 20 20 20 20 
0063   01D6 20 20 20 20 
0063   01DA 20 20 20 20 
0063   01DE 20 20 20 20 
0063   01E2 20 20 20 20 
0063   01E6 20 20 20 20 
0063   01EA 20 20 20 20 
0064   01EE 20 20 20 20             .byte "                                                    "
0064   01F2 20 20 20 20 
0064   01F6 20 20 20 20 
0064   01FA 20 20 20 20 
0064   01FE 20 20 20 20 
0064   0202 20 20 20 20 
0064   0206 20 20 20 20 
0064   020A 20 20 20 20 
0064   020E 20 20 20 20 
0064   0212 20 20 20 20 
0064   0216 20 20 20 20 
0064   021A 20 20 20 20 
0064   021E 20 20 20 20 
0065   0222 20 20 20 20             .byte "                                                    "
0065   0226 20 20 20 20 
0065   022A 20 20 20 20 
0065   022E 20 20 20 20 
0065   0232 20 20 20 20 
0065   0236 20 20 20 20 
0065   023A 20 20 20 20 
0065   023E 20 20 20 20 
0065   0242 20 20 20 20 
0065   0246 20 20 20 20 
0065   024A 20 20 20 20 
0065   024E 20 20 20 20 
0065   0252 20 20 20 20 
0066   0256 20 20 20 20             .byte "                                                    "                      
0066   025A 20 20 20 20 
0066   025E 20 20 20 20 
0066   0262 20 20 20 20 
0066   0266 20 20 20 20 
0066   026A 20 20 20 20 
0066   026E 20 20 20 20 
0066   0272 20 20 20 20 
0066   0276 20 20 20 20 
0066   027A 20 20 20 20 
0066   027E 20 20 20 20 
0066   0282 20 20 20 20 
0066   0286 20 20 20 20 
0067   028A 20 20 20 20             .byte "                                                    "
0067   028E 20 20 20 20 
0067   0292 20 20 20 20 
0067   0296 20 20 20 20 
0067   029A 20 20 20 20 
0067   029E 20 20 20 20 
0067   02A2 20 20 20 20 
0067   02A6 20 20 20 20 
0067   02AA 20 20 20 20 
0067   02AE 20 20 20 20 
0067   02B2 20 20 20 20 
0067   02B6 20 20 20 20 
0067   02BA 20 20 20 20 
0068   02BE 20 20 20 20             .byte "                                                    "
0068   02C2 20 20 20 20 
0068   02C6 20 20 20 20 
0068   02CA 20 20 20 20 
0068   02CE 20 20 20 20 
0068   02D2 20 20 20 20 
0068   02D6 20 20 20 20 
0068   02DA 20 20 20 20 
0068   02DE 20 20 20 20 
0068   02E2 20 20 20 20 
0068   02E6 20 20 20 20 
0068   02EA 20 20 20 20 
0068   02EE 20 20 20 20 
0069   02F2 20 20 20 20             .byte "                                                    "
0069   02F6 20 20 20 20 
0069   02FA 20 20 20 20 
0069   02FE 20 20 20 20 
0069   0302 20 20 20 20 
0069   0306 20 20 20 20 
0069   030A 20 20 20 20 
0069   030E 20 20 20 20 
0069   0312 20 20 20 20 
0069   0316 20 20 20 20 
0069   031A 20 20 20 20 
0069   031E 20 20 20 20 
0069   0322 20 20 20 20 
0070   0326 20 20 20 20             .byte "                                                    "
0070   032A 20 20 20 20 
0070   032E 20 20 20 20 
0070   0332 20 20 20 20 
0070   0336 20 20 20 20 
0070   033A 20 20 20 20 
0070   033E 20 20 20 20 
0070   0342 20 20 20 20 
0070   0346 20 20 20 20 
0070   034A 20 20 20 20 
0070   034E 20 20 20 20 
0070   0352 20 20 20 20 
0070   0356 20 20 20 20 
0071   035A 20 20 20 20             .byte "                                                    "
0071   035E 20 20 20 20 
0071   0362 20 20 20 20 
0071   0366 20 20 20 20 
0071   036A 20 20 20 20 
0071   036E 20 20 20 20 
0071   0372 20 20 20 20 
0071   0376 20 20 20 20 
0071   037A 20 20 20 20 
0071   037E 20 20 20 20 
0071   0382 20 20 20 20 
0071   0386 20 20 20 20 
0071   038A 20 20 20 20 
0072   038E 20 20 20 20             .byte "                                                    "                      
0072   0392 20 20 20 20 
0072   0396 20 20 20 20 
0072   039A 20 20 20 20 
0072   039E 20 20 20 20 
0072   03A2 20 20 20 20 
0072   03A6 20 20 20 20 
0072   03AA 20 20 20 20 
0072   03AE 20 20 20 20 
0072   03B2 20 20 20 20 
0072   03B6 20 20 20 20 
0072   03BA 20 20 20 20 
0072   03BE 20 20 20 20 
0073   03C2 20 20 20 20             .byte "                                                    "
0073   03C6 20 20 20 20 
0073   03CA 20 20 20 20 
0073   03CE 20 20 20 20 
0073   03D2 20 20 20 20 
0073   03D6 20 20 20 20 
0073   03DA 20 20 20 20 
0073   03DE 20 20 20 20 
0073   03E2 20 20 20 20 
0073   03E6 20 20 20 20 
0073   03EA 20 20 20 20 
0073   03EE 20 20 20 20 
0073   03F2 20 20 20 20 
0074   03F6 20 20 20 20             .byte "                                                    "
0074   03FA 20 20 20 20 
0074   03FE 20 20 20 20 
0074   0402 20 20 20 20 
0074   0406 20 20 20 20 
0074   040A 20 20 20 20 
0074   040E 20 20 20 20 
0074   0412 20 20 20 20 
0074   0416 20 20 20 20 
0074   041A 20 20 20 20 
0074   041E 20 20 20 20 
0074   0422 20 20 20 20 
0074   0426 20 20 20 20 
0075   042A 20 20 20 20             .byte "                                                    "
0075   042E 20 20 20 20 
0075   0432 20 20 20 20 
0075   0436 20 20 20 20 
0075   043A 20 20 20 20 
0075   043E 20 20 20 20 
0075   0442 20 20 20 20 
0075   0446 20 20 20 20 
0075   044A 20 20 20 20 
0075   044E 20 20 20 20 
0075   0452 20 20 20 20 
0075   0456 20 20 20 20 
0075   045A 20 20 20 20 
0076   045E 20 20 20 20             .byte "                                                    "
0076   0462 20 20 20 20 
0076   0466 20 20 20 20 
0076   046A 20 20 20 20 
0076   046E 20 20 20 20 
0076   0472 20 20 20 20 
0076   0476 20 20 20 20 
0076   047A 20 20 20 20 
0076   047E 20 20 20 20 
0076   0482 20 20 20 20 
0076   0486 20 20 20 20 
0076   048A 20 20 20 20 
0076   048E 20 20 20 20 
0077   0492                         
0078   0492 00          NEXT_MVCNT: .byte 0      ;count, values, and string to output          
0079   0493 00 00 00 00 NEXT_MOVES: .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0079   0497 00 00 00 00 
0079   049B 00 00 00 00 
0079   049F 00 00 00 00 
0079   04A3 00 00 00 00 
0079   04A7 00 00 00 00 
0079   04AB 00 00 00 00 
0079   04AF 00 00 00 00 
0079   04B3 00 00 00 00 
0079   04B7 00 00 00 00 
0080   04BB 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0080   04BF 00 00 00 00 
0080   04C3 00 00 00 00 
0080   04C7 00 00 00 00 
0080   04CB 00 00 00 00 
0080   04CF 00 00 00 00 
0080   04D3 00 00 00 00 
0080   04D7 00 00 00 00 
0080   04DB 00 00 00 00 
0080   04DF 00 00 00 00 
0081   04E3 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0081   04E7 00 00 00 00 
0081   04EB 00 00 00 00 
0081   04EF 00 00 00 00 
0081   04F3 00 00 00 00 
0081   04F7 00 00 00 00 
0081   04FB 00 00 00 00 
0081   04FF 00 00 00 00 
0081   0503 00 00 00 00 
0081   0507 00 00 00 00 
0082   050B 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0082   050F 00 00 00 00 
0082   0513 00 00 00 00 
0082   0517 00 00 00 00 
0082   051B 00 00 00 00 
0082   051F 00 00 00 00 
0082   0523 00 00 00 00 
0082   0527 00 00 00 00 
0082   052B 00 00 00 00 
0082   052F 00 00 00 00 
0083   0533 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0083   0537 00 00 00 00 
0083   053B 00 00 00 00 
0083   053F 00 00 00 00 
0083   0543 00 00 00 00 
0083   0547 00 00 00 00 
0083   054B 00 00 00 00 
0083   054F 00 00 00 00 
0083   0553 00 00 00 00 
0083   0557 00 00 00 00 
0084   055B 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0084   055F 00 00 00 00 
0084   0563 00 00 00 00 
0084   0567 00 00 00 00 
0084   056B 00 00 00 00 
0084   056F 00 00 00 00 
0084   0573 00 00 00 00 
0084   0577 00 00 00 00 
0084   057B 00 00 00 00 
0084   057F 00 00 00 00 
0085   0583 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0085   0587 00 00 00 00 
0085   058B 00 00 00 00 
0085   058F 00 00 00 00 
0085   0593 00 00 00 00 
0085   0597 00 00 00 00 
0085   059B 00 00 00 00 
0085   059F 00 00 00 00 
0085   05A3 00 00 00 00 
0085   05A7 00 00 00 00 
0086   05AB 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0086   05AF 00 00 00 00 
0086   05B3 00 00 00 00 
0086   05B7 00 00 00 00 
0086   05BB 00 00 00 00 
0086   05BF 00 00 00 00 
0086   05C3 00 00 00 00 
0086   05C7 00 00 00 00 
0086   05CB 00 00 00 00 
0086   05CF 00 00 00 00 
0087   05D3 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0087   05D7 00 00 00 00 
0087   05DB 00 00 00 00 
0087   05DF 00 00 00 00 
0087   05E3 00 00 00 00 
0087   05E7 00 00 00 00 
0087   05EB 00 00 00 00 
0087   05EF 00 00 00 00 
0087   05F3 00 00 00 00 
0087   05F7 00 00 00 00 
0088   05FB 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0088   05FF 00 00 00 00 
0088   0603 00 00 00 00 
0088   0607 00 00 00 00 
0088   060B 00 00 00 00 
0088   060F 00 00 00 00 
0088   0613 00 00 00 00 
0088   0617 00 00 00 00 
0088   061B 00 00 00 00 
0088   061F 00 00 00 00 
0089   0623 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0089   0627 00 00 00 00 
0089   062B 00 00 00 00 
0089   062F 00 00 00 00 
0089   0633 00 00 00 00 
0089   0637 00 00 00 00 
0089   063B 00 00 00 00 
0089   063F 00 00 00 00 
0089   0643 00 00 00 00 
0089   0647 00 00 00 00 
0090   064B 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0090   064F 00 00 00 00 
0090   0653 00 00 00 00 
0090   0657 00 00 00 00 
0090   065B 00 00 00 00 
0090   065F 00 00 00 00 
0090   0663 00 00 00 00 
0090   0667 00 00 00 00 
0090   066B 00 00 00 00 
0090   066F 00 00 00 00 
0091   0673             
0092   0673             ; Container for UCI-string-of-moves in form "e2e4 e7e5 ... e1g1 ... b7b8q ... "
0093   0673             ; (set before MOVE_byString usage)
0094   0673 20 20 20 20 MOVE_str: .byte "                                                                "          
0094   0677 20 20 20 20 
0094   067B 20 20 20 20 
0094   067F 20 20 20 20 
0094   0683 20 20 20 20 
0094   0687 20 20 20 20 
0094   068B 20 20 20 20 
0094   068F 20 20 20 20 
0094   0693 20 20 20 20 
0094   0697 20 20 20 20 
0094   069B 20 20 20 20 
0094   069F 20 20 20 20 
0094   06A3 20 20 20 20 
0094   06A7 20 20 20 20 
0094   06AB 20 20 20 20 
0094   06AF 20 20 20 20 
0095   06B3 20 20 20 20           .byte "                                                                " 
0095   06B7 20 20 20 20 
0095   06BB 20 20 20 20 
0095   06BF 20 20 20 20 
0095   06C3 20 20 20 20 
0095   06C7 20 20 20 20 
0095   06CB 20 20 20 20 
0095   06CF 20 20 20 20 
0095   06D3 20 20 20 20 
0095   06D7 20 20 20 20 
0095   06DB 20 20 20 20 
0095   06DF 20 20 20 20 
0095   06E3 20 20 20 20 
0095   06E7 20 20 20 20 
0095   06EB 20 20 20 20 
0095   06EF 20 20 20 20 
0096   06F3 20 20 20 20           .byte "                                                                "
0096   06F7 20 20 20 20 
0096   06FB 20 20 20 20 
0096   06FF 20 20 20 20 
0096   0703 20 20 20 20 
0096   0707 20 20 20 20 
0096   070B 20 20 20 20 
0096   070F 20 20 20 20 
0096   0713 20 20 20 20 
0096   0717 20 20 20 20 
0096   071B 20 20 20 20 
0096   071F 20 20 20 20 
0096   0723 20 20 20 20 
0096   0727 20 20 20 20 
0096   072B 20 20 20 20 
0096   072F 20 20 20 20 
0097   0733 20 20 20 20           .byte "                                                                "
0097   0737 20 20 20 20 
0097   073B 20 20 20 20 
0097   073F 20 20 20 20 
0097   0743 20 20 20 20 
0097   0747 20 20 20 20 
0097   074B 20 20 20 20 
0097   074F 20 20 20 20 
0097   0753 20 20 20 20 
0097   0757 20 20 20 20 
0097   075B 20 20 20 20 
0097   075F 20 20 20 20 
0097   0763 20 20 20 20 
0097   0767 20 20 20 20 
0097   076B 20 20 20 20 
0097   076F 20 20 20 20 
0098   0773 20 20 20 20           .byte "                                                                "
0098   0777 20 20 20 20 
0098   077B 20 20 20 20 
0098   077F 20 20 20 20 
0098   0783 20 20 20 20 
0098   0787 20 20 20 20 
0098   078B 20 20 20 20 
0098   078F 20 20 20 20 
0098   0793 20 20 20 20 
0098   0797 20 20 20 20 
0098   079B 20 20 20 20 
0098   079F 20 20 20 20 
0098   07A3 20 20 20 20 
0098   07A7 20 20 20 20 
0098   07AB 20 20 20 20 
0098   07AF 20 20 20 20 
0099   07B3                       .ds $700
0100   0EB3                       ;above 2Kb of moves
0101   0EB3                                   
0102   0EB3             ; list of moves from the root
0103   0EB3             ; bytes:
0104   0EB3             ;  square from,
0105   0EB3             ;  square to,
0106   0EB3             ;  promoted piece with flags
0107   0EB3             ;  en-passant square move before
0108   0EB3             
0109   0EB3 00          MOVE_CNT   .byte 0   ; count of moves (below 127 chess both-side-moves) 
0110   0EB4             
0111   0EB4             MOVE_HIST  .ds 1024; Kb for history of chess moves 
0112   12B4                       
0113   12B4             ; We use own memory of .COM file till now
0114   12B4             ;  without damaging MSX resources with malloc-style
0115   12B4             ;  
0116   12B4             ;  So, we are able to generate next chess moves, detect check and checkmate in 1.
0117   12B4             ;  And print it out. No reasonable chess evaluation searches possible here!
0118   12B4             
0119   12B4             GenMovesAndString:
0120   12B4 CD 38 13                call GenMoves            
0121   12B7 CD EE 19                call MovesToStr    ; to print after 
0122   12BA C9                      ret
0123   12BB                                                 
0124   12BB             ;BEGIN of ========== MAKE MOVES BY UCI-MOVE-STRING          
0125   12BB             ; use UndoAllMoves before or setFEN
0126   12BB             ;
0127   12BB                                                     
0128   12BB             MOVE_byString:
0129   12BB F5                  push af
0130   12BC C5                  push bc
0131   12BD D5                  push de
0132   12BE             
0133   12BE 11 73 06            ld de, MOVE_str 
0134   12C1                     
0135   12C1             MbyStrLoop:
0136   12C1 CD 38 13            call GenMoves 
0137   12C4                                                  
0138   12C4 1A                  ld a,(de)          ; find separator
0139   12C5 FE 20               cp ' '
0140   12C7 28 0B               jr z,MbySover
0141   12C9 FE 00               cp 0
0142   12CB 28 07               jr z,MbySover
0143   12CD                     
0144   12CD CD D8 12            call MbyStrMove    ; single move
0145   12D0                     
0146   12D0 13                  inc de
0147   12D1 13                  inc de             ; skip promoted and blank too
0148   12D2 18 ED               jr MbyStrLoop      ; and process next move   
0149   12D4             MbySover:        
0150   12D4 D1                  pop de
0151   12D5 C1                  pop bc
0152   12D6 F1                  pop af
0153   12D7 C9                  ret
0154   12D8             
0155   12D8             ; "move by string" in DE register
0156   12D8             ; restore registers after
0157   12D8             MbyStrMove:
0158   12D8 CD 15 13            call MbySgetSQ
0159   12DB 32 35 13            ld (SQi),a
0160   12DE CD 15 13            call MbySgetSQ
0161   12E1 32 36 13            ld (SQt),a
0162   12E4 1A                  ld a,(de)
0163   12E5 FE 20               cp ' '
0164   12E7 20 03               jr nz,MbyPromPiece
0165   12E9 1B                  dec de
0166   12EA 18 20               jr MbyNoN        
0167   12EC             MbyPromPiece:
0168   12EC FE 71               cp 'q'
0169   12EE 20 04               jr nz,MbyNoQ
0170   12F0 3E 04               ld a,4
0171   12F2 18 1A               jr MbyProm
0172   12F4 FE 72       MbyNoQ: cp 'r'       
0173   12F6 20 04               jr nz,MbyNoR
0174   12F8 3E 03               ld a,3
0175   12FA 18 12               jr MbyProm
0176   12FC FE 62       MbyNoR: cp 'b'       
0177   12FE 20 04               jr nz,MbyNoB
0178   1300 3E 02               ld a,2
0179   1302 18 0A               jr MbyProm
0180   1304 FE 6E       MbyNoB: cp 'n'       
0181   1306 20 04               jr nz,MbyNoN
0182   1308 3E 01               ld a,1
0183   130A 18 02               jr MbyProm
0184   130C 3E 00       MbyNoN: ld a,0             ; not promoted       
0185   130E             MbyProm:
0186   130E 32 38 19            ld (PromoPcId),a
0187   1311 CD 47 21            call MakeMove
0188   1314 C9                  ret
0189   1315             
0190   1315             MbySgetSQ:
0191   1315 1A                  ld a,(de)
0192   1316 13                  inc de
0193   1317 D6 61               sub 'a'
0194   1319 47                  ld b,a
0195   131A 1A                  ld a,(de)
0196   131B 13                  inc de
0197   131C D6 31               sub '1'
0198   131E CB 27               sla a
0199   1320 CB 27               sla a
0200   1322 CB 27               sla a
0201   1324 B0                  or b
0202   1325 C9                  ret                ; a-reg contains square on return
0203   1326             
0204   1326             ;END
0205   1326             
0206   1326             
0207   1326             ;BEGIN of ========== SIMPLY UNDO ALL MOVES
0208   1326             
0209   1326             UndoAllMoves:
0210   1326 F5                   push af
0211   1327             UndoAllLoop:
0212   1327 3A B3 0E             ld a,(MOVE_CNT)
0213   132A FE 00                cp 0
0214   132C 28 05                jr z,UndoAllBrk
0215   132E CD 1E 25             call UnMakeMove
0216   1331 18 F4                jr UndoAllLoop
0217   1333             UndoAllBrk:         
0218   1333 F1                   pop af
0219   1334 C9                   ret
0220   1335             ;END
0221   1335                   
0222   1335                                                               
0223   1335             ;BEGIN of ========== MOVE GEN - movement generation routine
0224   1335             ; Very proper - according to chess rules.
0225   1335             ; Scanning all board squares 0..63, trying to move pieces by type, then by directions.
0226   1335             ; If move seems good then adds to the list with verification on own king attacks after movement
0227   1335             ; to avoid illegal cases.
0228   1335             
0229   1335 00          SQi:         .byte 0    ;current square
0230   1336 00          SQt:         .byte 0    ;square to move to
0231   1337             
0232   1337 00          MateDetect:  .byte 0    ; if 1 then just find the first legal move and return
0233   1338             
0234   1338             GenMoves:
0235   1338 F5                   push af
0236   1339 C5                   push bc
0237   133A D5                   push de
0238   133B E5                   push hl
0239   133C DD E5                push ix
0240   133E FD E5                push iy
0241   1340                               
0242   1340 3E 00                ld a,0    
0243   1342 32 39 19             ld (CastlMove),a
0244   1345 32 38 19             ld (PromoPcId),a
0245   1348 32 37 19             ld (CaptPiece),a 
0246   134B                      
0247   134B 3A 37 13             ld a, (MateDetect)
0248   134E FE 01                cp 1
0249   1350 28 08                jr z,GenMvNoClr    ; if we are not gona save
0250   1352                               
0251   1352 DD 21 92 04          ld ix, NEXT_MVCNT
0252   1356 DD 36 00 00          ld (ix), 0
0253   135A                      
0254   135A             GenMvNoClr:         
0255   135A 3E 00                ld a, 0            ; square counter 0..63
0256   135C 32 35 13             ld (SQi), a
0257   135F 21 40 01             ld hl, BOARD
0258   1362             GenMvSqScan:
0259   1362 7E                   ld a, (hl)          ; piece
0260   1363                      
0261   1363 E5                   push hl
0262   1364 FD E1                pop iy    ; set to remember square-from
0263   1366                      
0264   1366 7E                   ld a, (hl)          ; get piece standing there
0265   1367 FE 00                cp 0
0266   1369 28 5F                jr z, OverMGSq      ; empty square
0267   136B                      
0268   136B FE 61                cp 'a'              ; pieces
0269   136D 30 0A                jr nc, BlackPiece
0270   136F             
0271   136F             WhitePiece:                  ; A-Z                    
0272   136F 3A 81 01             ld a,(SIDE)
0273   1372 FE 00                cp 0        
0274   1374 20 54                jr nz, OverMGSq     ; not turn
0275   1376 7E                   ld a, (hl)
0276   1377 18 0A                jr WhichPiece        
0277   1379             BlackPiece:       
0278   1379 3A 81 01             ld a,(SIDE)
0279   137C FE 01                cp 1 
0280   137E 20 4A                jr nz, OverMGSq     ; not turn
0281   1380 7E                   ld a, (hl)
0282   1381 D6 20                sub 32            ; to uppercase
0283   1383             WhichPiece: 
0284   1383 FE 50                cp 'P'
0285   1385 28 16                jr z, Pmoves
0286   1387 FE 4E                cp 'N'
0287   1389 28 23                jr z, Knmoves       
0288   138B FE 42                cp 'B'
0289   138D 28 24                jr z, Bsmoves
0290   138F FE 52                cp 'R'
0291   1391 28 25                jr z, Rkmoves
0292   1393 FE 51                cp 'Q'
0293   1395 28 26                jr z, Qnmoves
0294   1397 FE 4B                cp 'K'
0295   1399 28 2A                jr z, Kgmoves                                          
0296   139B 18 2D                jr OverMGSq                
0297   139D             Pmoves:
0298   139D 3A 81 01             ld a,(SIDE)
0299   13A0 FE 01                cp 1
0300   13A2 28 05                jr z, blackPmoves
0301   13A4 CD 25 14             call MoveGenWPawn
0302   13A7 18 21                jr OverMGSq
0303   13A9             blackPmoves:
0304   13A9 CD C6 14             call MoveGenBPawn
0305   13AC 18 1C                jr OverMGSq
0306   13AE             Knmoves:
0307   13AE CD FE 16             call MoveGenKnight
0308   13B1 18 17                jr OverMGSq
0309   13B3             Bsmoves:
0310   13B3 CD 3D 16             call MoveGenBishop
0311   13B6 18 12                jr OverMGSq
0312   13B8             Rkmoves:
0313   13B8 CD 84 15             call MoveGenRook
0314   13BB 18 0D                jr OverMGSq                                                           
0315   13BD             Qnmoves:
0316   13BD CD 3D 16             call MoveGenBishop   ; simply
0317   13C0 CD 84 15             call MoveGenRook     ; the same
0318   13C3 18 05                jr OverMGSq
0319   13C5             Kgmoves:
0320   13C5 CD C1 17             call MoveGenKing
0321   13C8 18 00                jr OverMGSq
0322   13CA                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
0323   13CA             OverMGSq:
0324   13CA 23                   inc hl
0325   13CB                      
0326   13CB 3A 37 13             ld a, (MateDetect)
0327   13CE FE 02                cp 2
0328   13D0 20 02                jr nz, GenMVscn
0329   13D2 18 0B                jr GenMVexit
0330   13D4             GenMVscn:         
0331   13D4 3A 35 13             ld a, (SQi)       
0332   13D7 3C                   inc a
0333   13D8 32 35 13             ld (SQi),a
0334   13DB D6 40                sub 64   ; Loop 0-63
0335   13DD 20 83                jr nz, GenMvSqScan
0336   13DF             GenMVexit:
0337   13DF             
0338   13DF CD 98 26             call LookForCheckmates   ; verifies checkmates
0339   13E2                                                  
0340   13E2 FD E1                pop iy
0341   13E4 DD E1                pop ix
0342   13E6 E1                   pop hl
0343   13E7 D1                   pop de
0344   13E8 C1                   pop bc
0345   13E9 F1                   pop af
0346   13EA C9                   ret
0347   13EB             
0348   13EB                               
0349   13EB             ; helping procedure to obtain current X,Y on board and store to d,e regs.
0350   13EB             StoreXYtoDE:
0351   13EB 3A 35 13             ld a, (SQi)
0352   13EE E6 07                and 7
0353   13F0 57                   ld d,a      ; X- a..h
0354   13F1 3A 35 13             ld a, (SQi)
0355   13F4 CB 3F                srl a
0356   13F6 CB 3F                srl a
0357   13F8 CB 3F                srl a
0358   13FA 5F                   ld e,a      ; Y- 1..8
0359   13FB C9                   ret
0360   13FC             
0361   13FC             ; sets new SQt to move and calculates new hl position          
0362   13FC             StoreSqToMove:                 
0363   13FC 7B                   ld a,e
0364   13FD CB 27                sla a
0365   13FF CB 27                sla a
0366   1401 CB 27                sla a
0367   1403 B2                   or d
0368   1404 32 36 13             ld (SQt),a              ;a-reg. contains the new square to jump
0369   1407                      
0370   1407 06 00                ld b,0
0371   1409 3A 35 13             ld a,(SQi)
0372   140C 4F                   ld c,a
0373   140D 3A 36 13             ld a,(SQt)
0374   1410 91                   sub c
0375   1411 38 04                jr c, StDistNeg
0376   1413 4F                   ld c,a
0377   1414 09                   add hl,bc              ;new hl position sq-forward
0378   1415 18 0D                jr StNSqOver
0379   1417             StDistNeg:
0380   1417 3A 36 13             ld a,(SQt)
0381   141A 4F                   ld c,a
0382   141B 3A 35 13             ld a,(SQi)         
0383   141E 91                   sub c
0384   141F 4F                   ld c,a                         
0385   1420 37                   scf
0386   1421 3F                   ccf
0387   1422 ED 42                sbc hl,bc              ;new hl position sq-backward
0388   1424             StNSqOver:         
0389   1424 C9                   ret
0390   1425             ;END
0391   1425             
0392   1425             
0393   1425             ;BEGIN of ========== MOVE GEN for WHITE PAWN goes up
0394   1425             
0395   1425             MoveGenWPawn:
0396   1425             
0397   1425 F5                   push af
0398   1426 D5                   push de
0399   1427                      
0400   1427 3E 00                ld a,0
0401   1429 32 37 19             ld (CaptPiece),a
0402   142C             
0403   142C 3A 83 01             ld a, (ENPSQ)
0404   142F 57                   ld d,a         
0405   1430                               
0406   1430 3A 35 13             ld a,(SQi)                  
0407   1433 C6 08                add a, 8
0408   1435 32 36 13             ld (SQt),a
0409   1438 01 08 00             ld bc,8         ;1-7 vert. try next sq forward        
0410   143B 09                   add hl, bc      ;new square-to
0411   143C                      
0412   143C CD E3 18             call IsEmpty
0413   143F 30 1B                jr nc, wpNoFWmoves
0414   1441 CD 3A 19             call AddMovPromo
0415   1444                      
0416   1444 3A 35 13             ld a, (SQi)
0417   1447 FE 10                cp 16          ;below row 3
0418   1449 30 11                jr nc, wpNoFWmoves
0419   144B C6 10                add a, 8+8
0420   144D 32 36 13             ld (SQt),a 
0421   1450 01 08 00             ld bc, 8        ;another (double) move
0422   1453 09                   add hl, bc      ;new square-to
0423   1454                      
0424   1454 CD E3 18             call IsEmpty
0425   1457 30 03                jr nc, wpNoFWmoves
0426   1459 CD 3F 19             call AddMove
0427   145C             
0428   145C             wpNoFWmoves:         
0429   145C FD E5                push iy
0430   145E E1                   pop hl    ; restore 
0431   145F                      
0432   145F 3E 01                ld a,1
0433   1461 32 37 19             ld (CaptPiece),a
0434   1464                      
0435   1464 3A 35 13             ld a, (SQi)
0436   1467 E6 07                and 7
0437   1469 FE 00                cp 0
0438   146B 28 21                jr z, wpTryCaptRight
0439   146D             
0440   146D 3A 35 13             ld a, (SQi)                  
0441   1470 C6 07                add a, 8-1 ; try capture left
0442   1472 32 36 13             ld (SQt),a
0443   1475 01 07 00             ld bc, 8-1
0444   1478 09                   add hl, bc
0445   1479             
0446   1479 CD 18 19             call IsBlack
0447   147C 30 05                jr nc, wpTryLeftEnPs
0448   147E                      
0449   147E CD 3A 19             call AddMovPromo
0450   1481 18 0B                jr wpTryCaptRight
0451   1483                      
0452   1483             wpTryLeftEnPs:              
0453   1483 3A 36 13             ld a,(SQt)
0454   1486 BA                   cp d
0455   1487 20 05                jr nz, wpTryCaptRight
0456   1489                                             
0457   1489 CD 3A 19             call AddMovPromo
0458   148C 18 00                jr wpTryCaptRight
0459   148E                                                                                            
0460   148E             wpTryCaptRight:
0461   148E FD E5                push iy
0462   1490 E1                   pop hl    ; restore 
0463   1491                      
0464   1491 3A 35 13             ld a, (SQi)
0465   1494 E6 07                and 7
0466   1496 FE 07                cp 7
0467   1498 28 21                jr z, wpMGend
0468   149A                               
0469   149A 3A 35 13             ld a, (SQi)
0470   149D C6 09                add a, 8+1 ; try capture right
0471   149F 32 36 13             ld (SQt),a
0472   14A2 01 09 00             ld bc, 8+1
0473   14A5 09                   add hl, bc
0474   14A6             
0475   14A6 CD 18 19             call IsBlack
0476   14A9 30 05                jr nc, wpTryRightEnPs
0477   14AB                      
0478   14AB CD 3A 19             call AddMovPromo
0479   14AE 18 0B                jr wpMGend
0480   14B0                      
0481   14B0             wpTryRightEnPs:              
0482   14B0 3A 36 13             ld a,(SQt)
0483   14B3 BA                   cp d
0484   14B4 20 05                jr nz, wpMGend
0485   14B6                                  
0486   14B6 CD 3A 19             call AddMovPromo
0487   14B9 18 00                jr wpMGend
0488   14BB                                                                                                                                                            
0489   14BB             wpMGend:
0490   14BB FD E5                push iy
0491   14BD E1                   pop hl    ; restore 
0492   14BE             
0493   14BE 3E 00                ld a,0
0494   14C0 32 38 19             ld (PromoPcId),a
0495   14C3                      
0496   14C3 D1                   pop de
0497   14C4 F1                   pop af
0498   14C5 C9                   ret
0499   14C6                  
0500   14C6             ;END
0501   14C6             
0502   14C6             ;BEGIN of ========== MOVE GEN for BLACK PAWN goes down
0503   14C6             
0504   14C6             MoveGenBPawn:
0505   14C6             
0506   14C6 F5                   push af
0507   14C7 D5                   push de
0508   14C8                      
0509   14C8 3E 00                ld a,0
0510   14CA 32 37 19             ld (CaptPiece),a
0511   14CD             
0512   14CD 3A 83 01             ld a, (ENPSQ)
0513   14D0 57                   ld d,a         
0514   14D1                               
0515   14D1 3A 35 13             ld a,(SQi)                  
0516   14D4 D6 08                sub 8
0517   14D6 32 36 13             ld (SQt),a
0518   14D9 37                   scf
0519   14DA 3F                   ccf
0520   14DB 01 08 00             ld bc,8         ;1-7 vert. try next sq forward        
0521   14DE ED 42                sbc hl, bc      ;new square-to
0522   14E0                      
0523   14E0 CD E3 18             call IsEmpty
0524   14E3 30 1E                jr nc, bpNoFWmoves
0525   14E5 CD 3A 19             call AddMovPromo
0526   14E8                      
0527   14E8 3A 35 13             ld a, (SQi)
0528   14EB FE 30                cp 48           ;above row 6
0529   14ED 38 14                jr c, bpNoFWmoves
0530   14EF D6 10                sub 8+8
0531   14F1 32 36 13             ld (SQt),a
0532   14F4 37                   scf
0533   14F5 3F                   ccf 
0534   14F6 01 08 00             ld bc, 8        ;another (double) move
0535   14F9 ED 42                sbc hl, bc      ;new square-to
0536   14FB                      
0537   14FB CD E3 18             call IsEmpty
0538   14FE 30 03                jr nc, bpNoFWmoves
0539   1500 CD 3F 19             call AddMove
0540   1503             
0541   1503             bpNoFWmoves:         
0542   1503 FD E5                push iy
0543   1505 E1                   pop hl    ; restore 
0544   1506                      
0545   1506 3E 01                ld a,1
0546   1508 32 37 19             ld (CaptPiece),a
0547   150B                      
0548   150B 3A 35 13             ld a, (SQi)
0549   150E E6 07                and 7
0550   1510 FE 07                cp 7
0551   1512 28 24                jr z, bpTryCaptRight
0552   1514             
0553   1514 3A 35 13             ld a, (SQi)                  
0554   1517 D6 07                sub 8-1 ; try capture left
0555   1519 32 36 13             ld (SQt),a
0556   151C 37                   scf
0557   151D 3F                   ccf
0558   151E 01 07 00             ld bc, 8-1
0559   1521 ED 42                sbc hl, bc
0560   1523             
0561   1523 CD F9 18             call IsWhite
0562   1526 30 05                jr nc, bpTryLeftEnPs
0563   1528                      
0564   1528 CD 3A 19             call AddMovPromo
0565   152B 18 0B                jr bpTryCaptRight
0566   152D                      
0567   152D             bpTryLeftEnPs:              
0568   152D 3A 36 13             ld a,(SQt)
0569   1530 BA                   cp d
0570   1531 20 05                jr nz, bpTryCaptRight
0571   1533                                             
0572   1533 CD 3A 19             call AddMovPromo
0573   1536 18 00                jr bpTryCaptRight
0574   1538                                                                                            
0575   1538             bpTryCaptRight:
0576   1538 FD E5                push iy
0577   153A E1                   pop hl    ; restore 
0578   153B                      
0579   153B 3A 35 13             ld a, (SQi)
0580   153E E6 07                and 7
0581   1540 FE 00                cp 0
0582   1542 28 24                jr z, bpMGend
0583   1544                               
0584   1544 3A 35 13             ld a, (SQi)
0585   1547 D6 09                sub 8+1 ; try capture right
0586   1549 32 36 13             ld (SQt),a
0587   154C 37                   scf
0588   154D 3F                   ccf
0589   154E 01 09 00             ld bc, 8+1
0590   1551 ED 42                sbc hl, bc
0591   1553             
0592   1553 CD F9 18             call IsWhite
0593   1556 30 05                jr nc, bpTryRightEnPs
0594   1558                      
0595   1558 CD 3A 19             call AddMovPromo      
0596   155B 18 0B                jr bpMGend
0597   155D                      
0598   155D             bpTryRightEnPs:              
0599   155D 3A 36 13             ld a,(SQt)
0600   1560 BA                   cp d
0601   1561 20 05                jr nz, bpMGend
0602   1563                                             
0603   1563 CD 3A 19             call AddMovPromo
0604   1566 18 00                jr bpMGend
0605   1568                                                                                                                                                            
0606   1568             bpMGend:
0607   1568 FD E5                push iy
0608   156A E1                   pop hl    ; restore 
0609   156B             
0610   156B 3E 00                ld a,0
0611   156D 32 38 19             ld (PromoPcId),a
0612   1570                      
0613   1570 D1                   pop de
0614   1571 F1                   pop af
0615   1572 C9                   ret
0616   1573                  
0617   1573             ;END
0618   1573             
0619   1573             
0620   1573             ;BEGIN of ========== MOVE GEN for ROOKS
0621   1573             
0622   1573 2B 01 3D 00 rookMoves: .byte '+',1,'=',0 ,'-',1,'=',0 ,'=',0,'+',1 ,'=',0,'-',1 ,
0622   1577 2D 01 3D 00 
0622   157B 3D 00 2B 01 
0622   157F 3D 00 2D 01 
0623   1583 00                     .byte 0
0624   1584                                       
0625   1584             MoveGenRook:
0626   1584             
0627   1584 F5                   push af
0628   1585 C5                   push bc
0629   1586 DD E5                push ix
0630   1588                      
0631   1588 CD EB 13             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
0632   158B                      
0633   158B DD 21 73 15          ld ix,rookMoves
0634   158F 06 04                ld b, 4
0635   1591                      
0636   1591             RookScan4directions:
0637   1591             
0638   1591 D5                   push de
0639   1592             RookLoop:
0640   1592 CD A9 15             call RookTryMove
0641   1595 FE 00                cp 0
0642   1597 28 F9                jr z,RookLoop
0643   1599 D1                   pop de
0644   159A                              
0645   159A DD 23                inc ix
0646   159C DD 23                inc ix
0647   159E DD 23                inc ix
0648   15A0 DD 23                inc ix
0649   15A2                      
0650   15A2 10 ED                djnz RookScan4directions
0651   15A4                    
0652   15A4 DD E1                pop ix
0653   15A6 C1                   pop bc
0654   15A7 F1                   pop af
0655   15A8 C9                   ret
0656   15A9                      
0657   15A9             ; try move to that direction
0658   15A9             RookTryMove:
0659   15A9             
0660   15A9 C5                   push bc
0661   15AA DD E5                push ix
0662   15AC                      
0663   15AC 3E 00                ld a,0
0664   15AE 32 37 19             ld (CaptPiece),a
0665   15B1                               
0666   15B1 DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,=0
0667   15B4 DD 23                inc ix
0668   15B6 FE 3D                cp '='
0669   15B8 28 16                jr z, RkZero1
0670   15BA FE 2D                cp '-'
0671   15BC 28 08                jr z, RkNegX      
0672   15BE 7A                   ld a,d
0673   15BF 3C                   inc a           ;a=direction +1 of X 
0674   15C0 FE 08                cp 8
0675   15C2 30 5F                jr nc, RkNo
0676   15C4 18 09                jr RkCanOk1  
0677   15C6             RkNegX:
0678   15C6 3E 00                ld a,0          ;a=direction -1 of X
0679   15C8 BA                   cp d
0680   15C9 38 02                jr c, RkCanSubtrX
0681   15CB 18 56                jr RkNo
0682   15CD             RkCanSubtrX:         
0683   15CD 7A                   ld a,d
0684   15CE 3D                   dec a 
0685   15CF             RkCanOk1:
0686   15CF 57                   ld d,a         
0687   15D0 DD 23       RkZero1: inc ix
0688   15D2                      
0689   15D2 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,=0
0690   15D5 DD 23                inc ix
0691   15D7 FE 3D                cp '='
0692   15D9 28 16                jr z, RkZero2        
0693   15DB FE 2D                cp '-'
0694   15DD 28 08                jr z, RkNegY
0695   15DF 7B                   ld a,e
0696   15E0 3C                   inc a          ;a=direction +1 of Y  
0697   15E1 FE 08                cp 8
0698   15E3 30 3E                jr nc, RkNo
0699   15E5 18 09                jr RkCanOk2   
0700   15E7             RkNegY:
0701   15E7 3E 00                ld a,0         ;a=direction -1 of Y
0702   15E9 BB                   cp e
0703   15EA 38 02                jr c, RkCanSubtrY
0704   15EC 18 35                jr RkNo
0705   15EE             RkCanSubtrY:         
0706   15EE 7B                   ld a, e
0707   15EF 3D                   dec a
0708   15F0             RkCanOk2:
0709   15F0 5F                   ld e,a
0710   15F1 DD 23       RkZero2: inc ix         
0711   15F3                      
0712   15F3 CD FC 13             call StoreSqToMove    ;new SQt,hl        
0713   15F6             
0714   15F6 3A 81 01             ld a, (SIDE)
0715   15F9 FE 01                cp 1
0716   15FB 28 0E                jr z,RkThisBlack
0717   15FD CD 18 19             call IsBlack           ; enemy?
0718   1600 38 17                jr c,RkCaptMove
0719   1602 CD F9 18             call IsWhite           ; our?
0720   1605 38 1C                jr c,RkNo
0721   1607 3E 00                ld a,0                 ; continue after to this direction
0722   1609 18 13                jr RkAdd        
0723   160B             RkThisBlack:         
0724   160B CD F9 18             call IsWhite           ; enemy?
0725   160E 38 09                jr c,RkCaptMove
0726   1610 CD 18 19             call IsBlack           ; our?                        
0727   1613 38 0E                jr c,RkNo
0728   1615 3E 00                ld a,0                 ; continue after to this direction
0729   1617 18 05                jr RkAdd
0730   1619             RkCaptMove:
0731   1619 3E 01                ld a,1
0732   161B 32 37 19             ld (CaptPiece),a       ; and stop to this direction  
0733   161E             RkAdd:
0734   161E CD 3F 19             call AddMove
0735   1621 18 02                jr RkOver        
0736   1623             
0737   1623 3E 01       RkNo:    ld a,1                 ; stop to this direction
0738   1625             
0739   1625             RkOver:
0740   1625 FD E5                push iy
0741   1627 E1                   pop hl
0742   1628                      
0743   1628 DD E1                pop ix
0744   162A C1                   pop bc
0745   162B C9                   ret 
0746   162C             
0747   162C             ;END
0748   162C             
0749   162C             
0750   162C             
0751   162C             ;BEGIN of ========== MOVE GEN for BISHOPS
0752   162C             
0753   162C 2B 01 2B 01 bishopMoves: .byte '+',1,'+',1 ,'+',1,'-',1 ,'-',1,'+',1 ,'-',1,'-',1 ,
0753   1630 2B 01 2D 01 
0753   1634 2D 01 2B 01 
0753   1638 2D 01 2D 01 
0754   163C 00                       .byte 0
0755   163D                                       
0756   163D             MoveGenBishop:
0757   163D             
0758   163D F5                   push af
0759   163E C5                   push bc
0760   163F DD E5                push ix
0761   1641                      
0762   1641 CD EB 13             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
0763   1644                      
0764   1644 DD 21 2C 16          ld ix,bishopMoves
0765   1648 06 04                ld b, 4
0766   164A                      
0767   164A             BishopScan4directions:
0768   164A             
0769   164A D5                   push de
0770   164B             BishopLoop:
0771   164B CD 62 16             call BishopTryMove
0772   164E FE 00                cp 0
0773   1650 28 F9                jr z,BishopLoop
0774   1652 D1                   pop de
0775   1653                              
0776   1653 DD 23                inc ix
0777   1655 DD 23                inc ix
0778   1657 DD 23                inc ix
0779   1659 DD 23                inc ix
0780   165B                      
0781   165B 10 ED                djnz BishopScan4directions
0782   165D                    
0783   165D DD E1                pop ix
0784   165F C1                   pop bc
0785   1660 F1                   pop af
0786   1661 C9                   ret
0787   1662                      
0788   1662             ; try move to that direction
0789   1662             BishopTryMove:
0790   1662             
0791   1662 C5                   push bc
0792   1663 DD E5                push ix
0793   1665                               
0794   1665 3E 00                ld a,0
0795   1667 32 37 19             ld (CaptPiece),a
0796   166A                      
0797   166A DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1
0798   166D DD 23                inc ix
0799   166F FE 2D                cp '-'
0800   1671 28 08                jr z, BsNegX      
0801   1673 7A                   ld a,d
0802   1674 3C                   inc a           ;a=direction +1 of X 
0803   1675 FE 08                cp 8
0804   1677 30 5B                jr nc, BsNo
0805   1679 18 09                jr BsCanOk1  
0806   167B             BsNegX:
0807   167B 3E 00                ld a,0          ;a=direction -1 of X
0808   167D BA                   cp d
0809   167E 38 02                jr c, BsCanSubtrX
0810   1680 18 52                jr BsNo
0811   1682             BsCanSubtrX:         
0812   1682 7A                   ld a,d
0813   1683 3D                   dec a 
0814   1684             BsCanOk1:
0815   1684 57                   ld d,a         
0816   1685 DD 23                inc ix
0817   1687                      
0818   1687 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1
0819   168A DD 23                inc ix
0820   168C FE 2D                cp '-'
0821   168E 28 08                jr z, BsNegY
0822   1690 7B                   ld a,e
0823   1691 3C                   inc a          ;a=direction +1 of Y  
0824   1692 FE 08                cp 8
0825   1694 30 3E                jr nc, BsNo
0826   1696 18 09                jr BsCanOk2   
0827   1698             BsNegY:
0828   1698 3E 00                ld a,0         ;a=direction -1 of Y
0829   169A BB                   cp e
0830   169B 38 02                jr c, BsCanSubtrY
0831   169D 18 35                jr BsNo
0832   169F             BsCanSubtrY:         
0833   169F 7B                   ld a, e
0834   16A0 3D                   dec a
0835   16A1             BsCanOk2:
0836   16A1 5F                   ld e,a
0837   16A2 DD 23                inc ix         
0838   16A4                      
0839   16A4 CD FC 13             call StoreSqToMove    ;new SQt,hl        
0840   16A7             
0841   16A7 3A 81 01             ld a, (SIDE)
0842   16AA FE 01                cp 1
0843   16AC 28 0E                jr z,BsThisBlack
0844   16AE CD 18 19             call IsBlack           ; enemy?
0845   16B1 38 17                jr c,BsCaptMove
0846   16B3 CD F9 18             call IsWhite           ; our?
0847   16B6 38 1C                jr c,BsNo
0848   16B8 3E 00                ld a,0                 ; continue after to this direction
0849   16BA 18 13                jr BsAdd        
0850   16BC             BsThisBlack:         
0851   16BC CD F9 18             call IsWhite           ; enemy?
0852   16BF 38 09                jr c,BsCaptMove
0853   16C1 CD 18 19             call IsBlack           ; our?                        
0854   16C4 38 0E                jr c,BsNo
0855   16C6 3E 00                ld a,0                 ; continue after to this direction
0856   16C8 18 05                jr BsAdd
0857   16CA             BsCaptMove:
0858   16CA 3E 01                ld a,1
0859   16CC 32 37 19             ld (CaptPiece),a       ; and stop to this direction  
0860   16CF             BsAdd:
0861   16CF CD 3F 19             call AddMove
0862   16D2 18 02                jr BsOver        
0863   16D4             
0864   16D4 3E 01       BsNo:    ld a,1                 ; stop to this direction
0865   16D6             
0866   16D6             BsOver:
0867   16D6 FD E5                push iy
0868   16D8 E1                   pop hl
0869   16D9                      
0870   16D9 DD E1                pop ix
0871   16DB C1                   pop bc
0872   16DC C9                   ret 
0873   16DD             
0874   16DD             ;END
0875   16DD             
0876   16DD             
0877   16DD             
0878   16DD             
0879   16DD             ;BEGIN of ========== MOVE GEN for KNIGHTS
0880   16DD             
0881   16DD 2B 01 2B 02 knightMoves: .byte '+',1,'+',2 ,'+',2,'+',1 ,'+',2,'-',1 ,'+',1,'-',2 ,
0881   16E1 2B 02 2B 01 
0881   16E5 2B 02 2D 01 
0881   16E9 2B 01 2D 02 
0882   16ED 2D 01 2D 02              .byte '-',1,'-',2 ,'-',2,'-',1 ,'-',2,'+',1 ,'-',1,'+',2 , 
0882   16F1 2D 02 2D 01 
0882   16F5 2D 02 2B 01 
0882   16F9 2D 01 2B 02 
0883   16FD 00                       .byte 0
0884   16FE                          
0885   16FE             
0886   16FE             MoveGenKnight:
0887   16FE             
0888   16FE F5                   push af
0889   16FF C5                   push bc
0890   1700 D5                   push de
0891   1701 DD E5                push ix
0892   1703                      
0893   1703 CD EB 13             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
0894   1706                      
0895   1706 DD 21 DD 16          ld ix, knightMoves
0896   170A 06 08                ld b, 8
0897   170C             KnightScan8moves:
0898   170C CD 1F 17             call KnightTryMove
0899   170F DD 23                inc ix
0900   1711 DD 23                inc ix
0901   1713 DD 23                inc ix
0902   1715 DD 23                inc ix
0903   1717 10 F3                djnz KnightScan8moves
0904   1719                    
0905   1719 DD E1                pop ix
0906   171B D1                   pop de
0907   171C C1                   pop bc
0908   171D F1                   pop af
0909   171E C9                   ret
0910   171F             
0911   171F             ; try move to that square
0912   171F             KnightTryMove:
0913   171F C5                   push bc
0914   1720 D5                   push de
0915   1721 DD E5                push ix
0916   1723                      
0917   1723 3E 00                ld a,0
0918   1725 32 37 19             ld (CaptPiece),a
0919   1728                      
0920   1728 DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,-2,+2
0921   172B DD 23                inc ix
0922   172D FE 2D                cp '-'
0923   172F 28 0A                jr z, KnNegX
0924   1731 DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of X      
0925   1734 82                   add a,d
0926   1735 FE 08                cp 8
0927   1737 30 5F                jr nc, KnNo
0928   1739 18 0D                jr KnCanOk1  
0929   173B             KnNegX:
0930   173B DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of X
0931   173E 3D                   dec a
0932   173F BA                   cp d
0933   1740 38 02                jr c, KnCanSubtrX
0934   1742 18 54                jr KnNo
0935   1744             KnCanSubtrX:         
0936   1744 7A                   ld a, d
0937   1745 DD 96 00             sub (ix)    
0938   1748             KnCanOk1:
0939   1748 57                   ld d,a         
0940   1749 DD 23                inc ix
0941   174B                      
0942   174B DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,-2,+2
0943   174E DD 23                inc ix
0944   1750 FE 2D                cp '-'
0945   1752 28 0A                jr z, KnNegY
0946   1754 DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of Y  
0947   1757 83                   add a,e
0948   1758 FE 08                cp 8
0949   175A 30 3C                jr nc, KnNo
0950   175C 18 0D                jr KnCanOk2   
0951   175E             KnNegY:
0952   175E DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of Y
0953   1761 3D                   dec a 
0954   1762 BB                   cp e
0955   1763 38 02                jr c, KnCanSubtrY
0956   1765 18 31                jr KnNo
0957   1767             KnCanSubtrY:         
0958   1767 7B                   ld a, e
0959   1768 DD 96 00             sub (ix)
0960   176B             KnCanOk2:
0961   176B 5F                   ld e, a
0962   176C DD 23                inc ix         
0963   176E                      
0964   176E CD FC 13             call StoreSqToMove    ;new SQt,hl        
0965   1771             
0966   1771 3A 81 01             ld a, (SIDE)
0967   1774 FE 01                cp 1
0968   1776 28 0C                jr z, KnThisBlack
0969   1778 CD 18 19             call IsBlack           ; enemy?
0970   177B 38 13                jr c,KnCaptMove
0971   177D CD F9 18             call IsWhite           ; our?
0972   1780 38 16                jr c,KnNo
0973   1782 18 11                jr KnAdd        
0974   1784             KnThisBlack:         
0975   1784 CD F9 18             call IsWhite           ; enemy?
0976   1787 38 07                jr c,KnCaptMove
0977   1789 CD 18 19             call IsBlack           ; our?                        
0978   178C 38 0A                jr c,KnNo
0979   178E 18 05                jr KnAdd
0980   1790             KnCaptMove:
0981   1790 3E 01                ld a,1
0982   1792 32 37 19             ld (CaptPiece),a           
0983   1795             KnAdd:
0984   1795 CD 3F 19             call AddMove         
0985   1798             
0986   1798             KnNo:
0987   1798 FD E5                push iy
0988   179A E1                   pop hl
0989   179B                      
0990   179B DD E1                pop ix
0991   179D D1                   pop de
0992   179E C1                   pop bc
0993   179F C9                   ret 
0994   17A0             
0995   17A0             ;END
0996   17A0             
0997   17A0             ;BEGIN of ========== MOVE GEN for KINGS
0998   17A0             
0999   17A0 2D 01 3D 00 kingMoves: .byte '-',1,'=',0 ,'-',1,'+',1 ,'=',0,'+',1 ,'+',1,'+',1 ,
0999   17A4 2D 01 2B 01 
0999   17A8 3D 00 2B 01 
0999   17AC 2B 01 2B 01 
1000   17B0 2B 01 3D 00            .byte '+',1,'=',0 ,'+',1,'-',1 ,'=',0,'-',1 ,'-',1,'-',1 ,
1000   17B4 2B 01 2D 01 
1000   17B8 3D 00 2D 01 
1000   17BC 2D 01 2D 01 
1001   17C0 00                     .byte 0
1002   17C1                                       
1003   17C1             MoveGenKing:
1004   17C1             
1005   17C1 F5                   push af
1006   17C2 C5                   push bc
1007   17C3 DD E5                push ix
1008   17C5                      
1009   17C5 CD EB 13             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
1010   17C8                      
1011   17C8 3E 04                ld a,4       ; on E?
1012   17CA BA                   cp d
1013   17CB 20 03                jr nz, CastleCantBe
1014   17CD CD 65 18             call CastleMOVES   ; add castling moves without check-verification
1015   17D0                      
1016   17D0             CastleCantBe:
1017   17D0                      
1018   17D0 DD 21 A0 17          ld ix,kingMoves
1019   17D4 06 08                ld b, 8
1020   17D6                      
1021   17D6             KingScan8moves:
1022   17D6 CD E8 17             call KingTryMove
1023   17D9 DD 23                inc ix
1024   17DB DD 23                inc ix
1025   17DD DD 23                inc ix
1026   17DF DD 23                inc ix
1027   17E1 10 F3                djnz KingScan8moves
1028   17E3                                    
1029   17E3 DD E1                pop ix
1030   17E5 C1                   pop bc
1031   17E6 F1                   pop af
1032   17E7 C9                   ret
1033   17E8                      
1034   17E8             ; try move to that square
1035   17E8             KingTryMove:
1036   17E8 C5                   push bc
1037   17E9 D5                   push de
1038   17EA DD E5                push ix
1039   17EC                      
1040   17EC 3E 00                ld a,0
1041   17EE 32 37 19             ld (CaptPiece),a
1042   17F1                               
1043   17F1 DD 7E 00             ld a, (ix)      ;given directions for a..h  -1,+1,=0
1044   17F4 DD 23                inc ix
1045   17F6 FE 3D                cp '='
1046   17F8 28 16                jr z, KgZero1
1047   17FA FE 2D                cp '-'
1048   17FC 28 08                jr z, KgNegX      
1049   17FE 7A                   ld a,d
1050   17FF 3C                   inc a           ;a=direction +1 of X 
1051   1800 FE 08                cp 8
1052   1802 30 59                jr nc, KgOver
1053   1804 18 09                jr KgCanOk1  
1054   1806             KgNegX:
1055   1806 3E 00                ld a,0          ;a=direction -1 of X
1056   1808 BA                   cp d
1057   1809 38 02                jr c, KgCanSubtrX
1058   180B 18 50                jr KgOver
1059   180D             KgCanSubtrX:         
1060   180D 7A                   ld a,d
1061   180E 3D                   dec a 
1062   180F             KgCanOk1:
1063   180F 57                   ld d,a         
1064   1810 DD 23       KgZero1: inc ix
1065   1812                      
1066   1812 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,=0
1067   1815 DD 23                inc ix
1068   1817 FE 3D                cp '='
1069   1819 28 16                jr z, KgZero2        
1070   181B FE 2D                cp '-'
1071   181D 28 08                jr z, KgNegY
1072   181F 7B                   ld a,e
1073   1820 3C                   inc a          ;a=direction +1 of Y  
1074   1821 FE 08                cp 8
1075   1823 30 38                jr nc, KgOver
1076   1825 18 09                jr KgCanOk2   
1077   1827             KgNegY:
1078   1827 3E 00                ld a,0         ;a=direction -1 of Y
1079   1829 BB                   cp e
1080   182A 38 02                jr c, KgCanSubtrY
1081   182C 18 2F                jr KgOver
1082   182E             KgCanSubtrY:         
1083   182E 7B                   ld a, e
1084   182F 3D                   dec a
1085   1830             KgCanOk2:
1086   1830 5F                   ld e,a
1087   1831 DD 23       KgZero2: inc ix         
1088   1833                      
1089   1833 CD FC 13             call StoreSqToMove    ;new SQt,hl        
1090   1836             
1091   1836 3A 81 01             ld a, (SIDE)
1092   1839 FE 01                cp 1
1093   183B 28 0C                jr z,KgThisBlack
1094   183D CD 18 19             call IsBlack           ; enemy?
1095   1840 38 13                jr c,KgCaptMove
1096   1842 CD F9 18             call IsWhite           ; our?
1097   1845 38 16                jr c,KgOver
1098   1847 18 11                jr KgAdd        
1099   1849             KgThisBlack:         
1100   1849 CD F9 18             call IsWhite           ; enemy?
1101   184C 38 07                jr c,KgCaptMove
1102   184E CD 18 19             call IsBlack           ; our?                        
1103   1851 38 0A                jr c,KgOver
1104   1853 18 05                jr KgAdd
1105   1855             KgCaptMove:
1106   1855 3E 01                ld a,1
1107   1857 32 37 19             ld (CaptPiece),a
1108   185A             KgAdd:
1109   185A CD 3F 19             call AddMove
1110   185D             KgOver:
1111   185D FD E5                push iy
1112   185F E1                   pop hl
1113   1860                      
1114   1860 DD E1                pop ix
1115   1862 D1                   pop de
1116   1863 C1                   pop bc
1117   1864 C9                   ret 
1118   1865             
1119   1865             ; Add castling moves to list
1120   1865             CastleMOVES:
1121   1865                                              
1122   1865 3E 00                ld a,0
1123   1867 32 37 19             ld (CaptPiece),a      
1124   186A 3E 01                ld a,1
1125   186C 32 39 19             ld (CastlMove),a
1126   186F                      
1127   186F 0E 01                ld c,1       ; directions 0-King side, 1-Queen side
1128   1871             CastleDirScan:       
1129   1871 3A 82 01             ld a, (CASTLES)
1130   1874 47                   ld b,a       ; b contains castlings flags
1131   1875 7B                   ld a,e
1132   1876 FE 07                cp 7         ; detect king
1133   1878 20 06                jr nz, CstlWhite
1134   187A CB 38                srl b        ; simply roll castling flags for black
1135   187C CB 38                srl b
1136   187E 18 04                jr CstlBegin
1137   1880             CstlWhite:
1138   1880 FE 00                cp 0
1139   1882 20 56                jr nz, CastleBrk    
1140   1884             CstlBegin:
1141   1884 D5                   push de
1142   1885 3E 00                ld a,0
1143   1887 B9                   cp c
1144   1888 28 22                jr z, CstlQside       
1145   188A 78                   ld a,b
1146   188B CB 47                bit 0,a
1147   188D 28 3F                jr z,CstlLoop
1148   188F             CstEmpty1:
1149   188F 14                   inc d
1150   1890 23                   inc hl
1151   1891 7A                   ld a,d
1152   1892 FE 07                cp 7
1153   1894 28 07                jr z, CstlGood1
1154   1896 CD E3 18             call IsEmpty
1155   1899 30 33                jr nc, CstlLoop
1156   189B 18 F2                jr CstEmpty1
1157   189D             CstlGood1:
1158   189D 15                   dec d              ; back h1->g1  or h8->g8
1159   189E 2B                   dec hl
1160   189F 3A 35 13             ld a,(SQi)
1161   18A2 3C                   inc a
1162   18A3 3C                   inc a
1163   18A4 32 36 13             ld (SQt),a
1164   18A7 CD 3F 19             call AddMove
1165   18AA 18 22                jr CstlLoop
1166   18AC             CstlQside:
1167   18AC 78                   ld a,b
1168   18AD CB 48                bit 1,b
1169   18AF 28 1D                jr z,CstlLoop
1170   18B1             CstEmpty2:          
1171   18B1 15                   dec d
1172   18B2 2B                   dec hl
1173   18B3 7A                   ld a,d
1174   18B4 FE 00                cp 0
1175   18B6 28 07                jr z, CstlGood2
1176   18B8 CD E3 18             call IsEmpty
1177   18BB 30 11                jr nc, CstlLoop
1178   18BD 18 F2                jr CstEmpty2
1179   18BF             CstlGood2:
1180   18BF 14                   inc d
1181   18C0 14                   inc d              ; back a1->c1  or a8->c8
1182   18C1 23                   inc hl
1183   18C2 23                   inc hl
1184   18C3 3A 35 13             ld a,(SQi)
1185   18C6 3D                   dec a
1186   18C7 3D                   dec a
1187   18C8 32 36 13             ld (SQt),a
1188   18CB CD 3F 19             call AddMove         
1189   18CE             CstlLoop:
1190   18CE D1                   pop de
1191   18CF 3E 00                ld a,0
1192   18D1 B9                   cp c
1193   18D2 28 06                jr z,CastleBrk
1194   18D4 0D                   dec c
1195   18D5                      
1196   18D5 FD E5                push iy
1197   18D7 E1                   pop hl   ; restore hl
1198   18D8                      
1199   18D8 18 97                jr CastleDirScan    ;Next direction
1200   18DA                      
1201   18DA             CastleBrk:         
1202   18DA FD E5                push iy
1203   18DC E1                   pop hl   ; restore hl
1204   18DD                      
1205   18DD 3E 00                ld a,0
1206   18DF 32 39 19             ld (CastlMove),a                    
1207   18E2             
1208   18E2 C9                   ret
1209   18E3             
1210   18E3             ;END
1211   18E3             
1212   18E3             ;BEGIN of ========== Is empty square?
1213   18E3             
1214   18E3             IsEmpty:
1215   18E3 7E                   ld a, (hl)
1216   18E4 FE 00                cp 0
1217   18E6 28 04                jr z, EmptySqIs
1218   18E8 37                   scf
1219   18E9 3F                   ccf
1220   18EA 18 01                jr EmptySqOver
1221   18EC             EmptySqIs:
1222   18EC 37                   scf
1223   18ED             EmptySqOver:
1224   18ED C9                   ret           
1225   18EE             ;END
1226   18EE             
1227   18EE             ;BEGIN of ========== Is square occupied?
1228   18EE             
1229   18EE             IsOccupied:
1230   18EE 7E                   ld a, (hl)
1231   18EF FE 00                cp 0
1232   18F1 28 04                jr z, OccupiedSqIs
1233   18F3 37                   scf
1234   18F4 3F                   ccf
1235   18F5 18 01                jr OccupiedSqOver
1236   18F7             OccupiedSqIs:
1237   18F7 37                   scf
1238   18F8             OccupiedSqOver:
1239   18F8 C9                   ret           
1240   18F9             ;END
1241   18F9             
1242   18F9             
1243   18F9             ;BEGIN of ========== Is piece white?
1244   18F9             
1245   18F9             IsWhite:
1246   18F9 7E                   ld a, (hl)
1247   18FA FE 50                cp 'P'
1248   18FC 28 18                jr z, WhitePcIs
1249   18FE FE 4E                cp 'N'
1250   1900 28 14                jr z, WhitePcIs
1251   1902 FE 42                cp 'B'
1252   1904 28 10                jr z, WhitePcIs
1253   1906 FE 52                cp 'R'
1254   1908 28 0C                jr z, WhitePcIs
1255   190A FE 51                cp 'Q'
1256   190C 28 08                jr z, WhitePcIs
1257   190E FE 4B                cp 'K'
1258   1910 28 04                jr z, WhitePcIs
1259   1912 37                   scf
1260   1913 3F                   ccf
1261   1914 18 01                jr WhitePcOver
1262   1916             WhitePcIs:
1263   1916 37                   scf
1264   1917             WhitePcOver:
1265   1917 C9                   ret    
1266   1918             
1267   1918             ;END
1268   1918             
1269   1918             ;BEGIN of ========== Is piece black?
1270   1918             
1271   1918             IsBlack:
1272   1918 7E                   ld a, (hl)
1273   1919 FE 70                cp 'p'
1274   191B 28 18                jr z, BlackPcIs
1275   191D FE 6E                cp 'n'
1276   191F 28 14                jr z, BlackPcIs
1277   1921 FE 62                cp 'b'
1278   1923 28 10                jr z, BlackPcIs
1279   1925 FE 72                cp 'r'
1280   1927 28 0C                jr z, BlackPcIs
1281   1929 FE 71                cp 'q'
1282   192B 28 08                jr z, BlackPcIs
1283   192D FE 6B                cp 'k'
1284   192F 28 04                jr z, BlackPcIs
1285   1931 37                   scf
1286   1932 3F                   ccf
1287   1933 18 01                jr BlackPcOver
1288   1935             BlackPcIs:
1289   1935 37                   scf
1290   1936             BlackPcOver:
1291   1936 C9                   ret    
1292   1937             
1293   1937             ;END
1294   1937             
1295   1937             ;BEGIN of ========== ADD NEW MOVE to the list with verification
1296   1937             
1297   1937             ;various flags
1298   1937 00          CaptPiece:  .byte 0
1299   1938 00          PromoPcId:  .byte 0
1300   1939 00          CastlMove:  .byte 0
1301   193A             
1302   193A             AddMovPromo:
1303   193A 3E 04                ld a,4
1304   193C 32 38 19             ld (PromoPcId),a        ; pawns may promote, so this counter is like promoted-piece-id of Q,R.B.N
1305   193F             AddMove:
1306   193F F5                   push af
1307   1940                      
1308   1940 CD D5 1D             call ValidateKingCheck  ; this verifies if king is attacked after movement, or can not castle
1309   1943 FE 00                cp 0
1310   1945 28 02                jr z,AddMLegal          ; if valid move
1311   1947                      
1312   1947 18 59                jr fAddMVover
1313   1949                      
1314   1949             AddMLegal:
1315   1949 3A 37 13             ld a, (MateDetect)
1316   194C FE 00                cp 0
1317   194E 28 07                jr z, AddMNormalCase
1318   1950                     
1319   1950 3E 02                ld a,2                  ; we found a legal move, so not checkmate
1320   1952 32 37 13             ld (MateDetect),a
1321   1955 18 4B                jr fAddMVover   
1322   1957                      
1323   1957             AddMNormalCase:         
1324   1957                               
1325   1957 C5                   push bc
1326   1958 DD E5                push ix
1327   195A DD 21 92 04          ld ix, NEXT_MVCNT
1328   195E DD 4E 00             ld c, (ix)     ;n
1329   1961 06 00                ld b, 0
1330   1963 DD 34 00             inc (ix)       ;n=n+1
1331   1966 DD 21 93 04          ld ix, NEXT_MOVES
1332   196A CB 21                sla c
1333   196C CB 21                sla c
1334   196E DD 09                add ix, bc     ;n*(piece,from,to,flags)
1335   1970 FD 7E 00             ld a, (iy)     ;piece
1336   1973 FE 61                cp 'a'
1337   1975 38 02                jr c, addMVupperAlready
1338   1977 D6 20                sub 32         ;to uppercase
1339   1979                      
1340   1979             addMVupperAlready:         
1341   1979 DD 77 00             ld (ix), a
1342   197C DD 23                inc ix
1343   197E                              
1344   197E 3A 35 13             ld a, (SQi)    ;from square
1345   1981 DD 77 00             ld (ix), a
1346   1984 DD 23                inc ix
1347   1986                              
1348   1986 3A 36 13             ld a, (SQt)    ;to square
1349   1989 DD 77 00             ld (ix), a
1350   198C DD 23                inc ix
1351   198E                      
1352   198E                      ; and add one byte for flags
1353   198E                      
1354   198E 3A 37 19             ld a, (CaptPiece)
1355   1991 47                   ld b, a                ; bit 0 - captured a piece
1356   1992             
1357   1992 3A 38 19             ld a, (PromoPcId)
1358   1995 FE 00                cp 0
1359   1997 28 25                jr z, addMVnoprom
1360   1999                               
1361   1999 3A 36 13             ld a, (SQt)    ;to
1362   199C FE 38                cp 64-8        ;row 8?
1363   199E 38 04                jr c, addMVq
1364   19A0 18 06                jr addMVpromos
1365   19A2                      
1366   19A2             fAddMVover:
1367   19A2 18 48                jr AddMVover 
1368   19A4                      
1369   19A4             addMVq:
1370   19A4 FE 08                cp 8           ;row 1?
1371   19A6 30 16                jr nc, addMVnoprom
1372   19A8             
1373   19A8             addMVpromos:         
1374   19A8 CB C8                set 1,b                ; bit 1 - promotion, bits 2,3 - promoted piece Nr. Q=3,R=2,B=1,N=0   
1375   19AA 3A 38 19             ld a, (PromoPcId)
1376   19AD 3D                   dec a
1377   19AE 32 38 19             ld (PromoPcId),a
1378   19B1 FE 00                cp 0
1379   19B3 28 03                jr z, addMVp2
1380   19B5                      
1381   19B5 CD 3F 19             call AddMove          ; promotion move for all other pieces, check detection lags here     
1382   19B8                      
1383   19B8             addMVp2:        
1384   19B8 CB 27                sla a
1385   19BA CB 27                sla a
1386   19BC B0                   or b
1387   19BD 47                   ld b,a       
1388   19BE                
1389   19BE             addMVnoprom:
1390   19BE 3A 39 19             ld a, (CastlMove)
1391   19C1 FE 00                cp 0
1392   19C3 28 02                jr z, addMVnoCastle
1393   19C5 CB E0                set 4,b                ; bit 4 - castling indicator
1394   19C7             addMVnoCastle:
1395   19C7             
1396   19C7 3A 37 19             ld a, (CaptPiece)
1397   19CA FE 00                cp 0
1398   19CC 28 10                jr z,addMVnoEP
1399   19CE 3A 83 01             ld a, (ENPSQ)
1400   19D1 FE FF                cp $ff
1401   19D3 28 09                jr z,addMVnoEP 
1402   19D5 4F                   ld c,a
1403   19D6 3A 36 13             ld a, (SQt)
1404   19D9 B9                   cp c
1405   19DA 20 02                jr nz,addMVnoEP
1406   19DC CB E8                set 5,b                ; bit 5 - en-passant capture
1407   19DE                                             ; bit 6 - later for check+ detection
1408   19DE                                             ; bit 7 - later for checkmate detection
1409   19DE             addMVnoEP:
1410   19DE                                                 
1411   19DE DD 70 00             ld (ix), b
1412   19E1 DD 23                inc ix
1413   19E3                      
1414   19E3 DD E1                pop ix
1415   19E5 C1                   pop bc        
1416   19E6                                                                                         
1417   19E6 CD 47 21             call MakeMove         ; check+ detection action, with checkmate detection later
1418   19E9 CD 1E 25             call UnMakeMove
1419   19EC                                      
1420   19EC             AddMVover:
1421   19EC F1                   pop af         
1422   19ED C9                   ret
1423   19EE             
1424   19EE             ;END
1425   19EE             
1426   19EE             
1427   19EE             ;BEGIN of ========== Composes notation string for output for current list of generated moves
1428   19EE             ;                   (last by MOVE GENs) 
1429   19EE             
1430   19EE             MovesToStr:
1431   19EE F5                   push af
1432   19EF C5                   push bc
1433   19F0 D5                   push de
1434   19F1 DD E5                push ix
1435   19F3                      
1436   19F3 11 86 01             ld de, NEXT_MVSTR
1437   19F6 DD 21 92 04          ld ix, NEXT_MVCNT
1438   19FA             
1439   19FA DD 46 00             ld b,(ix)
1440   19FD DD 21 93 04          ld ix, NEXT_MOVES
1441   1A01 78                   ld a, b
1442   1A02 FE 00                cp 0
1443   1A04 28 5B                jr z, MV2sEndSymb 
1444   1A06                      
1445   1A06             MV2sToLoop:
1446   1A06             
1447   1A06 DD 7E 00             ld a, (ix)   ; piece
1448   1A09 FE 50                cp 'P'
1449   1A0B 28 02                jr z, MV2sNoPieceNotate
1450   1A0D 12                   ld (de),a
1451   1A0E 13                   inc de
1452   1A0F             MV2sNoPieceNotate:
1453   1A0F DD 23                inc ix
1454   1A11                             
1455   1A11 CD B7 1A             call MC2getSQ   ; from square
1456   1A14 13                   inc de    
1457   1A15 13                   inc de
1458   1A16 CD B7 1A             call MC2getSQ   ; to square
1459   1A19 1B                   dec de    
1460   1A1A 1B                   dec de
1461   1A1B                                        
1462   1A1B DD 7E 00             ld a, (ix)    ; flags
1463   1A1E CB 67                bit 4,a
1464   1A20 28 05                jr z,MV2sNoCastle
1465   1A22 CD 98 1A             call MC2sCASTLEs   ; redraws castling 0-0 or 0-0-0      
1466   1A25 18 1B                jr MV2sNoProm    
1467   1A27             MV2sNoCastle:
1468   1A27 DD 7E 00             ld a, (ix)    ; flags again
1469   1A2A CB 47                bit 0,a
1470   1A2C 28 04                jr z, MV2sNoCapt
1471   1A2E 3E 78                ld a, 'x'
1472   1A30 18 02                jr MV2xTo
1473   1A32             MV2sNoCapt:
1474   1A32 3E 2D                ld a, '-'
1475   1A34             MV2xTo:         
1476   1A34 12                   ld (de),a
1477   1A35 13                   inc de        
1478   1A36 13                   inc de
1479   1A37 13                   inc de
1480   1A38                             
1481   1A38 DD 7E 00             ld a, (ix)    ; possibly promotion
1482   1A3B CB 4F                bit 1,a
1483   1A3D 28 03                jr z, MV2sNoProm
1484   1A3F                      
1485   1A3F CD 6E 1A             call MV2sPromotion ; add piece promotion text =Q..N 
1486   1A42             
1487   1A42             MV2sNoProm:
1488   1A42 DD 7E 00             ld a, (ix)    ; possibly check+
1489   1A45 CB 77                bit 6,a
1490   1A47 28 0F                jr z, MV2sNoCheck
1491   1A49                      
1492   1A49 DD 7E 00             ld a, (ix)    ; possibly checkmate
1493   1A4C CB 7F                bit 7,a
1494   1A4E 28 04                jr z, MV2sJustCheck
1495   1A50             
1496   1A50 3E 23                ld a, '#'
1497   1A52 18 02                jr MV2sCk1
1498   1A54                      
1499   1A54             MV2sJustCheck:         
1500   1A54 3E 2B                ld a, '+'
1501   1A56 12          MV2sCk1: ld (de),a        
1502   1A57 13                   inc de         
1503   1A58                      
1504   1A58             MV2sNoCheck:                     
1505   1A58 DD 23                inc ix
1506   1A5A                              
1507   1A5A 3E 2C                ld a, ','
1508   1A5C 12                   ld (de),a        
1509   1A5D 13                   inc de
1510   1A5E                      
1511   1A5E 10 A6                djnz MV2sToLoop
1512   1A60 1B                   dec de
1513   1A61                      
1514   1A61             MV2sEndSymb:         
1515   1A61 3E 24                ld a, '$'
1516   1A63 12                   ld (de),a         
1517   1A64 13                   inc de
1518   1A65 3E 00                ld a, 0
1519   1A67 12                   ld (de),a 
1520   1A68                              
1521   1A68 DD E1                pop ix
1522   1A6A D1                   pop de
1523   1A6B C1                   pop bc
1524   1A6C F1                   pop af
1525   1A6D C9                   ret
1526   1A6E             
1527   1A6E             MV2sPromotion:
1528   1A6E             
1529   1A6E 3E 3D                ld a, '='
1530   1A70 12                   ld (de),a
1531   1A71 13                   inc de
1532   1A72                               
1533   1A72 DD 7E 00             ld a, (ix)    ; which piece?
1534   1A75 CB 3F                srl a
1535   1A77 CB 3F                srl a
1536   1A79 E6 03                and 3         ; 0..3 piece Id
1537   1A7B FE 03                cp 3          ; Queen?
1538   1A7D 20 04                jr nz, MC2sNoQ
1539   1A7F 3E 51                ld a, 'Q'
1540   1A81 18 12                jr MC2sPrId         
1541   1A83 FE 02       MC2sNoQ: cp 2          ; Rook?
1542   1A85 20 04                jr nz, MC2sNoR
1543   1A87 3E 52                ld a, 'R'
1544   1A89 18 0A                jr MC2sPrId        
1545   1A8B FE 01       MC2sNoR: cp 1          ; Bishop?
1546   1A8D 20 04                jr nz, MC2sNoB
1547   1A8F 3E 42                ld a, 'B'
1548   1A91 18 02                jr MC2sPrId
1549   1A93 3E 4E       MC2sNoB: ld a, 'N'     ; Knight
1550   1A95             MC2sPrId:
1551   1A95 12                   ld (de),a
1552   1A96 13                   inc de
1553   1A97 C9                   ret
1554   1A98                       
1555   1A98             MC2sCASTLEs:           ; simply rewrites characters in buffer 
1556   1A98             
1557   1A98 13                   inc de
1558   1A99 1A                   ld a,(de)
1559   1A9A 1B                   dec de
1560   1A9B 1B                   dec de
1561   1A9C 1B                   dec de
1562   1A9D 1B                   dec de
1563   1A9E FE 63                cp 'c'
1564   1AA0 20 08                jr nz,MC2sShort       
1565   1AA2 3E 30                ld a, '0'     ; 0-0-0
1566   1AA4 12                   ld (de),a
1567   1AA5 13                   inc de
1568   1AA6 3E 2D                ld a, '-'
1569   1AA8 12                   ld (de),a
1570   1AA9 13                   inc de
1571   1AAA             MC2sShort:
1572   1AAA 3E 30                ld a, '0'     ; just 0-0 part
1573   1AAC 12                   ld (de),a
1574   1AAD 13                   inc de
1575   1AAE 3E 2D                ld a, '-'
1576   1AB0 12                   ld (de),a
1577   1AB1 13                   inc de
1578   1AB2 3E 30                ld a, '0'
1579   1AB4 12                   ld (de),a
1580   1AB5 13                   inc de                           
1581   1AB6             
1582   1AB6 C9                   ret
1583   1AB7             ; get square and store to text string
1584   1AB7             MC2getSQ:
1585   1AB7 DD 7E 00             ld a, (ix)
1586   1ABA E6 07                and 7
1587   1ABC C6 61                add a, 'a'
1588   1ABE 12                   ld (de),a        
1589   1ABF 13                   inc de
1590   1AC0 DD 7E 00             ld a, (ix)
1591   1AC3 CB 3F                srl a
1592   1AC5 CB 3F                srl a
1593   1AC7 CB 3F                srl a
1594   1AC9 C6 31                add a, '1'
1595   1ACB 12                   ld (de),a
1596   1ACC DD 23                inc ix
1597   1ACE C9                   ret
1598   1ACF             
1599   1ACF             ; printing of current legal moves to output
1600   1ACF             MovesOut:
1601   1ACF D5                   push de
1602   1AD0 11 86 01             ld de, NEXT_MVSTR
1603   1AD3 CD A6 38             call PrintString
1604   1AD6 D1                   pop de
1605   1AD7 C9                   ret
1606   1AD8             
1607   1AD8             ;END        
1608   1AD8             
1609   1AD8             ;BEGIN of ========== SET FEN position on BOARD and variables
1610   1AD8             ;
1611   1AD8             ; parameter: a-reg
1612   1AD8             ;  0 - set by using startFEN
1613   1AD8             ;  1 - set fen provided in IX register
1614   1AD8             ;
1615   1AD8             SetFEN:
1616   1AD8 F5                   push af
1617   1AD9 C5                   push bc
1618   1ADA D5                   push de
1619   1ADB E5                   push hl
1620   1ADC             
1621   1ADC FE 00                cp 0
1622   1ADE 28 05                jr z, SetFENstartpos
1623   1AE0 DD E5                push ix
1624   1AE2 D1                   pop de   ;de contains FEN address now
1625   1AE3 18 03                jr SetFENp
1626   1AE5             SetFENstartpos:         
1627   1AE5 11 07 01             ld de, startFEN
1628   1AE8 3E FF       SetFENp: ld a,$ff
1629   1AEA 32 84 01             ld (WKSQ),a
1630   1AED 32 85 01             ld (BKSQ),a
1631   1AF0 CD 1F 1D             call SetSqScan
1632   1AF3 CD 28 1D             call ScanSqNxt
1633   1AF6 06 40                ld b, 64
1634   1AF8             setBoardSquare:
1635   1AF8 1A                   ld a, (de)
1636   1AF9 13                   inc de
1637   1AFA FE 2F                cp '/'
1638   1AFC 28 FA                jr z, setBoardSquare
1639   1AFE 4F                   ld c, a
1640   1AFF FE 31                cp '1'
1641   1B01 38 16                jr c, notFenDigit  ;ifA<'1' then jump
1642   1B03 FE 39                cp '9'
1643   1B05 30 12                jr nc, notFenDigit ;ifA>='9' then jump
1644   1B07 D6 30                sub '0'
1645   1B09 4F                   ld c,a
1646   1B0A             setFenEmptyPiece:
1647   1B0A 36 00                ld (hl), 0
1648   1B0C CD 28 1D             call ScanSqNxt
1649   1B0F 0D                   dec c
1650   1B10 05                   dec b
1651   1B11 79                   ld a,c
1652   1B12 FE 00                cp 0
1653   1B14 20 F4                jr nz, setFenEmptyPiece
1654   1B16 04                   inc b
1655   1B17 18 1A                jr nextFenPiece
1656   1B19             notFenDigit:
1657   1B19 77                   ld (hl),a
1658   1B1A FE 4B                cp 'K'
1659   1B1C 20 07                jr nz, setFenNoWK
1660   1B1E CD 4E 1D             call GetScanSQ
1661   1B21 32 84 01             ld (WKSQ),a
1662   1B24 7E                   ld a,(hl)
1663   1B25             setFenNoWK:
1664   1B25 FE 6B                cp 'k'
1665   1B27 20 07                jr nz, setFenNoBK
1666   1B29 CD 4E 1D             call GetScanSQ
1667   1B2C 32 85 01             ld (BKSQ),a
1668   1B2F 7E                   ld a,(hl)
1669   1B30             setFenNoBK:         
1670   1B30 CD 28 1D             call ScanSqNxt
1671   1B33             nextFenPiece:
1672   1B33 10 C3                djnz setBoardSquare
1673   1B35                      
1674   1B35 13                   inc de                 ; detects which side to move
1675   1B36 1A                   ld a, (de)
1676   1B37 FE 77                cp 'w'
1677   1B39 20 04                jr nz,setFenBlackMv
1678   1B3B 3E 00                ld a,0
1679   1B3D 18 02                jr setFenCol2Mv
1680   1B3F             setFenBlackMv:
1681   1B3F 3E 01                ld a,1
1682   1B41             setFenCol2Mv:
1683   1B41 32 81 01             ld (SIDE),a
1684   1B44 13                   inc de
1685   1B45 13                   inc de
1686   1B46             
1687   1B46 06 00                ld b,0           
1688   1B48             setFenCastlings:
1689   1B48 1A                   ld a, (de)
1690   1B49 13                   inc de
1691   1B4A FE 20                cp ' '
1692   1B4C 28 24                jr z,setFenCsOver ; break loop
1693   1B4E              
1694   1B4E FE 2D                cp '-'
1695   1B50 28 1E                jr z,setFenCs     ; just skip
1696   1B52             
1697   1B52 FE 4B                cp 'K'
1698   1B54 20 04                jr nz,setFenC2
1699   1B56 CB C0                set 0,b
1700   1B58 18 16                jr setFenCs
1701   1B5A             setFenC2:
1702   1B5A FE 51                cp 'Q'
1703   1B5C 20 04                jr nz,setFenC3
1704   1B5E CB C8                set 1,b
1705   1B60 18 0E                jr setFenCs
1706   1B62             setFenC3:
1707   1B62 FE 6B                cp 'k'
1708   1B64 20 04                jr nz,setFenC4
1709   1B66 CB D0                set 2,b
1710   1B68 18 06                jr setFenCs
1711   1B6A             setFenC4:
1712   1B6A FE 71                cp 'q'
1713   1B6C 20 02                jr nz,setFenCs
1714   1B6E CB D8                set 3,b     
1715   1B70             setFenCs:
1716   1B70 18 D6                jr setFenCastlings ;just go next      
1717   1B72             setFenCsOver:
1718   1B72 78                   ld a,b
1719   1B73 32 82 01             ld (CASTLES),a
1720   1B76                      
1721   1B76 1A                   ld a, (de)           ; is en-passant square provided?
1722   1B77 13                   inc de
1723   1B78 FE 2D                cp '-'
1724   1B7A 28 10                jr z,setFenNoEnp     ; just skip
1725   1B7C D6 61                sub 'a'
1726   1B7E 47                   ld b,a         
1727   1B7F 1A                   ld a, (de)
1728   1B80 13                   inc de
1729   1B81 D6 31                sub '1'
1730   1B83 CB 27                sla a
1731   1B85 CB 27                sla a
1732   1B87 CB 27                sla a       
1733   1B89 B0                   or b                 ; reg-a = given en-passant square
1734   1B8A 18 02                jr setFenENPsq     
1735   1B8C             setFenNoEnp:
1736   1B8C 3E FF                ld a,$ff
1737   1B8E             setFenENPsq:
1738   1B8E 32 83 01             ld (ENPSQ),a         ; save en-passant square
1739   1B91             
1740   1B91 13                   inc de
1741   1B92 3E 00                ld a,0
1742   1B94 32 B3 0E             ld (MOVE_CNT),a
1743   1B97                                                                                                                                                                                                                
1744   1B97 E1                   pop hl
1745   1B98 D1                   pop de
1746   1B99 C1                   pop bc
1747   1B9A F1                   pop af
1748   1B9B C9                   ret
1749   1B9C             
1750   1B9C             ;END
1751   1B9C             
1752   1B9C             ;BEGIN of ========== GET FEN position from BOARD and variables
1753   1B9C             ;
1754   1B9C             ; parameter:  address in DE register for resulting string,
1755   1B9C             ;   ends with $, can be printed right after
1756   1B9C             ;
1757   1B9C             GetFEN:
1758   1B9C F5                   push af
1759   1B9D C5                   push bc
1760   1B9E D5                   push de
1761   1B9F E5                   push hl
1762   1BA0 DD E5                push ix
1763   1BA2                      
1764   1BA2 D5                   push de
1765   1BA3 DD E1                pop ix        ; ix = de
1766   1BA5                   
1767   1BA5 CD 1F 1D             call SetSqScan
1768   1BA8 06 40                ld b,64
1769   1BAA 16 00                ld d,0        ; current column
1770   1BAC             getBoardSquare:
1771   1BAC                               
1772   1BAC 7A                   ld a,d
1773   1BAD FE 08                cp 8           ; if slash for new line
1774   1BAF 20 09                jr nz,getBoNsl
1775   1BB1                      
1776   1BB1 3E 2F                ld a,'/'
1777   1BB3 DD 77 00             ld (ix),a
1778   1BB6 DD 23                inc ix
1779   1BB8 16 00                ld d,0
1780   1BBA             getBoNsl:
1781   1BBA CD 28 1D             call ScanSqNxt
1782   1BBD 7E                   ld a, (hl)
1783   1BBE             
1784   1BBE FE 00                cp 0
1785   1BC0 28 06                jr z,getBo0
1786   1BC2 FE 20                cp ' '
1787   1BC4 28 02                jr z,getBo0  ; if empty square or space
1788   1BC6 18 1E                jr getBoNo0
1789   1BC8             getBo0:         
1790   1BC8 7A                   ld a,d
1791   1BC9 FE 00                cp 0
1792   1BCB 20 04                jr nz,getBoC2
1793   1BCD 3E 31       getBo1:  ld a,'1'          ; first space
1794   1BCF 18 15                jr getBoNo0
1795   1BD1             getBoC2:
1796   1BD1 DD 2B                dec ix         
1797   1BD3 DD 7E 00             ld a,(ix)
1798   1BD6 DD 23                inc ix
1799   1BD8 D6 31                sub '1'
1800   1BDA 38 F1                jr c,getBo1         
1801   1BDC FE 08                cp 8
1802   1BDE 30 ED                jr nc,getBo1
1803   1BE0 DD 2B                dec ix         
1804   1BE2 DD 7E 00             ld a,(ix)
1805   1BE5 3C                   inc a            ; char+1 counter of empty squares
1806   1BE6             getBoNo0:
1807   1BE6 DD 77 00             ld (ix),a
1808   1BE9 DD 23                inc ix
1809   1BEB                      
1810   1BEB 14                   inc d
1811   1BEC 10 BE                djnz getBoardSquare  ; scan all 64 squares    
1812   1BEE                      
1813   1BEE CD 8D 1C             call getBo_      ; space
1814   1BF1                      
1815   1BF1 3A 81 01             ld a,(SIDE)      ; side to move
1816   1BF4 FE 00                cp 0
1817   1BF6 20 04                jr nz,getBoB
1818   1BF8 3E 77                ld a,'w'
1819   1BFA 18 02                jr getBoSd
1820   1BFC 3E 62       getBoB:  ld a,'b'
1821   1BFE DD 77 00    getBoSd: ld (ix),a
1822   1C01 DD 23                inc ix
1823   1C03                               
1824   1C03 CD 8D 1C             call getBo_
1825   1C06             
1826   1C06 3A 82 01             ld a,(CASTLES)
1827   1C09 47                   ld b,a
1828   1C0A E6 0F                and %00001111
1829   1C0C FE 00                cp 0
1830   1C0E 28 2E                jr z,getBoNoCst
1831   1C10 CB 40                bit 0,b
1832   1C12 28 07                jr z,getBnWK
1833   1C14 3E 4B                ld a,'K'
1834   1C16 DD 77 00             ld (ix),a
1835   1C19 DD 23                inc ix
1836   1C1B             getBnWK:  
1837   1C1B CB 48                bit 1,b
1838   1C1D 28 07                jr z,getBnWQ
1839   1C1F 3E 51                ld a,'Q'
1840   1C21 DD 77 00             ld (ix),a
1841   1C24 DD 23                inc ix
1842   1C26             getBnWQ:  
1843   1C26 CB 50                bit 2,b
1844   1C28 28 07                jr z,getBnBK
1845   1C2A 3E 6B                ld a,'k'
1846   1C2C DD 77 00             ld (ix),a
1847   1C2F DD 23                inc ix
1848   1C31             getBnBK:  
1849   1C31 CB 58                bit 3,b
1850   1C33 28 0C                jr z,getBoCsOver
1851   1C35 3E 71                ld a,'q'
1852   1C37 DD 77 00             ld (ix),a
1853   1C3A DD 23                inc ix         
1854   1C3C 18 03                jr getBoCsOver
1855   1C3E                               
1856   1C3E             getBoNoCst:
1857   1C3E CD 95 1C             call getBoM    ; sign - 
1858   1C41             getBoCsOver:
1859   1C41             
1860   1C41 CD 8D 1C             call getBo_
1861   1C44             
1862   1C44 3A 83 01             ld a,(ENPSQ)   ; add en-passant info
1863   1C47 FE FF                cp $ff
1864   1C49 28 1A                jr z,getBoNoEp
1865   1C4B 47                   ld b,a
1866   1C4C E6 07                and 7
1867   1C4E C6 61                add a,'a'
1868   1C50 DD 77 00             ld (ix),a
1869   1C53 DD 23                inc ix
1870   1C55 78                   ld a,b
1871   1C56 CB 3F                srl a
1872   1C58 CB 3F                srl a
1873   1C5A CB 3F                srl a
1874   1C5C C6 31                add a,'1'
1875   1C5E DD 77 00             ld (ix),a
1876   1C61 DD 23                inc ix
1877   1C63 18 03                jr getBoEpOver
1878   1C65             getBoNoEp:
1879   1C65 CD 95 1C             call getBoM    ; sign - 
1880   1C68             getBoEpOver:
1881   1C68 CD 8D 1C             call getBo_
1882   1C6B             
1883   1C6B 3E 30                ld a,'0'       ; ignore halfmoves
1884   1C6D DD 77 00             ld (ix),a
1885   1C70 DD 23                inc ix
1886   1C72                      
1887   1C72 CD 8D 1C             call getBo_
1888   1C75                      
1889   1C75 3A B3 0E             ld a,(MOVE_CNT)
1890   1C78 CB 3F                srl a          ; =1+int(/2)
1891   1C7A C6 31                add a,'1'
1892   1C7C DD 77 00             ld (ix),a
1893   1C7F DD 23                inc ix
1894   1C81                      
1895   1C81 3E 24                ld a,'$'
1896   1C83 DD 77 00             ld (ix),a
1897   1C86                      
1898   1C86 DD E1                pop ix                                                                                                                                                                                           
1899   1C88 E1                   pop hl
1900   1C89 D1                   pop de
1901   1C8A C1                   pop bc
1902   1C8B F1                   pop af
1903   1C8C C9                   ret
1904   1C8D                      
1905   1C8D 3E 20       getBo_:  ld a,' '
1906   1C8F DD 77 00             ld (ix),a
1907   1C92 DD 23                inc ix
1908   1C94 C9                   ret         
1909   1C95 3E 2D       getBoM:  ld a,'-'
1910   1C97 DD 77 00             ld (ix),a
1911   1C9A DD 23                inc ix
1912   1C9C C9                   ret         
1913   1C9D                      
1914   1C9D             
1915   1C9D             ;END
1916   1C9D             
1917   1C9D             ;BEGIN of ========== BOARD printing out
1918   1C9D             
1919   1C9D             BoardOut:
1920   1C9D 2E 2E 2E 2E         .byte "........", 13, 10   ;output string
1920   1CA1 2E 2E 2E 2E 
1920   1CA5 0D 0A 
1921   1CA7 2E 2E 2E 2E         .byte "........", 13, 10
1921   1CAB 2E 2E 2E 2E 
1921   1CAF 0D 0A 
1922   1CB1 2E 2E 2E 2E         .byte "........", 13, 10
1922   1CB5 2E 2E 2E 2E 
1922   1CB9 0D 0A 
1923   1CBB 2E 2E 2E 2E         .byte "........", 13, 10
1923   1CBF 2E 2E 2E 2E 
1923   1CC3 0D 0A 
1924   1CC5 2E 2E 2E 2E         .byte "........", 13, 10
1924   1CC9 2E 2E 2E 2E 
1924   1CCD 0D 0A 
1925   1CCF 2E 2E 2E 2E         .byte "........", 13, 10
1925   1CD3 2E 2E 2E 2E 
1925   1CD7 0D 0A 
1926   1CD9 2E 2E 2E 2E         .byte "........", 13, 10
1926   1CDD 2E 2E 2E 2E 
1926   1CE1 0D 0A 
1927   1CE3 2E 2E 2E 2E         .byte "........", 13, 10
1927   1CE7 2E 2E 2E 2E 
1927   1CEB 0D 0A 
1928   1CED 24 00               .byte "$", 0   
1929   1CEF                     
1930   1CEF             printBOARD:
1931   1CEF F5                   push af
1932   1CF0 C5                   push bc
1933   1CF1 D5                   push de
1934   1CF2 E5                   push hl
1935   1CF3 06 08                ld b, 8
1936   1CF5 CD 1F 1D             call SetSqScan
1937   1CF8 11 9D 1C             ld de, BoardOut
1938   1CFB             printBoardLine:
1939   1CFB 0E 08                ld c, 8
1940   1CFD             printCharsInLine:         
1941   1CFD CD 28 1D             call ScanSqNxt
1942   1D00 7E                   ld a, (hl)
1943   1D01 FE 00                cp 0
1944   1D03 20 02                jr nz, printCh1
1945   1D05 3E 20                ld a, ' '            ; Empty square     
1946   1D07             printCh1:
1947   1D07 12                   ld (de), a
1948   1D08 13                   inc de
1949   1D09 0D                   dec c
1950   1D0A 79                   ld a,c
1951   1D0B FE 00                cp 0
1952   1D0D 20 EE                jr nz, printCharsInLine   ; 8x8
1953   1D0F 13                   inc de                    ; chr(13)+chr(10)
1954   1D10 13                   inc de
1955   1D11 10 E8                djnz printBoardLine
1956   1D13             
1957   1D13 11 9D 1C             ld de, BoardOut
1958   1D16 CD A6 38             call PrintString
1959   1D19             
1960   1D19 E1                   pop hl
1961   1D1A D1                   pop de
1962   1D1B C1                   pop bc
1963   1D1C F1                   pop af
1964   1D1D C9                   ret
1965   1D1E             ;END
1966   1D1E             
1967   1D1E             
1968   1D1E             ;BEGIN of ========== BOARD scanning A1,B1,...,H1,A2,B2...,H8
1969   1D1E             
1970   1D1E             ; board order on screen or FEN notation is A8,B8,...,H8,A7,B7.... H1
1971   1D1E             ; so we go to square 57 then scan to 63, then jump to 49 ... till last square is 7 
1972   1D1E             
1973   1D1E 00          ScanSqC:  .byte 0   ;counter 1..8, reg HL contains pointer to BOARD square 
1974   1D1F             
1975   1D1F             SetSqScan:
1976   1D1F 21 1E 1D             ld hl, ScanSqC
1977   1D22 36 00                ld (hl),0              ; +1 for first loop 
1978   1D24 21 77 01             ld hl, BOARD+64-8-1
1979   1D27 C9                   ret
1980   1D28             ScanSqNxt:
1981   1D28 F5                   push af         
1982   1D29 C5                   push bc
1983   1D2A DD E5                push ix
1984   1D2C DD 21 1E 1D          ld ix, ScanSqC
1985   1D30 DD 34 00             inc (ix)
1986   1D33 DD 7E 00             ld a,(ix)
1987   1D36 FE 09                cp 8+1
1988   1D38 28 06                jr z, ScanSqNxtRow
1989   1D3A 23                   inc hl                 ;just next square
1990   1D3B             retSqScan:         
1991   1D3B DD E1                pop ix
1992   1D3D C1                   pop bc
1993   1D3E F1                   pop af
1994   1D3F C9                   ret
1995   1D40             ScanSqNxtRow:
1996   1D40 3E 01                ld a,1
1997   1D42 DD 77 00             ld (ix),a
1998   1D45 01 0F 00             ld bc, 8+7           ;square of previous row, -7
1999   1D48 37                   scf
2000   1D49 3F                   ccf
2001   1D4A ED 42                sbc hl, bc           ;there is no sub oper., so we use sbc                          
2002   1D4C 18 ED                jr retSqScan
2003   1D4E             GetScanSQ:                   ; returns current square I
2004   1D4E C5                   push bc
2005   1D4F E5                   push hl
2006   1D50 01 40 01             ld bc, BOARD
2007   1D53 37                   scf
2008   1D54 3F                   ccf
2009   1D55 ED 42                sbc hl, bc          ; difference BOARD - hl-reg
2010   1D57                       
2011   1D57 E5                   push hl
2012   1D58 C1                   pop bc
2013   1D59 79                   ld a,c              ; will contain square Nr.
2014   1D5A E1                   pop hl
2015   1D5B C1                   pop bc
2016   1D5C C9                   ret
2017   1D5D             
2018   1D5D             ;END
2019   1D5D             
2020   1D5D             
2021   1D5D             ;BEGIN of ========== KING CHECK+ DETECTION
2022   1D5D             ;
2023   1D5D             ; on return a-reg 1-is check, 0-not check
2024   1D5D             ;
2025   1D5D 00          SQ_ck_i:      .byte 0   ; storing to restore later  
2026   1D5E 00          SQ_ck_t:      .byte 0
2027   1D5F 00          CastlMove_ck: .byte 0
2028   1D60 00          PromoPcId_ck: .byte 0
2029   1D61 00          CaptPiece_ck: .byte 0
2030   1D62             
2031   1D62             IsCheck:
2032   1D62 FD E5               push iy
2033   1D64 E5                  push hl
2034   1D65                     
2035   1D65 3A 39 19            ld a,(CastlMove)
2036   1D68 32 5F 1D            ld (CastlMove_ck),a
2037   1D6B 3A 38 19            ld a,(PromoPcId)
2038   1D6E 32 60 1D            ld (PromoPcId_ck),a
2039   1D71 3A 37 19            ld a,(CaptPiece)
2040   1D74 32 61 1D            ld (CaptPiece_ck),a
2041   1D77                             
2042   1D77 3E 00               ld a,0    
2043   1D79 32 39 19            ld (CastlMove),a
2044   1D7C 32 38 19            ld (PromoPcId),a
2045   1D7F 32 37 19            ld (CaptPiece),a 
2046   1D82                                   
2047   1D82 3A 35 13            ld a, (SQi)      ; save
2048   1D85 32 5D 1D            ld (SQ_ck_i),a
2049   1D88 3A 36 13            ld a, (SQt)
2050   1D8B 32 5E 1D            ld (SQ_ck_t),a
2051   1D8E 3A 81 01            ld a, (SIDE)
2052   1D91 FE 00               cp 0
2053   1D93 20 05               jr nz,IsCkBlack
2054   1D95 3A 84 01            ld a,(WKSQ)
2055   1D98 18 03               jr IsChSt
2056   1D9A             IsCkBlack:
2057   1D9A 3A 85 01            ld a,(BKSQ)        
2058   1D9D             IsChSt: 
2059   1D9D 32 36 13            ld (SQt),a      
2060   1DA0 32 35 13            ld (SQi),a
2061   1DA3 CD 11 22            call MM_hl        ; position hl to the square of king
2062   1DA6                                     
2063   1DA6 E5                  push hl
2064   1DA7 FD E1               pop iy            ; contains square of king
2065   1DA9                     
2066   1DA9 CD D5 1D            call ValidateKingCheck
2067   1DAC F5                  push af
2068   1DAD                     
2069   1DAD 3A 5D 1D            ld a, (SQ_ck_i)  ;restore
2070   1DB0 32 35 13            ld (SQi),a
2071   1DB3 3A 5E 1D            ld a, (SQ_ck_t)
2072   1DB6 32 36 13            ld (SQt),a
2073   1DB9                     
2074   1DB9 3A 5F 1D            ld a,(CastlMove_ck)
2075   1DBC 32 39 19            ld (CastlMove),a
2076   1DBF 3A 60 1D            ld a,(PromoPcId_ck)
2077   1DC2 32 38 19            ld (PromoPcId),a
2078   1DC5 3A 61 1D            ld a,(CaptPiece_ck)
2079   1DC8 32 37 19            ld (CaptPiece),a
2080   1DCB                     
2081   1DCB F1                  pop af
2082   1DCC                     
2083   1DCC E1                  pop hl
2084   1DCD FD E1               pop iy
2085   1DCF C9                  ret        
2086   1DD0                     
2087   1DD0             ;END
2088   1DD0             
2089   1DD0             
2090   1DD0             ;BEGIN of ========== VALIDATE KING CHECK
2091   1DD0             ;
2092   1DD0             ; Usually king validation is done by opposit movement generation with king capture detection.
2093   1DD0             ; As it takes long to try all moves, we better verify square-attackers.
2094   1DD0             ; This gives advantage that only really legal moves are in the list without further iterations.
2095   1DD0             ;
2096   1DD0             ; on return a=0 on valid move, 1-not valid
2097   1DD0             
2098   1DD0 00          SQ_i:     .byte 0   
2099   1DD1 00          SQ_t:     .byte 0
2100   1DD2 00          SQ1:      .byte 0   ;contains flag that this square is nearby (+-1 sq)
2101   1DD3 00          SQk:      .byte 0   ;king square after movement
2102   1DD4 00          SQc:      .byte 0   ;square for castle checking
2103   1DD5             
2104   1DD5                       
2105   1DD5             ValidateKingCheck:
2106   1DD5                                   
2107   1DD5 C5                   push bc
2108   1DD6 D5                   push de
2109   1DD7 E5                   push hl
2110   1DD8 DD E5                push ix
2111   1DDA                      
2112   1DDA FD E5                push iy
2113   1DDC E1                   pop hl              ;set back pointer to square of piece
2114   1DDD                      
2115   1DDD 3A 36 13             ld a,(SQt)          ;save values
2116   1DE0 32 D1 1D             ld (SQ_t),a
2117   1DE3 3A 35 13             ld a,(SQi)
2118   1DE6 32 D0 1D             ld (SQ_i),a
2119   1DE9                      
2120   1DE9 3A 35 13             ld a,(SQi)
2121   1DEC 47                   ld b,a
2122   1DED 3A 84 01             ld a,(WKSQ)
2123   1DF0 B8                   cp b
2124   1DF1 20 05                jr nz,V_notWKing
2125   1DF3 32 D3 1D             ld (SQk),a                                  
2126   1DF6 18 2B                jr V_ifCastl       ; castling of white king?
2127   1DF8             V_notWKing:
2128   1DF8 3A 85 01             ld a,(BKSQ)
2129   1DFB B8                   cp b
2130   1DFC 20 05                jr nz,V_notKing
2131   1DFE 32 D3 1D             ld (SQk),a
2132   1E01 18 20                jr V_ifCastl       ; castling of black king?
2133   1E03             V_notKing:
2134   1E03 3A 81 01             ld a,(SIDE)
2135   1E06 FE 00                cp 0
2136   1E08 20 08                jr nz, V_blackPc
2137   1E0A 3A 84 01             ld a,(WKSQ)
2138   1E0D 32 D3 1D             ld (SQk),a 
2139   1E10 18 06                jr V_Pc1
2140   1E12             V_blackPc:
2141   1E12 3A 85 01             ld a,(BKSQ)
2142   1E15 32 D3 1D             ld (SQk),a
2143   1E18 47          V_Pc1:   ld b,a
2144   1E19 CD 9B 1E             call V_hl_setpos   ; new position of hl at square of king
2145   1E1C CD BF 1E             call ValidateKSq   ; if check after movement to?        
2146   1E1F 30 64                jr nc,KgNotValid  
2147   1E21 18 5E                jr KgIsValid                  
2148   1E23             V_ifCastl:                         
2149   1E23 3A 39 19             ld a, (CastlMove)
2150   1E26 FE 00                cp 0
2151   1E28 28 4B                jr z, V_noCastl
2152   1E2A                      
2153   1E2A 78                   ld a,b
2154   1E2B 32 D4 1D             ld (SQc),a
2155   1E2E                                        ; castling, b-reg contains king position already
2156   1E2E CD BF 1E             call ValidateKSq  ; if check?
2157   1E31 30 52                jr nc,KgNotValid
2158   1E33             
2159   1E33 3A D4 1D             ld a,(SQc)
2160   1E36 47                   ld b,a                
2161   1E37 3A D1 1D             ld a,(SQ_t)
2162   1E3A B8                   cp b
2163   1E3B 38 1C                jr c, V_decWCstl
2164   1E3D                                        
2165   1E3D CD 4F 1E             call V_CstlInc
2166   1E40 CD BF 1E             call ValidateKSq  ; f1,f8 under check?
2167   1E43 30 40                jr nc,KgNotValid
2168   1E45                      
2169   1E45 CD 4F 1E             call V_CstlInc
2170   1E48 CD BF 1E             call ValidateKSq  ; g1,g8 under check?
2171   1E4B 30 38                jr nc,KgNotValid
2172   1E4D                      
2173   1E4D 18 32                jr KgIsValid
2174   1E4F                      
2175   1E4F             V_CstlInc:
2176   1E4F 3A D4 1D             ld a,(SQc)
2177   1E52 3C                   inc a
2178   1E53 32 D4 1D             ld (SQc),a
2179   1E56 47                   ld b,a
2180   1E57 23                   inc hl
2181   1E58 C9                   ret   
2182   1E59                               
2183   1E59             V_decWCstl:
2184   1E59 CD 6B 1E             call V_CstlDec
2185   1E5C CD BF 1E             call ValidateKSq  ; d1,d8 under check?
2186   1E5F 30 24                jr nc,KgNotValid
2187   1E61                      
2188   1E61 CD 6B 1E             call V_CstlDec
2189   1E64 CD BF 1E             call ValidateKSq  ; c1,c8 under check?
2190   1E67 30 1C                jr nc,KgNotValid
2191   1E69                      
2192   1E69 18 16                jr KgIsValid
2193   1E6B             
2194   1E6B             V_CstlDec:
2195   1E6B 3A D4 1D             ld a,(SQc)
2196   1E6E 3D                   dec a
2197   1E6F 32 D4 1D             ld (SQc),a
2198   1E72 47                   ld b,a
2199   1E73 2B                   dec hl
2200   1E74 C9                   ret 
2201   1E75                               
2202   1E75             V_noCastl:
2203   1E75 3A 36 13             ld a,(SQt)        ; move to under check?
2204   1E78 47                   ld b,a
2205   1E79 CD 9B 1E             call V_hl_setpos  ; new position of hl at square of king         
2206   1E7C CD BF 1E             call ValidateKSq
2207   1E7F 30 04                jr nc,KgNotValid                          
2208   1E81             
2209   1E81             KgIsValid:         
2210   1E81 3E 00                ld a,0
2211   1E83 18 02                jr KgVret         
2212   1E85             KgNotValid:
2213   1E85 3E 01                ld a,1
2214   1E87             KgVret:
2215   1E87             
2216   1E87 F5                   push af
2217   1E88 3A D1 1D             ld a,(SQ_t)          ;restore values
2218   1E8B 32 36 13             ld (SQt),a
2219   1E8E 3A D0 1D             ld a,(SQ_i)
2220   1E91 32 35 13             ld (SQi),a
2221   1E94 F1                   pop af
2222   1E95                      
2223   1E95 DD E1                pop ix
2224   1E97 E1                   pop hl
2225   1E98 D1                   pop de
2226   1E99 C1                   pop bc
2227   1E9A C9                   ret
2228   1E9B                                                                                                                                              
2229   1E9B             ; reposition of hl pointer to square, by calculation
2230   1E9B             V_hl_setpos:
2231   1E9B C5                   push bc
2232   1E9C 78                   ld a,b
2233   1E9D 32 35 13             ld (SQi),a
2234   1EA0                      
2235   1EA0 06 00                ld b,0
2236   1EA2 3A D0 1D             ld a,(SQ_i)
2237   1EA5 4F                   ld c,a
2238   1EA6 3A 35 13             ld a,(SQi)
2239   1EA9 91                   sub c
2240   1EAA 38 04                jr c, V_StDistNeg
2241   1EAC 4F                   ld c,a
2242   1EAD 09                   add hl,bc              ;new hl position sq-forward
2243   1EAE 18 0D                jr V_hl_rdy1
2244   1EB0             V_StDistNeg:
2245   1EB0 3A 35 13             ld a,(SQi)
2246   1EB3 4F                   ld c,a
2247   1EB4 3A D0 1D             ld a,(SQ_i)         
2248   1EB7 91                   sub c
2249   1EB8 4F                   ld c,a                         
2250   1EB9 37                   scf
2251   1EBA 3F                   ccf
2252   1EBB ED 42                sbc hl,bc              ;new hl position sq-backward
2253   1EBD             V_hl_rdy1:
2254   1EBD C1                   pop bc
2255   1EBE C9                   ret
2256   1EBF             
2257   1EBF             ; detect if given square (in b) is under attack of opponent
2258   1EBF               
2259   1EBF             ValidateKSq:
2260   1EBF                                               
2261   1EBF 78                   ld a,b
2262   1EC0 32 35 13             ld (SQi),a
2263   1EC3             
2264   1EC3 CD EB 13             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]  
2265   1EC6                                                                
2266   1EC6                      ; try to attack this square in SQi (threat comes from SQt)
2267   1EC6             
2268   1EC6                      ; diognals
2269   1EC6 DD 21 2C 16          ld ix,bishopMoves
2270   1ECA 06 04                ld b, 4
2271   1ECC                      
2272   1ECC             DiognalScan4directions:
2273   1ECC             
2274   1ECC D5                   push de
2275   1ECD 3E 01                ld a,1
2276   1ECF 32 D2 1D             ld (SQ1),a
2277   1ED2             DiognalLoop:
2278   1ED2 CD 27 1F             call DiognalAttacks
2279   1ED5 FE 00                cp 0
2280   1ED7 28 F9                jr z,DiognalLoop
2281   1ED9 D1                   pop de
2282   1EDA FE 02                cp 2
2283   1EDC 28 46                jr z,NotValidKgSq
2284   1EDE                                       
2285   1EDE DD 23                inc ix
2286   1EE0 DD 23                inc ix
2287   1EE2 DD 23                inc ix
2288   1EE4 DD 23                inc ix
2289   1EE6                      
2290   1EE6 10 E4                djnz DiognalScan4directions        
2291   1EE8                      
2292   1EE8                      ; horizontals and verticals       
2293   1EE8 DD 21 73 15          ld ix,rookMoves
2294   1EEC 06 04                ld b, 4
2295   1EEE                      
2296   1EEE             HorzVertScan4directions:
2297   1EEE             
2298   1EEE D5                   push de
2299   1EEF 3E 01                ld a,1
2300   1EF1 32 D2 1D             ld (SQ1),a
2301   1EF4             HorzVertLoop:
2302   1EF4 CD 01 20             call HorzVertAttacks
2303   1EF7 FE 00                cp 0
2304   1EF9 28 F9                jr z,HorzVertLoop
2305   1EFB D1                   pop de
2306   1EFC FE 02                cp 2
2307   1EFE 28 24                jr z,NotValidKgSq
2308   1F00                           
2309   1F00 DD 23                inc ix
2310   1F02 DD 23                inc ix
2311   1F04 DD 23                inc ix
2312   1F06 DD 23                inc ix
2313   1F08                      
2314   1F08 10 E4                djnz HorzVertScan4directions
2315   1F0A             
2316   1F0A                      ; knights       
2317   1F0A DD 21 DD 16          ld ix, knightMoves
2318   1F0E 06 08                ld b, 8
2319   1F10             VKnightScan8moves:
2320   1F10 CD C7 20             call KnightAttacks
2321   1F13 FE 02                cp 2
2322   1F15 28 0D                jr z,NotValidKgSq
2323   1F17 DD 23                inc ix
2324   1F19 DD 23                inc ix
2325   1F1B DD 23                inc ix
2326   1F1D DD 23                inc ix
2327   1F1F 10 EF                djnz VKnightScan8moves
2328   1F21                      
2329   1F21             ValidKgSq:
2330   1F21 37                   scf
2331   1F22 18 02                jr ValidKgSqRet
2332   1F24             NotValidKgSq:
2333   1F24 37                   scf
2334   1F25 3F                   ccf
2335   1F26             ValidKgSqRet:
2336   1F26 C9                   ret
2337   1F27             
2338   1F27             
2339   1F27             ; look for diognal-attacks to that direction
2340   1F27             DiognalAttacks:
2341   1F27             
2342   1F27 C5                   push bc
2343   1F28 E5                   push hl
2344   1F29 DD E5                push ix
2345   1F2B                                       
2346   1F2B DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1
2347   1F2E DD 23                inc ix
2348   1F30 FE 2D                cp '-'
2349   1F32 28 08                jr z, V_BsNegX      
2350   1F34 7A                   ld a,d
2351   1F35 3C                   inc a           ;a=direction +1 of X 
2352   1F36 FE 08                cp 8
2353   1F38 30 66                jr nc, V_BsSt
2354   1F3A 18 09                jr V_BsCanOk1  
2355   1F3C             V_BsNegX:
2356   1F3C 3E 00                ld a,0          ;a=direction -1 of X
2357   1F3E BA                   cp d
2358   1F3F 38 02                jr c, V_BsCanSubtrX
2359   1F41 18 5D                jr V_BsSt
2360   1F43             V_BsCanSubtrX:         
2361   1F43 7A                   ld a,d
2362   1F44 3D                   dec a 
2363   1F45             V_BsCanOk1:
2364   1F45 57                   ld d,a         
2365   1F46 DD 23                inc ix
2366   1F48                      
2367   1F48 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1
2368   1F4B DD 23                inc ix
2369   1F4D FE 2D                cp '-'
2370   1F4F 28 08                jr z, V_BsNegY
2371   1F51 7B                   ld a,e
2372   1F52 3C                   inc a          ;a=direction +1 of Y  
2373   1F53 FE 08                cp 8
2374   1F55 30 49                jr nc, V_BsSt
2375   1F57 18 09                jr V_BsCanOk2   
2376   1F59             V_BsNegY:
2377   1F59 3E 00                ld a,0         ;a=direction -1 of Y
2378   1F5B BB                   cp e
2379   1F5C 38 02                jr c, V_BsCanSubtrY
2380   1F5E 18 40                jr V_BsSt
2381   1F60             V_BsCanSubtrY:         
2382   1F60 7B                   ld a, e
2383   1F61 3D                   dec a
2384   1F62             V_BsCanOk2:
2385   1F62 5F                   ld e,a
2386   1F63 DD 23                inc ix         
2387   1F65                      
2388   1F65 CD FC 13             call StoreSqToMove    ;new SQt,hl        
2389   1F68                      
2390   1F68 3A 36 13             ld a, (SQt)
2391   1F6B 47                   ld b,a
2392   1F6C 3A D0 1D             ld a, (SQ_i)
2393   1F6F B8                   cp b
2394   1F70 28 5C                jr z,V_cont           ; if piece is on that square then will be empty
2395   1F72 3A D1 1D             ld a, (SQ_t)
2396   1F75 B8                   cp b
2397   1F76 28 1E                jr z,V_IsThisK       ; if piece goes to that square
2398   1F78                                           ; then if piece is not king then
2399   1F78                                           ; our king is protected                             
2400   1F78 CD E3 18             call IsEmpty
2401   1F7B 38 51                jr c,V_cont       
2402   1F7D                      
2403   1F7D 3A 81 01             ld a, (SIDE)
2404   1F80 FE 01                cp 1
2405   1F82 28 4E                jr z,V_BsThisBlack
2406   1F84                      
2407   1F84             V_BsThisWhite:         
2408   1F84 CD 18 19             call IsBlack           ; enemy?
2409   1F87 30 37                jr nc,V_NoBlack
2410   1F89                      
2411   1F89 FE 6B                cp 'k'
2412   1F8B 20 17                jr nz, V_NoBK
2413   1F8D                      
2414   1F8D 3A D2 1D    V_Sq1:   ld a, (SQ1)            ; nearby square
2415   1F90 FE 01                cp 1
2416   1F92 20 0C                jr nz,V_BsSt
2417   1F94 18 26                jr V_dont              ; king or pawn beats 
2418   1F96                      
2419   1F96             V_IsThisK:                      ; king can not protect self
2420   1F96 3A D3 1D             ld a,(SQk)
2421   1F99 47                   ld b,a
2422   1F9A 3A D0 1D             ld a,(SQ_i)
2423   1F9D B8                   cp b
2424   1F9E 28 2E                jr z, V_cont           ; our king goes to this direction, continue
2425   1FA0                                             ; stop, our piece protects anyway
2426   1FA0             
2427   1FA0 3E 01       V_BsSt:  ld a,1                 ; stop to this direction, our piece protects king
2428   1FA2 18 51                jr V_BsOver
2429   1FA4                       
2430   1FA4             V_NoBK:    
2431   1FA4 FE 62                cp 'b'
2432   1FA6 28 14                jr z, V_dont           ; bishop beats
2433   1FA8 FE 71                cp 'q'
2434   1FAA 28 10                jr z, V_dont           ; queen beats
2435   1FAC FE 70                cp 'p'
2436   1FAE 20 F0                jr nz, V_BsSt          ; otherwise knight and cant beat
2437   1FB0                      
2438   1FB0 3A 35 13             ld a,(SQi)             ; pawn direction verif. black pawn is above
2439   1FB3 47                   ld b,a
2440   1FB4 3A 36 13             ld a,(SQt)           
2441   1FB7 B8                   cp b
2442   1FB8 30 D3                jr nc,V_Sq1
2443   1FBA 18 E4                jr V_BsSt
2444   1FBC             
2445   1FBC 3E 02       V_dont:  ld a,2                 ; stop and not valid move, king in check+
2446   1FBE 18 35                jr V_BsOver 
2447   1FC0             V_NoBlack:
2448   1FC0 CD F9 18             call IsWhite           ; our?
2449   1FC3 38 DB                jr c,V_BsSt
2450   1FC5 18 07                jr V_cont
2451   1FC7             V_NoWhite:
2452   1FC7 CD 18 19             call IsBlack           ; our?
2453   1FCA 38 D4                jr c,V_BsSt
2454   1FCC 18 00                jr V_cont
2455   1FCE             V_cont:         
2456   1FCE 3E 00                ld a,0                 ; continue after to this direction
2457   1FD0 18 23                jr V_BsOver
2458   1FD2                              
2459   1FD2             V_BsThisBlack:         
2460   1FD2 CD F9 18             call IsWhite           ; enemy?
2461   1FD5 30 F0                jr nc, V_NoWhite
2462   1FD7             
2463   1FD7 FE 4B                cp 'K'
2464   1FD9 20 02                jr nz, V_NoWK
2465   1FDB 18 B0                jr V_Sq1
2466   1FDD             V_NoWK:    
2467   1FDD FE 42                cp 'B'
2468   1FDF 28 DB                jr z, V_dont           ; bishop beats
2469   1FE1 FE 51                cp 'Q'
2470   1FE3 28 D7                jr z, V_dont           ; queen beats
2471   1FE5 FE 50                cp 'P'
2472   1FE7 20 B7                jr nz, V_BsSt          ; otherwise knight and cant beat
2473   1FE9                      
2474   1FE9 3A 35 13             ld a,(SQi)             ; pawn direction verif. white pawn is below
2475   1FEC 47                   ld b,a
2476   1FED 3A 36 13             ld a,(SQt)           
2477   1FF0 B8                   cp b
2478   1FF1 38 9A                jr c,V_Sq1
2479   1FF3 18 AB                jr V_BsSt
2480   1FF5                    
2481   1FF5             V_BsOver:
2482   1FF5             
2483   1FF5 F5                   push af
2484   1FF6 3E 00                ld a,0
2485   1FF8 32 D2 1D             ld (SQ1),a      ;next square will be not nearby in that direction anyway
2486   1FFB F1                   pop af
2487   1FFC                      
2488   1FFC DD E1                pop ix
2489   1FFE E1                   pop hl
2490   1FFF C1                   pop bc
2491   2000 C9                   ret 
2492   2001             
2493   2001             ; look for horizontal-vertical-attacks to that direction
2494   2001             HorzVertAttacks:
2495   2001             
2496   2001 C5                   push bc
2497   2002 E5                   push hl
2498   2003 DD E5                push ix
2499   2005                               
2500   2005 DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,=0
2501   2008 DD 23                inc ix
2502   200A FE 3D                cp '='
2503   200C 28 16                jr z, V_RkZero1
2504   200E FE 2D                cp '-'
2505   2010 28 08                jr z, V_RkNegX      
2506   2012 7A                   ld a,d
2507   2013 3C                   inc a           ;a=direction +1 of X 
2508   2014 FE 08                cp 8
2509   2016 30 66                jr nc, V_RkSt
2510   2018 18 09                jr V_RkCanOk1  
2511   201A             V_RkNegX:
2512   201A 3E 00                ld a,0          ;a=direction -1 of X
2513   201C BA                   cp d
2514   201D 38 02                jr c, V_RkCanSubtrX
2515   201F 18 5D                jr V_RkSt
2516   2021             V_RkCanSubtrX:         
2517   2021 7A                   ld a,d
2518   2022 3D                   dec a 
2519   2023             V_RkCanOk1:
2520   2023 57                   ld d,a         
2521   2024             V_RkZero1:
2522   2024 DD 23                inc ix 
2523   2026 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,=0
2524   2029 DD 23                inc ix
2525   202B FE 3D                cp '='
2526   202D 28 16                jr z, V_RkZero2        
2527   202F FE 2D                cp '-'
2528   2031 28 08                jr z, V_RkNegY
2529   2033 7B                   ld a,e
2530   2034 3C                   inc a          ;a=direction +1 of Y  
2531   2035 FE 08                cp 8
2532   2037 30 45                jr nc, V_RkSt
2533   2039 18 09                jr V_RkCanOk2   
2534   203B             V_RkNegY:
2535   203B 3E 00                ld a,0         ;a=direction -1 of Y
2536   203D BB                   cp e
2537   203E 38 02                jr c, V_RkCanSubtrY
2538   2040 18 3C                jr V_RkSt
2539   2042             V_RkCanSubtrY:         
2540   2042 7B                   ld a, e
2541   2043 3D                   dec a
2542   2044             V_RkCanOk2:
2543   2044 5F                   ld e,a
2544   2045             V_RkZero2:
2545   2045 DD 23                inc ix         
2546   2047                      
2547   2047 CD FC 13             call StoreSqToMove    ;new SQt,hl
2548   204A                             
2549   204A 3A 36 13             ld a, (SQt)
2550   204D 47                   ld b,a
2551   204E 3A D0 1D             ld a, (SQ_i)
2552   2051 B8                   cp b
2553   2052 28 26                jr z,V_Rkcont           ; if piece is on that square then will be empty
2554   2054 3A D1 1D             ld a, (SQ_t)
2555   2057 B8                   cp b
2556   2058 28 28                jr z,V_RkIsThisK       ; if piece goes to that square
2557   205A                                             ; then if piece is not king then
2558   205A                                             ; our king is protected
2559   205A CD E3 18             call IsEmpty
2560   205D 38 1B                jr c,V_Rkcont
2561   205F                      
2562   205F 3A 81 01             ld a, (SIDE)
2563   2062 FE 01                cp 1
2564   2064 28 40                jr z,V_RkThisBlack
2565   2066                      
2566   2066             V_RkThisWhite:         
2567   2066 CD 18 19             call IsBlack           ; enemy?
2568   2069 30 2D                jr nc,V_RkNoBlack
2569   206B                      
2570   206B FE 6B                cp 'k'
2571   206D 20 1F                jr nz, V_RkNoBK
2572   206F                      
2573   206F 3A D2 1D    V_RkSq1: ld a, (SQ1)            ; nearby square
2574   2072 FE 01                cp 1
2575   2074 20 08                jr nz,V_RkSt
2576   2076                      ;otherwise king beats our king
2577   2076                      
2578   2076             V_Rkdont:
2579   2076 3E 02                ld a,2                 ; stop and not valid move, king in check+
2580   2078 18 41                jr V_RkOver
2581   207A             V_Rkcont:         
2582   207A 3E 00                ld a,0                 ; continue after to this direction
2583   207C 18 3D                jr V_RkOver
2584   207E                      
2585   207E 3E 01       V_RkSt:  ld a,1                 ; stop to this direction, our piece protects king
2586   2080 18 39                jr V_RkOver
2587   2082                                
2588   2082             V_RkIsThisK:                    ; king can not protect itself
2589   2082 3A D3 1D             ld a,(SQk)
2590   2085 47                   ld b,a
2591   2086 3A D0 1D             ld a,(SQ_i)
2592   2089 B8                   cp b
2593   208A 28 EE                jr z, V_Rkcont         ; our king goes to this direction, continue
2594   208C                                             ; stop, our piece protects anyway
2595   208C 18 F0                jr V_RkSt                       
2596   208E                       
2597   208E             V_RkNoBK:    
2598   208E FE 72                cp 'r'
2599   2090 28 E4                jr z, V_Rkdont           ; rook beats
2600   2092 FE 71                cp 'q'
2601   2094 28 E0                jr z, V_Rkdont           ; queen beats
2602   2096 18 E6                jr V_RkSt                ; otherwise can not beat
2603   2098             V_RkNoBlack:
2604   2098 CD F9 18             call IsWhite           ; our?
2605   209B 38 E1                jr c,V_RkSt
2606   209D 18 DB                jr V_Rkcont
2607   209F             V_RkNoWhite:
2608   209F CD 18 19             call IsBlack           ; our?
2609   20A2 38 DA                jr c,V_RkSt
2610   20A4 18 D4                jr V_Rkcont                 
2611   20A6             V_RkThisBlack:         
2612   20A6 CD F9 18             call IsWhite           ; enemy?
2613   20A9 30 F4                jr nc,V_RkNoWhite
2614   20AB             
2615   20AB FE 4B                cp 'K'
2616   20AD 20 02                jr nz, V_RkNoWK
2617   20AF 18 BE                jr V_RkSq1
2618   20B1             V_RkNoWK:    
2619   20B1 FE 52                cp 'R'
2620   20B3 28 C1                jr z, V_Rkdont           ; rook beats
2621   20B5 FE 51                cp 'Q'
2622   20B7 28 BD                jr z, V_Rkdont           ; queen beats
2623   20B9 18 C3                jr V_RkSt                ; otherwise can not beat  
2624   20BB             
2625   20BB             V_RkOver:
2626   20BB F5                   push af
2627   20BC 3E 00                ld a,0
2628   20BE 32 D2 1D             ld (SQ1),a      ;next square will be not nearby in that direction anyway
2629   20C1 F1                   pop af
2630   20C2                      
2631   20C2 DD E1                pop ix
2632   20C4 E1                   pop hl
2633   20C5 C1                   pop bc
2634   20C6 C9                   ret 
2635   20C7             
2636   20C7             ; look for knight-attack
2637   20C7             KnightAttacks:
2638   20C7 C5                   push bc
2639   20C8 D5                   push de
2640   20C9 E5                   push hl
2641   20CA DD E5                push ix
2642   20CC                              
2643   20CC DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,-2,+2
2644   20CF DD 23                inc ix
2645   20D1 FE 2D                cp '-'
2646   20D3 28 0A                jr z, V_KnNegX
2647   20D5 DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of X      
2648   20D8 82                   add a,d
2649   20D9 FE 08                cp 8
2650   20DB 30 62                jr nc, V_KnNo
2651   20DD 18 0D                jr V_KnCanOk1  
2652   20DF             V_KnNegX:
2653   20DF DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of X
2654   20E2 3D                   dec a
2655   20E3 BA                   cp d
2656   20E4 38 02                jr c, V_KnCanSubtrX
2657   20E6 18 57                jr V_KnNo
2658   20E8             V_KnCanSubtrX:         
2659   20E8 7A                   ld a, d
2660   20E9 DD 96 00             sub (ix)    
2661   20EC             V_KnCanOk1:
2662   20EC 57                   ld d,a         
2663   20ED DD 23                inc ix
2664   20EF                      
2665   20EF DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,-2,+2
2666   20F2 DD 23                inc ix
2667   20F4 FE 2D                cp '-'
2668   20F6 28 0A                jr z, V_KnNegY
2669   20F8 DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of Y  
2670   20FB 83                   add a,e
2671   20FC FE 08                cp 8
2672   20FE 30 3F                jr nc, V_KnNo
2673   2100 18 0D                jr V_KnCanOk2   
2674   2102             V_KnNegY:
2675   2102 DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of Y
2676   2105 3D                   dec a 
2677   2106 BB                   cp e
2678   2107 38 02                jr c, V_KnCanSubtrY
2679   2109 18 34                jr V_KnNo
2680   210B             V_KnCanSubtrY:         
2681   210B 7B                   ld a, e
2682   210C DD 96 00             sub (ix)
2683   210F             V_KnCanOk2:
2684   210F 5F                   ld e, a
2685   2110 DD 23                inc ix         
2686   2112                      
2687   2112 CD FC 13             call StoreSqToMove    ;new SQt,hl
2688   2115                             
2689   2115 CD E3 18             call IsEmpty
2690   2118 38 25                jr c,V_KnNo
2691   211A                      
2692   211A 3A 36 13             ld a, (SQt)
2693   211D 47                   ld b,a
2694   211E 3A D1 1D             ld a, (SQ_t)
2695   2121 B8                   cp b
2696   2122 20 02                jr nz, V_KnIsKn
2697   2124 18 19                jr V_KnNo              ; we beat this piece
2698   2126             
2699   2126             V_KnIsKn:         
2700   2126 3A 81 01             ld a, (SIDE)
2701   2129 FE 01                cp 1
2702   212B 28 07                jr z, V_KnThisKingBlack
2703   212D             V_KnThisKingWhite:         
2704   212D 7E                   ld a,(hl)
2705   212E FE 6E                cp 'n'                 ; knight?
2706   2130 28 09                jr z,V_Kndont
2707   2132 18 0B                jr V_KnNo              ; otherwise our
2708   2134             V_KnThisKingBlack:         
2709   2134 7E                   ld a,(hl)
2710   2135 FE 4E                cp 'N'                 ; knight?
2711   2137 28 02                jr z,V_Kndont
2712   2139 18 04                jr V_KnNo              ; otherwise our    
2713   213B             V_Kndont:
2714   213B 3E 02                ld a,2                 ; not valid move, king in check+
2715   213D 18 02                jr V_KnOver
2716   213F             V_KnNo:         
2717   213F 3E 00                ld a,0                 ; not attacked
2718   2141             V_KnOver:
2719   2141 DD E1                pop ix
2720   2143 E1                   pop hl
2721   2144 D1                   pop de
2722   2145 C1                   pop bc
2723   2146 C9                   ret 
2724   2147             ;END
2725   2147             
2726   2147             
2727   2147             ;BEGIN of ========== MAKE MOVE
2728   2147             ;
2729   2147             ; Make move on BOARD
2730   2147             ; SQi - from square
2731   2147             ; SQt - to square
2732   2147             ; PromoPcId - id of piece to promote = 4-queen,3-rook,2-bishop,1-knight, 0-no promotion
2733   2147             ;
2734   2147             
2735   2147             MakeMove:
2736   2147             
2737   2147 F5                   push af
2738   2148 C5                   push bc
2739   2149 D5                   push de
2740   214A E5                   push hl
2741   214B DD E5                push ix
2742   214D FD E5                push iy
2743   214F                      
2744   214F DD 21 92 04          ld ix, NEXT_MVCNT
2745   2153 DD 46 00             ld b,(ix)
2746   2156 DD 21 93 04          ld ix, NEXT_MOVES
2747   215A 78                   ld a, b
2748   215B FE 00                cp 0
2749   215D 20 02                jr nz, MKMthereAre
2750   215F             
2751   215F 18 75                jr fMKMEnd
2752   2161                      
2753   2161             MKMthereAre: 
2754   2161 1E 00                ld e,0       ; flag that found
2755   2163             
2756   2163             MKMToLoop:
2757   2163 C5                   push bc
2758   2164 DD E5                push ix
2759   2166             
2760   2166 DD 7E 00             ld a, (ix)   ; notated piece
2761   2169 57                   ld d,a
2762   216A DD 23                inc ix
2763   216C             
2764   216C 3A 35 13             ld a, (SQi)
2765   216F 47                   ld b,a
2766   2170 DD 7E 00             ld a, (ix)   ; from square
2767   2173 B8                   cp b
2768   2174 20 7B                jr nz, MKMnotMV
2769   2176                      
2770   2176 DD 23                inc ix            
2771   2178 3A 36 13             ld a, (SQt)
2772   217B 4F                   ld c,a
2773   217C DD 7E 00             ld a, (ix)   ; to square
2774   217F B9                   cp c
2775   2180 20 6F                jr nz, MKMnotMV
2776   2182                      
2777   2182 CD 1F 22             call MKifPromoTheSame ; verifies if promoted piece the same in list
2778   2185 FE 01                cp 1                  ; actually we can ignore it, because undo just places
2779   2187 20 68                jr nz, MKMnotMV      ; back a pawn
2780   2189                      
2781   2189                      ; ok, this move. Let's do it
2782   2189                      
2783   2189 CD 47 22             call MKMcastlesDO   ; saves castling flags and verifies rooks
2784   218C                                                  
2785   218C CD 30 23             call MKMsaveEPSQ
2786   218F                      
2787   218F DD 2B                dec ix         
2788   2191 DD 7E 00             ld a, (ix)   ; from square
2789   2194 CD 11 22             call MM_hl
2790   2197 7E                   ld a,(hl)
2791   2198 57                   ld d,a       ; save piece
2792   2199                      
2793   2199 CD BD 22             call UpdateKingSQ   ; and castling flags too
2794   219C                               
2795   219C CD 1B 22             call MM_0    ; empty square now
2796   219F                      
2797   219F DD 23                inc ix
2798   21A1 DD 7E 00             ld a, (ix)   ; to square
2799   21A4 CD 11 22             call MM_hl
2800   21A7                      
2801   21A7 D5                   push de
2802   21A8 56                   ld d,(hl)    ; save captured piece
2803   21A9                      
2804   21A9 7E                   ld a,(hl)
2805   21AA FE 00                cp 0
2806   21AC 28 03                jr z, MM_noCapture  ;en-passant is not in list
2807   21AE                      
2808   21AE CD 5A 23             call MM_capt2list   ;should save last captured piece in list   
2809   21B1                      
2810   21B1             MM_noCapture:         
2811   21B1                      
2812   21B1 D1                   pop de       ; restore our piece
2813   21B2                      
2814   21B2 7A                   ld a,d
2815   21B3 77                   ld (hl),a    ; just place our piece here
2816   21B4                               
2817   21B4 DD 23                inc ix
2818   21B6 DD 7E 00             ld a, (ix)     ; flags
2819   21B9 CB 67                bit 4,a        ; castling
2820   21BB 28 03                jr z,MMNoCastle
2821   21BD                      
2822   21BD CD 6E 23             call  MMcastles          
2823   21C0                                         
2824   21C0             MMNoCastle:
2825   21C0 DD 7E 00             ld a, (ix)     ; flags    
2826   21C3 CB 4F                bit 1,a        ; possibly promotion
2827   21C5 28 03                jr z, MMNoProm
2828   21C7                      
2829   21C7 CD CA 23             call MMPromotion ; put new piece on board         
2830   21CA             MMNoProm:
2831   21CA DD 7E 00             ld a, (ix)     ; flags
2832   21CD CB 6F                bit 5,a        ; en-passant 
2833   21CF 28 09                jr z,MMNoEP
2834   21D1             
2835   21D1 CD FB 23             call MMEnPass  ; en-passant capture
2836   21D4 18 04                jr MMNoEP                                          
2837   21D6             
2838   21D6 18 2B       fMKMEnd: jr MKMEnd
2839   21D8             
2840   21D8 18 89       fMKMToLoop: jr MKMToLoop      ; jump far                                            
2841   21DA                                                                                                                                                    
2842   21DA             MMNoEP:                                         
2843   21DA 1E 01                ld e,1         ; we found already
2844   21DC                              
2845   21DC CD AA 22             call Swap_Sides   ; Swap
2846   21DF CD 62 1D             call IsCheck
2847   21E2 FE 00                cp 0
2848   21E4 28 08                jr z, MKMnoCheck
2849   21E6                      
2850   21E6 DD 7E 00             ld a, (ix)     ; flags
2851   21E9 CB F7                set 6,a        ; bit 6 - check
2852   21EB DD 77 00             ld (ix),a      ; save to flags
2853   21EE             MKMnoCheck:         
2854   21EE                      
2855   21EE CD 57 22             call MKMsave2Hist ; Save history
2856   21F1             MKMnotMV:
2857   21F1 DD E1                pop ix
2858   21F3                      
2859   21F3 DD 23                inc ix        ; piece
2860   21F5 DD 23                inc ix        ; from
2861   21F7 DD 23                inc ix        ; to
2862   21F9 DD 23                inc ix        ; flags
2863   21FB             
2864   21FB C1                   pop bc
2865   21FC                      
2866   21FC 7B                   ld a,e
2867   21FD FE 01                cp 1
2868   21FF 28 02                jr z, MKMEnd
2869   2201 10 D5                djnz fMKMToLoop
2870   2203             
2871   2203             MKMEnd:
2872   2203             
2873   2203 7B                   ld a,e
2874   2204 FE 00                cp 0
2875   2206 20 00                jr nz, MKMfoundmove
2876   2208             MKMfoundmove:
2877   2208 FD E1                pop iy                                                                                                   
2878   220A DD E1                pop ix
2879   220C E1                   pop hl
2880   220D D1                   pop de
2881   220E C1                   pop bc
2882   220F F1                   pop af
2883   2210 C9                   ret
2884   2211                      
2885   2211             MM_hl:                        ; reposition of hl to square provided in a-reg
2886   2211 C5                   push bc
2887   2212 06 00                ld b,0
2888   2214 4F                   ld c,a
2889   2215 21 40 01             ld hl, BOARD
2890   2218 09                   add hl,bc            ; points to piece to move
2891   2219 C1                   pop bc
2892   221A C9                   ret
2893   221B             
2894   221B 3E 00       MM_0:    ld a,0               ; empty square now 
2895   221D 77                   ld (hl),a 
2896   221E C9                   ret
2897   221F             
2898   221F             ; verifies promoted piece
2899   221F             MKifPromoTheSame:
2900   221F C5                   push bc
2901   2220 3A 38 19             ld a, (PromoPcId)
2902   2223 FE 00                cp 0
2903   2225 28 1C                jr z, MKsamePromo
2904   2227 3D                   dec a
2905   2228 47                   ld b,a
2906   2229 DD 23                inc ix
2907   222B DD 7E 00             ld a, (ix)       ; flags
2908   222E 4F                   ld c,a
2909   222F DD 2B                dec ix
2910   2231 CB 4F                bit 1,a
2911   2233 28 0E                jr z, MKsamePromo
2912   2235 79                   ld a,c
2913   2236 CB 3F                srl a
2914   2238 CB 3F                srl a
2915   223A E6 03                and 3
2916   223C B8                   cp b
2917   223D 28 04                jr z, MKsamePromo
2918   223F 3E 00                ld a,0
2919   2241 18 02                jr MKsamePover                           
2920   2243             MKsamePromo:
2921   2243 3E 01                ld a,1
2922   2245             MKsamePover:
2923   2245 C1                   pop bc
2924   2246 C9                   ret
2925   2247             
2926   2247             ; works on castling flags          
2927   2247             MKMcastlesDO:
2928   2247 F5                   push af
2929   2248 3A 82 01             ld a,(CASTLES)
2930   224B 32 59 23             ld (Cstl2hist),a   ; save for history
2931   224E FE 00                cp 0
2932   2250 28 03                jr z,MKMNoRvf
2933   2252 CD EF 22             call MKMUpdateRookMvCapt
2934   2255             MKMNoRvf:
2935   2255 F1                   pop af         
2936   2256 C9                   ret
2937   2257             
2938   2257             ; Saves move into history of moves made
2939   2257             MKMsave2Hist:
2940   2257 E5                   push hl
2941   2258 C5                   push bc
2942   2259 06 00                ld b,0
2943   225B 3A B3 0E             ld a,(MOVE_CNT)
2944   225E 4F                   ld c,a
2945   225F 3C                   inc a
2946   2260 32 B3 0E             ld (MOVE_CNT),a
2947   2263 21 B4 0E             ld hl, MOVE_HIST
2948   2266                      
2949   2266 FE 3C                cp 60
2950   2268 38 07                jr c,slowBcAdd1     
2951   226A CB 21                sla c
2952   226C CB 21                sla c      ; 4*c
2953   226E                       ;1.byte = from sq
2954   226E                       ;2.byte = to sq
2955   226E                       ;3.byte = flags and promoted to
2956   226E                       ;4.byte = castling flags, en-passant square before
2957   226E 09                   add hl,bc
2958   226F 18 04                jr overBcAdd1         
2959   2271             slowBcAdd1:         
2960   2271 09                   add hl,bc
2961   2272 09                   add hl,bc
2962   2273 09                   add hl,bc
2963   2274 09                   add hl,bc
2964   2275             overBcAdd1:         
2965   2275                      
2966   2275                               
2967   2275 3A 35 13             ld a,(SQi)
2968   2278 77                   ld (hl),a  ; from
2969   2279 23                   inc hl
2970   227A 3A 36 13             ld a,(SQt) ; to
2971   227D 77                   ld (hl),a
2972   227E 23                   inc hl
2973   227F DD 7E 00             ld a, (ix) ; flags with piece promoted
2974   2282 77                   ld (hl),a  ;
2975   2283 23                   inc hl
2976   2284 3A 58 23             ld a,(EnPs2hist)
2977   2287 FE FF                cp $ff
2978   2289 28 0C                jr z,EnP0hs
2979   228B FE 20                cp 32
2980   228D 30 04                jr nc,EnPBlackHs
2981   228F D6 0F                sub 15    ;a3=1...h3=8
2982   2291 18 06                jr EnPSvhs 
2983   2293             EnPBlackHs:
2984   2293 D6 1F                sub 31    ;a6=9...h6=16
2985   2295 18 02                jr EnPSvhs
2986   2297 3E 00       EnP0hs:  ld a,0
2987   2299 47          EnPSvhs: ld b,a
2988   229A 3A 59 23             ld a,(Cstl2hist)
2989   229D CB 27                sla a           ; 4 shifts
2990   229F CB 27                sla a
2991   22A1 CB 27                sla a
2992   22A3 CB 27                sla a
2993   22A5 B0                   or b
2994   22A6 77                   ld (hl),a  ; save en-passant square and castling info that was before
2995   22A7 C1                   pop bc
2996   22A8 E1                   pop hl
2997   22A9 C9                   ret
2998   22AA             
2999   22AA             ; Just swap both sides
3000   22AA             Swap_Sides:
3001   22AA F5                   push af
3002   22AB 3A 81 01             ld a,(SIDE)       ; swap sides
3003   22AE FE 00                cp 0
3004   22B0 28 04                jr z,SwSdBl
3005   22B2 3E 00                ld a,0
3006   22B4 18 02                jr SwSdSt
3007   22B6 3E 01       SwSdBl:  ld a,1
3008   22B8 32 81 01    SwSdSt:  ld (SIDE),a
3009   22BB F1                   pop af
3010   22BC C9                   ret
3011   22BD                      
3012   22BD             ; save king square         
3013   22BD             UpdateKingSQ:
3014   22BD 7A                   ld a,d
3015   22BE FE 4B                cp 'K'
3016   22C0 20 16                jr nz,MKMnoWK1
3017   22C2 79                   ld a,c
3018   22C3 32 84 01             ld (WKSQ),a
3019   22C6 FE 04                cp 4
3020   22C8 28 0C                jr z,KingStillE1
3021   22CA F5                   push af
3022   22CB 3A 82 01             ld a,(CASTLES)
3023   22CE E6 FC                and %11111100
3024   22D0 32 82 01             ld (CASTLES),a
3025   22D3 F1                   pop af         
3026   22D4 18 18                jr MKMkingOut         
3027   22D6             KingStillE1:         
3028   22D6 18 16                jr MKMkingOut         
3029   22D8             MKMnoWK1:          
3030   22D8 FE 6B                cp 'k'
3031   22DA 20 12                jr nz,MKMkingOut
3032   22DC 79                   ld a,c
3033   22DD 32 85 01             ld (BKSQ),a
3034   22E0 FE 3C                cp 60
3035   22E2 28 0A                jr z,KingStillE8
3036   22E4 F5                   push af
3037   22E5 3A 82 01             ld a,(CASTLES)
3038   22E8 E6 F3                and %11110011
3039   22EA 32 82 01             ld (CASTLES),a         
3040   22ED F1                   pop af
3041   22EE             KingStillE8:         
3042   22EE                      
3043   22EE             MKMkingOut:
3044   22EE C9                   ret
3045   22EF             
3046   22EF             ; if rook has moved or has been captured, clear and save castling flags
3047   22EF             MKMUpdateRookMvCapt:
3048   22EF D5                   push de
3049   22F0 3A 82 01             ld a,(CASTLES)
3050   22F3 57                   ld d,a
3051   22F4 78                   ld a,b        ;from
3052   22F5 CD 14 23             call MKMiWKK
3053   22F8 CD 1B 23             call MKMiWKQ
3054   22FB CD 22 23             call MKMiBKK
3055   22FE CD 29 23             call MKMiBKQ
3056   2301 79                   ld a,c        ;to
3057   2302 CD 14 23             call MKMiWKK
3058   2305 CD 1B 23             call MKMiWKQ
3059   2308 CD 22 23             call MKMiBKK
3060   230B CD 29 23             call MKMiBKQ
3061   230E 7A                   ld a,d
3062   230F 32 82 01             ld (CASTLES),a
3063   2312 D1                   pop de
3064   2313 C9                   ret
3065   2314                      
3066   2314 FE 07       MKMiWKK: cp 7          ; is H1?
3067   2316 20 02                jr nz,MKMoWKK
3068   2318 CB 82                res 0,d       
3069   231A C9          MKMoWKK: ret
3070   231B FE 00       MKMiWKQ: cp 0          ; is A1?
3071   231D 20 02                jr nz,MKMoWKQ
3072   231F CB 8A                res 1,d       
3073   2321 C9          MKMoWKQ: ret
3074   2322 FE 3F       MKMiBKK: cp 63         ; is H8?
3075   2324 20 02                jr nz,MKMoBKK
3076   2326 CB 92                res 2,d       
3077   2328 C9          MKMoBKK: ret
3078   2329 FE 38       MKMiBKQ: cp 56         ; is A8?
3079   232B 20 02                jr nz,MKMoBKQ
3080   232D CB 9A                res 3,d       
3081   232F C9          MKMoBKQ: ret
3082   2330             
3083   2330                       
3084   2330             
3085   2330                               
3086   2330             ; save new en-passant square
3087   2330             MKMsaveEPSQ:
3088   2330 3A 83 01             ld a,(ENPSQ)
3089   2333 32 58 23             ld (EnPs2hist),a   ; save for history
3090   2336 3E FF                ld a,$ff
3091   2338 32 83 01             ld (ENPSQ),a
3092   233B 7A                   ld a,d
3093   233C FE 50                cp 'P'
3094   233E 20 17                jr nz, MKMnoeps
3095   2340 79                   ld a,c
3096   2341 D6 10                sub 16           ; are there 16 squares inbetween
3097   2343 B8                   cp b
3098   2344 28 08                jr z, MKMwEp     ; double move of white pawn
3099   2346                      ; try for black pawn
3100   2346 79                   ld a,c
3101   2347 C6 10                add a,16
3102   2349 B8                   cp b
3103   234A 28 06                jr z, MKMbEp      ; double move of black pawn 
3104   234C 18 09                jr MKMnoeps
3105   234E C6 08       MKMwEp:  add a,8
3106   2350 18 02                jr MKMsaveNewEp
3107   2352 D6 08       MKMbEp:  sub 8
3108   2354             MKMsaveNewEp:
3109   2354 32 83 01             ld (ENPSQ),a
3110   2357             MKMnoeps:
3111   2357 C9                   ret                                    
3112   2358             
3113   2358 00          EnPs2hist: .byte 0        ; to save en-passant square for history later
3114   2359             
3115   2359 00          Cstl2hist: .byte 0        ; to save castling flags for history later
3116   235A                                                                             
3117   235A             ; saves captured piece in list         
3118   235A             MM_capt2list:                      
3119   235A E5                   push hl
3120   235B 21 15 24             ld hl, UnMakeList
3121   235E             MKMloop1:         
3122   235E 7E                   ld a,(hl)
3123   235F FE 20                cp ' '
3124   2361 28 07                jr z,MKMblankL1
3125   2363 FE 00                cp 0
3126   2365 28 03                jr z,MKMblankL1
3127   2367 23                   inc hl
3128   2368 18 F4                jr MKMloop1
3129   236A             MKMblankL1:
3130   236A 7A                   ld a,d
3131   236B 77                   ld (hl),a       ; should save for next UnMakeMove      
3132   236C E1                   pop hl
3133   236D C9                   ret
3134   236E                      
3135   236E             ; castling moves, should move rook too                 
3136   236E             MMcastles:
3137   236E E5                   push hl
3138   236F 79                   ld a,c
3139   2370 FE 06                cp 6         ; g1?
3140   2372 20 12                jr nz,MMNoG1
3141   2374 3E 07                ld a, 7      ; rook on h1
3142   2376 CD 11 22             call MM_hl
3143   2379 CD 1B 22             call MM_0    ; empty square now
3144   237C 3E 05                ld a, 5      ; f1
3145   237E CD 11 22             call MM_hl
3146   2381 3E 52                ld a,'R'
3147   2383 77                   ld (hl),a
3148   2384 18 42                jr MMoverC         
3149   2386             MMNoG1:
3150   2386 FE 02                cp 2         ; c1?
3151   2388 20 12                jr nz,MMNoC1
3152   238A 3E 00                ld a, 0      ; rook on a1
3153   238C CD 11 22             call MM_hl
3154   238F CD 1B 22             call MM_0    ; empty square now
3155   2392 3E 03                ld a, 3      ; d1
3156   2394 CD 11 22             call MM_hl
3157   2397 3E 52                ld a,'R'
3158   2399 77                   ld (hl),a
3159   239A 18 2C                jr MMoverC
3160   239C             MMNoC1:
3161   239C FE 3E                cp 62        ; g8?
3162   239E 20 12                jr nz,MMNoG8
3163   23A0 3E 3F                ld a, 63     ; rook on h8
3164   23A2 CD 11 22             call MM_hl
3165   23A5 CD 1B 22             call MM_0    ; empty square now
3166   23A8 3E 3D                ld a, 61     ; f8
3167   23AA CD 11 22             call MM_hl
3168   23AD 3E 72                ld a,'r'
3169   23AF 77                   ld (hl),a
3170   23B0 18 16                jr MMoverC
3171   23B2             MMNoG8:
3172   23B2 FE 3A                cp 58        ; c8?
3173   23B4 20 12                jr nz,MMoverC
3174   23B6 3E 38                ld a, 56     ; rook on a8
3175   23B8 CD 11 22             call MM_hl
3176   23BB CD 1B 22             call MM_0    ; empty square now
3177   23BE 3E 3B                ld a, 59     ; d8
3178   23C0 CD 11 22             call MM_hl
3179   23C3 3E 72                ld a,'r'
3180   23C5 77                   ld (hl),a
3181   23C6 18 00                jr MMoverC
3182   23C8 E1          MMoverC: pop hl
3183   23C9 C9                   ret
3184   23CA             
3185   23CA             ; promoted pieces
3186   23CA             MMPromotion:
3187   23CA                      ; which piece?
3188   23CA 3A 38 19             ld a, (PromoPcId)
3189   23CD FE 04                cp 4          ; Queen?
3190   23CF 20 04                jr nz, MMNoQ
3191   23D1 3E 51                ld a, 'Q'
3192   23D3 18 1A                jr MMPcPut        
3193   23D5 FE 03       MMNoQ:   cp 3          ; Rook?
3194   23D7 20 04                jr nz, MMNoR
3195   23D9 3E 52                ld a, 'R'
3196   23DB 18 12                jr MMPcPut        
3197   23DD FE 02       MMNoR:   cp 2          ; Bishop?
3198   23DF 20 04                jr nz, MMNoB
3199   23E1 3E 42                ld a, 'B'
3200   23E3 18 0A                jr MMPcPut
3201   23E5 FE 01       MMNoB:   cp 1          ; Knight?  
3202   23E7 20 04                jr nz, MMNoN
3203   23E9 3E 4E                ld a, 'N'
3204   23EB 18 02                jr MMPcPut
3205   23ED 3E 51       MMNoN:   ld a, 'Q'     ; actually, should provide 3
3206   23EF             
3207   23EF             MMPcPut:
3208   23EF 4F                   ld c,a        ; save
3209   23F0 7A                   ld a,d
3210   23F1 FE 50                cp 'P'
3211   23F3 28 04                jr z,MMPcWProm
3212   23F5 3E 20                ld a,32
3213   23F7 81                   add a,c
3214   23F8 4F                   ld c,a        ; to lowercase
3215   23F9             MMPcWProm:
3216   23F9 71                   ld (hl),c
3217   23FA C9                   ret
3218   23FB                      
3219   23FB             ; en-passant capture         
3220   23FB             MMEnPass:
3221   23FB E5                   push hl
3222   23FC 7A                   ld a,d
3223   23FD FE 50                cp 'P'
3224   23FF 20 07                jr nz,MMPcBEnp         
3225   2401 3A 36 13             ld a,(SQt)
3226   2404 D6 08                sub 8
3227   2406 18 05                jr MMEnp1
3228   2408             MMPcBEnp:
3229   2408 3A 36 13             ld a,(SQt)
3230   240B C6 08                add a,8
3231   240D CD 11 22    MMEnp1:  call MM_hl
3232   2410 CD 1B 22             call MM_0    ; empty square now
3233   2413 E1                   pop hl
3234   2414 C9                   ret
3235   2415             ;END
3236   2415             
3237   2415             ;BEGIN of ========== UNMAKE MOVE
3238   2415             ;
3239   2415             ; UnMake move on BOARD (undo)
3240   2415             ; uses own history recordings in MOVE_HIST
3241   2415             ; which sets
3242   2415             ;  SQi - from square
3243   2415             ;  SQt - to square
3244   2415             ;   +also uses flags from history
3245   2415             
3246   2415                          ; we keep list of captured pieces to unmake later as stack
3247   2415             UnMakeList:
3248   2415 20 20 20 20          .byte "                                                                  "
3248   2419 20 20 20 20 
3248   241D 20 20 20 20 
3248   2421 20 20 20 20 
3248   2425 20 20 20 20 
3248   2429 20 20 20 20 
3248   242D 20 20 20 20 
3248   2431 20 20 20 20 
3248   2435 20 20 20 20 
3248   2439 20 20 20 20 
3248   243D 20 20 20 20 
3248   2441 20 20 20 20 
3248   2445 20 20 20 20 
3248   2449 20 20 20 20 
3248   244D 20 20 20 20 
3248   2451 20 20 20 20 
3248   2455 20 20 
3249   2457 20 20 20 20          .byte "                                                                  "
3249   245B 20 20 20 20 
3249   245F 20 20 20 20 
3249   2463 20 20 20 20 
3249   2467 20 20 20 20 
3249   246B 20 20 20 20 
3249   246F 20 20 20 20 
3249   2473 20 20 20 20 
3249   2477 20 20 20 20 
3249   247B 20 20 20 20 
3249   247F 20 20 20 20 
3249   2483 20 20 20 20 
3249   2487 20 20 20 20 
3249   248B 20 20 20 20 
3249   248F 20 20 20 20 
3249   2493 20 20 20 20 
3249   2497 20 20 
3250   2499 20 20 20 20          .byte "                                                                  "
3250   249D 20 20 20 20 
3250   24A1 20 20 20 20 
3250   24A5 20 20 20 20 
3250   24A9 20 20 20 20 
3250   24AD 20 20 20 20 
3250   24B1 20 20 20 20 
3250   24B5 20 20 20 20 
3250   24B9 20 20 20 20 
3250   24BD 20 20 20 20 
3250   24C1 20 20 20 20 
3250   24C5 20 20 20 20 
3250   24C9 20 20 20 20 
3250   24CD 20 20 20 20 
3250   24D1 20 20 20 20 
3250   24D5 20 20 20 20 
3250   24D9 20 20 
3251   24DB 20 20 20 20          .byte "                                                                  "
3251   24DF 20 20 20 20 
3251   24E3 20 20 20 20 
3251   24E7 20 20 20 20 
3251   24EB 20 20 20 20 
3251   24EF 20 20 20 20 
3251   24F3 20 20 20 20 
3251   24F7 20 20 20 20 
3251   24FB 20 20 20 20 
3251   24FF 20 20 20 20 
3251   2503 20 20 20 20 
3251   2507 20 20 20 20 
3251   250B 20 20 20 20 
3251   250F 20 20 20 20 
3251   2513 20 20 20 20 
3251   2517 20 20 20 20 
3251   251B 20 20 
3252   251D 00          flag_ix:       .byte 0      ; temporary flag of move made
3253   251E                     
3254   251E             UnMakeMove:
3255   251E F5                   push af
3256   251F C5                   push bc
3257   2520 D5                   push de
3258   2521 E5                   push hl
3259   2522 DD E5                push ix
3260   2524 FD E5                push iy
3261   2526                      
3262   2526 CD 81 25             call UnMKrestoreFromHist       ; Restores from history
3263   2529                            
3264   2529 3A 35 13             ld a, (SQi)   ; from square
3265   252C 47                   ld b,a
3266   252D                                
3267   252D 3A 36 13             ld a, (SQt)   ; to square
3268   2530 4F                   ld c,a
3269   2531                              
3270   2531                      ; Let's undo it
3271   2531 CD AA 22             call Swap_Sides   ; Swap sides
3272   2534                      
3273   2534 CD 11 22             call MM_hl
3274   2537 56                   ld d,(hl)
3275   2538 CD 1B 22             call MM_0      ; empty square now
3276   253B                               
3277   253B 3A 1D 25             ld a, (flag_ix)     ; flags
3278   253E CB 47                bit 0,a
3279   2540 28 0A                jr z,UnMKnoCapture
3280   2542                
3281   2542 3A 1D 25             ld a, (flag_ix)     ; flags
3282   2545 CB 6F                bit 5,a             ; ignore en-passant case
3283   2547 20 03                jr nz,UnMKnoCapture
3284   2549              
3285   2549 CD D6 25             call UnMKCapturedPiece
3286   254C             
3287   254C             UnMKnoCapture:
3288   254C                               
3289   254C 3A 35 13             ld a,(SQi)
3290   254F CD 11 22             call MM_hl
3291   2552 7A                   ld a,d
3292   2553 77                   ld (hl),a       ; just place our piece back
3293   2554             
3294   2554 C5                   push bc
3295   2555 48                   ld c,b          ; square-from
3296   2556 CD BD 22             call UpdateKingSQ
3297   2559 C1                   pop bc
3298   255A                      
3299   255A 3A 1D 25             ld a, (flag_ix)      ; flags
3300   255D CB 67                bit 4,a              ; castling      
3301   255F 28 03                jr z,UnMKNoCastle
3302   2561                      
3303   2561 CD F0 25             call  UnMKcastles          
3304   2564                                                   
3305   2564             UnMKNoCastle:
3306   2564 3A 1D 25             ld a, (flag_ix)     ; flags    
3307   2567 CB 4F                bit 1,a             ; possibly promotion
3308   2569 28 03                jr z, UnMKNoProm
3309   256B                      
3310   256B CD 4C 26             call UnMKPromotion  ; put pawn back on board         
3311   256E             UnMKNoProm:
3312   256E 3A 1D 25             ld a, (flag_ix)     ; flags
3313   2571 CB 6F                bit 5,a             ; en-passant         
3314   2573 28 03                jr z,UnMKNoEP
3315   2575                      
3316   2575 CD 62 26             call UnMKEnPass  ; en-passant capture
3317   2578             UnMKNoEP:                                     
3318   2578                      ; en-passant square is updated before
3319   2578             
3320   2578             UnMKEnd:
3321   2578             
3322   2578 FD E1                pop iy                           
3323   257A DD E1                pop ix
3324   257C E1                   pop hl
3325   257D D1                   pop de
3326   257E C1                   pop bc
3327   257F F1                   pop af
3328   2580 C9                   ret
3329   2581                      
3330   2581             ; Get SQi,SQt, promoted piece from history
3331   2581             UnMKrestoreFromHist:
3332   2581 E5                   push hl
3333   2582 C5                   push bc
3334   2583 06 00                ld b,0
3335   2585 3A B3 0E             ld a,(MOVE_CNT)
3336   2588 3D                   dec a
3337   2589 4F                   ld c,a
3338   258A 32 B3 0E             ld (MOVE_CNT),a
3339   258D 21 B4 0E             ld hl, MOVE_HIST
3340   2590                      
3341   2590 FE 3C                cp 60
3342   2592 38 07                jr c,slowBcAdd2
3343   2594 CB 21                sla c
3344   2596 CB 21                sla c      ; 4*c
3345   2598                       ;1.byte = from sq
3346   2598                       ;2.byte = to sq
3347   2598                       ;3.byte = flags and promoted to
3348   2598                       ;4.byte = en-passant square and castling info before
3349   2598 09                   add hl,bc
3350   2599 18 04                jr overBcAdd2         
3351   259B             slowBcAdd2:         
3352   259B 09                   add hl,bc
3353   259C 09                   add hl,bc
3354   259D 09                   add hl,bc
3355   259E 09                   add hl,bc
3356   259F             overBcAdd2:         
3357   259F             
3358   259F 7E                   ld a,(hl)
3359   25A0 32 35 13             ld (SQi),a
3360   25A3 23                   inc hl
3361   25A4 7E                   ld a,(hl)
3362   25A5 32 36 13             ld (SQt),a
3363   25A8 23                   inc hl
3364   25A9 7E                   ld a,(hl)
3365   25AA 32 1D 25             ld (flag_ix),a
3366   25AD 23                   inc hl
3367   25AE 7E                   ld a,(hl)
3368   25AF 47                   ld b,a
3369   25B0 E6 0F                and %00001111
3370   25B2 FE 00                cp 0
3371   25B4 28 0C                jr z,unmkEp0
3372   25B6 FE 09                cp 9
3373   25B8 30 04                jr nc,unmkBlackEp
3374   25BA C6 0F                add a,15            ; a3=16...
3375   25BC 18 06                jr unmkEpS
3376   25BE             unmkBlackEp:         
3377   25BE C6 1F                add a,31            ; a6=40...
3378   25C0 18 02                jr unmkEpS         
3379   25C2 3E FF       unmkEp0: ld a,$ff
3380   25C4 32 83 01    unmkEpS: ld (ENPSQ),a      ; restore ENPSQ
3381   25C7 78                   ld a,b
3382   25C8 CB 3F                srl a
3383   25CA CB 3F                srl a
3384   25CC CB 3F                srl a    ; 4 shifts
3385   25CE CB 3F                srl a
3386   25D0 32 82 01             ld (CASTLES),a    ; restore castling info    
3387   25D3 C1                   pop bc
3388   25D4 E1                   pop hl
3389   25D5 C9                   ret
3390   25D6             
3391   25D6             ; Get captured piece from list and put back
3392   25D6             UnMKCapturedPiece:                      
3393   25D6             
3394   25D6 D5                   push de
3395   25D7 11 15 24             ld de, UnMakeList
3396   25DA             UnMKloop1:        
3397   25DA 1A                   ld a,(de)
3398   25DB FE 20                cp ' '
3399   25DD 28 07                jr z,UnMKblankL1
3400   25DF FE 00                cp 0
3401   25E1 28 03                jr z,UnMKblankL1
3402   25E3 13                   inc de
3403   25E4 18 F4                jr UnMKloop1
3404   25E6             UnMKblankL1:
3405   25E6 1B                   dec de
3406   25E7 1A                   ld a,(de)       ; should be a previous MakeMove
3407   25E8 F5                   push af
3408   25E9 3E 20                ld a,' '
3409   25EB 12                   ld (de),a       ; clear this
3410   25EC F1                   pop af
3411   25ED D1                   pop de
3412   25EE 77                   ld (hl),a       ; place back captured piece   
3413   25EF C9                   ret     
3414   25F0                                                                   
3415   25F0             ; castling moves, should move rook back too                 
3416   25F0             UnMKcastles:
3417   25F0 E5                   push hl
3418   25F1 79                   ld a,c
3419   25F2 FE 06                cp 6         ; g1?
3420   25F4 20 12                jr nz,UnMKNoG1
3421   25F6 3E 05                ld a, 5      ; rook on f1
3422   25F8 CD 11 22             call MM_hl
3423   25FB CD 1B 22             call MM_0    ; empty square now
3424   25FE 3E 07                ld a, 7      ; h1
3425   2600 CD 11 22             call MM_hl
3426   2603 3E 52                ld a,'R'
3427   2605 77                   ld (hl),a
3428   2606 18 42                jr UnMKoverC         
3429   2608             UnMKNoG1:
3430   2608 FE 02                cp 2         ; c1?
3431   260A 20 12                jr nz,UnMKNoC1
3432   260C 3E 03                ld a, 3      ; rook on d1
3433   260E CD 11 22             call MM_hl
3434   2611 CD 1B 22             call MM_0    ; empty square now
3435   2614 3E 00                ld a, 0      ; a1
3436   2616 CD 11 22             call MM_hl
3437   2619 3E 52                ld a,'R'
3438   261B 77                   ld (hl),a
3439   261C 18 2C                jr UnMKoverC
3440   261E             UnMKNoC1:
3441   261E FE 3E                cp 62        ; g8?
3442   2620 20 12                jr nz,UnMKNoG8
3443   2622 3E 3D                ld a, 61     ; rook on f8
3444   2624 CD 11 22             call MM_hl
3445   2627 CD 1B 22             call MM_0    ; empty square now
3446   262A 3E 3F                ld a, 63     ; h8
3447   262C CD 11 22             call MM_hl
3448   262F 3E 72                ld a,'r'
3449   2631 77                   ld (hl),a
3450   2632 18 16                jr UnMKoverC
3451   2634             UnMKNoG8:
3452   2634 FE 3A                cp 58        ; c8?
3453   2636 20 12                jr nz,UnMKoverC
3454   2638 3E 3B                ld a, 59     ; rook on d8
3455   263A CD 11 22             call MM_hl
3456   263D CD 1B 22             call MM_0    ; empty square now
3457   2640 3E 38                ld a, 56     ; a8
3458   2642 CD 11 22             call MM_hl
3459   2645 3E 72                ld a,'r'
3460   2647 77                   ld (hl),a
3461   2648 18 00                jr UnMKoverC
3462   264A             UnMKoverC:
3463   264A E1                   pop hl
3464   264B C9                   ret
3465   264C             
3466   264C             ; promoted pieces
3467   264C             UnMKPromotion:
3468   264C E5                   push hl
3469   264D 3E 07                ld a,7
3470   264F B9                   cp c
3471   2650 38 04                jr c,UnMKwhitePw
3472   2652 3E 70                ld a,'p'
3473   2654 18 02                jr UnMKPw
3474   2656             UnMKwhitePw:
3475   2656 3E 50                ld a,'P'
3476   2658 57          UnMKPw:  ld d,a
3477   2659 3A 35 13             ld a,(SQi)
3478   265C CD 11 22             call MM_hl         
3479   265F 72                   ld (hl),d
3480   2660 E1                   pop hl
3481   2661 C9                   ret
3482   2662                       
3483   2662             ; en-passant capture         
3484   2662             UnMKEnPass:
3485   2662 E5                   push hl
3486   2663 7A                   ld a,d
3487   2664 FE 50                cp 'P'
3488   2666 20 0C                jr nz,UnMKPcBEnp         
3489   2668 3A 36 13             ld a,(SQt)
3490   266B D6 08                sub 8
3491   266D CD 11 22             call MM_hl
3492   2670 36 70                ld (hl),'p'
3493   2672 18 0A                jr UnMKEnp1
3494   2674             UnMKPcBEnp:
3495   2674 3A 36 13             ld a,(SQt)
3496   2677 C6 08                add a,8
3497   2679 CD 11 22             call MM_hl
3498   267C 36 50                ld (hl),'P'
3499   267E             UnMKEnp1:
3500   267E E1                   pop hl
3501   267F C9                   ret
3502   2680                              
3503   2680             ;END
3504   2680                   
3505   2680             ;BEGIN of ========== DEBUG tool
3506   2680             
3507   2680             ; Put call DEBUGs in ASM to see that I got here
3508   2680                      
3509   2680 44 45 42 55 debugstr: .byte "DEBUG!$", 0  ; outputs this when reaches
3509   2684 47 21 24 00 
3510   2688             
3511   2688             DEBUGs:
3512   2688             
3513   2688 D5                   push de
3514   2689 11 80 26             ld de, debugstr
3515   268C CD A6 38             call PrintString
3516   268F D1                   pop de
3517   2690 C9                   ret            
3518   2691             
3519   2691 44 45 42 55         .byte "DEBUGZ",0    ; put in code to find via debugger
3519   2695 47 5A 00 
3520   2698             ;END
3521   2698             
3522   2698             ;BEGIN of ========== KING CHECKMATE DETECTION
3523   2698             ;;
3524   2698             ; It verifies check+ moves of the list for possible movement.
3525   2698             ; Makes it slower, anyway correct for complete notation.
3526   2698             ; Sets bit-7 for checkmate moves.
3527   2698             ;
3528   2698             LookForCheckmates:
3529   2698             
3530   2698 3A 37 13             ld a, (MateDetect)
3531   269B FE 00                cp 0
3532   269D 20 6F                jr nz, CKMEnd
3533   269F                              
3534   269F DD 21 92 04          ld ix, NEXT_MVCNT
3535   26A3 DD 46 00             ld b,(ix)
3536   26A6 DD 21 93 04          ld ix, NEXT_MOVES
3537   26AA 78                   ld a, b
3538   26AB FE 00                cp 0
3539   26AD 28 5F                jr z,CKMEnd
3540   26AF                      
3541   26AF             CKMToLoop:
3542   26AF DD 23                inc ix        ; piece
3543   26B1 DD 23                inc ix        ; from
3544   26B3 DD 23                inc ix        ; to
3545   26B5 DD 7E 00             ld a,(ix)     ; flags
3546   26B8 CB 77                bit 6,a
3547   26BA 28 4E                jr z, CKMnoCheck
3548   26BC DD 2B                dec ix
3549   26BE DD 2B                dec ix
3550   26C0 DD 7E 00             ld a,(ix)
3551   26C3 32 35 13             ld (SQi),a
3552   26C6 DD 23                inc ix
3553   26C8 DD 7E 00             ld a,(ix)
3554   26CB 32 36 13             ld (SQt),a
3555   26CE DD 23                inc ix
3556   26D0 DD 7E 00             ld a,(ix)     ; flags
3557   26D3 CB 4F                bit 1,a       
3558   26D5 28 0C                jr z, CKMnoPromo
3559   26D7 DD 7E 00             ld a,(ix)     ; flags again       
3560   26DA CB 3F                srl a
3561   26DC CB 3F                srl a
3562   26DE E6 03                and 3
3563   26E0 3C                   inc a
3564   26E1 18 02                jr CKMpcProm
3565   26E3             CKMnoPromo:
3566   26E3 3E 00                ld a,0
3567   26E5             CKMpcProm:         
3568   26E5 32 38 19             ld (PromoPcId),a
3569   26E8 CD 47 21             call MakeMove  ; make this move again
3570   26EB                      
3571   26EB 3E 01                ld a,1
3572   26ED 32 37 13             ld (MateDetect),a            
3573   26F0 CD 38 13             call GenMoves  ; finds any legal move
3574   26F3                      
3575   26F3 CD 1E 25             call UnMakeMove  ; unmake
3576   26F6                      
3577   26F6 3A 37 13             ld a,(MateDetect)
3578   26F9 FE 02                cp 2           ; is there any?
3579   26FB 28 08                jr z, CKMnoMate
3580   26FD                      
3581   26FD DD 7E 00             ld a,(ix)     ; flags again
3582   2700 CB FF                set 7,a       ; bit 7 - checkmate
3583   2702 DD 77 00             ld (ix),a     ; save flag   
3584   2705                      
3585   2705             CKMnoMate:
3586   2705 3E 00                ld a,0
3587   2707 32 37 13             ld (MateDetect),a
3588   270A                                                                                                                             
3589   270A             CKMnoCheck:
3590   270A DD 23                inc ix
3591   270C 10 A1                djnz CKMToLoop
3592   270E             
3593   270E             CKMEnd:                           
3594   270E C9                   ret
3595   270F                      
3596   270F             ;END 
3597   270F             
3598   270F             
3599   270F             
3600   270F                                
3601   270F             ;BEGIN of ========== COUNTER for large loop of 65536 maximum value
3602   270F             ;
3603   270F             ; just imitates 2byte integer in 8-bit registers
3604   270F             
3605   270F 00          Il:      .byte 0
3606   2710 00          Ih:      .byte 0
3607   2711             
3608   2711             
3609   2711 32 10 27    LD_Ix:   ld (Ih),a  ; sets a-reg x 256 value to counter
3610   2714 3E 00                ld a,0
3611   2716 32 0F 27             ld (Il),a
3612   2719 C9                   ret
3613   271A             
3614   271A C5          DEC_I:   push bc
3615   271B 3A 0F 27             ld a,(Il)
3616   271E 4F                   ld c,a
3617   271F 3A 10 27             ld a,(Ih)
3618   2722 47                   ld b,a
3619   2723 0B                   dec bc
3620   2724 79                   ld a,c
3621   2725 32 0F 27             ld (Il),a
3622   2728 78                   ld a,b
3623   2729 32 10 27             ld (Ih),a
3624   272C 3E 00                ld a,0
3625   272E B8                   cp b
3626   272F 20 06                jr nz, IsNo0_I
3627   2731 B9                   cp c
3628   2732 20 03                jr nz, IsNo0_I
3629   2734 37                   scf       ; sets CF on empty counter
3630   2735 18 02                jr Is0ret
3631   2737 37          IsNo0_I: scf
3632   2738 3F                   ccf
3633   2739 C1          Is0ret:  pop bc
3634   273A C9                   ret
3635   273B             ;END
3636   273B             
3637   273B                   
3638   273B             ;        
3639   273B             ; INCLUDES        
3640   273B             ;        
3641   273B             
3642   273B                       #include "ChessUI.ASM"     ; USER interface and grahics
0001+  273B             ;=======================================
0002+  273B             ;
0003+  273B             ; Graphics part of chess program ChessY2K
0004+  273B             ;
0005+  273B             ;=======================================
0006+  273B             ;
0007+  273B             ; USER INTERFACE
0008+  273B             ; screen, vdp, keyboard controls
0009+  273B             ;
0010+  273B             ; Uses VRAM even too much for chess needs.
0011+  273B             ; Will be good for presentation recording.
0012+  273B             ;
0013+  273B             ;---------------------------------------
0014+  273B             
0015+  273B             ;
0016+  273B             ; Defines labels to access datas after loading.
0017+  273B             ; This was genereated by "export" operator of tasm
0018+  273B             ; in ChessPI.ASM
0019+  273B             ; REPLACE THESE AFTER EACH RECOMPILE OF CHESSPI
0020+  273B             
0021+  273B             dtBBB            .EQU  $8001
0022+  273B             dtBBW            .EQU  $8159
0023+  273B             dtBKB            .EQU  $82b1
0024+  273B             dtBKW            .EQU  $8409
0025+  273B             dtBNB            .EQU  $8561
0026+  273B             dtBNW            .EQU  $86b9
0027+  273B             dtBPB            .EQU  $8811
0028+  273B             dtBPW            .EQU  $8969
0029+  273B             dtBQB            .EQU  $8ac1
0030+  273B             dtBQW            .EQU  $8c19
0031+  273B             dtBRB            .EQU  $8d71
0032+  273B             dtBRW            .EQU  $8ec9
0033+  273B             dtWBB            .EQU  $9021
0034+  273B             dtWBW            .EQU  $9179
0035+  273B             dtWKB            .EQU  $92d1
0036+  273B             dtWKW            .EQU  $9429
0037+  273B             dtWNB            .EQU  $9581
0038+  273B             dtWNW            .EQU  $96d9
0039+  273B             dtWPB            .EQU  $9831
0040+  273B             dtWPW            .EQU  $9989
0041+  273B             dtWQB            .EQU  $9ae1
0042+  273B             dtWQW            .EQU  $9c39
0043+  273B             dtWRB            .EQU  $9d91
0044+  273B             dtWRW            .EQU  $9ee9
0045+  273B             dtSQB            .EQU  $a041
0046+  273B             dtSQW            .EQU  $a199
0047+  273B             dtFRDN           .EQU  $a2f1
0048+  273B             dtFRLF           .EQU  $a63f
0049+  273B             dtFRRT           .EQU  $a98d
0050+  273B             dtFRUP           .EQU  $acdb
0051+  273B             dtWhiteToMove    .EQU  $b029
0052+  273B             dtWhiteNotToMove .EQU  $b091
0053+  273B             dtBlackToMove    .EQU  $b0f9
0054+  273B             dtBlackNotToMove .EQU  $b161
0055+  273B             dtWP             .EQU  $b1c9
0056+  273B             dtBP             .EQU  $b321
0057+  273B             dtWN             .EQU  $b479
0058+  273B             dtBN             .EQU  $b5d1
0059+  273B             dtWB             .EQU  $b729
0060+  273B             dtBB             .EQU  $b881
0061+  273B             dtWR             .EQU  $b9d9
0062+  273B             dtBR             .EQU  $bb31
0063+  273B             dtWQ             .EQU  $bc89
0064+  273B             dtBQ             .EQU  $bde3
0065+  273B             dtWK             .EQU  $bf3b
0066+  273B             dtBK             .EQU  $c093
0067+  273B             dtMSXlogo        .EQU  $c1eb
0068+  273B             
0069+  273B             
0070+  273B 00          Stylo:    .byte 0   ; set as configuration flags:
0071+  273C                                 ; 0-bit to use cursor 
0072+  273C                                 ; 1-bit allow drag and move pieces
0073+  273C                                 ; 2-bit set up pieces mode
0074+  273C             
0075+  273C 0C          CursorSq: .byte 12         ; square of cursor, on init=E2
0076+  273D FF          DragSq:   .byte $ff        ; drag at square
0077+  273E 00          RplyMs:   .byte 0          ; position in MOVE_str for replayer
0078+  273F             
0079+  273F 00          Grph_Exit: .byte 0        ; 1 on ESC exit 
0080+  2740             
0081+  2740             PiecesIX:
0082+  2740 9F A1 47 A0         .word dtSQW+6, dtSQB+6
0083+  2744 8F 99 37 98         .word dtWPW+6, dtWPB+6, dtWNW+6, dtWNB+6, dtWBW+6, dtWBB+6
0083+  2748 DF 96 87 95 
0083+  274C 7F 91 27 90 
0084+  2750 EF 9E 97 9D         .word dtWRW+6, dtWRB+6, dtWQW+6, dtWQB+6, dtWKW+6, dtWKB+6
0084+  2754 3F 9C E7 9A 
0084+  2758 2F 94 D7 92 
0085+  275C 6F 89 17 88         .word dtBPW+6, dtBPB+6, dtBNW+6, dtBNB+6, dtBBW+6, dtBBB+6
0085+  2760 BF 86 67 85 
0085+  2764 5F 81 07 80 
0086+  2768 CF 8E 77 8D         .word dtBRW+6, dtBRB+6, dtBQW+6, dtBQB+6, dtBKW+6, dtBKB+6         
0086+  276C 1F 8C C7 8A 
0086+  2770 0F 84 B7 82 
0087+  2774             
0088+  2774             
0089+  2774             
0090+  2774             VRAMcopy:       ; for each piece, to know that was copied to VRAM
0091+  2774 00 00 00 00         .word 0,0,0,0,0,0,0,0,0,0,0,0,0
0091+  2778 00 00 00 00 
0091+  277C 00 00 00 00 
0091+  2780 00 00 00 00 
0091+  2784 00 00 00 00 
0091+  2788 00 00 00 00 
0091+  278C 00 00 
0092+  278E             VRAMcpXY:       ; for each piece, holds HL (X,Y coord.)
0093+  278E 00 00 00 00         .word 0,0,0,0,0,0,0,0,0,0,0,0,0 
0093+  2792 00 00 00 00 
0093+  2796 00 00 00 00 
0093+  279A 00 00 00 00 
0093+  279E 00 00 00 00 
0093+  27A2 00 00 00 00 
0093+  27A6 00 00 
0094+  27A8 00 00 00 00         .word 0,0,0,0,0,0,0,0,0,0,0,0,0
0094+  27AC 00 00 00 00 
0094+  27B0 00 00 00 00 
0094+  27B4 00 00 00 00 
0094+  27B8 00 00 00 00 
0094+  27BC 00 00 00 00 
0094+  27C0 00 00 
0095+  27C2             
0096+  27C2 00          VRAMcirc: .byte 0 ; to know that sign copied to VRAM
0097+  27C3             
0098+  27C3                             ; the same for masks of black and white pieces
0099+  27C3                             ; Masks are used when piece is moving.
0100+  27C3                             ; Simple square redraw is used after animation is over.
0101+  27C3             PiecesMskIX:
0102+  27C3 CF B1 7F B4         .word dtWP+6, dtWN+6, dtWB+6, dtWR+6, dtWQ+6, dtWK+6
0102+  27C7 2F B7 DF B9 
0102+  27CB 8F BC 41 BF 
0103+  27CF 27 B3 D7 B5         .word dtBP+6, dtBN+6, dtBB+6, dtBR+6, dtBQ+6, dtBK+6
0103+  27D3 87 B8 37 BB 
0103+  27D7 E9 BD 99 C0 
0104+  27DB 00 00 00 00 VRAMcpMsk:    .word 0,0,0,0,0,0
0104+  27DF 00 00 00 00 
0104+  27E3 00 00 00 00 
0105+  27E7 00 00 00 00 VRAMcpMskXY:  .word 0,0,0,0,0,0,0,0,0,0,0,0  
0105+  27EB 00 00 00 00 
0105+  27EF 00 00 00 00 
0105+  27F3 00 00 00 00 
0105+  27F7 00 00 00 00 
0105+  27FB 00 00 00 00 
0106+  27FF             
0107+  27FF 2F B0 67 B1 CircIX: .word dtWhiteToMove+6, dtBlackNotToMove+6, dtWhiteNotToMove+6, dtBlackToMove+6
0107+  2803 97 B0 FF B0 
0108+  2807                                                                                                                                                                                                                    
0109+  2807             GraphicsS:
0110+  2807                      
0111+  2807                      ; loads datas of graphics in memory from file
0112+  2807 CD AD 35             call ChessY2K_GraphDatas_load
0113+  280A                         
0114+  280A 3E 0C                ld a,12
0115+  280C 32 3C 27             ld (CursorSq),a           ; cursor on E2
0116+  280F 3E FF                ld a,$ff
0117+  2811 32 3D 27             ld (DragSq),a             ; no drag
0118+  2814 3E 00                ld a,0
0119+  2816 32 3F 27             ld (Grph_Exit),a          ; starting...
0120+  2819 32 3E 27             ld (RplyMs),a            ; set replayer position to 0  
0121+  281C                      
0122+  281C CD 8A 29             call ClearLastFEN         ; for setup position clear previous one
0123+  281F CD D7 37             call SetScreen5By30h      ; set Screen 5 by using BIOS
0124+  2822 CD DE 37             call DisableScreenBy30h   ; do not display
0125+  2825 CD FD 38             call Copy_VdpRegs         ; save VDP regs
0126+  2828 CD 45 38             call VDPfaster            ; optimize VDP, sprites off
0127+  282B                      
0128+  282B 21 C9 35             ld hl, tbPalettes         ;
0129+  282E CD 11 38             call SetPaletteByTable    ; defines 16colors
0130+  2831 CD 87 28             call SetGraphics0         ; most graphics inits
0131+  2834 CD FC 2F             call PutMSXlogo           ; put MSX lable on screen
0132+  2837 CD 5C 31             call PutToMove            ; draws and saves rounded-sign which side to move
0133+  283A                                                ;  (and saves to VRAM too)
0134+  283A                         
0135+  283A                      ;1.draw just squares
0136+  283A CD 36 30             call PutFrame             ; puts frame for board
0137+  283D CD 55 29             call Draw0Board           ; just draw empty board without pieces
0138+  2840                      
0139+  2840                      ;2 create copy of pictures in VRAM      
0140+  2840 CD 45 29             call SetPMapFEN           ; sets special board for saving at XY in VRAM to know later
0141+  2843 CD B3 2C             call DrawBoard            ; draws complete board with pieces and saves bitmaps
0142+  2846 CD 55 29             call Draw0Board           ; just draw empty board to overwrite glitches
0143+  2849 CD 36 30             call PutFrame             ; redraw frame - with no defects
0144+  284C             
0145+  284C                      ;3 set chess position to play from
0146+  284C CD 76 29             call SetFENbyMode         ; set position according mode
0147+  284F CD B3 2C             call DrawBoard            ; now uses saved pieces
0148+  2852 CD 5C 31             call PutToMove            ; redraw using saved
0149+  2855                      
0150+  2855 3E 00                ld a,0
0151+  2857 CD 3E 39             call SetPage              ; Page to display
0152+  285A CD E3 37             call EnableScreenBy30h    ; display on
0153+  285D                      
0154+  285D CD 50 32             call DrawCursor           ; Draws a rectangle of cursor on square
0155+  2860 CD 38 13             call GenMoves             ; And generate first moves too.
0156+  2863                      
0157+  2863 CD 5B 38             call InkeyKeyBy30h      ; keypress detect
0158+  2866 32 C0 32             ld (PreKeyWas),a         ; saves last key
0159+  2869             
0160+  2869             LOOP_GRAPHICS:
0161+  2869 CD 5B 38             call InkeyKeyBy30h        ; keypress detect
0162+  286C FE 00                cp 0
0163+  286E 28 03                jr z, no_key_pressed
0164+  2870             
0165+  2870 CD C1 32             call Cursor_Key_Controls  ; keyboard, cursor by arrow-keys
0166+  2873             no_key_pressed:
0167+  2873                             
0168+  2873 CD 61 2B             call ANIMATION            ; process animations, if there should be
0169+  2876             
0170+  2876 3A 3F 27             ld a,(Grph_Exit)
0171+  2879 FE 00                cp 0                      ; Exit on ESC 
0172+  287B 28 EC                jr z,LOOP_GRAPHICS                                                                    
0173+  287D                                                         
0174+  287D CD 2C 3B             call RestoreColors
0175+  2880 CD 14 39             call Rest_VdpRegs         ; restore VDP regs
0176+  2883 CD 69 38             call SetScreen0By30h      ; set Screen 0
0177+  2886                      
0178+  2886 C9                   ret
0179+  2887                      
0180+  2887             ; set page 0, color 0, vdp for drawing
0181+  2887             
0182+  2887             SetGraphics0:
0183+  2887 F5                   push af
0184+  2888 E5                   push hl
0185+  2889                      
0186+  2889 3E 00                ld a,0
0187+  288B CD 3C 38             call SetBackgrColor       ; sets color by number
0188+  288E 3E 00                ld a,0
0189+  2890 CD 3E 39             call SetPage              ; Page to display
0190+  2893                               
0191+  2893 3E 00                ld a,0
0192+  2895 21 00 00             ld hl,0
0193+  2898 CD 51 39             call Set_Vdp_Write        ; gona send to vdp
0194+  289B                      
0195+  289B E1                   pop hl
0196+  289C F1                   pop af
0197+  289D C9                   ret 
0198+  289E             
0199+  289E 38 2F 38 2F emptyFEN:    .byte "8/8/8/8/8/8/8/8 w - - 0 1",0
0199+  28A2 38 2F 38 2F 
0199+  28A6 38 2F 38 2F 
0199+  28AA 38 2F 38 20 
0199+  28AE 77 20 2D 20 
0199+  28B2 2D 20 30 20 
0199+  28B6 31 00 
0200+  28B8 38 2F 50 50 piecemapFEN: .byte "8/PPpp4/NNnn4/BBbb4/RRrr4/QQqq4/KKkk4/8 w - - 0 1",0
0200+  28BC 70 70 34 2F 
0200+  28C0 4E 4E 6E 6E 
0200+  28C4 34 2F 42 42 
0200+  28C8 62 62 34 2F 
0200+  28CC 52 52 72 72 
0200+  28D0 34 2F 51 51 
0200+  28D4 71 71 34 2F 
0200+  28D8 4B 4B 6B 6B 
0200+  28DC 34 2F 38 20 
0200+  28E0 77 20 2D 20 
0200+  28E4 2D 20 30 20 
0200+  28E8 31 00 
0201+  28EA 24          wasSetUpFEN: .byte "$"
0202+  28EB                          .ds 90
0203+  2945             
0204+  2945             SetPMapFEN:                        ; set special FEN for piece bitmaps
0205+  2945 F5                   push af
0206+  2946 DD E5                push ix
0207+  2948 3E 01                ld a,1
0208+  294A DD 21 B8 28          ld ix, piecemapFEN
0209+  294E CD D8 1A             call SetFEN
0210+  2951 DD E1                pop ix
0211+  2953 F1                   pop af
0212+  2954 C9                   ret
0213+  2955                     
0214+  2955             Draw0Board:                        ; draws an empty board without pieces 
0215+  2955 F5                   push af
0216+  2956 DD E5                push ix               
0217+  2958 CD 6C 29             call SetEmptyFEN         ; set empty board      
0218+  295B 3E 01                ld a,1
0219+  295D 32 C9 2C             ld (DrItFl),a
0220+  2960 CD B3 2C             call DrawBoard            ; just draw empty board without pieces
0221+  2963 3E 00                ld a,0
0222+  2965 32 C9 2C             ld (DrItFl),a
0223+  2968 DD E1                pop ix
0224+  296A F1                   pop af 
0225+  296B C9                   ret
0226+  296C                      
0227+  296C             SetEmptyFEN:                 ; this sets an empty board position
0228+  296C 3E 01                ld a,1
0229+  296E DD 21 9E 28          ld ix, emptyFEN
0230+  2972 CD D8 1A             call SetFEN         
0231+  2975 C9                   ret
0232+  2976                      
0233+  2976             SetFENbyMode:                ; sets position by mode
0234+  2976 F5                   push af 
0235+  2977 3A 3B 27             ld a,(Stylo)    
0236+  297A                               
0237+  297A CB 57                bit 2,a
0238+  297C 28 05                jr z, SetStartFEN
0239+  297E             
0240+  297E CD 6C 29             call SetEmptyFEN    ; set empty board
0241+  2981 18 05                jr SetFByMover
0242+  2983             
0243+  2983             SetStartFEN:         
0244+  2983 3E 00                ld a,0              ; set default position
0245+  2985 CD D8 1A             call SetFEN
0246+  2988             SetFByMover:
0247+  2988 F1                   pop af
0248+  2989 C9                   ret
0249+  298A                      
0250+  298A             ClearLastFEN:
0251+  298A F5                   push af
0252+  298B D5                   push de
0253+  298C 11 EA 28             ld de,wasSetUpFEN
0254+  298F 3E 24                ld a,'$'
0255+  2991 12                   ld (de),a
0256+  2992 D1                   pop de
0257+  2993 F1                   pop af
0258+  2994 C9                   ret
0259+  2995             
0260+  2995                      
0261+  2995             ;-----------------------------------------------------
0262+  2995             ;
0263+  2995             ; Chess move by cursor and space
0264+  2995             ;
0265+  2995             ; Validates move, moves piece on board and screen.
0266+  2995             ; SQi - from square
0267+  2995             ; SQt - to square
0268+  2995             ; PromoPcId - id of piece to promote = 4-queen,3-rook,2-bishop,1-knight, 0-no promotion
0269+  2995             
0270+  2995             Chess_Move_Cursor:
0271+  2995 F5                   push af
0272+  2996 3A FB 2A             ld a,(Move_sq_f)
0273+  2999 32 35 13             ld (SQi),a
0274+  299C 3A FC 2A             ld a,(Move_sq_t)
0275+  299F 32 36 13             ld (SQt),a
0276+  29A2 3E 00                ld a,0
0277+  29A4 32 38 19             ld (PromoPcId),a
0278+  29A7 3E 00                ld a,0
0279+  29A9 32 0E 2B             ld (AnimUnMk),a
0280+  29AC CD 0F 2B             call setAnimation        ; animate it and make move
0281+  29AF             NotValidChMv:         
0282+  29AF F1                   pop af
0283+  29B0 C9                   ret
0284+  29B1                      
0285+  29B1             Chess_Move_Real:
0286+  29B1 CD 47 21             call MakeMove            ; Goes when animation is over
0287+  29B4 CD 0F 2A             call AfterChessMovement
0288+  29B7 C9                   ret
0289+  29B8             
0290+  29B8             ;--------------------------------------------------------
0291+  29B8             ;
0292+  29B8             ; Undo chess animated chess move
0293+  29B8             ;
0294+  29B8             Chess_UnMake_Move_U:
0295+  29B8 F5                   push af
0296+  29B9 C5                   push bc
0297+  29BA D5                   push de
0298+  29BB E5                   push hl
0299+  29BC                                                                                                            
0300+  29BC 21 B3 0E             ld hl, MOVE_CNT
0301+  29BF 4E                   ld c,(hl)
0302+  29C0 21 B4 0E             ld hl, MOVE_HIST
0303+  29C3 79                   ld a, c
0304+  29C4 FE 00                cp 0
0305+  29C6 28 3B                jr z, Unmake_end_action
0306+  29C8 06 00                ld b,0
0307+  29CA             
0308+  29CA 0D                   dec c
0309+  29CB 09                   add hl,bc
0310+  29CC 09                   add hl,bc
0311+  29CD 09                   add hl,bc
0312+  29CE 09                   add hl,bc
0313+  29CF                      
0314+  29CF 7E                   ld a,(hl)        ; from
0315+  29D0 32 FC 2A             ld (Move_sq_t),a ; move backward animation
0316+  29D3 57                   ld d,a
0317+  29D4 23                   inc hl
0318+  29D5 7E                   ld a,(hl)        ; to    
0319+  29D6 32 FB 2A             ld (Move_sq_f),a
0320+  29D9 5F                   ld e,a
0321+  29DA 23                   inc hl
0322+  29DB 7E                   ld a,(hl)        ; flags
0323+  29DC                      
0324+  29DC 0E 00                ld c,0         
0325+  29DE CB 6F                bit 5,a      ; if en-passant capture
0326+  29E0 28 09                jr z,NoEnPassUnmakeMove
0327+  29E2                      
0328+  29E2 7B                   ld a,e
0329+  29E3 E6 07                and 7
0330+  29E5 4F                   ld c,a          ;X of en-passant square
0331+  29E6 7A                   ld a,d
0332+  29E7 E6 F8                and %11111000   ;Y of en-passant square
0333+  29E9 B1                   or c
0334+  29EA 4F                   ld c,a
0335+  29EB             NoEnPassUnmakeMove:
0336+  29EB 79                   ld a,c
0337+  29EC 32 09 2B             ld (Move_Enp),a ; save en-p.square for animation    
0338+  29EF                                        
0339+  29EF 7E                   ld a, (hl)   ; flags                
0340+  29F0 CB 67                bit 4,a      ; if castling
0341+  29F2 28 07                jr z,UnmakeNoCastling
0342+  29F4                      
0343+  29F4 0E 01                ld c,1
0344+  29F6 EB                   ex de,hl
0345+  29F7 CD B9 2A             call SetCastlesForLater
0346+  29FA EB                   ex de,hl             
0347+  29FB                               
0348+  29FB             UnmakeNoCastling:
0349+  29FB 3E 01                ld a,1
0350+  29FD 32 0E 2B             ld (AnimUnMk),a
0351+  2A00 CD 0F 2B             call setAnimation        ; animate it and unmake move
0352+  2A03                      
0353+  2A03             Unmake_end_action:
0354+  2A03 E1                   pop hl
0355+  2A04 D1                   pop de
0356+  2A05 C1                   pop bc
0357+  2A06 F1                   pop af
0358+  2A07 C9                   ret
0359+  2A08             
0360+  2A08             ; Does actual unmake on chess board
0361+  2A08             Chess_Unmake_Move_Real:
0362+  2A08 CD 1E 25             call UnMakeMove            ; Goes when animation is over
0363+  2A0B CD 0F 2A             call AfterChessMovement
0364+  2A0E C9                   ret                                                                       
0365+  2A0F             
0366+  2A0F             ;
0367+  2A0F             ; Action right after chess make/unmake move
0368+  2A0F             ; Redraws 2 squares after movement
0369+  2A0F             ; Regenerates next moves
0370+  2A0F             ;
0371+  2A0F             AfterChessMovement:
0372+  2A0F F5                   push af
0373+  2A10 C5                   push bc
0374+  2A11 3A FB 2A             ld a,(Move_sq_f)
0375+  2A14 4F                   ld c,a             
0376+  2A15 CD CA 2C             call DrawSquare
0377+  2A18 3A FC 2A             ld a,(Move_sq_t)
0378+  2A1B 4F                   ld c,a             
0379+  2A1C CD CA 2C             call DrawSquare
0380+  2A1F CD 50 32             call DrawCursor
0381+  2A22 C1                   pop bc
0382+  2A23 F1                   pop af
0383+  2A24 CD 38 13             call GenMoves  ; And generate next moves too
0384+  2A27 CD 5C 31             call PutToMove ; redraws which side to move
0385+  2A2A C9                   ret
0386+  2A2B                      
0387+  2A2B             ;--------------------------------------------------------
0388+  2A2B             ;
0389+  2A2B             ; Drag and move validation
0390+  2A2B             ; Parameter: reg-a  0 - for drag, 1 - for move
0391+  2A2B             ;
0392+  2A2B             IsValidDragMove:
0393+  2A2B             
0394+  2A2B C5                   push bc
0395+  2A2C D5                   push de
0396+  2A2D E5                   push hl
0397+  2A2E DD E5                push ix
0398+  2A30                      
0399+  2A30 57                   ld d,a   ;save usage
0400+  2A31 1E 00                ld e,0   ; flag that found
0401+  2A33                                                                                   
0402+  2A33 DD 21 92 04          ld ix, NEXT_MVCNT
0403+  2A37 DD 46 00             ld b,(ix)
0404+  2A3A DD 21 93 04          ld ix, NEXT_MOVES
0405+  2A3E 78                   ld a, b
0406+  2A3F FE 00                cp 0
0407+  2A41 28 6F                jr z, ValidLookExit
0408+  2A43             
0409+  2A43 3A 3D 27             ld a,(DragSq)
0410+  2A46 67                   ld h,a
0411+  2A47 3A 3C 27             ld a,(CursorSq)
0412+  2A4A 6F                   ld l,a
0413+  2A4B             
0414+  2A4B             isValidLoop:
0415+  2A4B             
0416+  2A4B DD 7E 00             ld a, (ix)   ; notated piece
0417+  2A4E DD 23                inc ix
0418+  2A50 DD 7E 00             ld a, (ix)   ; from square
0419+  2A53 32 35 13             ld (SQi),a        
0420+  2A56 DD 23                inc ix               
0421+  2A58 DD 7E 00             ld a, (ix)   ; to square
0422+  2A5B 32 36 13             ld (SQt),a
0423+  2A5E DD 23                inc ix   
0424+  2A60 DD 7E 00             ld a, (ix)   ; flags and promoted piece
0425+  2A63 0E 00                ld c,0
0426+  2A65 CB 4F                bit 1,a      ; if promotion
0427+  2A67 28 02                jr z,ValidNoPromo
0428+  2A69 0E 04                ld c,4       ; then queen
0429+  2A6B             ValidNoPromo:
0430+  2A6B 79                   ld a,c
0431+  2A6C 32 38 19             ld (PromoPcId),a
0432+  2A6F                             
0433+  2A6F 7A                   ld a,d
0434+  2A70 FE 00                cp 0
0435+  2A72 28 30                jr z,isValidDrag
0436+  2A74                      
0437+  2A74 3A 35 13             ld a,(SQi)      ; verify movement
0438+  2A77 BC                   cp h
0439+  2A78 20 34                jr nz, ValidNotThisMove
0440+  2A7A                              
0441+  2A7A 3A 36 13             ld a,(SQt)
0442+  2A7D BD                   cp l
0443+  2A7E 20 2E                jr nz, ValidNotThisMove
0444+  2A80             
0445+  2A80 DD 7E 00             ld a, (ix)   ; flags                
0446+  2A83 0E 00                ld c,0         
0447+  2A85 CB 6F                bit 5,a      ; if en-passant capture
0448+  2A87 28 09                jr z,ValidNoEnPassMove
0449+  2A89                      
0450+  2A89 7D                   ld a,l
0451+  2A8A E6 07                and 7
0452+  2A8C 4F                   ld c,a          ;X of en-passant square
0453+  2A8D 7C                   ld a,h
0454+  2A8E E6 F8                and %11111000   ;Y of en-passant square
0455+  2A90 B1                   or c 
0456+  2A91 4F                   ld c,a
0457+  2A92             ValidNoEnPassMove:
0458+  2A92 79                   ld a,c
0459+  2A93 32 09 2B             ld (Move_Enp),a ; save en-p.square for animation    
0460+  2A96                                        
0461+  2A96 DD 7E 00             ld a, (ix)   ; flags                
0462+  2A99 CB 67                bit 4,a      ; if castling
0463+  2A9B 28 05                jr z,ValidNoCastling
0464+  2A9D                      
0465+  2A9D 0E 00                ld c,0
0466+  2A9F CD B9 2A             call SetCastlesForLater
0467+  2AA2                               
0468+  2AA2             ValidNoCastling:
0469+  2AA2 18 06                jr ValidIsThis
0470+  2AA4                      
0471+  2AA4             isValidDrag:             ; verify drag
0472+  2AA4 3A 35 13             ld a,(SQi)
0473+  2AA7 BD                   cp l
0474+  2AA8 20 04                jr nz, ValidNotThisMove
0475+  2AAA                      
0476+  2AAA             ValidIsThis:       ; ok, this move        
0477+  2AAA 1E 01                ld e,1
0478+  2AAC 18 04                jr ValidLookExit
0479+  2AAE                      
0480+  2AAE             ValidNotThisMove:
0481+  2AAE DD 23                inc ix        
0482+  2AB0 10 99                djnz isValidLoop
0483+  2AB2                               
0484+  2AB2             ValidLookExit:
0485+  2AB2 7B                   ld a,e
0486+  2AB3 DD E1                pop ix
0487+  2AB5 E1                   pop hl
0488+  2AB6 D1                   pop de
0489+  2AB7 C1                   pop bc
0490+  2AB8 C9                   ret
0491+  2AB9             
0492+  2AB9             ; save castling rook info for animation later
0493+  2AB9             ; set before reg-c  = 0 for makemove, 1 for unmake move               
0494+  2AB9             SetCastlesForLater:
0495+  2AB9 7D                   ld a,l       ; square to
0496+  2ABA FE 06                cp 6
0497+  2ABC 28 0E                jr z,thisValidE1G1 ; e1g1
0498+  2ABE FE 02                cp 2
0499+  2AC0 28 0F                jr z,thisValidE1C1 ; e1c1
0500+  2AC2 FE 3E                cp 62
0501+  2AC4 28 10                jr z,thisValidE8G8 ; e8g8
0502+  2AC6 FE 3A                cp 58
0503+  2AC8 28 11                jr z,thisValidE8C8 ; e8c8
0504+  2ACA 18 2E                jr ValidCstlNot
0505+  2ACC             thisValidE1G1:
0506+  2ACC 21 07 05             ld hl,$0507      ; h1f1
0507+  2ACF 18 0D                jr ValidSetCastles         
0508+  2AD1             thisValidE1C1:
0509+  2AD1 21 00 03             ld hl,$0300      ; a1c1
0510+  2AD4 18 08                jr ValidSetCastles         
0511+  2AD6             thisValidE8G8:
0512+  2AD6 21 3F 3D             ld hl,$3D3F      ; h8f8
0513+  2AD9 18 03                jr ValidSetCastles         
0514+  2ADB             thisValidE8C8:
0515+  2ADB 21 38 3B             ld hl,$3B38      ; a8c8
0516+  2ADE             ValidSetCastles:
0517+  2ADE 79                   ld a,c
0518+  2ADF FE 00                cp 0
0519+  2AE1 20 0A                jr nz, unMakeCastlesCase
0520+  2AE3 7D                   ld a,l
0521+  2AE4 32 0B 2B             ld (MvC_sq_f2),a
0522+  2AE7 7C                   ld a,h
0523+  2AE8 32 0C 2B             ld (MvC_sq_t2),a
0524+  2AEB 18 08                jr ValidSaveCstl
0525+  2AED             unMakeCastlesCase:
0526+  2AED 7C                   ld a,h
0527+  2AEE 32 0B 2B             ld (MvC_sq_f2),a
0528+  2AF1 7D                   ld a,l
0529+  2AF2 32 0C 2B             ld (MvC_sq_t2),a
0530+  2AF5             ValidSaveCstl:         
0531+  2AF5 3E 01                ld a,1
0532+  2AF7 32 0A 2B             ld (Move_Cstl),a ; save for animation    
0533+  2AFA             ValidCstlNot:
0534+  2AFA C9                   ret
0535+  2AFB                      
0536+  2AFB             ;----------------------------------------------------|
0537+  2AFB             ;
0538+  2AFB             ;  This draws moving piece.
0539+  2AFB             ;  Should be on timer interrupt.
0540+  2AFB             ;  Anyway doesnt matter on emulators.  
0541+  2AFB             ;  Uses lots of VRAM (video memory), just because
0542+  2AFB             ;  it is best MSX has and can manage fast.
0543+  2AFB             ;
0544+  2AFB             
0545+  2AFB 00          Move_sq_f: .byte 0   ; from square
0546+  2AFC 00          Move_sq_t: .byte 0   ; to square
0547+  2AFD 00          Move_X_f:  .byte 0   ; from X on screen
0548+  2AFE 00          Move_Y_f:  .byte 0   ; Y
0549+  2AFF 00          Move_X_t:  .byte 0   ; to X
0550+  2B00 00          Move_Y_t:  .byte 0   ; to Y
0551+  2B01 00          Move_X:    .byte 0   ; current X 
0552+  2B02 00          Move_Y:    .byte 0   ; current Y
0553+  2B03 00          Move_DX:   .byte 0   ; dx in dots (kinda y=a*x+c in asm)
0554+  2B04 00          Move_DXn:  .byte 0   ; to 0-right, 1-left
0555+  2B05 00          Move_DY:   .byte 0   ; dy in dots
0556+  2B06 00          Move_DYn:  .byte 0   ; to 0-down, 1-up
0557+  2B07             
0558+  2B07 00          MovePc_f:  .byte 0   ; holds piece on square from (as we remove while animating)
0559+  2B08 00          MovePc_t:  .byte 0   ; holds piece on square to
0560+  2B09             
0561+  2B09 00          Move_Enp:  .byte 0   ; square if en-passant capturing
0562+  2B0A             
0563+  2B0A 00          Move_Cstl: .byte 0   ; 1 if castling king (to start for rook after)
0564+  2B0B 00          MvC_sq_f2: .byte 0   ; for rook movement squares from->to
0565+  2B0C 00          MvC_sq_t2: .byte 0   ;
0566+  2B0D 00          AnimI:     .byte 0   ; counter 0..25
0567+  2B0E 00          AnimUnMk:  .byte 0   ; 1 if UnMake case
0568+  2B0F             
0569+  2B0F             setAnimation:           ; provide square numbers
0570+  2B0F F5                       push af
0571+  2B10 C5                       push bc
0572+  2B11 D5                       push de
0573+  2B12 E5                       push hl
0574+  2B13                          
0575+  2B13 A8                       xor b    ; b=0
0576+  2B14 3A FB 2A                 ld a,(Move_sq_f)            
0577+  2B17 CD DF 2B                 call ObtainHLboardBySq
0578+  2B1A 56                       ld d,(hl)
0579+  2B1B 70                       ld (hl),b
0580+  2B1C 4F                       ld c,a
0581+  2B1D CD CA 2C                 call DrawSquare          ; now empty while moving
0582+  2B20 CD 07 2F                 call GetHLbySquare       ; set X,Y
0583+  2B23 7A                       ld a,d
0584+  2B24 32 07 2B                 ld (MovePc_f),a
0585+  2B27 7C                       ld a,h
0586+  2B28 32 FD 2A                 ld (Move_X_f),a          ; from
0587+  2B2B 32 01 2B                 ld (Move_X),a            ; now X
0588+  2B2E 7D                       ld a,l
0589+  2B2F 32 FE 2A                 ld (Move_Y_f),a
0590+  2B32 32 02 2B                 ld (Move_Y),a            ; now Y
0591+  2B35                          
0592+  2B35 A8                       xor b
0593+  2B36 3A FC 2A                 ld a,(Move_sq_t)
0594+  2B39 CD DF 2B                 call ObtainHLboardBySq
0595+  2B3C 56                       ld d,(hl)
0596+  2B3D 70                       ld (hl),b
0597+  2B3E 4F                       ld c,a
0598+  2B3F CD CA 2C                 call DrawSquare          ; now empty while moving                         
0599+  2B42 CD 07 2F                 call GetHLbySquare       ; set X,Y
0600+  2B45 7A                       ld a,d
0601+  2B46 32 08 2B                 ld (MovePc_t),a
0602+  2B49 7C                       ld a,h
0603+  2B4A 32 FF 2A                 ld (Move_X_t),a          ; to
0604+  2B4D 7D                       ld a,l
0605+  2B4E 32 00 2B                 ld (Move_Y_t),a
0606+  2B51                          
0607+  2B51 3E 19                    ld a,25                  ;25ticks
0608+  2B53 32 0D 2B                 ld (AnimI),a             ;counter
0609+  2B56                          
0610+  2B56 CD EB 2B                 call AnimGetDXDY         ; calculate dx,dy
0611+  2B59                                      
0612+  2B59 CD 64 2D                 call Save26squaresVRAM   ; saving path of piece to draw without defects
0613+  2B5C                          
0614+  2B5C E1                       pop hl
0615+  2B5D D1                       pop de
0616+  2B5E C1                       pop bc
0617+  2B5F F1                       pop af
0618+  2B60 C9                       ret            
0619+  2B61             
0620+  2B61             ANIMATION:
0621+  2B61 F5                       push af
0622+  2B62 3A 0D 2B                 ld a,(AnimI)
0623+  2B65 FE 00                    cp 0
0624+  2B67 28 74                    jr z, AnimNONE ;if No animation
0625+  2B69                          
0626+  2B69 C5                       push bc
0627+  2B6A D5                       push de
0628+  2B6B E5                       push hl
0629+  2B6C                          
0630+  2B6C CD D2 2D                 call RestoreIsquareFromVRAM ;prepares and draws animation square
0631+  2B6F CD 7C 2C                 call GetNewAnimXY ; next X,Y
0632+  2B72                                       
0633+  2B72 3A 0D 2B                 ld a,(AnimI)
0634+  2B75 3D                       dec a
0635+  2B76 32 0D 2B                 ld (AnimI),a
0636+  2B79 FE 00                    cp 0
0637+  2B7B 20 5D                    jr nz, AnimTickOver  ;On counter=0 animation is over
0638+  2B7D                          
0639+  2B7D CD D2 2D                 call RestoreIsquareFromVRAM ;restore last
0640+  2B80                          
0641+  2B80 3A 07 2B                 ld a,(MovePc_f)
0642+  2B83 4F                       ld c,a
0643+  2B84 3A FB 2A                 ld a,(Move_sq_f)
0644+  2B87 CD DF 2B                 call ObtainHLboardBySq
0645+  2B8A 71                       ld (hl),c
0646+  2B8B                          
0647+  2B8B 3A 08 2B                 ld a,(MovePc_t)
0648+  2B8E 4F                       ld c,a
0649+  2B8F 3A FC 2A                 ld a,(Move_sq_t)
0650+  2B92 CD DF 2B                 call ObtainHLboardBySq
0651+  2B95 71                       ld (hl),c
0652+  2B96             
0653+  2B96 3A 0A 2B                 ld a,(Move_Cstl)
0654+  2B99                          
0655+  2B99 FE 02                    cp 2
0656+  2B9B 28 0C                    jr z,wasCastleAnim
0657+  2B9D                                      
0658+  2B9D 3A 0E 2B                 ld a,(AnimUnMk)
0659+  2BA0 FE 00                    cp 0
0660+  2BA2 20 0C                    jr nz,AnimUnMakeCase
0661+  2BA4                                                                 
0662+  2BA4 CD B1 29                 call Chess_Move_Real          ; does actual chess movements
0663+  2BA7 18 0A                    jr Anim_enp_too
0664+  2BA9                          
0665+  2BA9             wasCastleAnim:
0666+  2BA9 3E 00                    ld a,0
0667+  2BAB 32 0A 2B                 ld (Move_Cstl),a              ; after castling rook has made its move
0668+  2BAE 18 2A                    jr AnimTickOver
0669+  2BB0             AnimUnMakeCase:
0670+  2BB0 CD 08 2A                 call Chess_Unmake_Move_Real   ; does actual chess undo movements
0671+  2BB3             Anim_enp_too:          
0672+  2BB3 3A 09 2B                 ld a,(Move_Enp)
0673+  2BB6 FE 00                    cp 0
0674+  2BB8 28 06                    jr z,AnimNoEnpRedraw
0675+  2BBA C5                       push bc
0676+  2BBB 4F                       ld c,a
0677+  2BBC CD CA 2C                 call DrawSquare      ; remove en-passant piece visually
0678+  2BBF C1                       pop bc             
0679+  2BC0             AnimNoEnpRedraw:
0680+  2BC0             
0681+  2BC0             setCastleAnim:
0682+  2BC0 3A 0A 2B                 ld a,(Move_Cstl)
0683+  2BC3 FE 00                    cp 0
0684+  2BC5 28 13                    jr z,AnimTickOver
0685+  2BC7 3C                       inc a            
0686+  2BC8 32 0A 2B                 ld (Move_Cstl),a
0687+  2BCB 3A 0B 2B                 ld a,(MvC_sq_f2)
0688+  2BCE 32 FB 2A                 ld (Move_sq_f),a
0689+  2BD1 3A 0C 2B                 ld a,(MvC_sq_t2)
0690+  2BD4 32 FC 2A                 ld (Move_sq_t),a
0691+  2BD7 CD 0F 2B                 call setAnimation  ; set new animation for rook now
0692+  2BDA                          
0693+  2BDA                     
0694+  2BDA             AnimTickOver:
0695+  2BDA E1                       pop hl             
0696+  2BDB D1                       pop de
0697+  2BDC C1                       pop bc
0698+  2BDD F1          AnimNONE:    pop af
0699+  2BDE C9                       ret                              
0700+  2BDF                          
0701+  2BDF             ;---------------------------------------------
0702+  2BDF             ;determine HL by square number in a-reg
0703+  2BDF             ObtainHLboardBySq:           
0704+  2BDF F5                       push af
0705+  2BE0 C5                       push bc
0706+  2BE1 21 40 01                 ld hl,BOARD
0707+  2BE4 4F                       ld c,a
0708+  2BE5 06 00                    ld b,0
0709+  2BE7 09                       add hl,bc
0710+  2BE8 C1                       pop bc
0711+  2BE9 F1                       pop af
0712+  2BEA C9                       ret
0713+  2BEB                          
0714+  2BEB             ;---------------------------------------------
0715+  2BEB             ; determine DX,DY step for animated piece                                                                     
0716+  2BEB             AnimGetDXDY:
0717+  2BEB             
0718+  2BEB 3A FD 2A                 ld a,(Move_X_f)
0719+  2BEE 47                       ld b,a             
0720+  2BEF 3A FF 2A                 ld a,(Move_X_t)
0721+  2BF2 B8                       cp b
0722+  2BF3 28 2E                    jr z,AnimDX0
0723+  2BF5 38 16                    jr c,decAnimDX ;if toX<fromX
0724+  2BF7                                                                             
0725+  2BF7 3A FB 2A                 ld a,(Move_sq_f)
0726+  2BFA E6 07                    and 7
0727+  2BFC 4F                       ld c,a
0728+  2BFD 3A FC 2A                 ld a,(Move_sq_t)
0729+  2C00 E6 07                    and 7
0730+  2C02 91                       sub c            ; a = dx
0731+  2C03 32 03 2B                 ld (Move_DX),a
0732+  2C06 3E 00                    ld a,0
0733+  2C08 32 04 2B                 ld (Move_DXn),a
0734+  2C0B 18 1E                    jr AnimGetDY
0735+  2C0D             decAnimDX:               
0736+  2C0D 3A FC 2A                 ld a,(Move_sq_t)
0737+  2C10 E6 07                    and 7
0738+  2C12 4F                       ld c,a
0739+  2C13 3A FB 2A                 ld a,(Move_sq_f)
0740+  2C16 E6 07                    and 7
0741+  2C18 91                       sub c            ; a = -dx
0742+  2C19 32 03 2B                 ld (Move_DX),a
0743+  2C1C 3E 01                    ld a,1
0744+  2C1E 32 04 2B                 ld (Move_DXn),a
0745+  2C21 18 08                    jr AnimGetDY           
0746+  2C23             AnimDX0:
0747+  2C23 3E 00                    ld a,0
0748+  2C25 32 03 2B                 ld (Move_DX),a
0749+  2C28 32 04 2B                 ld (Move_DXn),a
0750+  2C2B             AnimGetDY:             
0751+  2C2B 3A FE 2A                 ld a,(Move_Y_f)
0752+  2C2E 47                       ld b,a             
0753+  2C2F 3A 00 2B                 ld a,(Move_Y_t)
0754+  2C32 B8                       cp b
0755+  2C33 28 3E                    jr z,AnimDY0
0756+  2C35 38 1E                    jr c,decAnimDY ;if toY<fromY
0757+  2C37                          
0758+  2C37 3A FB 2A                 ld a,(Move_sq_f)
0759+  2C3A CB 3F                    srl a
0760+  2C3C CB 3F                    srl a
0761+  2C3E CB 3F                    srl a
0762+  2C40 4F                       ld c,a
0763+  2C41 3A FC 2A                 ld a,(Move_sq_t)
0764+  2C44 CB 3F                    srl a
0765+  2C46 CB 3F                    srl a
0766+  2C48 CB 3F                    srl a
0767+  2C4A 91                       sub c            ; a = -dy
0768+  2C4B 32 05 2B                 ld (Move_DY),a
0769+  2C4E 3E 01                    ld a,1
0770+  2C50 32 06 2B                 ld (Move_DYn),a
0771+  2C53 18 26                    jr AnimGetDXover            
0772+  2C55                          
0773+  2C55             decAnimDY:
0774+  2C55 3A FC 2A                 ld a,(Move_sq_t)
0775+  2C58 CB 3F                    srl a
0776+  2C5A CB 3F                    srl a
0777+  2C5C CB 3F                    srl a
0778+  2C5E 4F                       ld c,a
0779+  2C5F 3A FB 2A                 ld a,(Move_sq_f)
0780+  2C62 CB 3F                    srl a
0781+  2C64 CB 3F                    srl a
0782+  2C66 CB 3F                    srl a
0783+  2C68 91                       sub c            ; a = dy
0784+  2C69 32 05 2B                 ld (Move_DY),a
0785+  2C6C 3E 00                    ld a,0
0786+  2C6E 32 06 2B                 ld (Move_DYn),a
0787+  2C71 18 08                    jr AnimGetDXover
0788+  2C73             AnimDY0:
0789+  2C73 3E 00                    ld a,0
0790+  2C75 32 05 2B                 ld (Move_DY),a
0791+  2C78 32 06 2B                 ld (Move_DYn),a
0792+  2C7B                          
0793+  2C7B             AnimGetDXover:
0794+  2C7B C9                       ret
0795+  2C7C             
0796+  2C7C             
0797+  2C7C             ;---------------------------------------------
0798+  2C7C             ;
0799+  2C7C             ; Sets new X,Y on animation tick
0800+  2C7C             ;
0801+  2C7C             GetNewAnimXY:
0802+  2C7C F5                       push af
0803+  2C7D C5                       push bc
0804+  2C7E D5                       push de
0805+  2C7F                          
0806+  2C7F 3A 01 2B                 ld a,(Move_X)
0807+  2C82 57                       ld d,a
0808+  2C83 3A 02 2B                 ld a,(Move_Y)
0809+  2C86 5F                       ld e,a
0810+  2C87                                           ; determine new X
0811+  2C87 3A 03 2B                 ld a,(Move_DX)
0812+  2C8A 47                       ld b,a           ; save dx
0813+  2C8B 3A 04 2B                 ld a,(Move_DXn)
0814+  2C8E FE 01                    cp 1
0815+  2C90 28 04                    jr z,decAnimXmv
0816+  2C92 7A                       ld a,d
0817+  2C93 80                       add a,b          ; new X=X+dx
0818+  2C94 18 02                    jr newXforAnim
0819+  2C96             decAnimXmv:               
0820+  2C96 7A                       ld a,d
0821+  2C97 90                       sub b            ; new X=X-dx            
0822+  2C98             newXforAnim:             
0823+  2C98 32 01 2B                 ld (Move_X),a
0824+  2C9B                                           ; determine new Y
0825+  2C9B                                           
0826+  2C9B 3A 05 2B                 ld a,(Move_DY)
0827+  2C9E 47                       ld b,a           ; save dy
0828+  2C9F 3A 06 2B                 ld a,(Move_DYn)
0829+  2CA2 FE 01                    cp 1
0830+  2CA4 28 04                    jr z,decAnimYmv
0831+  2CA6 7B                       ld a,e
0832+  2CA7 80                       add a,b          ; new Y=Y+dy
0833+  2CA8 18 02                    jr newYforAnim                              
0834+  2CAA             decAnimYmv:               
0835+  2CAA 7B                       ld a,e
0836+  2CAB 90                       sub b            ; new Y=Y-dy 
0837+  2CAC             newYforAnim:
0838+  2CAC 32 02 2B                 ld (Move_Y),a
0839+  2CAF D1                       pop de
0840+  2CB0 C1                       pop bc
0841+  2CB1 F1                       pop af
0842+  2CB2 C9                       ret
0843+  2CB3                         
0844+  2CB3             ;----------------------------------------------------|
0845+  2CB3             ;
0846+  2CB3             ;  Draws board on screen.
0847+  2CB3             ;  
0848+  2CB3             ;
0849+  2CB3             DrawBoard:
0850+  2CB3 F5                   push af
0851+  2CB4 C5                   push bc
0852+  2CB5 CD 1F 1D             call SetSqScan          ; draw order A8,...,H8,A7...,A1,...,H1
0853+  2CB8 06 40                ld b,64
0854+  2CBA             DrawBoScan:
0855+  2CBA CD 28 1D             call ScanSqNxt
0856+  2CBD CD 4E 1D             call GetScanSQ
0857+  2CC0 4F                   ld c,a                  ; current square
0858+  2CC1 CD CA 2C             call DrawSquare
0859+  2CC4 10 F4                djnz DrawBoScan        ; scan all squares
0860+  2CC6 C1                   pop bc
0861+  2CC7 F1                   pop af
0862+  2CC8 C9                   ret
0863+  2CC9             
0864+  2CC9             ;
0865+  2CC9             ;  Draws piece or just empty square by 
0866+  2CC9             ;       square in C-reg [0..63]
0867+  2CC9             ;
0868+  2CC9 00          DrItFl: .byte 0     ;should draw anyway flag
0869+  2CCA             
0870+  2CCA             DrawSquare:
0871+  2CCA F5                   push af
0872+  2CCB C5                   push bc
0873+  2CCC D5                   push de
0874+  2CCD E5                   push hl
0875+  2CCE DD E5                push ix
0876+  2CD0 06 00                ld b,0
0877+  2CD2 21 40 01             ld hl,BOARD
0878+  2CD5 09                   add hl,bc
0879+  2CD6 7E                   ld a,(hl)
0880+  2CD7 FE 00                cp 0
0881+  2CD9 20 02                jr nz, notE0_
0882+  2CDB 3E 20                ld a,' '
0883+  2CDD CD 07 2F    notE0_:  call GetHLbySquare       ; set X,Y
0884+  2CE0 CD 34 2F             call GetWhiteSqFlagInE   ; and determine E flag     
0885+  2CE3 CD 46 2F             call GetPieceIdx    ; convert to index from pn..QK
0886+  2CE6 4F                   ld c,a              ; c=index
0887+  2CE7 EB                   ex de,hl            ; de = hl
0888+  2CE8                              
0889+  2CE8 3A C9 2C             ld a,(DrItFl)
0890+  2CEB FE 01                cp 1
0891+  2CED 28 0B                jr z,pc2VRAM1       ; should draw anyway     
0892+  2CEF                      
0893+  2CEF 21 74 27             ld hl,VRAMcopy
0894+  2CF2 06 00                ld b,0
0895+  2CF4 09                   add hl,bc         
0896+  2CF5 7E                   ld a,(hl)       
0897+  2CF6 FE 01                cp 1
0898+  2CF8 28 28                jr z,pc2VRAM2       ; if saved before, just copy
0899+  2CFA                                          ; else create bitmap
0900+  2CFA             pc2VRAM1:                                       
0901+  2CFA                      ;DRAW and SAVE a copy                
0902+  2CFA 3E 01                ld a,1
0903+  2CFC 77                   ld (hl),a           ; bitmap saved flag
0904+  2CFD EB                   ex de,hl            ; hl = X,Y
0905+  2CFE 79                   ld a,c              ; index of piece or square
0906+  2CFF CD 6C 2F             call GetPieceIX     ; get ix-address
0907+  2D02 11 1A 1A             ld de,$1A1A         ;26x26
0908+  2D05 CD 87 39             call HMMC           ;copy RAM -> VRAM
0909+  2D08                      
0910+  2D08 CD A2 2F             call SaveMaskToo    ; save MASK on first init
0911+  2D0B                      
0912+  2D0B 3A C9 2C             ld a,(DrItFl)
0913+  2D0E FE 01                cp 1
0914+  2D10 28 4B                jr z,overDrawSqPc   ; if draws empty board 
0915+  2D12                      
0916+  2D12 EB                   ex de,hl            ; de = hl
0917+  2D13                      
0918+  2D13 21 8E 27             ld hl,VRAMcpXY      ; save X,Y for piece index
0919+  2D16 06 00                ld b,0
0920+  2D18 09                   add hl,bc
0921+  2D19 09                   add hl,bc         
0922+  2D1A 72                   ld (hl),d           ;save X
0923+  2D1B 23                   inc hl
0924+  2D1C 73                   ld (hl),e           ;save Y
0925+  2D1D                      
0926+  2D1D CD D5 2E             call COPY2VRAMoutside
0927+  2D20                       
0928+  2D20 18 3B                jr overDrawSqPc
0929+  2D22                          
0930+  2D22             pc2VRAM2:         
0931+  2D22                      ;COPY piece back to square
0932+  2D22                      
0933+  2D22 21 8E 27             ld hl,VRAMcpXY      ; get X,Y by piece index
0934+  2D25 06 00                ld b,0
0935+  2D27 09                   add hl,bc
0936+  2D28 09                   add hl,bc         
0937+  2D29 7E                   ld a,(hl)           ;saved X
0938+  2D2A 32 9C 3B             ld (HC_p+0),a       ;X
0939+  2D2D 23                   inc hl
0940+  2D2E 7E                   ld a,(hl)           ;saved Y
0941+  2D2F 32 9E 3B             ld (HC_p+2),a       ;Y
0942+  2D32             
0943+  2D32 7A                   ld a,d
0944+  2D33 32 A0 3B             ld (HC_p+4),a       ;to X   
0945+  2D36 7B                   ld a,e
0946+  2D37 32 A2 3B             ld (HC_p+6),a       ;to Y
0947+  2D3A 3E 19                ld a,$19
0948+  2D3C 32 A4 3B             ld (HC_p+8),a       ;25
0949+  2D3F 32 A6 3B             ld (HC_p+10),a      ;25
0950+  2D42 AF                   xor a
0951+  2D43 32 9D 3B             ld (HC_p+1),a        
0952+  2D46 32 A1 3B             ld (HC_p+5),a       ;X
0953+  2D49 32 A3 3B             ld (HC_p+7),a       ;Y
0954+  2D4C 32 A5 3B             ld (HC_p+9),a       ;dots
0955+  2D4F 32 A7 3B             ld (HC_p+11),a      ;dots
0956+  2D52 32 A8 3B             ld (HC_p+12),a      ;DIX/DIY
0957+  2D55 3E 01                ld a,%00000001
0958+  2D57 32 9F 3B             ld (HC_p+3),a       ;256+Y
0959+  2D5A CD A9 3B             call HMMMf          ;copy VRAM -> VRAM to visible area        
0960+  2D5D             
0961+  2D5D             overDrawSqPc:         
0962+  2D5D DD E1                pop ix
0963+  2D5F E1                   pop hl
0964+  2D60 D1                   pop de
0965+  2D61 C1                   pop bc
0966+  2D62 F1                   pop af
0967+  2D63 C9                   ret
0968+  2D64                      
0969+  2D64             ;-------------------------------------------------
0970+  2D64             ;
0971+  2D64             ;
0972+  2D64             ; Saving 26 squares in VRAM as background for
0973+  2D64             ;      moving piece all way long
0974+  2D64             ;
0975+  2D64             Save26squaresVRAM:
0976+  2D64 F5                   push af
0977+  2D65 C5                   push bc
0978+  2D66 D5                   push de
0979+  2D67                      
0980+  2D67 3A 01 2B             ld a,(Move_X)
0981+  2D6A 57                   ld d,a
0982+  2D6B 3A 02 2B             ld a,(Move_Y)
0983+  2D6E 5F                   ld e,a
0984+  2D6F D5                   push de             ; save X,Y                            
0985+  2D70                      
0986+  2D70 06 1A                ld b,26
0987+  2D72 11 00 00             ld de,0
0988+  2D75             Loop26squares:
0989+  2D75 F3                   di                 
0990+  2D76 3A 01 2B             ld a,(Move_X)       ;X
0991+  2D79 D6 04                sub 4               ;X-4   reserve
0992+  2D7B 32 9C 3B             ld (HC_p+0),a
0993+  2D7E 3A 02 2B             ld a,(Move_Y)       ;Y
0994+  2D81 D6 04                sub 4               ;Y-4
0995+  2D83 32 9E 3B             ld (HC_p+2),a
0996+  2D86                      
0997+  2D86 CD 7C 2C             call GetNewAnimXY   ; new X,Y
0998+  2D89                               
0999+  2D89 7A                   ld a,d
1000+  2D8A 32 A0 3B             ld (HC_p+4),a       ;to X
1001+  2D8D 7B                   ld a,e
1002+  2D8E 32 A2 3B             ld (HC_p+6),a       ;to Y (+next byte)   put in columns
1003+  2D91 3E 20                ld a,$20
1004+  2D93 32 A4 3B             ld (HC_p+8),a       ;32
1005+  2D96 32 A6 3B             ld (HC_p+10),a      ;32
1006+  2D99 AF                   xor a         
1007+  2D9A 32 9D 3B             ld (HC_p+1),a       ;X
1008+  2D9D 32 9F 3B             ld (HC_p+3),a       ;Y
1009+  2DA0 32 A1 3B             ld (HC_p+5),a       ;
1010+  2DA3 32 A5 3B             ld (HC_p+9),a       ;dots
1011+  2DA6 32 A7 3B             ld (HC_p+11),a      ;dots
1012+  2DA9 32 A8 3B             ld (HC_p+12),a      ;DIX/DIY
1013+  2DAC 3E 03                ld a,%00000011
1014+  2DAE 32 A3 3B             ld (HC_p+7),a       ; 512+Y down
1015+  2DB1 CD A9 3B             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1016+  2DB4                      
1017+  2DB4 3E 20                ld a,$20
1018+  2DB6 83                   add a,e
1019+  2DB7 5F                   ld e,a
1020+  2DB8 FE C0                cp $20*6
1021+  2DBA 20 07                jr nz,L26clmnNxt
1022+  2DBC 1E 00                ld e,0             ; next column
1023+  2DBE 3E 20                ld a,$20
1024+  2DC0 82                   add a,d
1025+  2DC1 57                   ld d,a
1026+  2DC2 FB                   ei
1027+  2DC3             L26clmnNxt:
1028+  2DC3 10 B0                djnz Loop26squares     
1029+  2DC5                      
1030+  2DC5 D1                   pop de             ; restore X,Y
1031+  2DC6 7A                   ld a,d
1032+  2DC7 32 01 2B             ld (Move_X),a
1033+  2DCA 7B                   ld a,e
1034+  2DCB 32 02 2B             ld (Move_Y),a
1035+  2DCE                     
1036+  2DCE D1                   pop de
1037+  2DCF C1                   pop bc
1038+  2DD0 F1                   pop af
1039+  2DD1 C9                   ret
1040+  2DD2             
1041+  2DD2             ;
1042+  2DD2             ; This: 1) copies background (1..26 saved before) to VRAM-holder
1043+  2DD2             ;       2) copies mask of piece logically to VRAM-holder
1044+  2DD2             ;       3) copies holder to board on display
1045+  2DD2             ;
1046+  2DD2             
1047+  2DD2             
1048+  2DD2             RestoreIsquareFromVRAM:
1049+  2DD2 F5                   push af
1050+  2DD3 C5                   push bc
1051+  2DD4 D5                   push de
1052+  2DD5                      
1053+  2DD5 3A 0D 2B             ld a,(AnimI)
1054+  2DD8 47                   ld b,a
1055+  2DD9 3E 19                ld a,25
1056+  2DDB 90                   sub b
1057+  2DDC                      
1058+  2DDC 47                   ld b,a              ; counter I = 0..25
1059+  2DDD 11 00 00             ld de,0  
1060+  2DE0 FE 00                cp 0
1061+  2DE2 28 10                jr z,L2_26theSq
1062+  2DE4             Loop26SqToFindXY:
1063+  2DE4             
1064+  2DE4 3E 20                ld a,$20
1065+  2DE6 83                   add a,e
1066+  2DE7 5F                   ld e,a
1067+  2DE8 FE C0                cp $20*6
1068+  2DEA 20 06                jr nz,L2_26clmnNxt
1069+  2DEC 1E 00                ld e,0             ; next column
1070+  2DEE 3E 20                ld a,$20
1071+  2DF0 82                   add a,d
1072+  2DF1 57                   ld d,a
1073+  2DF2             L2_26clmnNxt:
1074+  2DF2 10 F0                djnz Loop26SqToFindXY
1075+  2DF4             L2_26theSq:                             
1076+  2DF4 CD 01 2E             call Back2Holder     ; put backgroound in holder
1077+  2DF7                      
1078+  2DF7 CD 3B 2E             call DrawAnimPiece   ; draws animation piece to holder (mask with transp.)
1079+  2DFA                      
1080+  2DFA CD 95 2E             call Holder2Screen   ; put holder on board in right place
1081+  2DFD             
1082+  2DFD D1                   pop de
1083+  2DFE C1                   pop bc
1084+  2DFF F1                   pop af
1085+  2E00 C9                   ret
1086+  2E01             
1087+  2E01             ;----------------------------------
1088+  2E01             ; Puts background in holder
1089+  2E01             
1090+  2E01             Back2Holder:
1091+  2E01 F3                   di
1092+  2E02 7A                   ld a,d
1093+  2E03 32 9C 3B             ld (HC_p+0),a
1094+  2E06 7B                   ld a,e
1095+  2E07 32 9E 3B             ld (HC_p+2),a
1096+  2E0A 3E DF                ld a,255-$20
1097+  2E0C 32 A0 3B             ld (HC_p+4),a       ;to X
1098+  2E0F 3E B1                ld a,209-$20
1099+  2E11 32 A2 3B             ld (HC_p+6),a       ;to Y (+next byte) in column
1100+  2E14 3E 20                ld a,$20
1101+  2E16 32 A4 3B             ld (HC_p+8),a       ;32
1102+  2E19 32 A6 3B             ld (HC_p+10),a      ;32
1103+  2E1C AF                   xor a         
1104+  2E1D 32 9D 3B             ld (HC_p+1),a       ;X
1105+  2E20 32 A1 3B             ld (HC_p+5),a       ;
1106+  2E23 32 A5 3B             ld (HC_p+9),a       ;dots
1107+  2E26 32 A7 3B             ld (HC_p+11),a      ;dots
1108+  2E29 32 A8 3B             ld (HC_p+12),a      ;DIX/DIY
1109+  2E2C 3E 01                ld a,%00000001
1110+  2E2E 32 A3 3B             ld (HC_p+7),a       ; 256+Y down
1111+  2E31 3E 03                ld a,%00000011
1112+  2E33 32 9F 3B             ld (HC_p+3),a       ; 512+Y down
1113+  2E36 CD A9 3B             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1114+  2E39 FB                   ei
1115+  2E3A C9                   ret
1116+  2E3B                               
1117+  2E3B             ;------------------------------------------------------
1118+  2E3B             ;
1119+  2E3B             ; Prepares mask of piece in VRAM holder on background
1120+  2E3B             ;
1121+  2E3B             ;                  
1122+  2E3B             DrawAnimPiece:
1123+  2E3B                                       
1124+  2E3B                          ;COPY mask of piece (logical VRAM->VRAM)
1125+  2E3B F3                       di        
1126+  2E3C 3A 07 2B                 ld a,(MovePc_f)
1127+  2E3F FE 00                    cp 0
1128+  2E41 20 03                    jr nz,DrawAnimNormPiece
1129+  2E43 3A 08 2B                 ld a,(MovePc_t)        ;castling rook moving
1130+  2E46             DrawAnimNormPiece:             
1131+  2E46 1E 00                    ld e,0
1132+  2E48 CD 46 2F                 call GetPieceIdx       ;get index of piece
1133+  2E4B CB 3F                    srl a
1134+  2E4D 3D                       dec a
1135+  2E4E 4F                       ld c,a
1136+  2E4F 21 E7 27                 ld hl,VRAMcpMskXY      ; get X,Y by piece index             
1137+  2E52 06 00                    ld b,0
1138+  2E54 09                       add hl,bc              ; offset
1139+  2E55 09                       add hl,bc
1140+  2E56                                                
1141+  2E56 7E                       ld a,(hl)           ;saved X
1142+  2E57 32 D4 3B                 ld (LM_p+0),a       ;X
1143+  2E5A 23                       inc hl
1144+  2E5B 7E                       ld a,(hl)           ;saved Y        
1145+  2E5C 32 D6 3B                 ld (LM_p+2),a       ;Y
1146+  2E5F             
1147+  2E5F                          ;ld a,(Move_X)
1148+  2E5F 3E E3                    ld a,255-$20+4
1149+  2E61 32 D8 3B                 ld (LM_p+4),a       ;to X   
1150+  2E64                          ;ld a,(Move_Y)
1151+  2E64 3E B5                    ld a,209-$20+4
1152+  2E66 32 DA 3B                 ld (LM_p+6),a       ;to Y
1153+  2E69 3E 19                    ld a,$19
1154+  2E6B 32 DC 3B                 ld (LM_p+8),a       ;25
1155+  2E6E 32 DE 3B                 ld (LM_p+10),a      ;25
1156+  2E71 AF                       xor a
1157+  2E72 32 D5 3B                 ld (LM_p+1),a
1158+  2E75                          ;ld (LM_p+7),a       
1159+  2E75 32 D9 3B                 ld (LM_p+5),a       ;Y
1160+  2E78 32 DD 3B                 ld (LM_p+9),a       ;dots
1161+  2E7B 32 DF 3B                 ld (LM_p+11),a      ;dots
1162+  2E7E 32 E0 3B                 ld (LM_p+12),a      ;DIX/DIY
1163+  2E81 3E 01                    ld a,%00000001
1164+  2E83 32 D7 3B                 ld (LM_p+3),a       ;256+Y
1165+  2E86 3E 01                    ld a,%00000001
1166+  2E88 32 DB 3B                 ld (LM_p+7),a       ;256+Y
1167+  2E8B 3E 08                    ld a,%00001000      ;TIMP copy
1168+  2E8D 32 E1 3B                 ld (LM_p+13),a      ;logical
1169+  2E90 CD E2 3B                 call LMMMf          ;copy VRAM -> VRAM without transparent color
1170+  2E93                                              ;to visible area
1171+  2E93 FB                       ei                                 
1172+  2E94 C9                       ret
1173+  2E95             
1174+  2E95             ;----------------------------------
1175+  2E95             ; Puts holder on board
1176+  2E95             
1177+  2E95             Holder2Screen:                             ; draw holder to screen with piece
1178+  2E95 F3                   di
1179+  2E96 3E DF                ld a,255-$20                
1180+  2E98 32 9C 3B             ld (HC_p+0),a
1181+  2E9B 3E B1                ld a,209-$20
1182+  2E9D 32 9E 3B             ld (HC_p+2),a
1183+  2EA0 3A 01 2B             ld a,(Move_X)
1184+  2EA3 D6 04                sub 4               ;X-4
1185+  2EA5 32 A0 3B             ld (HC_p+4),a       ;to X
1186+  2EA8 3A 02 2B             ld a,(Move_Y)
1187+  2EAB D6 04                sub 4               ;Y-4
1188+  2EAD 32 A2 3B             ld (HC_p+6),a       ;to Y (+next byte)
1189+  2EB0 3E 20                ld a,$20
1190+  2EB2 32 A4 3B             ld (HC_p+8),a       ;32
1191+  2EB5 32 A6 3B             ld (HC_p+10),a      ;32
1192+  2EB8 AF                   xor a         
1193+  2EB9 32 9D 3B             ld (HC_p+1),a       ;X
1194+  2EBC 32 A1 3B             ld (HC_p+5),a       ;
1195+  2EBF 32 A3 3B             ld (HC_p+7),a       ;         
1196+  2EC2 32 A5 3B             ld (HC_p+9),a       ;dots
1197+  2EC5 32 A7 3B             ld (HC_p+11),a      ;dots
1198+  2EC8 32 A8 3B             ld (HC_p+12),a      ;DIX/DIY
1199+  2ECB 3E 01                ld a,%00000001
1200+  2ECD 32 9F 3B             ld (HC_p+3),a       ;from holder 256+Y down
1201+  2ED0 CD A9 3B             call HMMMf          ;copy VRAM -> VRAM
1202+  2ED3 FB                   ei
1203+  2ED4 C9                   ret
1204+  2ED5                                                
1205+  2ED5             ;-------------------------------------------------
1206+  2ED5             ;
1207+  2ED5             ;BOARD copying to third screen
1208+  2ED5             ; Fast but takes much VRAM.
1209+  2ED5             ; Not used but working. It is sick to use VRAM like this.
1210+  2ED5             ;-------------------------------------------------
1211+  2ED5             COPY2VRAMoutside:
1212+  2ED5 7A                   ld a,d              ;X
1213+  2ED6 32 9C 3B             ld (HC_p+0),a
1214+  2ED9 32 A0 3B             ld (HC_p+4),a       ;to X
1215+  2EDC 7B                   ld a,e              ;Y
1216+  2EDD 32 9E 3B             ld (HC_p+2),a
1217+  2EE0 32 A2 3B             ld (HC_p+6),a       ;to Y (+next byte)
1218+  2EE3 3E 19                ld a,$19
1219+  2EE5 32 A4 3B             ld (HC_p+8),a       ;25
1220+  2EE8 32 A6 3B             ld (HC_p+10),a      ;25
1221+  2EEB AF                   xor a         
1222+  2EEC 32 9D 3B             ld (HC_p+1),a       ;X
1223+  2EEF 32 9F 3B             ld (HC_p+3),a       ;Y
1224+  2EF2 32 A1 3B             ld (HC_p+5),a       ;
1225+  2EF5 32 A5 3B             ld (HC_p+9),a       ;dots
1226+  2EF8 32 A7 3B             ld (HC_p+11),a      ;dots
1227+  2EFB 32 A8 3B             ld (HC_p+12),a      ;DIX/DIY
1228+  2EFE 3E 01                ld a,%00000001
1229+  2F00 32 A3 3B             ld (HC_p+7),a       ; 256+Y down
1230+  2F03 CD A9 3B             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1231+  2F06 C9                   ret
1232+  2F07                       
1233+  2F07             ; calculates HL screen coordinates X,Y by square number
1234+  2F07             ; provide square in c-reg
1235+  2F07             GetHLbySquare:
1236+  2F07 F5                   push af
1237+  2F08 C5                   push bc
1238+  2F09 D5                   push de
1239+  2F0A 21 B4 05             ld hl,$05D2-$0005-$0019
1240+  2F0D 79                   ld a,c
1241+  2F0E E6 07                and 7
1242+  2F10                           ; X- a..h of table
1243+  2F10                      ;cp 2
1244+  2F10                      ;jp c,GetHLx_
1245+  2F10                      ;push bc
1246+  2F10                      ;ld bc,$0100
1247+  2F10                      ;add hl,bc      ; one pixel visal correction to the right
1248+  2F10                      ;pop bc
1249+  2F10             GetHLx_:         
1250+  2F10 11 00 19             ld de,$1900
1251+  2F13             GetHLbySqX:
1252+  2F13 FE 00                cp 0
1253+  2F15 28 04                jr z,GetHLokSqX
1254+  2F17 19                   add hl,de
1255+  2F18 3D                   dec a
1256+  2F19 18 F8                jr GetHLbySqX        
1257+  2F1B             GetHLokSqX:
1258+  2F1B 79                   ld a,c
1259+  2F1C CB 3F                srl a
1260+  2F1E CB 3F                srl a
1261+  2F20 CB 3F                srl a
1262+  2F22                           ; Y- 1..8 of table
1263+  2F22 11 19 00             ld de,$0019
1264+  2F25             GetHLbySqY:
1265+  2F25 FE 00                cp 0
1266+  2F27 28 07                jr z,GetHLokSqY
1267+  2F29 37                   scf
1268+  2F2A 3F                   ccf
1269+  2F2B ED 52                sbc hl,de
1270+  2F2D 3D                   dec a
1271+  2F2E 18 F5                jr GetHLbySqY        
1272+  2F30             GetHLokSqY:
1273+  2F30 D1                   pop de
1274+  2F31 C1                   pop bc
1275+  2F32 F1                   pop af
1276+  2F33 C9                   ret
1277+  2F34                      
1278+  2F34             ; calculates white square in e-reg flag by square number (a-reg)
1279+  2F34             GetWhiteSqFlagInE:
1280+  2F34 F5                   push af
1281+  2F35 79                   ld a,c
1282+  2F36 E6 07                and 7
1283+  2F38 5F                   ld e,a    ; X- a..h of table
1284+  2F39                      
1285+  2F39 79                   ld a,c
1286+  2F3A CB 3F                srl a
1287+  2F3C CB 3F                srl a
1288+  2F3E CB 3F                srl a
1289+  2F40                                ; Y- 1..8 of table
1290+  2F40 83                   add a,e
1291+  2F41 E6 01                and 1     ;mod2
1292+  2F43 5F                   ld e,a    ; contains flag
1293+  2F44 F1                   pop af
1294+  2F45 C9                   ret
1295+  2F46                               
1296+  2F46             ;----------------------------------------------------|
1297+  2F46                      ; locates index in array of pieces datas
1298+  2F46                      ; a-piece char of p..K
1299+  2F46                      ; e - square is white flag
1300+  2F46                      ; on return a contains index
1301+  2F46                                             
1302+  2F46             GetPieceIdx:
1303+  2F46 C5                   push bc
1304+  2F47 D5                   push de
1305+  2F48 E5                   push hl
1306+  2F49 21 5F 2F             ld hl,pieceL
1307+  2F4C 06 0D                ld b,13
1308+  2F4E 16 00                ld d,0
1309+  2F50             GetPcIxLoop:
1310+  2F50 BE                   cp (hl)
1311+  2F51 28 04                jr z,GetPcIx1
1312+  2F53 23                   inc hl
1313+  2F54 14                   inc d
1314+  2F55 10 F9                djnz GetPcIxLoop               
1315+  2F57             GetPcIx1:
1316+  2F57 CB 22                sla d  ; x2
1317+  2F59 7B                   ld a,e ;black or white square?; 
1318+  2F5A 82                   add a,d
1319+  2F5B E1                   pop hl
1320+  2F5C D1                   pop de
1321+  2F5D C1                   pop bc
1322+  2F5E C9                   ret        
1323+  2F5F             
1324+  2F5F 20 50 4E 42 pieceL:  .byte " PNBRQKpnbrqk"
1324+  2F63 52 51 4B 70 
1324+  2F67 6E 62 72 71 
1324+  2F6B 6B 
1325+  2F6C             
1326+  2F6C                      ;and position IX after
1327+  2F6C             GetPieceIX:
1328+  2F6C C5                   push bc
1329+  2F6D E5                   push hl
1330+  2F6E 06 00                ld b,0
1331+  2F70 4F                   ld c,a
1332+  2F71 CB 21                sla c    ; offset
1333+  2F73 DD 21 40 27          ld ix, PiecesIX
1334+  2F77 DD 09                add ix,bc
1335+  2F79 DD 6E 00             ld l,(ix)
1336+  2F7C DD 23                inc ix
1337+  2F7E DD 66 00             ld h,(ix)
1338+  2F81 E5                   push hl
1339+  2F82 DD E1                pop ix   ;now IX contains address
1340+  2F84 E1                   pop hl
1341+  2F85 C1                   pop bc
1342+  2F86 C9                   ret
1343+  2F87             
1344+  2F87                      ;to determine IX for mask
1345+  2F87             GetPieceMskIX:
1346+  2F87 C5                   push bc
1347+  2F88 E5                   push hl
1348+  2F89 06 00                ld b,0
1349+  2F8B 4F                   ld c,a
1350+  2F8C CB 21                sla c
1351+  2F8E DD 21 C3 27          ld ix, PiecesMskIX     ; offset of masks
1352+  2F92 DD 09                add ix,bc
1353+  2F94 DD 6E 00             ld l,(ix)
1354+  2F97 DD 23                inc ix
1355+  2F99 DD 66 00             ld h,(ix)
1356+  2F9C E5                   push hl
1357+  2F9D DD E1                pop ix   ;now IX contains address
1358+  2F9F E1                   pop hl
1359+  2FA0 C1                   pop bc
1360+  2FA1 C9                   ret
1361+  2FA2             
1362+  2FA2             ; This copie mask of piece to VRAM
1363+  2FA2             SaveMaskToo:
1364+  2FA2 F5                   push af         ; and save the mask of piece too - to see it moving after
1365+  2FA3 C5                   push bc
1366+  2FA4 D5                   push de
1367+  2FA5 E5                   push hl
1368+  2FA6 DD E5                push ix
1369+  2FA8 79                   ld a,c
1370+  2FA9 FE 02                cp 2
1371+  2FAB 38 47                jr c, pcMsk2VRAMno
1372+  2FAD CB 3F                srl a
1373+  2FAF 3D                   dec a           ; a = index PpNn....Kk      
1374+  2FB0 4F                   ld c,a
1375+  2FB1 06 00                ld b,0
1376+  2FB3 21 DB 27             ld hl,VRAMcpMsk
1377+  2FB6 09                   add hl,bc       ; hl contains flag if piece has been saved to VRAM
1378+  2FB7 7E                   ld a,(hl)
1379+  2FB8 FE 01                cp 1
1380+  2FBA 28 38                jr z,pcMsk2VRAMno
1381+  2FBC 3E 01                ld a,1
1382+  2FBE 77                   ld (hl),a       ; now will be saved
1383+  2FBF 79                   ld a,c
1384+  2FC0 CD 87 2F             call GetPieceMskIX  ; get ix-address for mask
1385+  2FC3 11 1A 1A             ld de,$1A1A         ;26x26
1386+  2FC6 26 7B                ld h,$10 + $19*3
1387+  2FC8 2E 10                ld l,$10
1388+  2FCA 79                   ld a,c
1389+  2FCB FE 06                cp 6                ;for PNBRQK 0..5
1390+  2FCD 38 07                jr c,pcMskSetY
1391+  2FCF 7C                   ld a,h
1392+  2FD0 C6 19                add a,$19           ; set next column for black pieces
1393+  2FD2 67                   ld h,a
1394+  2FD3 79                   ld a,c
1395+  2FD4 D6 06                sub 6
1396+  2FD6             pcMskSetY:         
1397+  2FD6 FE 00                cp 0
1398+  2FD8 28 09                jr z,pcMskGoodY
1399+  2FDA 3D                   dec a
1400+  2FDB F5                   push af
1401+  2FDC 7D                   ld a,l
1402+  2FDD C6 19                add a,$19
1403+  2FDF 6F                   ld l,a
1404+  2FE0 F1                   pop af
1405+  2FE1 18 F3                jr pcMskSetY
1406+  2FE3             pcMskGoodY:
1407+  2FE3 CD 87 39             call HMMC           ;copy mask RAM -> VRAM                  
1408+  2FE6             
1409+  2FE6 EB                   ex de,hl            ; de = hl
1410+  2FE7 21 E7 27             ld hl,VRAMcpMskXY   ; save X,Y for mask of piece index
1411+  2FEA 06 00                ld b,0
1412+  2FEC 09                   add hl,bc
1413+  2FED 09                   add hl,bc         
1414+  2FEE 72                   ld (hl),d           ;save X
1415+  2FEF 23                   inc hl
1416+  2FF0 73                   ld (hl),e           ;save Y
1417+  2FF1                      
1418+  2FF1 CD D5 2E             call COPY2VRAMoutside
1419+  2FF4                      
1420+  2FF4             pcMsk2VRAMno:        
1421+  2FF4 DD E1                pop ix
1422+  2FF6 E1                   pop hl
1423+  2FF7 D1                   pop de
1424+  2FF8 C1                   pop bc
1425+  2FF9 F1                   pop af
1426+  2FFA C9                   ret
1427+  2FFB             
1428+  2FFB 00          VRAM_msx .byte 0  ; flag that VRAM contains it
1429+  2FFC             
1430+  2FFC             ; Puts MSX logo on screen
1431+  2FFC             PutMSXlogo:
1432+  2FFC F5                   push af
1433+  2FFD C5                   push bc
1434+  2FFE D5                   push de
1435+  2FFF E5                   push hl
1436+  3000 DD E5                push ix
1437+  3002                      
1438+  3002 3A FB 2F             ld a,(VRAM_msx)
1439+  3005 FE 00                cp 0
1440+  3007 20 1A                jr nz,PutMSXlog_Copy
1441+  3009                              
1442+  3009 26 DD                ld h,255-$22
1443+  300B 2E AF                ld l,209-$22
1444+  300D 11 0C 1E             ld de,$1E0C
1445+  3010 DD 21 F1 C1          ld ix, dtMSXlogo+6     ; top
1446+  3014 CD 87 39             call HMMC              ;copy RAM -> VRAM
1447+  3017 0E 00                ld c,0
1448+  3019 CD C6 30             call COPY_frames2VRAM_outside ;the same as for frame  
1449+  301C                      
1450+  301C 3E 01                ld a,1
1451+  301E 32 FB 2F             ld (VRAM_msx),a
1452+  3021 18 0C                jr PutMSXex
1453+  3023                               
1454+  3023             PutMSXlog_Copy:
1455+  3023 26 DD                ld h,255-$22
1456+  3025 2E AF                ld l,209-$22
1457+  3027 11 0C 1E             ld de,$1E0C            ; copy from VRAM outside > VRAM on screen
1458+  302A 0E 00                ld c,0
1459+  302C CD 11 31             call COPY_frames_fromVRAM
1460+  302F                      
1461+  302F             PutMSXex:                                                                                                                                                        
1462+  302F DD E1                pop ix
1463+  3031 E1                   pop hl
1464+  3032 D1                   pop de
1465+  3033 C1                   pop bc        
1466+  3034 F1                   pop af
1467+  3035 C9                   ret                  
1468+  3036             
1469+  3036                      
1470+  3036             ; Puts frame for chess board
1471+  3036             PutFrame:
1472+  3036 F5                   push af
1473+  3037 C5                   push bc
1474+  3038 D5                   push de
1475+  3039 E5                   push hl
1476+  303A DD E5                push ix
1477+  303C 3A C5 30             ld a,(VRAM_frame)
1478+  303F FE 00                cp 0
1479+  3041 20 4F                jr nz,CopyFramesFromVRAM
1480+  3043                                ; DRAW and SAVE
1481+  3043 21 00 00             ld hl,0
1482+  3046 11 08 D2             ld de,$D208
1483+  3049 DD 21 E1 AC          ld ix, dtFRUP+6     ; top
1484+  304D CD 87 39             call HMMC           ;copy RAM -> VRAM
1485+  3050 0E 01                ld c,1
1486+  3052 CD C6 30             call COPY_frames2VRAM_outside
1487+  3055             
1488+  3055 21 00 00             ld hl,0
1489+  3058 11 D2 08             ld de,$08D2
1490+  305B DD 21 45 A6          ld ix, dtFRLF+6     ; left
1491+  305F CD 87 39             call HMMC           ;copy RAM -> VRAM
1492+  3062 0E 02                ld c,2
1493+  3064 CD C6 30             call COPY_frames2VRAM_outside
1494+  3067             
1495+  3067 21 00 CA             ld hl,$D200-$0800
1496+  306A 11 D2 08             ld de,$08D2
1497+  306D DD 21 93 A9          ld ix, dtFRRT+6     ; right
1498+  3071 CD 87 39             call HMMC           ;copy RAM -> VRAM
1499+  3074 0E 00                ld c,0
1500+  3076 CD C6 30             call COPY_frames2VRAM_outside
1501+  3079                      
1502+  3079 21 CA 00             ld hl,$00D2-$0008
1503+  307C 11 08 D2             ld de,$D208
1504+  307F DD 21 F7 A2          ld ix, dtFRDN+6     ; bottom
1505+  3083 CD 87 39             call HMMC           ;copy RAM -> VRAM
1506+  3086 0E 00                ld c,0
1507+  3088 CD C6 30             call COPY_frames2VRAM_outside
1508+  308B                      
1509+  308B 3E 01                ld a,1
1510+  308D 32 C5 30             ld (VRAM_frame),a
1511+  3090                      
1512+  3090 18 2C                jr PutFramesEx
1513+  3092                      
1514+  3092             CopyFramesFromVRAM:
1515+  3092 21 00 00             ld hl,0
1516+  3095 11 08 D2             ld de,$D208         ; top
1517+  3098 0E 01                ld c,1         
1518+  309A CD 11 31             call COPY_frames_fromVRAM
1519+  309D             
1520+  309D 21 00 00             ld hl,0
1521+  30A0 11 D2 08             ld de,$08D2         ; left 
1522+  30A3 0E 02                ld c,2           
1523+  30A5 CD 11 31             call COPY_frames_fromVRAM
1524+  30A8             
1525+  30A8 21 00 CA             ld hl,$D200-$0800
1526+  30AB 11 D2 08             ld de,$08D2         ; right
1527+  30AE 0E 00                ld c,0         
1528+  30B0 CD 11 31             call COPY_frames_fromVRAM
1529+  30B3                      
1530+  30B3 21 CA 00             ld hl,$00D2-$0008
1531+  30B6 11 08 D2             ld de,$D208         ; bottom
1532+  30B9 0E 00                ld c,0         
1533+  30BB CD 11 31             call COPY_frames_fromVRAM
1534+  30BE             
1535+  30BE             PutFramesEx:
1536+  30BE DD E1                pop ix
1537+  30C0 E1                   pop hl
1538+  30C1 D1                   pop de
1539+  30C2 C1                   pop bc
1540+  30C3 F1                   pop af
1541+  30C4 C9                   ret
1542+  30C5             
1543+  30C5 00          VRAM_frame:  .byte 0         ; 1 if frame saved to VRAM
1544+  30C6             
1545+  30C6             ; if c=0 then use XY of HL as it is
1546+  30C6             ; if c=1 then upper border of frame
1547+  30C6             ; if c=2 then left border of frame
1548+  30C6             COPY_frames2VRAM_outside:     ;SAVES FRAME
1549+  30C6 F5                   push af
1550+  30C7 E5                   push hl
1551+  30C8 7C                   ld a,h
1552+  30C9 32 9C 3B             ld (HC_p+0),a       ;X = H
1553+  30CC 7D                   ld a,l            
1554+  30CD 32 9E 3B             ld (HC_p+2),a       ;Y = L
1555+  30D0 7A                   ld a,d
1556+  30D1 32 A4 3B             ld (HC_p+8),a       ;D width
1557+  30D4 7B                   ld a,e
1558+  30D5 32 A6 3B             ld (HC_p+10),a      ;E height
1559+  30D8 AF                   xor a        
1560+  30D9 32 9D 3B             ld (HC_p+1),a       ;X
1561+  30DC 32 9F 3B             ld (HC_p+3),a       ;Y
1562+  30DF 32 A1 3B             ld (HC_p+5),a       ;
1563+  30E2 32 A5 3B             ld (HC_p+9),a       ;dots
1564+  30E5 32 A7 3B             ld (HC_p+11),a      ;dots
1565+  30E8 32 A8 3B             ld (HC_p+12),a      ;DIX/DIY
1566+  30EB 3E 03                ld a,%00000011
1567+  30ED 32 A3 3B             ld (HC_p+7),a       ; 512+Y down
1568+  30F0                      
1569+  30F0 79                   ld a,c
1570+  30F1 FE 01                cp 1
1571+  30F3 28 06                jr z,CPYfrUP
1572+  30F5 FE 02                cp 2
1573+  30F7 28 07                jr z,CPYfrLF
1574+  30F9 18 08                jr CPY_asItIs        
1575+  30FB             CPYfrUP:
1576+  30FB 21 D4 00             ld hl,$00D2+$0002
1577+  30FE 18 03                jr CPY_asItIs
1578+  3100             CPYfrLF:
1579+  3100 21 00 D4             ld hl,$D200+$0200
1580+  3103             
1581+  3103             CPY_asItIs:
1582+  3103 7C                   ld a,h
1583+  3104 32 A0 3B             ld (HC_p+4),a       ;to X
1584+  3107 7D                   ld a,l
1585+  3108 32 A2 3B             ld (HC_p+6),a       ;to Y (+next 2 bits)
1586+  310B E1                   pop hl
1587+  310C CD A9 3B             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1588+  310F F1                   pop af
1589+  3110 C9                   ret
1590+  3111                      
1591+  3111             COPY_frames_fromVRAM:        ;Copies back FRAME from VRAM
1592+  3111 F5                   push af
1593+  3112 E5                   push hl
1594+  3113 7C                   ld a,h
1595+  3114 32 A0 3B             ld (HC_p+4),a       ;to X
1596+  3117 7D                   ld a,l            
1597+  3118 32 A2 3B             ld (HC_p+6),a       ;to Y (+next 2 bits)
1598+  311B 7A                   ld a,d
1599+  311C 32 A4 3B             ld (HC_p+8),a       ;D width
1600+  311F 7B                   ld a,e
1601+  3120 32 A6 3B             ld (HC_p+10),a      ;E height
1602+  3123 AF                   xor a        
1603+  3124 32 9D 3B             ld (HC_p+1),a       ;X
1604+  3127 32 A3 3B             ld (HC_p+7),a       ;to Y
1605+  312A 32 A1 3B             ld (HC_p+5),a       ;
1606+  312D 32 A5 3B             ld (HC_p+9),a       ;dots
1607+  3130 32 A7 3B             ld (HC_p+11),a      ;dots
1608+  3133 32 A8 3B             ld (HC_p+12),a      ;DIX/DIY
1609+  3136 3E 03                ld a,%00000011
1610+  3138 32 9F 3B             ld (HC_p+3),a       ; 512+Y down
1611+  313B                      
1612+  313B 79                   ld a,c
1613+  313C FE 01                cp 1
1614+  313E 28 06                jr z,BCPYfrUP
1615+  3140 FE 02                cp 2
1616+  3142 28 07                jr z,BCPYfrLF
1617+  3144 18 08                jr BCPY_asItIs        
1618+  3146             BCPYfrUP:
1619+  3146 21 D4 00             ld hl,$00D2+$0002
1620+  3149 18 03                jr BCPY_asItIs
1621+  314B             BCPYfrLF:
1622+  314B 21 00 D4             ld hl,$D200+$0200
1623+  314E             
1624+  314E             BCPY_asItIs:
1625+  314E 7C                   ld a,h
1626+  314F 32 9C 3B             ld (HC_p+0),a       ;X = H
1627+  3152 7D                   ld a,l
1628+  3153 32 9E 3B             ld (HC_p+2),a       ;Y = L
1629+  3156 E1                   pop hl
1630+  3157 CD A9 3B             call HMMMf          ;copy VRAM outside visible screen -> VRAM
1631+  315A F1                   pop af
1632+  315B C9                   ret
1633+  315C             
1634+  315C                             
1635+  315C                      
1636+  315C             ; Puts rounded identification about side to move
1637+  315C             
1638+  315C             PutToMove:
1639+  315C F5                   push af
1640+  315D C5                   push bc
1641+  315E D5                   push de
1642+  315F E5                   push hl
1643+  3160 DD E5                push ix
1644+  3162                      
1645+  3162 DD 21 FF 27          ld ix,CircIX
1646+  3166                               
1647+  3166 3A C2 27             ld a,(VRAMcirc)
1648+  3169 FE 00                cp 0
1649+  316B 20 30                jr nz,circ2VRAM2
1650+  316D                                                  
1651+  316D                      ;DRAW and SAVE a copy                
1652+  316D 3E 01                ld a,1
1653+  316F 32 C2 27             ld (VRAMcirc),a     ; bitmap saved flag
1654+  3172                      
1655+  3172 06 00                ld b,0       ; loop 4 bitmaps
1656+  3174 26 00                ld h,0       ; X
1657+  3176             Save2VRAMsgnLoop:
1658+  3176 C5                   push bc
1659+  3177                      
1660+  3177 DD E5                push ix            ; table of bitmaps
1661+  3179 CD D7 31             call GetIXfrom4tb  ; ix - address in VRAM for current bitmap
1662+  317C                      
1663+  317C 2E C3                ld l,209-$E    ; hl = X,Y
1664+  317E                      
1665+  317E EB                   ex de,hl       ; de = hl
1666+  317F CD D5 2E             call COPY2VRAMoutside  ; copy blank to put sign on it with transp.logical                 
1667+  3182 EB                   ex de,hl                          
1668+  3183                                                          
1669+  3183 11 0E 0E             ld de,$0E0E    ; 14x14
1670+  3186 CD 87 39             call HMMC      ;copy RAM -> VRAM
1671+  3189                 
1672+  3189 CD E5 31             call SgCopy2VRAMtrsp  ;copies 13x13 (w/o transparent)
1673+  318C                      
1674+  318C DD E1                pop ix
1675+  318E DD 23                inc ix
1676+  3190 DD 23                inc ix
1677+  3192                      
1678+  3192 7C                   ld a,h
1679+  3193 C6 0E                add a,$E       ; X=X+14
1680+  3195 67                   ld h,a
1681+  3196                      
1682+  3196 C1                   pop bc
1683+  3197 04                   inc b
1684+  3198 78                   ld a,b
1685+  3199 FE 04                cp 4
1686+  319B 20 D9                jr nz,Save2VRAMsgnLoop       
1687+  319D                        
1688+  319D             circ2VRAM2:         
1689+  319D                      ;COPY sign from VRAM which side to move
1690+  319D                      
1691+  319D 26 00                ld h,0                  ;from X for case "white to move" (bitmaps are placed horizontally)
1692+  319F 2E C3                ld l,209-$E             ;from Y
1693+  31A1                      
1694+  31A1 3A 81 01             ld a,(SIDE)
1695+  31A4 FE 00                cp 0
1696+  31A6 28 0A                jr z,SgWhite2Move
1697+  31A8 DD 23                inc ix
1698+  31AA DD 23                inc ix
1699+  31AC DD 23                inc ix
1700+  31AE DD 23                inc ix   ;will use two bitmaps at addr+4 
1701+  31B0 26 1C                ld h,$E+$E              ;from X for case "black to move"            
1702+  31B2             SgWhite2Move:
1703+  31B2                      
1704+  31B2 DD E5                push ix                 ; table of bitmaps
1705+  31B4 CD D7 31             call GetIXfrom4tb       ; ix - address in VRAM for current bitmap of white side
1706+  31B7                      
1707+  31B7 16 D2                ld d,204+6
1708+  31B9 1E C2                ld e,204-10
1709+  31BB                      
1710+  31BB CD 1C 32             call SgCopy2Board  ;white sign
1711+  31BE                      
1712+  31BE DD E1                pop ix ; restore table of bitmaps
1713+  31C0 DD 23                inc ix
1714+  31C2 DD 23                inc ix ; to next bitmap pointer
1715+  31C4             
1716+  31C4 CD D7 31             call GetIXfrom4tb  ; ix - address in VRAM for current bitmap of black side
1717+  31C7                      
1718+  31C7 7C                   ld a,h
1719+  31C8 C6 0E                add a,$E       ; X=X+14
1720+  31CA 67                   ld h,a
1721+  31CB                      
1722+  31CB 1E 08                ld e,8
1723+  31CD CD 1C 32             call SgCopy2Board  ;black sign
1724+  31D0                      
1725+  31D0 DD E1                pop ix
1726+  31D2 E1                   pop hl
1727+  31D3 D1                   pop de
1728+  31D4 C1                   pop bc
1729+  31D5 F1                   pop af
1730+  31D6 C9                   ret
1731+  31D7             
1732+  31D7             GetIXfrom4tb:
1733+  31D7 D5                   push de
1734+  31D8 DD 5E 00             ld e,(ix)
1735+  31DB DD 23                inc ix
1736+  31DD DD 56 00             ld d,(ix)
1737+  31E0                               
1738+  31E0 D5                   push de
1739+  31E1 DD E1                pop ix         ; ix - address in VRAM
1740+  31E3 D1                   pop de
1741+  31E4 C9                   ret
1742+  31E5             
1743+  31E5             ;Copy with logical transparent
1744+  31E5             SgCopy2VRAMtrsp: 
1745+  31E5                      
1746+  31E5 7C                   ld a,h              ;X
1747+  31E6 32 D4 3B             ld (LM_p+0),a       ;
1748+  31E9 32 D8 3B             ld (LM_p+4),a       ;to X          
1749+  31EC 7D                   ld a,l              ;Y
1750+  31ED 32 D6 3B             ld (LM_p+2),a       ;
1751+  31F0 32 DA 3B             ld (LM_p+6),a       ;to Y         
1752+  31F3 3E 0E                ld a,$E
1753+  31F5 32 DC 3B             ld (LM_p+8),a       ;14
1754+  31F8 32 DE 3B             ld (LM_p+10),a      ;14
1755+  31FB AF                   xor a
1756+  31FC 32 D5 3B             ld (LM_p+1),a
1757+  31FF 32 D9 3B             ld (LM_p+5),a       ;
1758+  3202 32 D7 3B             ld (LM_p+3),a       ;            
1759+  3205 32 DD 3B             ld (LM_p+9),a       ;dots
1760+  3208 32 DF 3B             ld (LM_p+11),a      ;dots
1761+  320B 32 E0 3B             ld (LM_p+12),a      ;DIX/DIY
1762+  320E 3E 01                ld a,%00000001
1763+  3210 32 DB 3B             ld (LM_p+7),a       ;256+Y
1764+  3213 3E 08                ld a,%00001000      ;TIMP copy
1765+  3215 32 E1 3B             ld (LM_p+13),a      ;logical
1766+  3218 CD E2 3B             call LMMMf          ;copy VRAM -> VRAM without transparent color
1767+  321B C9                   ret                 ;to invisible area          
1768+  321C                      
1769+  321C             SgCopy2Board:
1770+  321C             
1771+  321C 7C                   ld a,h              ;saved X
1772+  321D 32 9C 3B             ld (HC_p+0),a       ;X
1773+  3220 7D                   ld a,l              ;saved Y                      
1774+  3221 32 9E 3B             ld (HC_p+2),a       ;Y
1775+  3224 7A                   ld a,d         
1776+  3225 32 A0 3B             ld (HC_p+4),a       ;to X
1777+  3228 7B                   ld a,e         
1778+  3229 32 A2 3B             ld (HC_p+6),a       ;to Y (+next 2 bits)
1779+  322C 3E 0E                ld a,$E
1780+  322E 32 A4 3B             ld (HC_p+8),a       ;14
1781+  3231 32 A6 3B             ld (HC_p+10),a      ;14
1782+  3234 AF                   xor a        
1783+  3235 32 9D 3B             ld (HC_p+1),a       ;X
1784+  3238 32 A3 3B             ld (HC_p+7),a       ;to Y
1785+  323B 32 A1 3B             ld (HC_p+5),a       ;
1786+  323E 32 A5 3B             ld (HC_p+9),a       ;dots
1787+  3241 32 A7 3B             ld (HC_p+11),a      ;dots
1788+  3244 32 A8 3B             ld (HC_p+12),a      ;DIX/DIY
1789+  3247 3E 01                ld a,%00000001
1790+  3249 32 9F 3B             ld (HC_p+3),a       ; 256+Y
1791+  324C CD A9 3B             call HMMMf          ;copy VRAM outside visible screen -> VRAM on board                         
1792+  324F C9                   ret
1793+  3250             
1794+  3250             
1795+  3250             ;----------------------------------------------------|
1796+  3250             DrawCursor:              ; Draws cursor (UserControl)
1797+  3250 F5                   push af
1798+  3251 3A 3B 27             ld a,(Stylo)
1799+  3254 CB 47                bit 0,a
1800+  3256 28 3C                jr z,noCursors
1801+  3258             
1802+  3258 C5                   push bc
1803+  3259 D5                   push de
1804+  325A E5                   push hl
1805+  325B                      
1806+  325B 3A 3D 27             ld a,(DragSq)
1807+  325E FE FF                cp $ff
1808+  3260 28 16                jr z,DrawCursorOnly
1809+  3262             
1810+  3262 4F                   ld c,a             ; Draw DragSquare too
1811+  3263 CD 07 2F             call GetHLbySquare ; Get X,Y
1812+  3266                           
1813+  3266 06 0E                ld b,$E            ; color
1814+  3268 0E 16                ld c,$16           ; length of lines
1815+  326A CD 96 32             call CursRectDraw  ; line
1816+  326D                      
1817+  326D 01 01 01             ld bc,$0101
1818+  3270 09                   add hl,bc          ; shift 1 dot right down
1819+  3271             
1820+  3271 06 0E                ld b,$E            ; color
1821+  3273 0E 14                ld c,$14           ; double-line
1822+  3275 CD 96 32             call CursRectDraw
1823+  3278                      
1824+  3278             DrawCursorOnly:         
1825+  3278 3A 3C 27             ld a,(CursorSq)
1826+  327B 4F                   ld c,a
1827+  327C CD 07 2F             call GetHLbySquare ; Get X,Y
1828+  327F                           
1829+  327F 06 0F                ld b,$F            ; color
1830+  3281 0E 16                ld c,$16           ; length of lines
1831+  3283 CD 96 32             call CursRectDraw  ; line
1832+  3286                      
1833+  3286 01 01 01             ld bc,$0101
1834+  3289 09                   add hl,bc          ; shift 1 dot right down
1835+  328A             
1836+  328A 06 0F                ld b,$F            ; color
1837+  328C 0E 14                ld c,$14           ; double-line
1838+  328E CD 96 32             call CursRectDraw
1839+  3291                      
1840+  3291 E1                   pop hl         
1841+  3292 D1                   pop de
1842+  3293 C1                   pop bc
1843+  3294             noCursors:         
1844+  3294 F1                   pop af
1845+  3295 C9                   ret
1846+  3296             
1847+  3296             CursRectDraw:               ; rectangle with length provided in c, color in b        
1848+  3296 7C                   ld a,h
1849+  3297 81                   add a,c
1850+  3298 57                   ld d,a             ; X+25
1851+  3299 5D                   ld e,l             ; Y
1852+  329A 3E 00                ld a,0             ; just overwrite
1853+  329C CD 35 3B             call LINE          ; Line 1
1854+  329F 62                   ld h,d
1855+  32A0 7B                   ld a,e
1856+  32A1 81                   add a,c
1857+  32A2 3C                   inc a
1858+  32A3 3C                   inc a
1859+  32A4 5F                   ld e,a
1860+  32A5 3E 00                ld a,0             ; just overwrite
1861+  32A7 CD 35 3B             call LINE          ; Line 2
1862+  32AA 6B                   ld l,e
1863+  32AB 7A                   ld a,d
1864+  32AC 91                   sub c
1865+  32AD 57                   ld d,a
1866+  32AE 3E 00                ld a,0             ; just overwrite
1867+  32B0 CD 35 3B             call LINE          ; Line 3
1868+  32B3 62                   ld h,d
1869+  32B4 7B                   ld a,e
1870+  32B5 91                   sub c
1871+  32B6 3D                   dec a
1872+  32B7 3D                   dec a
1873+  32B8 5F                   ld e,a
1874+  32B9 3E 00                ld a,0             ; just overwrite
1875+  32BB CD 35 3B             call LINE          ; Line 4
1876+  32BE 6B                   ld l,e             ; hl now the same        
1877+  32BF C9                   ret
1878+  32C0             
1879+  32C0             ;------------------------------------------------------
1880+  32C0             ; KEY & CURSOR CONTROLLER
1881+  32C0             ;
1882+  32C0             ; a-reg contains ASCII code of last key pressed
1883+  32C0             ; Arrows controls for cursor.
1884+  32C0             ; Can't go outside board,
1885+  32C0             ; Can't go twice (avoid fast emulator speed)
1886+  32C0             ;
1887+  32C0             
1888+  32C0 00          PreKeyWas:  .byte 0
1889+  32C1             
1890+  32C1             Cursor_Key_Controls:
1891+  32C1             
1892+  32C1 F5                   push af
1893+  32C2 C5                   push bc
1894+  32C3                      
1895+  32C3 FE 7A                cp 'z'             ; If Z was pressed, double action
1896+  32C5 20 0C                jr nz, CkeyIf_z
1897+  32C7             CkeyZ:         
1898+  32C7                                         ; use the same key that was before
1899+  32C7 3A C0 32             ld a,(PreKeyWas)
1900+  32CA 4F                   ld c,a
1901+  32CB 3E 00                ld a,0
1902+  32CD 32 C0 32             ld (PreKeyWas),a
1903+  32D0 79                   ld a,c
1904+  32D1 18 1B                jr CkeyWhatKeyCode         
1905+  32D3             CkeyIf_z:
1906+  32D3 FE 5A                cp 'Z'
1907+  32D5 28 F0                jr z, CkeyZ
1908+  32D7 FE 2F                cp '/'
1909+  32D9 28 EC                jr z, CkeyZ
1910+  32DB FE 7E                cp '~'
1911+  32DD 28 E8                jr z, CkeyZ
1912+  32DF FE 7C                cp '|'
1913+  32E1 28 E4                jr z, CkeyZ     ; bunch of the same keys
1914+  32E3             CkeyNormal:
1915+  32E3                 
1916+  32E3 4F                   ld c,a
1917+  32E4 3A C0 32             ld a,(PreKeyWas)
1918+  32E7 B9                   cp c
1919+  32E8 28 36                jr z,CkeyNo       ; the same, emulator may be too fast
1920+  32EA 79                   ld a,c
1921+  32EB 32 C0 32             ld (PreKeyWas),a  ; key now
1922+  32EE                      
1923+  32EE             CkeyWhatKeyCode:
1924+  32EE FE 1B                cp 27
1925+  32F0 20 07                jr nz, CkeyIf_space
1926+  32F2                      
1927+  32F2~            #ifdef PGN_COMPILE
1928+  32F2~                    ; no exit because too heavy memory usage to continue after
1929+  32F2             #else       
1930+  32F2                      
1931+  32F2 3E 01                ld a,1                     ; Exit on ESC
1932+  32F4 32 3F 27             ld (Grph_Exit),a
1933+  32F7             #endif         
1934+  32F7 18 27                jr CkeyNo
1935+  32F9                               
1936+  32F9             CkeyIf_space:                  
1937+  32F9 FE 20                cp 32
1938+  32FB 20 05                jr nz, CkeyIfEnter
1939+  32FD             CkeySpace:                         ; SPACE pressed
1940+  32FD CD 23 33             call CKeySpacePressed
1941+  3300 18 1E                jr CkeyNo
1942+  3302                      
1943+  3302             CkeyIfEnter:
1944+  3302 FE 0D                cp 13
1945+  3304 28 F7                jr z, CkeySpace           ; the same as space
1946+  3306                       ;and process other key controls
1947+  3306                                               
1948+  3306 CD 7F 33             call IfCursorKeys       ; process if cursor key has been pressed
1949+  3309             CKeyPsetup:
1950+  3309 CD E6 33             call IfPieceSetupKeys   ; process if setup of pieces key has been pressed
1951+  330C                      
1952+  330C              
1953+  330C FE 75                cp 'u'             ; If U was pressed, try undomove
1954+  330E 20 0C                jr nz, CkeyIf_u
1955+  3310             CkeyU:         
1956+  3310                                         ; use the same key that was before
1957+  3310             
1958+  3310~            #ifdef PGN_COMPILE
1959+  3310~            
1960+  3310~                     call DO_Replay_UnmakeMove   ; unmake last move in replay
1961+  3310             #else
1962+  3310 3A 3B 27             ld a,(Stylo)
1963+  3313 CB 47                bit 0,a
1964+  3315 28 09                jr z,CkeyNo        ; if cursor allowed
1965+  3317 CD B8 29             call Chess_UnMake_Move_U    ; unmake last move
1966+  331A             #endif
1967+  331A 18 04                jr CkeyNo
1968+  331C             CkeyIf_u:
1969+  331C FE 55                cp 'U'
1970+  331E 28 F0                jr z, CkeyU
1971+  3320                      
1972+  3320             CkeyIfNoU:
1973+  3320             
1974+  3320             CkeyNo:
1975+  3320 C1                   pop bc
1976+  3321 F1                   pop af
1977+  3322 C9                   ret 
1978+  3323             
1979+  3323                     
1980+  3323             ;-------------------- If space key pressed -the long one
1981+  3323             CKeySpacePressed:         
1982+  3323 F5                   push af
1983+  3324 3A 3B 27             ld a,(Stylo)
1984+  3327                      
1985+  3327~            #ifdef PGN_COMPILE 
1986+  3327~                     
1987+  3327~                     call DO_Replay_Move            ; if REPLAY mode
1988+  3327~            
1989+  3327             #else         
1990+  3327                      
1991+  3327 CB 47                bit 0,a                   ; if cursor is not allowed 
1992+  3329 28 4F                jr z,CSpcOver
1993+  332B                               
1994+  332B CB 57                bit 2,a                   ; if setup of pieces then empty square
1995+  332D 28 07                jr z,CSpcNPS
1996+  332F 3E 20                ld a,' '
1997+  3331 CD E6 33             call IfPieceSetupKeys     ; process if setup of pieces key has been pressed
1998+  3334 18 44                jr CSpcOver
1999+  3336             CSpcNPS:         
2000+  3336 CB 4F                bit 1,a                   ; if can not drag and move pieces 
2001+  3338 28 40                jr z,CSpcOver
2002+  333A             
2003+  333A 3A 0D 2B             ld a,(AnimI)
2004+  333D FE 00                cp 0
2005+  333F 20 39                jr nz,CSpcOver            ; animation process right now
2006+  3341 3A 3D 27             ld a,(DragSq)
2007+  3344 FE FF                cp $ff
2008+  3346 20 16                jr nz, CDragWas
2009+  3348             CSpcDragz:         
2010+  3348 3E 00                ld a,0
2011+  334A CD 2B 2A             call IsValidDragMove
2012+  334D FE 00                cp 0
2013+  334F 28 29                jr z, CSpcOver           ; if drag not valid
2014+  3351                               
2015+  3351 3A 3C 27             ld a,(CursorSq)
2016+  3354 32 3D 27             ld (DragSq),a
2017+  3357 18 21                jr CSpcOver
2018+  3359                      
2019+  3359             CSpcTryDrag:
2020+  3359 CD B3 2C             call DrawBoard       ; redraw all
2021+  335C 18 EA                jr CSpcDragz        
2022+  335E                      
2023+  335E             CDragWas:
2024+  335E 32 FB 2A             ld (Move_sq_f),a
2025+  3361 3E 01                ld a,1
2026+  3363 CD 2B 2A             call IsValidDragMove
2027+  3366 F5                   push af
2028+  3367 3E FF                ld a,$ff
2029+  3369 32 3D 27             ld (DragSq),a
2030+  336C F1                   pop af
2031+  336D FE 00                cp 0
2032+  336F 28 E8                jr z, CSpcTryDrag      ; if move not valid
2033+  3371             
2034+  3371 3A 3C 27             ld a,(CursorSq)
2035+  3374 32 FC 2A             ld (Move_sq_t),a
2036+  3377                      
2037+  3377 CD 95 29             call Chess_Move_Cursor          ; this will set animation and do the move
2038+  337A             CSpcOver:
2039+  337A CD 50 32             call DrawCursor
2040+  337D                      
2041+  337D             #endif         
2042+  337D F1                   pop af
2043+  337E C9                   ret         
2044+  337F                      
2045+  337F             ;---------------------------------
2046+  337F             ; If cursor arrow keys pressed
2047+  337F             ;
2048+  337F             IfCursorKeys:
2049+  337F             
2050+  337F F5                   push af     
2051+  3380 FE 1D                cp 29
2052+  3382 20 17                jr nz, CkeyIfCurs2
2053+  3384                                                ; LEFT pressed                                 
2054+  3384 3A 3C 27             ld a,(CursorSq)
2055+  3387 4F                   ld c,a                                   
2056+  3388 E6 07                and 7
2057+  338A FE 00                cp 0
2058+  338C 28 56                jr z,CkeyCKexit
2059+  338E 79                   ld a,c
2060+  338F CD CA 2C             call DrawSquare
2061+  3392 3D                   dec a
2062+  3393                      
2063+  3393             CKeyCursMv:
2064+  3393 32 3C 27             ld (CursorSq),a
2065+  3396 CD 50 32             call DrawCursor
2066+  3399 18 49                jr CkeyCKexit
2067+  339B             
2068+  339B             CkeyIfCurs2:  
2069+  339B FE 1C                cp 28
2070+  339D 20 11                jr nz, CkeyIfCurs3                                       
2071+  339F                                                ; RIGHT pressed                                      
2072+  339F 3A 3C 27             ld a,(CursorSq)
2073+  33A2 4F                   ld c,a         
2074+  33A3 E6 07                and 7
2075+  33A5 FE 07                cp 7
2076+  33A7 28 3B                jr z,CkeyCKexit
2077+  33A9 79                   ld a,c
2078+  33AA CD CA 2C             call DrawSquare
2079+  33AD 3C                   inc a         
2080+  33AE 18 E3                jr CKeyCursMv
2081+  33B0             
2082+  33B0                                                                                                                           
2083+  33B0             CkeyIfCurs3:
2084+  33B0 FE 1E                cp 30
2085+  33B2 20 16                jr nz, CkeyIfCurs4                                       
2086+  33B4                                                ; UP pressed                                   
2087+  33B4 3A 3C 27             ld a,(CursorSq)
2088+  33B7 4F                   ld c,a                                           
2089+  33B8 CB 3F                srl a
2090+  33BA CB 3F                srl a
2091+  33BC CB 3F                srl a
2092+  33BE FE 07                cp 7
2093+  33C0 28 22                jr z,CkeyCKexit
2094+  33C2 79                   ld a,c
2095+  33C3 CD CA 2C             call DrawSquare
2096+  33C6 C6 08                add a,8                 
2097+  33C8 18 C9                jr CKeyCursMv
2098+  33CA                                                 
2099+  33CA             CkeyIfCurs4:
2100+  33CA FE 1F                cp 31
2101+  33CC 20 16                jr nz, CkeyCKexit                                      
2102+  33CE                                                ; DOWN pressed                                   
2103+  33CE 3A 3C 27             ld a,(CursorSq)
2104+  33D1 4F                   ld c,a                                           
2105+  33D2 CB 3F                srl a
2106+  33D4 CB 3F                srl a
2107+  33D6 CB 3F                srl a
2108+  33D8 FE 00                cp 0
2109+  33DA 28 08                jr z,CkeyCKexit
2110+  33DC 79                   ld a,c
2111+  33DD CD CA 2C             call DrawSquare
2112+  33E0 D6 08                sub 8        
2113+  33E2 18 AF                jr CKeyCursMv
2114+  33E4                      
2115+  33E4             CkeyCKexit:
2116+  33E4 F1                   pop af         
2117+  33E5 C9                   ret
2118+  33E6             
2119+  33E6             ;---------------------------------
2120+  33E6             ; If piece keys PNBRQK pressed
2121+  33E6             ;
2122+  33E6             IfPieceSetupKeys:
2123+  33E6 F5                   push af
2124+  33E7 C5                   push bc
2125+  33E8 D5                   push de
2126+  33E9 E5                   push hl
2127+  33EA 47                   ld b,a   ;save code
2128+  33EB FE 50                cp 'P'
2129+  33ED 28 32                jr z,CsetupWP
2130+  33EF FE 4E                cp 'N'
2131+  33F1 28 3B                jr z,CsetupWN
2132+  33F3 FE 42                cp 'B'
2133+  33F5 28 37                jr z,CsetupWB
2134+  33F7 FE 52                cp 'R'
2135+  33F9 28 33                jr z,CsetupWR
2136+  33FB FE 51                cp 'Q'
2137+  33FD 28 2F                jr z,CsetupWQ
2138+  33FF FE 4B                cp 'K'
2139+  3401 28 2D                jr z,CsetupWK
2140+  3403 FE 70                cp 'p'
2141+  3405 28 1A                jr z,CsetupBP
2142+  3407 FE 6E                cp 'n'
2143+  3409 28 23                jr z,CsetupBN
2144+  340B FE 62                cp 'b'
2145+  340D 28 1F                jr z,CsetupBB
2146+  340F FE 72                cp 'r'
2147+  3411 28 1B                jr z,CsetupBR
2148+  3413 FE 71                cp 'q'
2149+  3415 28 17                jr z,CsetupBQ
2150+  3417 FE 6B                cp 'k'
2151+  3419 28 21                jr z,CsetupBK
2152+  341B FE 20                cp ' '
2153+  341D 28 2B                jr z,CsetupBlank
2154+  341F 18 27                jr CsetupDoNothing
2155+  3421             CsetupWP:
2156+  3421             CsetupBP:
2157+  3421 3A 3C 27             ld a,(CursorSq)
2158+  3424 FE 08                cp 8
2159+  3426 38 7C                jr c,CsetupKexit
2160+  3428 FE 38                cp 56
2161+  342A 30 78                jr nc,CsetupKexit
2162+  342C 18 1E                jr Csetup2        
2163+  342E             CsetupWN:
2164+  342E             CsetupWB:
2165+  342E             CsetupWR:
2166+  342E             CsetupWQ:
2167+  342E             CsetupBN:
2168+  342E             CsetupBB:
2169+  342E             CsetupBR:
2170+  342E             CsetupBQ:
2171+  342E 18 1C                jr Csetup2
2172+  3430             CsetupWK:
2173+  3430 3A 84 01             ld a,(WKSQ)
2174+  3433 FE FF                cp $ff
2175+  3435 28 03                jr z,Csu2WK
2176+  3437 CD A9 34             call CsuKRmv    ; White king not here anymore
2177+  343A 18 10       Csu2WK:  jr Csetup2
2178+  343C             
2179+  343C             
2180+  343C             CsetupBK:
2181+  343C 3A 85 01             ld a,(BKSQ)
2182+  343F FE FF                cp $ff
2183+  3441 28 03                jr z,Csu2BK
2184+  3443 CD A9 34             call CsuKRmv    ; Black king not here anymore
2185+  3446 18 04       Csu2BK:  jr Csetup2
2186+  3448                      
2187+  3448             CsetupDoNothing:
2188+  3448 18 5A                jr CsetupKexit  ; exit
2189+  344A             
2190+  344A 06 00       CsetupBlank: ld b,0 ; will be empty square
2191+  344C             
2192+  344C             Csetup2:               ;puts new piece on board or clears square
2193+  344C 3A 3C 27             ld a,(CursorSq)
2194+  344F CD DF 2B             call ObtainHLboardBySq
2195+  3452 4F                   ld c,a
2196+  3453 3A 84 01             ld a,(WKSQ)
2197+  3456 B9                   cp c
2198+  3457 20 07                jr nz,CsuNoOverWK
2199+  3459 3E FF                ld a,$ff
2200+  345B 32 84 01             ld (WKSQ),a
2201+  345E 18 0B                jr CsuOverK       
2202+  3460             CsuNoOverWK:       
2203+  3460 3A 85 01             ld a,(BKSQ)
2204+  3463 B9                   cp c
2205+  3464 20 05                jr nz,CsuOverK
2206+  3466 3E FF                ld a,$ff
2207+  3468 32 85 01             ld (BKSQ),a
2208+  346B             
2209+  346B             CsuOverK:     
2210+  346B 78                   ld a,b
2211+  346C FE 4B                cp 'K'
2212+  346E 20 06                jr nz, CsuNoWKnwpos
2213+  3470 79                   ld a,c
2214+  3471 32 84 01             ld (WKSQ),a
2215+  3474 18 08                jr CsuOverK2
2216+  3476             CsuNoWKnwpos:
2217+  3476 FE 6B                cp 'k'
2218+  3478 20 04                jr nz, CsuOverK2
2219+  347A 79                   ld a,c
2220+  347B 32 85 01             ld (BKSQ),a
2221+  347E             CsuOverK2:
2222+  347E 78                   ld a,b
2223+  347F 70                   ld (hl),b          ; new piece or empty square here
2224+  3480 FE 00                cp 0
2225+  3482 28 0D                jr z,CsuNSd
2226+  3484 FE 5A                cp 'Z'
2227+  3486 30 04                jr nc,CsetupBlackPc
2228+  3488 3E 00                ld a,0
2229+  348A 18 02                jr CsuSDm
2230+  348C             CsetupBlackPc:         
2231+  348C 3E 01                ld a,1
2232+  348E 32 81 01    CsuSDm:  ld (SIDE),a
2233+  3491 CD 5C 31    CsuNSd:  call PutToMove
2234+  3494 79                   ld a,c        
2235+  3495 CD CA 2C             call DrawSquare
2236+  3498 CD BB 34             call RecalcCastles ;what castlings are possible?
2237+  349B CD 50 32             call DrawCursor
2238+  349E 11 EA 28             ld de,wasSetUpFEN
2239+  34A1 CD 9C 1B             call GetFEN        ;keeps actual FEN for position
2240+  34A4             CsetupKexit:
2241+  34A4 E1                   pop hl         
2242+  34A5 D1                   pop de
2243+  34A6 C1                   pop bc
2244+  34A7 F1                   pop af
2245+  34A8 C9                   ret
2246+  34A9             
2247+  34A9             ; this is used for kings to remove them from board
2248+  34A9 F5          CsuKRmv: push af
2249+  34AA C5                   push bc
2250+  34AB E5                   push hl
2251+  34AC 4F                   ld c,a
2252+  34AD CD DF 2B             call ObtainHLboardBySq
2253+  34B0 3E 00                ld a,0
2254+  34B2 77                   ld (hl),a
2255+  34B3 79                   ld a,c
2256+  34B4 CD CA 2C             call DrawSquare ; empty square now         
2257+  34B7 E1                   pop hl
2258+  34B8 C1                   pop bc
2259+  34B9 F1                   pop af
2260+  34BA C9                   ret
2261+  34BB             ;
2262+  34BB             ; this calculates maximum possible castling and sets flags
2263+  34BB             ; otherwise movements may not work normally
2264+  34BB             ; 
2265+  34BB             RecalcCastles:
2266+  34BB F5                   push af
2267+  34BC F5                   push af
2268+  34BD E5                   push hl
2269+  34BE 06 00                ld b,0         ; new flags for castlings
2270+  34C0 3A 84 01             ld a,(WKSQ)
2271+  34C3 FE 04                cp 4
2272+  34C5 20 18                jr nz,RclcBlack
2273+  34C7 3E 07                ld a,7
2274+  34C9 CD DF 2B             call ObtainHLboardBySq
2275+  34CC 7E                   ld a,(hl)
2276+  34CD FE 52                cp 'R'
2277+  34CF 20 02                jr nz,RclnWr1
2278+  34D1 CB C0                set 0,b
2279+  34D3 3E 00       RclnWr1: ld a,0
2280+  34D5 CD DF 2B             call ObtainHLboardBySq
2281+  34D8 7E                   ld a,(hl)
2282+  34D9 FE 52                cp 'R'
2283+  34DB 20 02                jr nz,RclcBlack
2284+  34DD CB C8                set 1,b
2285+  34DF             RclcBlack:
2286+  34DF 3A 85 01             ld a,(BKSQ)
2287+  34E2 FE 3C                cp 60
2288+  34E4 20 18                jr nz,RclcOver
2289+  34E6 3E 3F                ld a,63
2290+  34E8 CD DF 2B             call ObtainHLboardBySq
2291+  34EB 7E                   ld a,(hl)
2292+  34EC FE 72                cp 'r'
2293+  34EE 20 02                jr nz,RclnBr1
2294+  34F0 CB D0                set 2,b
2295+  34F2 3E 38       RclnBr1: ld a,56
2296+  34F4 CD DF 2B             call ObtainHLboardBySq
2297+  34F7 7E                   ld a,(hl)
2298+  34F8 FE 72                cp 'r'
2299+  34FA 20 02                jr nz,RclcOver
2300+  34FC CB D8                set 3,b
2301+  34FE             RclcOver:
2302+  34FE 78                   ld a,b
2303+  34FF 32 82 01             ld (CASTLES),a
2304+  3502 E1                   pop hl
2305+  3503 C1                   pop bc
2306+  3504 F1                   pop af
2307+  3505 C9                   ret                                                                                                                                                      
2308+  3506             
2309+  3506             
2310+  3506             ;---------------------------------
2311+  3506             ; Redraw squares around.
2312+  3506             ; Intended for large cursor
2313+  3506             ; Not used, as DrawCursor does the same.
2314+  3506             ;---------------------------------
2315+  3506 2D 09 2D 08 _AsqDirc: .byte '-',9,'-',8,'-',7,'-',1,'=',0,'+',1,'+',7,'+',8,'+',9
2315+  350A 2D 07 2D 01 
2315+  350E 3D 00 2B 01 
2315+  3512 2B 07 2B 08 
2315+  3516 2B 09 
2316+  3518             
2317+  3518             RedrawSquaresAround:
2318+  3518             
2319+  3518 F5                   push af
2320+  3519 C5                   push bc
2321+  351A D5                   push de
2322+  351B E5                   push hl
2323+  351C 21 06 35             ld hl,_AsqDirc
2324+  351F 06 09                ld b,9
2325+  3521 4F                   ld c,a
2326+  3522             ArndSqScan
2327+  3522 7E                   ld a,(hl)
2328+  3523 23                   inc hl
2329+  3524 FE 2D                cp '-'
2330+  3526 28 08                jr z,ArndSqDec
2331+  3528 7E                   ld a,(hl)
2332+  3529 81                   add a,c
2333+  352A FE 3F                cp 63
2334+  352C 38 0A                jr c,ArndSqNo
2335+  352E 18 05                jr ArndSqYes                 
2336+  3530             ArndSqDec:         
2337+  3530 56                   ld d,(hl)
2338+  3531 79                   ld a,c
2339+  3532 92                   sub d
2340+  3533 38 03                jr c,ArndSqNo
2341+  3535             ArndSqYes:         
2342+  3535 CD CA 2C             call DrawSquare   ; if square on board then redraw
2343+  3538             ArndSqNo:
2344+  3538 79                   ld a,c
2345+  3539 23                   inc hl
2346+  353A 10 E6                djnz ArndSqScan
2347+  353C E1                   pop hl
2348+  353D D1                   pop de
2349+  353E C1                   pop bc
2350+  353F F1                   pop af
2351+  3540 C9                   ret
2352+  3541             
2353+  3541                      
2354+  3541             ;-----------------------------------------------------------
2355+  3541             ;
2356+  3541             ; Process replay of one move
2357+  3541             ;
2358+  3541             ;-----------------------------------------------------------
2359+  3541             DO_Replay_Move:
2360+  3541 F5                   push af
2361+  3542 C5                   push bc
2362+  3543 D5                   push de
2363+  3544 E5                   push hl
2364+  3545                               
2365+  3545 11 73 06             ld de, MOVE_str
2366+  3548 3A 3E 27             ld a,(RplyMs)
2367+  354B 47                   ld b,a
2368+  354C FE 00                cp 0
2369+  354E 28 1A                jr z,RplyTo0
2370+  3550             RplyLoopMv:
2371+  3550 13                   inc de
2372+  3551 13                   inc de
2373+  3552 13                   inc de
2374+  3553 13                   inc de
2375+  3554 1A                   ld a,(de)
2376+  3555 FE 20                cp 32
2377+  3557 28 01                jr z,RplyNskp1
2378+  3559 13                   inc de          ;skip promotion
2379+  355A             RplyNskp1:
2380+  355A 13                   inc de         
2381+  355B 1A                   ld a,(de)
2382+  355C FE 20                cp 32
2383+  355E 28 1D                jr z,RplyNoMv
2384+  3560 FE 00                cp 0
2385+  3562 28 19                jr z,RplyNoMv
2386+  3564 FE 24                cp '$'
2387+  3566 28 15                jr z,RplyNoMv
2388+  3568             
2389+  3568 10 E6                djnz RplyLoopMv
2390+  356A             RplyTo0:
2391+  356A CD D8 12             call MbyStrMove           ; move
2392+  356D CD B3 2C             call DrawBoard            ; no animation, sorry
2393+  3570 CD 5C 31             call PutToMove
2394+  3573 CD B4 12             call GenMovesAndString    ;GenMoves
2395+  3576                      
2396+  3576 3A 3E 27             ld a,(RplyMs)
2397+  3579 3C                   inc a
2398+  357A 32 3E 27             ld (RplyMs),a
2399+  357D             RplyNoMv:
2400+  357D E1                   pop hl       
2401+  357E D1                   pop de
2402+  357F C1                   pop bc
2403+  3580 F1                   pop af
2404+  3581 C9                   ret
2405+  3582             
2406+  3582                     
2407+  3582             DO_Replay_UnmakeMove:
2408+  3582 F5                   push af
2409+  3583 3A 3E 27             ld a,(RplyMs)
2410+  3586 FE 00                cp 0
2411+  3588 28 13                jr z,RplyUMKret
2412+  358A CD 1E 25             call UnMakeMove
2413+  358D CD B3 2C             call DrawBoard            ; no animation, sorry
2414+  3590 CD 5C 31             call PutToMove
2415+  3593 CD 38 13             call GenMoves
2416+  3596 3A 3E 27             ld a,(RplyMs)
2417+  3599 3D                   dec a
2418+  359A 32 3E 27             ld (RplyMs),a
2419+  359D             RplyUMKret:
2420+  359D F1                   pop af
2421+  359E C9                   ret
2422+  359F                               
2423+  359F             
2424+  359F 00          Loaded2VRAM: .byte 0       ; pre-loading of datas from file just once,
2425+  35A0                                        ; after the VRAM memory could be used only.
2426+  35A0                                        
2427+  35A0             Chess_GraphDatas_address:   .equ $8000         ; address where to load module
2428+  35A0             
2429+  35A0             Chess_GraphDatas_filename:
2430+  35A0 00 43 48 45            .byte 0, "CHESSPI CO2",0            ; name of file
2430+  35A4 53 53 50 49 
2430+  35A8 20 43 4F 32 
2430+  35AC 00 
2431+  35AD             
2432+  35AD             ChessY2K_GraphDatas_load:
2433+  35AD F5                      push af
2434+  35AE 3A 9F 35                ld a,(Loaded2VRAM)
2435+  35B1                         
2436+  35B1 FE 00                   cp 0
2437+  35B3 20 12                   jr nz,GraphDatas_ok
2438+  35B5             
2439+  35B5 E5                      push hl
2440+  35B6 D5                      push de
2441+  35B7 21 A0 35                ld hl,Chess_GraphDatas_filename
2442+  35BA 11 00 80                ld de,Chess_GraphDatas_address
2443+  35BD CD 0E 3C                call diskload                     ; loads datas
2444+  35C0 D1                      pop de
2445+  35C1 E1                      pop hl
2446+  35C2                         
2447+  35C2 3E 01                   ld a,1
2448+  35C4 32 9F 35                ld (Loaded2VRAM),a                ; VRAM ok
2449+  35C7             GraphDatas_ok:
2450+  35C7 F1                      pop af
2451+  35C8 C9                      ret
2452+  35C9             
2453+  35C9                         ;                                                                               
2454+  35C9                         ; Data files for pieces Colour of piece (B or W) 
2455+  35C9                         ;   + Name of piece ("KQRBNP" or empty square)
2456+  35C9                         ;   + colour of square under (read black bishop on black square)
2457+  35C9             
2458+  35C9             tbPalettes:
2459+  35C9                         ;table of colours Nr,R,G,B
2460+  35C9                         ;  thanks to bmp2msx software (http://www.imasy.or.jp/~hra/)
2461+  35C9 00 06 06 05         .byte $0,6,6,5
2462+  35CD 01 05 03 02         .byte $1,5,3,2
2463+  35D1 02 00 00 00         .byte $2,0,0,0
2464+  35D5 03 07 07 06         .byte $3,7,7,6
2465+  35D9 04 05 04 03         .byte $4,5,4,3
2466+  35DD 05 05 05 05         .byte $5,5,5,5
2467+  35E1 06 06 06 06         .byte $6,6,6,6
2468+  35E5 07 03 02 02         .byte $7,3,2,2
2469+  35E9 08 03 03 03         .byte $8,3,3,3
2470+  35ED 09 06 05 04         .byte $9,6,5,4
2471+  35F1 0A 04 04 03         .byte $A,4,4,3
2472+  35F5 0B 01 01 01         .byte $B,1,1,1
2473+  35F9 0C 02 01 01         .byte $C,2,1,1
2474+  35FD 0D 06 05 06         .byte $D,6,5,6
2475+  3601 0E 01 01 02         .byte $E,1,1,2
2476+  3605 0F 01 02 01         .byte $F,1,2,1
2477+  3609                     3643   3609                       #include "ChessMN.ASM"     ; MENU choices
0001+  3609             ;=======================================
0002+  3609             ;
0003+  3609             ; MAIN loop and MENU for ChessY2K
0004+  3609             ;
0005+  3609             ;=======================================
0006+  3609             
0007+  3609 00          _menuI:     .byte 0   ;Current menu item to choose
0008+  360A 00          _exitMn:    .byte 0   ;internal to know that exit 
0009+  360B             
0010+  360B             ChessMN:
0011+  360B                     
0012+  360B             MAINLOOP:
0013+  360B 3E 00                ld a,0
0014+  360D 32 09 36             ld (_menuI),a
0015+  3610 CD 55 36             call MainMenu
0016+  3613                               
0017+  3613 3A 09 36             ld a,(_menuI)
0018+  3616 FE 00                cp 0
0019+  3618 20 02                jr nz, ItemNo0
0020+  361A 18 38                jr EXIT_ALL        
0021+  361C             ItemNo0:
0022+  361C FE 01                cp 1
0023+  361E 20 09                jr nz, ItemNo1
0024+  3620                      
0025+  3620 3A 73 06             ld a,(MOVE_str)
0026+  3623 FE 00                cp 0
0027+  3625 28 28                jr z,LoopM
0028+  3627                      
0029+  3627~            #ifdef PGN_COMPILE 
0030+  3627~                    
0031+  3627~                     ld a,%00000000         ; no cursor,can't dragmove, just replaymoves
0032+  3627~                     ld (Stylo),a 
0033+  3627~            
0034+  3627~                     call GraphicsS         ; user interface for chess program
0035+  3627~                     
0036+  3627~                     ld a,0
0037+  3627~                     ld (Stylo),a
0038+  3627             #endif                   
0039+  3627 18 26                jr LoopM
0040+  3629             ItemNo1:      
0041+  3629 FE 02                cp 2
0042+  362B 20 0F                jr nz, ItemNo2
0043+  362D             
0044+  362D 3E 03                ld a,%00000011         ; cursor,can dragmove
0045+  362F 32 3B 27             ld (Stylo),a 
0046+  3632                      
0047+  3632 CD 07 28             call GraphicsS         ; user interface for chess program
0048+  3635                      
0049+  3635 3E 00                ld a,0
0050+  3637 32 3B 27             ld (Stylo),a 
0051+  363A             
0052+  363A 18 13                jr LoopM
0053+  363C             
0054+  363C             ItemNo2:
0055+  363C FE 03                cp 3
0056+  363E 20 0F                jr nz, ItemNo3
0057+  3640             
0058+  3640 3E 05                ld a,%00000101         ; cursor,can setup pieces
0059+  3642 32 3B 27             ld (Stylo),a 
0060+  3645                      
0061+  3645 CD 07 28             call GraphicsS         ; user interface for chess program
0062+  3648                      
0063+  3648 3E 00                ld a,0
0064+  364A 32 3B 27             ld (Stylo),a 
0065+  364D             
0066+  364D 18 00                jr LoopM
0067+  364F                     
0068+  364F             ItemNo3:         
0069+  364F             LoopM:   
0070+  364F             
0071+  364F CD 26 13             call UndoAllMoves   ; good refresh
0072+  3652                      
0073+  3652 18 B7                jr MAINLOOP
0074+  3654                           
0075+  3654                      
0076+  3654             EXIT_ALL:
0077+  3654             
0078+  3654 C9                   ret
0079+  3655                      
0080+  3655             
0081+  3655             MainMenu:
0082+  3655                         
0083+  3655 CD 75 38                call ClearScreenBy30h
0084+  3658 CD BC 37                call LastFENwasSet        ; to know FEN set up
0085+  365B 21 C9 35                ld hl, tbPalettes         ; in datas of ChessUI  
0086+  365E CD 11 38                call SetPaletteByTable    ; defines 16colors                 
0087+  3661                                                    
0088+  3661 3E 00                   ld a,0
0089+  3663 32 0A 36                ld (_exitMn),a
0090+  3666 3E 01                   ld a,1
0091+  3668                                                 
0092+  3668~            #ifdef PGN_COMPILE                       
0093+  3668             #else
0094+  3668 3C                      inc a                    ; can not access first choice
0095+  3669             #endif            
0096+  3669 32 09 36                ld (_menuI),a
0097+  366C                         
0098+  366C CD 5B 38                call InkeyKeyBy30h      ; keypress detect
0099+  366F 32 7C 37                ld (_keymnbf),a         ; saves last key
0100+  3672                                     
0101+  3672             MENULOOP:                           ; Loop till ESC pressed
0102+  3672 CD A0 36                call DrawChoices
0103+  3675 CD 5B 38                call InkeyKeyBy30h      ; keypress detect
0104+  3678                         
0105+  3678                         ;cp 27
0106+  3678                         ;jr z,EscEXIT
0107+  3678                         
0108+  3678 CD 7D 37                call MenuKeyPress       ; Selection or other item
0109+  367B 18 0A                   jr Menu2loop
0110+  367D             
0111+  367D             EscEXIT:
0112+  367D 3E 00                   ld a,0            
0113+  367F 32 09 36                ld (_menuI),a           ; nothing selected
0114+  3682 3E 01                   ld a,1            
0115+  3684 32 0A 36                ld (_exitMn),a
0116+  3687             Menu2loop:            
0117+  3687                                                 
0118+  3687 3A 0A 36                ld a,(_exitMn)
0119+  368A FE 00                   cp 0
0120+  368C 28 E4                   jr z, MENULOOP
0121+  368E                         
0122+  368E 21 01 01                ld hl,$0101             ; locate left upper corner
0123+  3691 CD 97 38                call LocatePosBy30h
0124+  3694 3E 01                   ld a,1                  ; display cursor
0125+  3696 32 A9 FC                ld (CSRSW),a
0126+  3699 CD 75 38                call ClearScreenBy30h   ; and clear the screen
0127+  369C CD 2C 3B                call RestoreColors      ; restores default MSX colors
0128+  369F                                                  
0129+  369F C9                      ret
0130+  36A0             
0131+  36A0             ;------------- draws menu items
0132+  36A0             DrawChoices:
0133+  36A0 F5                      push af
0134+  36A1 C5                      push bc
0135+  36A2 D5                      push de
0136+  36A3 E5                      push hl
0137+  36A4                         
0138+  36A4                         ;ld a,2
0139+  36A4                         ;ld (FORCLR),a           ; set color black
0140+  36A4                         ;call SetColorBy30h
0141+  36A4                     
0142+  36A4 21 05 04                ld hl,$0405
0143+  36A7 CD 97 38                call LocatePosBy30h
0144+  36AA             
0145+  36AA 11 F2 36                ld de, MNheader
0146+  36AD                         
0147+  36AD 3E 00                   ld a,0                  ; do not display cursor
0148+  36AF 32 A9 FC                ld (CSRSW),a
0149+  36B2                          
0150+  36B2 CD A6 38                call PrintString
0151+  36B5                         
0152+  36B5 2E 07                   ld l,7 ; row
0153+  36B7 06 00                   ld b,0 ; 3 choices
0154+  36B9 11 12 37                ld de, MNchoices
0155+  36BC             MNchScan:   
0156+  36BC 04                      inc b          
0157+  36BD 2C                      inc l  ; next row
0158+  36BE 26 04                   ld h,4 ; col
0159+  36C0             
0160+  36C0 CD 97 38                call LocatePosBy30h
0161+  36C3                      
0162+  36C3 CD A6 38                call PrintString
0163+  36C6                   
0164+  36C6 E5                      push hl
0165+  36C7 EB                      ex de,hl    ; hl = de
0166+  36C8 C5                      push bc
0167+  36C9 01 20 00                ld bc,32
0168+  36CC 09                      add hl,bc
0169+  36CD C1                      pop bc
0170+  36CE EB                      ex de,hl    ; de = hl+32 now
0171+  36CF E1                      pop hl
0172+  36D0                         
0173+  36D0 D5                      push de
0174+  36D1 26 01                   ld h,1 ; col
0175+  36D3 CD 97 38                call LocatePosBy30h            
0176+  36D6 3A 09 36                ld a,(_menuI)
0177+  36D9 B8                      cp b
0178+  36DA 20 05                   jr nz,MNchNotI
0179+  36DC 11 72 37                ld de,MnSelector    ; selector char
0180+  36DF 18 03                   jr MNchSelI
0181+  36E1 11 77 37    MNchNotI:   ld de,MnSpace        ;space
0182+  36E4 CD A6 38    MNchSelI:   call PrintString
0183+  36E7 D1                      pop de
0184+  36E8                                                 
0185+  36E8 3E 03                   ld a,MNitems
0186+  36EA B8                      cp b           
0187+  36EB 20 CF                   jr nz,MNchScan          
0188+  36ED                         
0189+  36ED E1                      pop hl
0190+  36EE D1                      pop de
0191+  36EF C1                      pop bc
0192+  36F0 F1                      pop af
0193+  36F1 C9                      ret
0194+  36F2                         
0195+  36F2             
0196+  36F2 4D 53 58 20 MNheader:   .byte "MSX chessY2K project          $",0
0196+  36F6 63 68 65 73 
0196+  36FA 73 59 32 4B 
0196+  36FE 20 70 72 6F 
0196+  3702 6A 65 63 74 
0196+  3706 20 20 20 20 
0196+  370A 20 20 20 20 
0196+  370E 20 20 24 00 
0197+  3712             
0198+  3712             
0199+  3712~            #ifdef PGN_COMPILE
0200+  3712~            
0201+  3712~            MNitems:    .equ 1
0202+  3712~            MNchoices:
0203+  3712~                        .byte "Replay chess game from PGN    $",0
0204+  3712~                        
0205+  3712             #else
0206+  3712             
0207+  3712             MNitems:    .equ 3
0208+  3712             MNchoices:
0209+  3712 52 65 70 6C             .byte "Replay PGN (other module)     $",0
0209+  3716 61 79 20 50 
0209+  371A 47 4E 20 28 
0209+  371E 6F 74 68 65 
0209+  3722 72 20 6D 6F 
0209+  3726 64 75 6C 65 
0209+  372A 29 20 20 20 
0209+  372E 20 20 24 00 
0210+  3732 4D 6F 76 65             .byte "Move pieces by using cursor   $",0
0210+  3736 20 70 69 65 
0210+  373A 63 65 73 20 
0210+  373E 62 79 20 75 
0210+  3742 73 69 6E 67 
0210+  3746 20 63 75 72 
0210+  374A 73 6F 72 20 
0210+  374E 20 20 24 00 
0211+  3752 53 65 74 20             .byte "Set positon for diagram       $",0
0211+  3756 70 6F 73 69 
0211+  375A 74 6F 6E 20 
0211+  375E 66 6F 72 20 
0211+  3762 64 69 61 67 
0211+  3766 72 61 6D 20 
0211+  376A 20 20 20 20 
0211+  376E 20 20 24 00 
0212+  3772             #endif
0213+  3772             
0214+  3772 2D 3E 20 24 MnSelector: .byte "-> $",0
0214+  3776 00 
0215+  3777 20 20 20 24 MnSpace:    .byte "   $",0
0215+  377B 00 
0216+  377C             
0217+  377C 00          _keymnbf:   .byte 0  ; key pressed before
0218+  377D             
0219+  377D             ; this checks which key as been pressed
0220+  377D             MenuKeyPress:
0221+  377D F5                      push af
0222+  377E C5                      push bc
0223+  377F                         
0224+  377F FE 00                   cp 0
0225+  3781 28 36                   jr z,MNnoAct
0226+  3783                         
0227+  3783 47                      ld b,a
0228+  3784 3A 7C 37                ld a,(_keymnbf)
0229+  3787 B8                      cp b
0230+  3788 28 2F                   jr z, MNnoAct
0231+  378A 78                      ld a,b
0232+  378B 32 7C 37                ld (_keymnbf),a
0233+  378E                         
0234+  378E FE 20                   cp 32
0235+  3790 20 11                   jr nz,MNnoSpace
0236+  3792             MNspaceKey:
0237+  3792             
0238+  3792 3A 09 36                ld a,(_menuI)
0239+  3795 FE 01                   cp 1
0240+  3797 20 03                   jr nz,noPGNsub
0241+  3799             
0242+  3799                         ; submenu of PGN files
0243+  3799 CD D6 37                call ChessY2K_pgn_module
0244+  379C                         
0245+  379C                         ;jr MNnoAct
0246+  379C             
0247+  379C 3E 01       noPGNsub:   ld a,1
0248+  379E 32 0A 36                ld (_exitMn),a     ; Item has been selected, exit menu and DO action
0249+  37A1 18 16                   jr MNnoAct             
0250+  37A3 FE 0D       MNnoSpace:  cp 13
0251+  37A5 20 02                   jr nz,MNnoEnter
0252+  37A7 18 E9                   jr MNspaceKey
0253+  37A9             MNnoEnter:
0254+  37A9 3A 09 36                ld a,(_menuI)
0255+  37AC FE 03                   cp MNitems
0256+  37AE 28 03                   jr z, MNitemNxt0
0257+  37B0 3C                      inc a ; next item                     
0258+  37B1 18 03                   jr MNitemNxt1            
0259+  37B3 3E 01       MNitemNxt0: ld a,1 
0260+  37B5             
0261+  37B5~            #ifdef PGN_COMPILE                       
0262+  37B5             #else
0263+  37B5 3C                      inc a                    ; can not access first choice
0264+  37B6                                                  ; (1st reserved for other module)
0265+  37B6             #endif
0266+  37B6             
0267+  37B6 32 09 36    MNitemNxt1: ld (_menuI),a
0268+  37B9                         
0269+  37B9             MNnoAct:            
0270+  37B9 C1                      pop bc
0271+  37BA F1                      pop af
0272+  37BB C9                      ret
0273+  37BC             
0274+  37BC             ;
0275+  37BC             ; This outputs FEN for last position set up
0276+  37BC             ;           
0277+  37BC             LastFENwasSet:
0278+  37BC 21 12 01                ld hl,$0112
0279+  37BF CD 97 38                call LocatePosBy30h
0280+  37C2 11 EA 28                ld de,wasSetUpFEN
0281+  37C5 CD A6 38                call PrintString   ; print out FEN
0282+  37C8 C9                      ret
0283+  37C9             
0284+  37C9             ;This module has been separated to avoid 
0285+  37C9             ; internal problems
0286+  37C9             ;              
0287+  37C9             Chess_PG_module_address:   .equ $8000         ; address where to load module
0288+  37C9             Chess_PG_module_filename:
0289+  37C9 00 43 48 45            .byte 0, "CHESSPG CO2",0           ; name of module file
0289+  37CD 53 53 50 47 
0289+  37D1 20 43 4F 32 
0289+  37D5 00 
0290+  37D6                   
0291+  37D6             ChessY2K_pgn_module:
0292+  37D6~            #ifdef PGN_COMPILE
0293+  37D6~                        push de
0294+  37D6~                        push hl
0295+  37D6~                        ld hl,Chess_PG_module_filename
0296+  37D6~                        ld de,Chess_PG_module_address
0297+  37D6~                        call diskload                     ; loads module
0298+  37D6~                        call Chess_PG_module_address      ; starts main sub-procedure
0299+  37D6~                        pop hl
0300+  37D6~                        pop de
0301+  37D6             #endif             
0302+  37D6 C9                      ret
0303+  37D7             
0304+  37D7                     3644   37D7             
3645   37D7                       #include "VDPs.ASM"        ; VDP video functions
0001+  37D7             ;=======================================
0002+  37D7             ;
0003+  37D7             ; VDP functions
0004+  37D7             ;
0005+  37D7             ;=======================================
0006+  37D7             
0007+  37D7             ; Provides:
0008+  37D7             ;----------------------------------------------------------------------
0009+  37D7             ; (1) Just working LAME part for Hello World of MSX VDP
0010+  37D7             ;         (put pixels on screen)
0011+  37D7             ;----------------------------------------------------------------------
0012+  37D7             ;
0013+  37D7             ; These functions provide MSX2 drawing from .COM module.
0014+  37D7             ; LAME part can put pixels and that's all.
0015+  37D7             ; Screen is 212 lines x 128 bytes per line of 2-pixels.
0016+  37D7             ;
0017+  37D7             ; In reality, prepare to spend days on MSX-hardcore:
0018+  37D7             ; manuals, forums, not-working samples, no-hello-worlds, etc. 
0019+  37D7             ; .BIN loaded from BASIC is not the same as .COM
0020+  37D7             ; 64kb-s is less then Bios+DOS+BASIC+programs+etc. require -
0021+  37D7             ; so it crashes silently by rewriting in the same memory addresses.
0022+  37D7             ; Lots of functions described by techies just crash the emulator. 
0023+  37D7             ; BASIC is for drawings!, not assembler.
0024+  37D7             ; And video memory should be used as much possible (page 0-3, not LAME!),
0025+  37D7             ; because MSX has lots of video memory compared to programmable RAM.
0026+  37D7             ;
0027+  37D7             ; Hello world .com that puts 2-pixels in left upper and right lower corner.
0028+  37D7             ; 
0029+  37D7             ;   org $100
0030+  37D7             ;   call SetScreen5By30h
0031+  37D7             ;   ld de,0
0032+  37D7             ;   call LocateHL_byXY_inDE
0033+  37D7             ;   ld a,$77
0034+  37D7             ;   call VDPdraw2pixels    
0035+  37D7             ;   ld d,127
0036+  37D7             ;   ld e,211
0037+  37D7             ;   call LocateHL_byXY_inDE
0038+  37D7             ;   ld a,$88
0039+  37D7             ;   call VDPdraw2pixels
0040+  37D7             ;   call PressKeyBy30h
0041+  37D7             ;   call SetScreen0By30h
0042+  37D7             ;   ret
0043+  37D7             ;         
0044+  37D7             
0045+  37D7             
0046+  37D7             SetScreen5By30h:
0047+  37D7 3E 05                ld    a,$05      ; Screen 5      
0048+  37D9 F7                   rst   30h
0049+  37DA 80                   .byte $80        ; BIOS slot (when nothing is loaded)  
0050+  37DB 5F 00                .word $005f      ; CHGMOD CALL 5Fh
0051+  37DD C9                   ret
0052+  37DE                      
0053+  37DE             DisableScreenBy30h:       ; Before...
0054+  37DE F7                   rst   30h
0055+  37DF 80                   .byte $80        
0056+  37E0 41 00                .word $0041      ; Disables screen display      
0057+  37E2 C9                   ret
0058+  37E3                      
0059+  37E3             EnableScreenBy30h:        ; When drawings are finished... 
0060+  37E3 F7                   rst   30h
0061+  37E4 80                   .byte $80               
0062+  37E5 44 00                .word $0044      ; Enables screen display  
0063+  37E7 C9                   ret
0064+  37E8             
0065+  37E8             LocateHL_byXY_inDE:       ; Procedure calculates hl offset and sets VDP for writing
0066+  37E8 F3                   di
0067+  37E9 F5                   push af
0068+  37EA C5                   push bc
0069+  37EB D5                   push de
0070+  37EC E5                   push hl
0071+  37ED DD E5                push ix
0072+  37EF 6A                   ld l,d           ; regs d=x[0..127]
0073+  37F0 7B                   ld a,e           ;      e=y[0..211]
0074+  37F1 11 00 00             ld de,0
0075+  37F4 CB 47                bit 0,a
0076+  37F6 28 02                jr z,no2add128bits
0077+  37F8 1E 80                ld e,$80
0078+  37FA             no2add128bits:
0079+  37FA 1F                   rra
0080+  37FB 67                   ld h,a
0081+  37FC 19                   add hl,de
0082+  37FD AF                   xor a 
0083+  37FE CD 09 38             call SetVDPwriteBy30h  ; now will write at this position
0084+  3801 DD E1                pop ix
0085+  3803 E1                   pop hl
0086+  3804 D1                   pop de
0087+  3805 C1                   pop bc
0088+  3806 F1                   pop af
0089+  3807 FB                   ei
0090+  3808 C9                   ret                                          
0091+  3809                                       ; This prepares for "pixeling"
0092+  3809             SetVDPwriteBy30h:         ; hl,contains initial address
0093+  3809 F7                   rst   30h
0094+  380A 80                   .byte $80 
0095+  380B 71 01                .word $0171      ; NSTWRT Sets up the VDP for writing wit full VRAM address
0096+  380D C9                   ret         
0097+  380E             
0098+  380E             VDPdraw2pixels:           ; Put 2 pixels by sending one byte with 2 colour Nr. (bits 0-3,4-7)
0099+  380E D3 98                out ($98),a      ; send this sequently
0100+  3810 C9                   ret
0101+  3811                      
0102+  3811                              
0103+  3811             SetPaletteByTable:        ; Sets colors by given RGB-table in HL-reg
0104+  3811 F5                   push af         
0105+  3812 C5                   push bc
0106+  3813 E5                   push hl
0107+  3814 06 10                ld b,$10             ; 16 colours
0108+  3816             SPcoLoop:
0109+  3816 F3                   di
0110+  3817 7E                   ld   a,(hl)
0111+  3818 23                   inc  hl
0112+  3819 D3 99                out  ($99),a          ; colour Nr.
0113+  381B 3E 90                ld   a, 128+16
0114+  381D D3 99                out  ($99),a         
0115+  381F 7E                   ld   a,(hl)            ; red
0116+  3820 23                   inc  hl
0117+  3821 23                   inc  hl
0118+  3822 CB 27                sla  a
0119+  3824 CB 27                sla  a
0120+  3826 CB 27                sla  a
0121+  3828 CB 27                sla  a                 ; bits 4-7
0122+  382A 4F                   ld   c,a
0123+  382B 7E                   ld   a,(hl)            ; blue bits 0-3
0124+  382C 2B                   dec  hl
0125+  382D B1                   or   c
0126+  382E D3 9A                out  ($9A),a 
0127+  3830 7E                   ld   a,(hl)            ; green bits 0-3
0128+  3831 23                   inc  hl
0129+  3832 23                   inc  hl
0130+  3833 D3 9A                out  ($9A),a
0131+  3835 FB                   ei 
0132+  3836 10 DE                djnz SPcoLoop
0133+  3838 E1                   pop  hl         
0134+  3839 C1                   pop  bc
0135+  383A F1                   pop  af 
0136+  383B C9                   ret
0137+  383C                      
0138+  383C             SetBackgrColor:               ; Sets background color by A=Nr.              
0139+  383C F3                   di
0140+  383D D3 99                out  ($99),a        ; a=[0..15]
0141+  383F 3E 87                ld   a,128+7
0142+  3841 D3 99                out  ($99),a        
0143+  3843 FB                   ei
0144+  3844 C9                   ret
0145+  3845             
0146+  3845             VDPfaster:                   ; working with memory only, no sprite collisions and other things slowing down VDP
0147+  3845 F5                   push af
0148+  3846 F3                   di
0149+  3847 3E 0A                ld   a, %00001010 ; sprites off (bit1), VRAM quantity (bit3)- Affects how VDP performs refresh on DRAM chips   
0150+  3849 D3 99                out  ($99),a
0151+  384B 3E 88                ld   a, 128+8     
0152+  384D D3 99                out  ($99),a
0153+  384F FB                   ei
0154+  3850 F1                   pop af
0155+  3851 C9                   ret
0156+  3852                                                                                                                      
0157+  3852             PressKeyBy30h:               ; wait for keypress
0158+  3852 F7                   rst   30h
0159+  3853 80                   .byte $80 
0160+  3854 9F 00                .word $009f
0161+  3856             ClearKeyBy30h:
0162+  3856 F7                   rst   30h
0163+  3857 80                   .byte $80 
0164+  3858 56 01                .word $0156         ; clear key buffer after             
0165+  385A C9                   ret
0166+  385B             
0167+  385B             InkeyKeyBy30h:               ; detects if there is a keypress
0168+  385B F7                   rst   30h
0169+  385C 80                   .byte $80 
0170+  385D 9C 00                .word $009c
0171+  385F 28 05                jr z,InkeyK_none
0172+  3861 CD 52 38             call PressKeyBy30h  ; if is then detects code
0173+  3864 18 02                jr InkeyK_ret
0174+  3866             InkeyK_none:
0175+  3866 3E 00                ld a,0
0176+  3868             InkeyK_ret:         
0177+  3868 C9                   ret
0178+  3869                                                 
0179+  3869             SetScreen0By30h:             ; set back screen0
0180+  3869 3E 00                ld    a,0      
0181+  386B F7                   rst   30h
0182+  386C 80                   .byte $80
0183+  386D 5F 00                .word $005f
0184+  386F C9                   ret
0185+  3870                      
0186+  3870             SetScreenABy30h:             ; set screen by A-reg
0187+  3870 F7                   rst   30h
0188+  3871 80                   .byte $80
0189+  3872 5F 00                .word $005f
0190+  3874 C9                   ret 
0191+  3875                      
0192+  3875             ClearScreenBy30h:            ; clears screen
0193+  3875 F5                   push af
0194+  3876 C5                   push bc
0195+  3877 D5                   push de
0196+  3878 AF                   xor a          
0197+  3879 F7                   rst   30h
0198+  387A 80                   .byte $80
0199+  387B C3 00                .word $00c3
0200+  387D D1                   pop de
0201+  387E C1                   pop bc
0202+  387F F1                   pop af
0203+  3880 C9                   ret
0204+  3881                      
0205+  3881             LINL40: .equ $F3AE
0206+  3881                             
0207+  3881             SetMode80:
0208+  3881 F5                  push af
0209+  3882 3E 50               ld a,80
0210+  3884 32 AE F3            ld (LINL40),a    ;width 80
0211+  3887 CD 69 38            call SetScreen0By30h
0212+  388A F1                  pop af
0213+  388B C9                  ret
0214+  388C             SetMode40:
0215+  388C F5                  push af
0216+  388D 3E 28               ld a,40
0217+  388F 32 AE F3            ld (LINL40),a    ;width 40
0218+  3892 CD 69 38            call SetScreen0By30h
0219+  3895 F1                  pop af
0220+  3896 C9                  ret 
0221+  3897                              
0222+  3897             LocatePosBy30h:              ; Locate at position H (column) L (row) on screen
0223+  3897 F7                   rst   30h
0224+  3898 80                   .byte $80
0225+  3899 C6 00                .word $00c6
0226+  389B C9                   ret
0227+  389C             PutCharBy30h:                ; Put char reg-a = ascii code      
0228+  389C F7                   rst   30h
0229+  389D 80                   .byte $80
0230+  389E A2 00                .word $00a2
0231+  38A0 C9                   ret
0232+  38A1             PrintLineBy30h:
0233+  38A1 F7                   rst   30h
0234+  38A2 80                   .byte $80
0235+  38A3 A2 00                .word $00a2
0236+  38A5 C9                   ret
0237+  38A6             
0238+  38A6             CALL_5:   .equ $F37D         ;output string to screen
0239+  38A6             ; prints string that ends with $
0240+  38A6             ; de-reg points to string in address
0241+  38A6             ; 
0242+  38A6             PrintString:
0243+  38A6 F5                   push af
0244+  38A7 C5                   push bc
0245+  38A8 D5                   push de
0246+  38A9 E5                   push hl
0247+  38AA DD E5                push ix
0248+  38AC FD E5                push iy
0249+  38AE 0E 09                ld c, 9       ; function for CALL 5
0250+  38B0 CD 7D F3             call CALL_5   ; MSX printing
0251+  38B3 FD E1                pop iy
0252+  38B5 DD E1                pop ix
0253+  38B7 E1                   pop hl
0254+  38B8 D1                   pop de
0255+  38B9 C1                   pop bc
0256+  38BA F1                   pop af
0257+  38BB C9                   ret
0258+  38BC                                      
0259+  38BC                      
0260+  38BC             FORCLR:  .equ  $F3E9         ; foreground color 
0261+  38BC             BAKCLR:  .equ  $F3EA         ; background color
0262+  38BC             BDRCLR:  .equ  $F3EB         ; bordercolor
0263+  38BC             SetColorBy30h:
0264+  38BC F7                   rst   30h           ; set color scheme by using FORCLR,BAKCLR,BDRCLR
0265+  38BD 80                   .byte $80
0266+  38BE 62 00                .word $0062
0267+  38C0 C9                   ret
0268+  38C1                      
0269+  38C1             CSRSW:   .equ $FCA9         ; to set cursor display switch (0-not to show)        
0270+  38C1             CSTYLE:  .equ $FCAA         ; to set cursor style (0-full,2-underline)
0271+  38C1                 
0272+  38C1                             
0273+  38C1                      
0274+  38C1             ;--------------------------------------
0275+  38C1             ; (2) ADVANCED functions, if You love VDP
0276+  38C1             ;
0277+  38C1             ; Use of pages,
0278+  38C1             ; buffered copy of RAM->VRAM, RAM->RAM
0279+  38C1             ;--------------------------------------
0280+  38C1             ;
0281+  38C1             ;
0282+  38C1             ; Check if a v9958 is available (if so, return nz)
0283+  38C1             ; Initialize address (v9958)
0284+  38C1             ; (MSX+,MSXturboR video chip)
0285+  38C1             ;
0286+  38C1 00          v9958:        .byte      0             ;>1 = v9958 present
0287+  38C2             
0288+  38C2 F3          v9958_Check:  di                       ;Test for v9958
0289+  38C3 3E 01                     ld    a,1                ;Set s$1
0290+  38C5 D3 99                     out   ($99),a
0291+  38C7 3E 8F                     ld    a,15+128
0292+  38C9 D3 99                     out   ($99),a
0293+  38CB 1A                        ld    a,(de)             ;Waste some time...
0294+  38CC DB 99                     in    a,($99)
0295+  38CE F5                        push  af
0296+  38CF 3E 00                     ld    a,0
0297+  38D1 D3 99                     out   ($99),a
0298+  38D3 3E 8F                     ld    a,15+128
0299+  38D5 D3 99                     out   ($99),a            ;Set s$0
0300+  38D7 FB                        ei
0301+  38D8 F1                        pop   af
0302+  38D9 E6 3C                     and   %00111100          ;v9938? RET with Z
0303+  38DB 32 C1 38                  ld    (v9958),a
0304+  38DE C9                        ret
0305+  38DF             
0306+  38DF             ;-----------------------------------------
0307+  38DF             ;         
0308+  38DF             ; These routines are the know-how scripts
0309+  38DF             ; by VDP profies. In fact, dont use without
0310+  38DF             ; knowing what is all about. Read manuals.
0311+  38DF             ;
0312+  38DF             ;-----------------------------------------
0313+  38DF             
0314+  38DF 00 00 00 00 VDP: .word  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0314+  38E3 00 00 00 00 
0314+  38E7 00 00 00 00 
0314+  38EB 00 00 00 00 
0314+  38EF 00 00 00 00 
0314+  38F3 00 00 00 00 
0314+  38F7 00 00 00 00 
0314+  38FB 00 00 
0315+  38FD             
0316+  38FD             ;
0317+  38FD             ;Copy the VDP-registers' settings to array VDP.
0318+  38FD             ;Afterwards, read the VDP-registers with LD A,(VDP + r)
0319+  38FD             ;(this should be placed at the start of a program)
0320+  38FD             ;
0321+  38FD 21 DF 38    Copy_VdpRegs: ld      hl,VDP+0
0322+  3900 11 DF 38                  ld      de,VDP+0
0323+  3903 01 08 00                  ld      bc,8
0324+  3906 ED B0                     ldir
0325+  3908 21 E7 38                  ld      hl,VDP+8
0326+  390B 11 E7 38                  ld      de,VDP+8
0327+  390E 01 11 00                  ld      bc,17
0328+  3911 ED B0                     ldir
0329+  3913 C9                        ret
0330+  3914             
0331+  3914             
0332+  3914             ;
0333+  3914             ;Restore the VDP-registers' settings.
0334+  3914             ;(this should be placed at the end of a program)
0335+  3914             ;
0336+  3914 01 00 08    Rest_VdpRegs: ld      bc,$0800
0337+  3917 21 DF 38                  ld      hl,VDP+0
0338+  391A CD 2C 39                  call    Rest_VdpSub
0339+  391D 01 08 10                  ld      bc,$1008
0340+  3920 21 E7 38                  ld      hl,VDP+8
0341+  3923 CD 2C 39                  call    Rest_VdpSub
0342+  3926 01 19 03                  ld      bc,$0319
0343+  3929 21 3B 39                  ld      hl,Vdp3zero    ;a jp Restore_Vdp_Sub is implied
0344+  392C 7E          Rest_VdpSub:  ld      a,(hl)
0345+  392D 23                        inc     hl
0346+  392E F3                        di
0347+  392F D3 99                     out     ($99),a
0348+  3931 79                        ld      a,c
0349+  3932 F6 80                     or      128
0350+  3934 FB                        ei
0351+  3935 D3 99                     out     ($99),a
0352+  3937 0C                        inc     c
0353+  3938 10 F2                     djnz    Rest_VdpSub
0354+  393A C9                        ret
0355+  393B             
0356+  393B 00 00 00    Vdp3zero:    .byte      0,0,0
0357+  393E             
0358+  393E             
0359+  393E             ;
0360+  393E             ;Set page = A [0..3] in screen 5.
0361+  393E             ;
0362+  393E             SetPage:
0363+  393E 87                  add     a,a ;x32
0364+  393F 87                  add     a,a
0365+  3940 87                  add     a,a
0366+  3941 87                  add     a,a
0367+  3942 87                  add     a,a
0368+  3943 C6 1F               add     a,31
0369+  3945 32 E1 38            ld      (VDP+2),a
0370+  3948 F3                  di
0371+  3949 D3 99               out     ($99),a
0372+  394B 3E 82               ld      a,2+128
0373+  394D FB                  ei
0374+  394E D3 99               out     ($99),a
0375+  3950 C9                  ret
0376+  3951                     
0377+  3951             ;
0378+  3951             ;Set VDP port $98 to start writing at address AHL (17-bit)
0379+  3951             ;
0380+  3951             ;
0381+  3951             ; Left upper corner of each pages:
0382+  3951             ;   0 -> A=0,HL=$0000
0383+  3951             ;   1 -> A=0,HL=$8000
0384+  3951             ;   2 -> A=1,HL=$0000
0385+  3951             ;   3 -> A=1,HL=$8000
0386+  3951             ;
0387+  3951             
0388+  3951             
0389+  3951             Set_Vdp_Write:           ; A(1bit),HL(16bits) input
0390+  3951                     
0391+  3951 CB 04               rlc   h
0392+  3953 17                  rla
0393+  3954 CB 04               rlc   h
0394+  3956 17                  rla
0395+  3957 CB 3C               srl   h
0396+  3959 CB 3C               srl   h
0397+  395B F3                  di
0398+  395C D3 99               out   ($99),a
0399+  395E 3E 8E               ld    a,14+128
0400+  3960 D3 99               out   ($99),a
0401+  3962 7D                  ld    a,l
0402+  3963 00                  nop
0403+  3964 D3 99               out   ($99),a
0404+  3966 7C                  ld    a,h
0405+  3967 F6 40               or    64
0406+  3969 FB                  ei
0407+  396A D3 99               out   ($99),a
0408+  396C C9                  ret
0409+  396D             
0410+  396D             ;
0411+  396D             ;Set VDP port $98 to start reading at address AHL (17-bit)
0412+  396D             ;
0413+  396D             SetVdp_Read:
0414+  396D CB 04               rlc     h
0415+  396F 17                  rla
0416+  3970 CB 04               rlc     h
0417+  3972 17                  rla
0418+  3973 CB 3C               srl     h
0419+  3975 CB 3C               srl     h
0420+  3977 F3                  di
0421+  3978 D3 99               out     ($99),a       ;set bits 15-17
0422+  397A 3E 8E               ld      a,128+14
0423+  397C D3 99               out     ($99),a
0424+  397E 7D                  ld      a,l           ;set bits 0-7
0425+  397F 00                  nop
0426+  3980 D3 99               out     ($99),a
0427+  3982 7C                  ld      a,h           ;set bits 8-14
0428+  3983 FB                  ei                    ; + read access
0429+  3984 D3 99               out     ($99),a
0430+  3986 C9                  ret
0431+  3987                     
0432+  3987             ;****************************************************************
0433+  3987             ; HMMC (High speed move CPU to VRAM)
0434+  3987             ; Screen size 256x212 dots, each byte is color Nr. for 2-pixels 
0435+  3987             ;
0436+  3987             ; Copies data from memory to block in VRAM
0437+  3987             ; The same as in basic COPY file.pic TO (x,y)-(x+D-1,y+E-1)
0438+  3987             ;
0439+  3987             ; RAM [IX] => VRAM (H,L)-(+D,+E)
0440+  3987             ;
0441+  3987             ; set ix = memory address of data to write to VRAM
0442+  3987             ; set h,l,d,e for rectangle to put in
0443+  3987             ; D,E mod 2 = 0 !
0444+  3987             ;****************************************************************
0445+  3987             
0446+  3987             HMMC:  
0447+  3987 F3                   di
0448+  3988 F5                   push af
0449+  3989 C5                   push bc
0450+  398A E5                   push hl
0451+  398B DD E5                push ix      
0452+  398D 3E 00                ld a,0         
0453+  398F CD F4 39             call hmmc_wait_VDP
0454+  3992 3E 24                ld a,36         ;command register R#36
0455+  3994 D3 99                out ($99),a
0456+  3996 3E 91                ld a,128+17     ;VDP(17)<=36
0457+  3998 D3 99                out ($99),a
0458+  399A AF                   xor a           ;ld a,0
0459+  399B 0E 9B                ld c,$9b
0460+  399D ED 61                out (c),h       ;X
0461+  399F ED 79                out (c),a
0462+  39A1 ED 69                out (c),l       ;Y
0463+  39A3 ED 79                out (c),a
0464+  39A5 ED 51                out (c),d       ;DX in dots
0465+  39A7 ED 79                out (c),a       ;
0466+  39A9 ED 59                out (c),e       ;DY in dots
0467+  39AB ED 79                out (c),a       ;
0468+  39AD                         
0469+  39AD DD 66 00             ld h,(ix)       ;first byte of data
0470+  39B0 ED 61                out (c),h       
0471+  39B2             
0472+  39B2 ED 79                out (c),a       ;DIX and DIY = 0     
0473+  39B4 3E F0                ld a,%11110000
0474+  39B6 ED 79                out (c),a      ; command to do it
0475+  39B8 3E AC                ld a,128+44
0476+  39BA D3 99                out ($99),a
0477+  39BC 3E 91                ld a,128+17
0478+  39BE D3 99                out ($99),a    ; VDP(17)<=44                        
0479+  39C0             hmmc_Loop:
0480+  39C0 3E 02                ld a,2
0481+  39C2 CD E2 39             call hmmc_Status
0482+  39C5 CB 7F                bit 7,a        ; TR? transferring?
0483+  39C7 28 F7                jr z, hmmc_Loop
0484+  39C9 CB 47                bit 0,a        ; CE? is over?
0485+  39CB 28 09                jr z, hmmc_exit                       
0486+  39CD DD 23                inc ix
0487+  39CF DD 7E 00             ld a,(ix)
0488+  39D2 D3 9B                out ($9b),a
0489+  39D4 18 EA                jr hmmc_Loop                                                      
0490+  39D6             hmmc_exit:
0491+  39D6 3E 00                ld a,0
0492+  39D8 CD E2 39             call hmmc_Status
0493+  39DB DD E1                pop ix
0494+  39DD E1                   pop hl
0495+  39DE C1                   pop bc
0496+  39DF F1                   pop af
0497+  39E0 FB                   ei
0498+  39E1 C9                   ret                                                                                                                                                                                                                  
0499+  39E2                                                                                                                                                                                                                                                                                         
0500+  39E2             hmmc_Status:
0501+  39E2 D3 99                out ($99),a
0502+  39E4 3E 8F                ld a,$8f
0503+  39E6 D3 99                out ($99),a
0504+  39E8 DB 99                in a,($99)
0505+  39EA F5                   push af
0506+  39EB AF                   xor a
0507+  39EC D3 99                out ($99),a
0508+  39EE 3E 8F                ld a,$8f
0509+  39F0 D3 99                out ($99),a
0510+  39F2 F1                   pop af
0511+  39F3 C9                   ret
0512+  39F4             hmmc_wait_VDP:
0513+  39F4 3E 02                ld a,2
0514+  39F6 CD E2 39             call hmmc_Status
0515+  39F9 E6 01                and 1
0516+  39FB 20 F7                jr nz,hmmc_wait_VDP
0517+  39FD AF                   xor a
0518+  39FE CD E2 39             call hmmc_Status
0519+  3A01 C9                   ret
0520+  3A02             
0521+  3A02             ;****************************************************************
0522+  3A02             ;  HMMM (High speed move VRAM to VRAM)
0523+  3A02             ;        to use, set H, L, D, E, B, C and go
0524+  3A02             ;        VRAM (H,L)-(+D,+E) ---> VRAM (B,C)
0525+  3A02             ; DE is difference -not absolute values
0526+  3A02             ; byte DIX,DIY=0, explained:
0527+  3A02             ; The 0 copies the block starting from the upper left, the 1 from right/bottom.
0528+  3A02             ; what's the difference? when copying overlapping source/destination
0529+  3A02             ; (a scroller for example)
0530+  3A02             ; when scrolling from right to left DIX/DIY can both be 0
0531+  3A02             ;  but copying from left to right DIX must be 1. just figure it out...
0532+  3A02             ; Then give coord.positive from right upper corner to left.
0533+  3A02             ;****************************************************************
0534+  3A02             
0535+  3A02             HMMM:
0536+  3A02 F3                   di
0537+  3A03 F5                   push af
0538+  3A04 C5                   push bc              
0539+  3A05 CD 3E 3A             call VDPready
0540+  3A08 3E 20                ld  a,32
0541+  3A0A D3 99                out ($99),a
0542+  3A0C 3E 91                ld  a,128+17
0543+  3A0E D3 99                out ($99),a     ;R#17 := 32
0544+  3A10 D5                   push de
0545+  3A11 C5                   push bc
0546+  3A12 AF                   xor a           ;ld a,0
0547+  3A13 D1                   pop de          ;de = bc now
0548+  3A14 0E 9B                ld c,$9b
0549+  3A16 ED 61                out (c),h       ;X from
0550+  3A18 ED 79                out (c),a
0551+  3A1A ED 69                out (c),l       ;Y from
0552+  3A1C ED 79                out (c),a
0553+  3A1E ED 51                out (c),d       ;X to
0554+  3A20 ED 79                out (c),a       ;
0555+  3A22 ED 59                out (c),e       ;Y to
0556+  3A24 ED 79                out (c),a
0557+  3A26 D1                   pop de          ;de = de now
0558+  3A27 ED 51                out (c),d       ;DX in dots
0559+  3A29 ED 79                out (c),a       ;
0560+  3A2B ED 59                out (c),e       ;DY in dots
0561+  3A2D ED 79                out (c),a       ;
0562+  3A2F ED 79                out (c),a       ;dummy
0563+  3A31 ED 79                out (c),a       ;DIX and DIY = 0
0564+  3A33 3E D0                ld  a,%11010000 ;HMMM command
0565+  3A35 ED 79                out (c),a       ;do it
0566+  3A37 CD 3E 3A             call VDPready
0567+  3A3A C1                   pop bc
0568+  3A3B F1                   pop af
0569+  3A3C FB                   ei
0570+  3A3D C9                   ret
0571+  3A3E                                             
0572+  3A3E             VDPready:
0573+  3A3E 3E 02               ld   a,2
0574+  3A40 F3                  di
0575+  3A41 D3 99               out  ($99),a          ;select status register 2
0576+  3A43 3E 8F               ld   a,128+15
0577+  3A45 D3 99               out  ($99),a
0578+  3A47 DB 99               in   a,($99)
0579+  3A49 1F                  rra
0580+  3A4A 3E 00               ld   a,0
0581+  3A4C D3 99               out  ($99),a
0582+  3A4E 3E 8F               ld   a,128+15
0583+  3A50 D3 99               out  ($99),a
0584+  3A52 FB                  ei
0585+  3A53 38 E9               jr   c,VDPready    ;wait till previous VDP execution is over (CE)
0586+  3A55 C9                  ret
0587+  3A56             
0588+  3A56             ;
0589+  3A56             ; Sets display mode to width 80
0590+  3A56             ; Use then SetScreen0By30h to set back width 40
0591+  3A56             ;
0592+  3A56             VDPsetMode80:        
0593+  3A56             
0594+  3A56 F3                  di
0595+  3A57 3E 04               ld   a,%00000100
0596+  3A59 D3 99               out  ($99),a
0597+  3A5B 3E 80               ld   a,128+0
0598+  3A5D D3 99               out  ($99),a
0599+  3A5F 3E 70               ld   a,%01110000
0600+  3A61 D3 99               out  ($99),a
0601+  3A63 3E 81               ld   a,128+1
0602+  3A65 D3 99               out  ($99),a
0603+  3A67 AF                  xor a
0604+  3A68 D3 99               out  ($99),a
0605+  3A6A 3E 88               ld   a,128+8
0606+  3A6C D3 99               out  ($99),a
0607+  3A6E AF                  xor a
0608+  3A6F D3 99               out  ($99),a
0609+  3A71 3E 89               ld   a,128+9
0610+  3A73 D3 99               out  ($99),a
0611+  3A75 FB                  ei
0612+  3A76 C9                  ret
0613+  3A77                                                     
0614+  3A77             ;        
0615+  3A77             ;Disable the screen.
0616+  3A77             ;
0617+  3A77             Disable_Scr:
0618+  3A77 3A E0 38            ld      a,(VDP+1)
0619+  3A7A E6 BF               and     %10111111
0620+  3A7C 32 E0 38            ld      (VDP+1),a
0621+  3A7F F3                  di
0622+  3A80 D3 99               out     ($99),a
0623+  3A82 3E 81               ld      a,128+1
0624+  3A84 FB                  ei
0625+  3A85 D3 99               out     ($99),a
0626+  3A87 C9                  ret
0627+  3A88             
0628+  3A88             ;
0629+  3A88             ;Enable the screen.
0630+  3A88             ;
0631+  3A88             Enable_Scr:
0632+  3A88 3A E0 38            ld      a,(VDP+1)
0633+  3A8B F6 40               or      %01000000
0634+  3A8D 32 E0 38            ld      (VDP+1),a
0635+  3A90 F3                  di
0636+  3A91 D3 99               out     ($99),a
0637+  3A93 3E 81               ld      a,128+1
0638+  3A95 FB                  ei
0639+  3A96 D3 99               out     ($99),a
0640+  3A98 C9                  ret
0641+  3A99             
0642+  3A99             ;
0643+  3A99             ;Enable the sprites.
0644+  3A99             ;
0645+  3A99 3A E7 38    Sprites_On:   ld      a,(VDP+8)
0646+  3A9C E6 FD                     and     %11111101
0647+  3A9E 32 E7 38                  ld      (VDP+8),a
0648+  3AA1 F3                        di
0649+  3AA2 D3 99                     out     ($99),a
0650+  3AA4 3E 88                     ld      a,8+128
0651+  3AA6 FB                        ei
0652+  3AA7 D3 99                     out     ($99),a
0653+  3AA9 C9                        ret
0654+  3AAA             
0655+  3AAA             ;
0656+  3AAA             ;Disable the sprites.
0657+  3AAA             ;
0658+  3AAA 3A E7 38    Sprites_Off:  ld      a,(VDP+8)
0659+  3AAD F6 02                     or      %00000010
0660+  3AAF 32 E7 38                  ld      (VDP+8),a
0661+  3AB2 F3                        di
0662+  3AB3 D3 99                     out     ($99),a
0663+  3AB5 3E 88                     ld      a,8+128
0664+  3AB7 FB                        ei
0665+  3AB8 D3 99                     out     ($99),a
0666+  3ABA C9                        ret
0667+  3ABB             ;
0668+  3ABB             ; set 16x16 sprites
0669+  3ABB             ;         
0670+  3ABB             VDPsprites16x16:
0671+  3ABB 3A E0 38                  ld      a,(VDP+1)
0672+  3ABE F6 02                     or      %00000010
0673+  3AC0 32 E0 38                  ld      (VDP+1),a
0674+  3AC3 F3                        di
0675+  3AC4 D3 99                     out     ($99),a
0676+  3AC6 3E 81                     ld      a,1+128
0677+  3AC8 FB                        ei
0678+  3AC9 D3 99                     out     ($99),a
0679+  3ACB C9                        ret
0680+  3ACC             
0681+  3ACC 00 00 00 00 ColPal_:    .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 
0681+  3AD0 00 00 00 00 
0681+  3AD4 00 00 00 00 
0681+  3AD8 00 00 00 00 
0681+  3ADC 00 00 00 00 
0681+  3AE0 00 00 00 00 
0681+  3AE4 00 00 00 00 
0681+  3AE8 00 00 00 00 
0682+  3AEC             
0683+  3AEC             Color16defaultPalettes:
0684+  3AEC                         ;table of colours Nr,R,G,B
0685+  3AEC 00 00 00 00         .byte $0,0,0,0
0686+  3AF0 01 00 00 00         .byte $1,0,0,0
0687+  3AF4 02 01 06 01         .byte $2,1,6,1
0688+  3AF8 03 03 07 03         .byte $3,3,7,3
0689+  3AFC 04 01 01 07         .byte $4,1,1,7
0690+  3B00 05 02 03 07         .byte $5,2,3,7
0691+  3B04 06 05 01 01         .byte $6,5,1,1
0692+  3B08 07 02 06 07         .byte $7,2,6,7
0693+  3B0C 08 07 01 01         .byte $8,7,1,1
0694+  3B10 09 07 03 03         .byte $9,7,3,3
0695+  3B14 0A 06 06 01         .byte $A,6,6,1
0696+  3B18 0B 06 06 04         .byte $B,6,6,4
0697+  3B1C 0C 01 04 01         .byte $C,1,4,1
0698+  3B20 0D 06 02 05         .byte $D,6,2,5
0699+  3B24 0E 05 05 05         .byte $E,5,5,5
0700+  3B28 0F 07 07 07         .byte $F,7,7,7
0701+  3B2C                     
0702+  3B2C             ;Restores default MSX color palettes
0703+  3B2C             RestoreColors:
0704+  3B2C E5                       push hl
0705+  3B2D 21 EC 3A                 ld hl, Color16defaultPalettes 
0706+  3B30 CD 11 38                 call SetPaletteByTable    ; defines 16colors
0707+  3B33 E1                       pop hl
0708+  3B34 C9                       ret
0709+  3B35             
0710+  3B35             ;****************************************************************
0711+  3B35             ; draws LINE 
0712+  3B35             ;        to use, set H, L, D, E, B, A and go
0713+  3B35             ;        draw LINE (H,L)-(D,E) with color B, log-op A
0714+  3B35             ; H,L,D,E absolute values
0715+  3B35             ;****************************************************************
0716+  3B35             
0717+  3B35             LINE:
0718+  3B35 F3                   di
0719+  3B36 F5                   push af
0720+  3B37 C5                   push bc
0721+  3B38 D5                   push de
0722+  3B39 E5                   push hl
0723+  3B3A                      
0724+  3B3A F5                   push af          ;save LOGICAL OPERATION
0725+  3B3B C5                   push bc          ;save COLOR            
0726+  3B3C CD 3E 3A             call VDPready
0727+  3B3F 3E 24                ld  a,36
0728+  3B41 D3 99                out ($99),a
0729+  3B43 3E 91                ld  a,128+17
0730+  3B45 D3 99                out ($99),a     ;R#17 := 36
0731+  3B47 AF                   xor a           ;ld a,0
0732+  3B48 0E 9B                ld c,$9b
0733+  3B4A ED 61                out (c),h       ;X from
0734+  3B4C ED 79                out (c),a
0735+  3B4E ED 69                out (c),l       ;Y from
0736+  3B50 ED 79                out (c),a
0737+  3B52              
0738+  3B52 7C                   ld a,h          ;make DX and DIX
0739+  3B53 92                   sub d
0740+  3B54 16 04                ld  d,%00000100
0741+  3B56 30 04                jr nc,gLINE1
0742+  3B58 16 00                ld  d,%00000000
0743+  3B5A ED 44                neg
0744+  3B5C 67          gLINE1:  ld h,a          ;H := DX , D := DIX
0745+  3B5D 7D                   ld a,l          ;make DY and DIY
0746+  3B5E 93                   sub e
0747+  3B5F 1E 08                ld  e,%00001000
0748+  3B61 30 04                jr nc,gLINE2
0749+  3B63 1E 00                ld  e,%00000000
0750+  3B65 ED 44                neg
0751+  3B67 6F          gLINE2:  ld l,a          ;L := DY , E := DIY
0752+  3B68 BC                   cp h            ;make Maj and Min
0753+  3B69 38 0D                jr c,gLINE3
0754+  3B6B AF                   xor a
0755+  3B6C ED 69                out (c),l           ;long side
0756+  3B6E ED 79                out (c),a
0757+  3B70 ED 61                out (c),h           ;short side
0758+  3B72 ED 79                out (c),a
0759+  3B74 3E 01                ld  a,%00000001     ;MAJ := 1
0760+  3B76 18 0B                jr gLINE4
0761+  3B78             
0762+  3B78 AF          gLINE3:  xor a
0763+  3B79 ED 61                out (c),h           ;NX
0764+  3B7B ED 79                out (c),a
0765+  3B7D ED 69                out (c),l           ;NY
0766+  3B7F ED 79                out (c),a
0767+  3B81 3E 00                ld  a,%00000000     ;MAJ := 0
0768+  3B83             
0769+  3B83 B2          gLINE4:  or d
0770+  3B84 B3                   or e           ;A := DIX , DIY , MAJ
0771+  3B85 E1                   pop hl         ;H := COLOR
0772+  3B86 ED 61                out (c),h
0773+  3B88 ED 79                out (c),a
0774+  3B8A F1                   pop af         ;A := LOGICAL OPERATION
0775+  3B8B F6 70                or  %01110000
0776+  3B8D ED 79                out (c),a
0777+  3B8F 3E 8F                ld  a,$8F
0778+  3B91 ED 79                out (c),a
0779+  3B93                      
0780+  3B93 CD 3E 3A             call VDPready
0781+  3B96 E1                   pop hl         
0782+  3B97 D1                   pop de         
0783+  3B98 C1                   pop bc
0784+  3B99 F1                   pop af
0785+  3B9A FB                   ei
0786+  3B9B C9                   ret
0787+  3B9C              
0788+  3B9C             
0789+  3B9C             ;***************************************************************************
0790+  3B9C             ;  HMMM with 2byte addressing (far copy), for not simplest case
0791+  3B9C             ;  word size parameters for H, L, D, E, B, C, DIX/DIY byte
0792+  3B9C             ;***************************************************************************
0793+  3B9C             
0794+  3B9C 00 00 00 00 HC_p     .word 0,0,0,0,0,0
0794+  3BA0 00 00 00 00 
0794+  3BA4 00 00 00 00 
0795+  3BA8 00                   .byte 0    ;DIX,DIY, just =0
0796+  3BA9             
0797+  3BA9             HMMMf:
0798+  3BA9 F3                   di
0799+  3BAA F5                   push af
0800+  3BAB C5                   push bc
0801+  3BAC D5                   push de
0802+  3BAD E5                   push hl
0803+  3BAE                              
0804+  3BAE CD 3E 3A             call VDPready
0805+  3BB1 3E 20                ld  a,32
0806+  3BB3 D3 99                out ($99),a
0807+  3BB5 3E 91                ld  a,128+17
0808+  3BB7 D3 99                out ($99),a     ;R#17 := 32
0809+  3BB9 21 9C 3B             ld hl,HC_p
0810+  3BBC 0E 9B                ld c,$9b
0811+  3BBE 06 0C                ld b,12         ;6x2bytes
0812+  3BC0 ED B3                otir
0813+  3BC2 AF                   xor a     
0814+  3BC3 ED 79                out (c),a       ;dummy
0815+  3BC5 ED A3                outi            ;DIX and DIY
0816+  3BC7 3E D0                ld  a,%11010000 ;HMMM command
0817+  3BC9 ED 79                out (c),a       ;do it
0818+  3BCB CD 3E 3A             call VDPready
0819+  3BCE E1                   pop hl
0820+  3BCF D1                   pop de
0821+  3BD0 C1                   pop bc
0822+  3BD1 F1                   pop af
0823+  3BD2 FB                   ei
0824+  3BD3 C9                   ret
0825+  3BD4             
0826+  3BD4             ;***************************************************************************
0827+  3BD4             ;  LMMM with 2byte addressing (far copy), for not simplest case
0828+  3BD4             ;  VRAM (H,L)-(D,E) ---> VRAM (B,C)  with logical operation 
0829+  3BD4             ;  word size parameters for H, L, D, E, B, C, DIX/DIY byte, Logical_A byte
0830+  3BD4             ;***************************************************************************
0831+  3BD4             
0832+  3BD4 00 00 00 00 LM_p     .word 0,0,0,0,0,0
0832+  3BD8 00 00 00 00 
0832+  3BDC 00 00 00 00 
0833+  3BE0 00                   .byte 0    ;DIX,DIY, just =0
0834+  3BE1 00                   .byte 0    ;LOGICAL IMP=0 (just copy), TIMP bit3=1 copy no transparents
0835+  3BE2             LMMMf:
0836+  3BE2 F3                   di
0837+  3BE3 F5                   push af
0838+  3BE4 C5                   push bc
0839+  3BE5 D5                   push de
0840+  3BE6 E5                   push hl
0841+  3BE7                              
0842+  3BE7 CD 3E 3A             call VDPready
0843+  3BEA 3E 20                ld  a,32
0844+  3BEC D3 99                out ($99),a
0845+  3BEE 3E 91                ld  a,128+17
0846+  3BF0 D3 99                out ($99),a     ;R#17 := 32
0847+  3BF2 21 D4 3B             ld hl,LM_p
0848+  3BF5 0E 9B                ld c,$9b
0849+  3BF7 06 0C                ld b,12         ;6x2bytes
0850+  3BF9 ED B3                otir
0851+  3BFB AF                   xor a     
0852+  3BFC ED 79                out (c),a       ;dummy
0853+  3BFE ED A3                outi            ;DIX and DIY
0854+  3C00 7E                   ld a,(hl)       ; +logical
0855+  3C01 F6 90                or %10010000    ;LMMM command
0856+  3C03 ED 79                out (c),a       ;do it
0857+  3C05 CD 3E 3A             call VDPready
0858+  3C08 E1                   pop hl
0859+  3C09 D1                   pop de
0860+  3C0A C1                   pop bc
0861+  3C0B F1                   pop af
0862+  3C0C FB                   ei
0863+  3C0D C9                   ret
3646   3C0E                       #include "DISKs.ASM"       ; disk function diskload
0001+  3C0E             ;=======================================
0002+  3C0E             ;
0003+  3C0E             ; Disk functions (working)
0004+  3C0E             ;
0005+  3C0E             ;     diskload - to load small file into memory knowing that it works
0006+  3C0E             ;     readFF - buffered reading of 255 bytes of file into memory
0007+  3C0E             ;                (safe diskload for larger file)
0008+  3C0E             ;     dirload - to load directory structure into memory as string
0009+  3C0E             
0010+  3C0E             ;=======================================
0011+  3C0E             ;
0012+  3C0E             ; Usage1:
0013+  3C0E             ;        ld hl,filename_
0014+  3C0E             ;        ld de,$2000
0015+  3C0E             ;        call diskload
0016+  3C0E             ;filename_:
0017+  3C0E             ;        .byte 0,"myfile  com",0  
0018+  3C0E             ;
0019+  3C0E             ; (use exact file name space!)
0020+  3C0E             ;
0021+  3C0E             ;
0022+  3C0E             ; Usage2:
0023+  3C0E             ;        ld hl,filename_
0024+  3C0E             ;scanfile_:
0025+  3C0E             ;        call readFF
0026+  3C0E             ;        cp 0
0027+  3C0E             ;        jr z,scanover_
0028+  3C0E             ;        ld b,a
0029+  3C0E             ;        push de
0030+  3C0E             ;scanrecord_:
0031+  3C0E             ;        ld a,(de)   ;byte is here
0032+  3C0E             ;        inc de
0033+  3C0E             ;        djnz scanrecord_
0034+  3C0E             ;        pop de
0035+  3C0E             ;        jr scanfile_
0036+  3C0E             ;scanover_: 
0037+  3C0E             ;
0038+  3C0E             ;
0039+  3C0E             ; Usage3:
0040+  3C0E             ;        ld hl,willcard_
0041+  3C0E             ;        ld de,$2000
0042+  3C0E             ;        call dirload 
0043+  3C0E             ;willcard_:
0044+  3C0E             ;        .byte 0,"??????? COM",0  ;
0045+  3C0E             ;     
0046+  3C0E             ;    
0047+  3C0E             f_setdma:     .equ     26
0048+  3C0E             f_read:       .equ     39
0049+  3C0E             f_open:       .equ     15
0050+  3C0E             f_close:      .equ     16
0051+  3C0E             
0052+  3C0E             f_search1     .equ     $11
0053+  3C0E             f_search2     .equ     $12
0054+  3C0E             
0055+  3C0E             f_bdos:       .equ     $F37D   ; Call $5
0056+  3C0E             
0057+  3C0E             
0058+  3C0E             ; load file in address de
0059+  3C0E             diskload:
0060+  3C0E F5                  push af
0061+  3C0F C5                  push bc
0062+  3C10 D5                  push de
0063+  3C11 E5                  push hl
0064+  3C12 DD E5               push ix
0065+  3C14 FD E5               push iy
0066+  3C16                     
0067+  3C16 3E 01               ld a,1
0068+  3C18 32 35 3C            ld (loadflag),a
0069+  3C1B                     
0070+  3C1B D5                  push de
0071+  3C1C CD 3F 3D            call f_setfcb
0072+  3C1F CD 56 3D            call f_openf
0073+  3C22 2A 98 3D            ld hl,(f_bleng)
0074+  3C25 D1                  pop de
0075+  3C26 CD 6C 3D            call f_loadf
0076+  3C29 CD 7F 3D            call f_closef
0077+  3C2C                     
0078+  3C2C FD E1               pop iy
0079+  3C2E DD E1               pop ix
0080+  3C30 E1                  pop hl
0081+  3C31 D1                  pop de
0082+  3C32 C1                  pop bc
0083+  3C33 F1                  pop af
0084+  3C34 C9                  ret
0085+  3C35                     
0086+  3C35 01          loadflag: .byte   1   ; should be 0 on return if loaded
0087+  3C36             
0088+  3C36 00          stop_rdFF .byte   0   ; set 1 to stop reading
0089+  3C37             ; scan file, buffer in address de
0090+  3C37             readFF:
0091+  3C37 C5                  push bc
0092+  3C38 D5                  push de
0093+  3C39 E5                  push hl
0094+  3C3A DD E5               push ix
0095+  3C3C FD E5               push iy
0096+  3C3E                     
0097+  3C3E 3A 92 3C            ld a,(rd_opn)
0098+  3C41 FE 00               cp 0
0099+  3C43 20 08               jr nz,rd_overOpnFile
0100+  3C45                     
0101+  3C45 D5                  push de
0102+  3C46 CD 3F 3D            call f_setfcb
0103+  3C49 CD 56 3D            call f_openf
0104+  3C4C D1                  pop de
0105+  3C4D                 
0106+  3C4D             rd_overOpnFile:
0107+  3C4D             
0108+  3C4D 3E 00               ld a,0
0109+  3C4F 32 97 3D            ld (f_groot+1),a
0110+  3C52 67                  ld h,a
0111+  3C53 3E 01               ld a,$1   ; read 255 bytes only
0112+  3C55 32 96 3D            ld (f_groot),a
0113+  3C58 2E FF               ld l,$ff
0114+  3C5A                     
0115+  3C5A 3A 92 3C            ld a,(rd_opn)
0116+  3C5D FE 00               cp 0
0117+  3C5F 20 08               jr nz,rd_over2
0118+  3C61 32 36 3C            ld (stop_rdFF),a                        
0119+  3C64 CD 6C 3D            call f_loadf
0120+  3C67 18 0D               jr rd_over3
0121+  3C69             rd_over2:
0122+  3C69 3A 36 3C            ld a,(stop_rdFF)
0123+  3C6C FE 00               cp 0
0124+  3C6E 20 10               jr nz,rd_StopRd
0125+  3C70 11 88 3D            ld de,f_fcb
0126+  3C73 CD 76 3D            call f_rdit
0127+  3C76             rd_over3:
0128+  3C76 3E 01               ld a,1
0129+  3C78 32 92 3C            ld (rd_opn),a
0130+  3C7B                     
0131+  3C7B 7D                  ld a,l
0132+  3C7C FE 00               cp 0
0133+  3C7E 20 0A               jr nz,rd_outExit
0134+  3C80             rd_StopRd:
0135+  3C80 CD 7F 3D            call f_closef
0136+  3C83 3E 00               ld a,0
0137+  3C85 32 92 3C            ld (rd_opn),a
0138+  3C88 FE 00               cp 0
0139+  3C8A                           
0140+  3C8A             rd_outExit:        
0141+  3C8A FD E1               pop iy
0142+  3C8C DD E1               pop ix
0143+  3C8E E1                  pop hl
0144+  3C8F D1                  pop de
0145+  3C90 C1                  pop bc
0146+  3C91 C9                  ret
0147+  3C92             
0148+  3C92 00          rd_opn: .byte 0
0149+  3C93                  
0150+  3C93             ;
0151+  3C93             ; searches directory files
0152+  3C93             ;   that match hl willcard
0153+  3C93             ;   and stores result in address de
0154+  3C93             ;
0155+  3C93             ; separator ","
0156+  3C93             ; ends with "$"
0157+  3C93             ;
0158+  3C93             ;  So, print the directory structure after by simple:
0159+  3C93             ;         ld c, 9
0160+  3C93             ;         call 5
0161+  3C93             ;
0162+  3C93 00          f_found .byte 0   ; counter of files found
0163+  3C94             
0164+  3C94             dirload:
0165+  3C94 F5                  push af
0166+  3C95 C5                  push bc
0167+  3C96 D5                  push de
0168+  3C97 E5                  push hl
0169+  3C98 DD E5               push ix
0170+  3C9A FD E5               push iy
0171+  3C9C                     
0172+  3C9C 3E 00               ld      a,0
0173+  3C9E 32 93 3C            ld      (f_found),a
0174+  3CA1                     
0175+  3CA1 CD 27 3D            call    f_sv_save ; save de
0176+  3CA4                     
0177+  3CA4 CD 3F 3D            call    f_setfcb
0178+  3CA7 2A 98 3D            ld      hl,(f_bleng)
0179+  3CAA             
0180+  3CAA E5                  push    hl
0181+  3CAB 11 FF 3C            ld      de,f_dma                                                                                                                                                                                          
0182+  3CAE 0E 1A               ld      c,f_setdma
0183+  3CB0 CD 7D F3            call    f_bdos
0184+  3CB3 11 88 3D            ld      de,f_fcb
0185+  3CB6 E1                  pop     hl                
0186+  3CB7                     
0187+  3CB7 0E 11               ld      c,f_search1  ; first search
0188+  3CB9 CD 7D F3            call    f_bdos
0189+  3CBC                     
0190+  3CBC             f_loopDirList:
0191+  3CBC             
0192+  3CBC FE 00               cp 0
0193+  3CBE 20 28               jr nz,  f_errDirList
0194+  3CC0                     
0195+  3CC0                     ;----- save in list --|
0196+  3CC0 F5                  push    af
0197+  3CC1 C5                  push    bc
0198+  3CC2 D5                  push    de
0199+  3CC3 E5                  push    hl
0200+  3CC4                     
0201+  3CC4 3A 93 3C            ld      a,(f_found)
0202+  3CC7 3C                  inc     a
0203+  3CC8 32 93 3C            ld      (f_found),a
0204+  3CCB                             
0205+  3CCB CD 32 3D            call    f_sv_rest ; restore de
0206+  3CCE                             
0207+  3CCE FD E5               push    iy
0208+  3CD0 E1                  pop     hl   ; where file name is in DMA
0209+  3CD1 01 0B 00            ld      bc,11
0210+  3CD4 ED B0               ldir         ; write 11 chars of filename
0211+  3CD6                     
0212+  3CD6 3E 2C               ld      a,','    ; separator
0213+  3CD8 12                  ld      (de),a
0214+  3CD9 13                  inc     de
0215+  3CDA             
0216+  3CDA CD 27 3D            call    f_sv_save ; save new de
0217+  3CDD                     
0218+  3CDD E1                  pop     hl
0219+  3CDE D1                  pop     de
0220+  3CDF C1                  pop     bc
0221+  3CE0 F1                  pop     af
0222+  3CE1                     ;---------------------|
0223+  3CE1                     
0224+  3CE1 0E 12               ld      c,f_search2  ; continue searching
0225+  3CE3 CD 7D F3            call    f_bdos
0226+  3CE6                     
0227+  3CE6 18 D4               jr      f_loopDirList
0228+  3CE8                     
0229+  3CE8             f_errDirList:
0230+  3CE8             
0231+  3CE8 CD 32 3D            call    f_sv_rest ; restore de
0232+  3CEB             
0233+  3CEB 3A 93 3C            ld      a,(f_found)
0234+  3CEE FE 00               cp      0
0235+  3CF0 28 01               jr      z, f_fxqx
0236+  3CF2 1B                  dec     de
0237+  3CF3 3E 24       f_fxqx: ld      a,'$'     ; it's over, put $
0238+  3CF5 12                  ld      (de),a
0239+  3CF6                     
0240+  3CF6 FD E1               pop iy
0241+  3CF8 DD E1               pop ix
0242+  3CFA E1                  pop hl
0243+  3CFB D1                  pop de
0244+  3CFC C1                  pop bc
0245+  3CFD F1                  pop af
0246+  3CFE C9                  ret
0247+  3CFF             
0248+  3CFF             f_dma:  .ds 40      ; to store searching results (a copy of fcb)
0249+  3D27             
0250+  3D27             ; need this crap because it uses all registers
0251+  3D27             f_sv_save:
0252+  3D27 F5                  push af
0253+  3D28 7A                  ld a,d
0254+  3D29 32 3D 3D            ld (f_sv_w+0),a        
0255+  3D2C 7B                  ld a,e
0256+  3D2D 32 3E 3D            ld (f_sv_w+1),a
0257+  3D30 F1                  pop af
0258+  3D31 C9                  ret
0259+  3D32             f_sv_rest:
0260+  3D32 F5                  push af
0261+  3D33 3A 3D 3D            ld a,(f_sv_w+0)
0262+  3D36 57                  ld d,a        
0263+  3D37 3A 3E 3D            ld a,(f_sv_w+1)
0264+  3D3A 5F                  ld e,a        
0265+  3D3B F1                  pop af
0266+  3D3C C9                  ret
0267+  3D3D             
0268+  3D3D 00 00       f_sv_w: .word 0
0269+  3D3F                                
0270+  3D3F             f_setfcb:
0271+  3D3F E5                    push hl
0272+  3D40 21 88 3D              ld hl,f_fcb+0
0273+  3D43 11 89 3D              ld de,f_fcb+1
0274+  3D46 01 24 00              ld bc,36
0275+  3D49 70                    ld (hl),b
0276+  3D4A ED B0                 ldir
0277+  3D4C E1                    pop hl
0278+  3D4D 11 88 3D              ld de,f_fcb
0279+  3D50 01 0C 00              ld bc,12
0280+  3D53 ED B0                 ldir
0281+  3D55 C9                    ret
0282+  3D56             
0283+  3D56 11 88 3D    f_openf:  ld      de,f_fcb
0284+  3D59 0E 0F                 ld      c,f_open
0285+  3D5B CD 7D F3              call    f_bdos
0286+  3D5E 21 01 00              ld      hl,1
0287+  3D61 22 96 3D              ld      (f_groot),hl
0288+  3D64 2B                    dec     hl
0289+  3D65 22 A9 3D              ld      (f_blok),hl
0290+  3D68 22 AB 3D              ld      (f_blok+2),hl
0291+  3D6B C9                    ret
0292+  3D6C                                 
0293+  3D6C E5          f_loadf:  push    hl
0294+  3D6D 0E 1A                 ld      c,f_setdma
0295+  3D6F CD 7D F3              call    f_bdos
0296+  3D72 11 88 3D              ld      de,f_fcb
0297+  3D75 E1                    pop     hl
0298+  3D76 0E 27       f_rdit:   ld      c,f_read
0299+  3D78 CD 7D F3              call    f_bdos    
0300+  3D7B 32 35 3C              ld      (loadflag),a  ;sets 0 if ok, 1 if can not load
0301+  3D7E C9                    ret
0302+  3D7F 11 88 3D    f_closef: ld      de,f_fcb
0303+  3D82 0E 10                 ld      c,f_close
0304+  3D84 CD 7D F3              call    f_bdos
0305+  3D87 C9                    ret
0306+  3D88             
0307+  3D88             
0308+  3D88             ; Good tutorial on MSX files at
0309+  3D88             ; http://fms.komkon.org/MSX/Handbook/th-3.txt
0310+  3D88             
0311+  3D88 00          f_fcb:    .byte    0
0312+  3D89 3F 3F 3F 3F           .byte    "???????????"   ;11 chars          
0312+  3D8D 3F 3F 3F 3F 
0312+  3D91 3F 3F 3F 
0313+  3D94 00 00                 .word    0
0314+  3D96 00 00       f_groot:  .word    0
0315+  3D98 00 00       f_bleng:  .word    0
0316+  3D9A 00 00 00 00           .byte    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0316+  3D9E 00 00 00 00 
0316+  3DA2 00 00 00 00 
0316+  3DA6 00 00 00 
0317+  3DA9 00 00       f_blok:   .word    0
0318+  3DAB 00 00                 .word    0
0319+  3DAD             
0320+  3DAD                                     3647   3DAD                       #include "String.ASM"      ; most common string functions
0001+  3DAD             ;-------------------------------------
0002+  3DAD             ;
0003+  3DAD             ; Most common String functions (MSX asm)
0004+  3DAD             ; String can be 256 characters long maximum
0005+  3DAD             ; 
0006+  3DAD             ;
0007+  3DAD             ; String ends with 0, 
0008+  3DAD             ;  should be reserved bytes if string becomes longer,
0009+  3DAD             ;   of course.
0010+  3DAD             ;
0011+  3DAD             ;-------------------------------------
0012+  3DAD             ; 
0013+  3DAD             
0014+  3DAD             ; returns length of DE string in A, also sets Z
0015+  3DAD             Str_Len:
0016+  3DAD C5                  push bc
0017+  3DAE D5                  push de
0018+  3DAF 0E 00               ld c,0
0019+  3DB1             Str_LnScn:        
0020+  3DB1 1A                  ld a,(de)
0021+  3DB2 FE 00               cp 0
0022+  3DB4 28 04               jr z,Str_LnEx
0023+  3DB6 13                  inc de
0024+  3DB7 0C                  inc c
0025+  3DB8 18 F7               jr Str_LnScn
0026+  3DBA             Str_LnEx:
0027+  3DBA 79                  ld a,c
0028+  3DBB D1                  pop de        
0029+  3DBC C1                  pop bc
0030+  3DBD FE 00               cp 0
0031+  3DBF C9                  ret
0032+  3DC0                     
0033+  3DC0             ; set empty string
0034+  3DC0             Str_Clear:
0035+  3DC0 F5                  push af
0036+  3DC1 3E 00               ld a,0
0037+  3DC3 12                  ld (de),a
0038+  3DC4 F1                  pop af
0039+  3DC5 C9                  ret
0040+  3DC6             
0041+  3DC6             
0042+  3DC6             
0043+  3DC6             ; Cuts string of DE at length=A [0..254]
0044+  3DC6             ;     (label+nn  is much faster)
0045+  3DC6             ;
0046+  3DC6             Str_Cut:
0047+  3DC6 F5                   push af
0048+  3DC7 C5                   push bc
0049+  3DC8 E5                   push hl
0050+  3DC9 06 00                ld b,0
0051+  3DCB 4F                   ld c,a
0052+  3DCC D5                   push de
0053+  3DCD E1                   pop hl
0054+  3DCE 09                   add hl,bc
0055+  3DCF 3E 00                ld a,0
0056+  3DD1 77                   ld (hl),a
0057+  3DD2 E1                   pop hl
0058+  3DD3 C1                   pop bc
0059+  3DD4 F1                   pop af
0060+  3DD5 C9                   ret
0061+  3DD6                      
0062+  3DD6             ; compares string of DE with string of IX
0063+  3DD6             ; Returns: A=0 - strings are equal
0064+  3DD6             ;          A=1 - IX string starts with DE str.
0065+  3DD6             ;          A=2 - not equal
0066+  3DD6             ; 
0067+  3DD6             Str_Compare:
0068+  3DD6 C5                   push bc
0069+  3DD7 D5                   push de
0070+  3DD8 DD E5                push ix
0071+  3DDA             Str_compScn:         
0072+  3DDA DD 7E 00             ld a,(ix)
0073+  3DDD FE 00                cp 0
0074+  3DDF 28 0E                jr z,Str_compL0   
0075+  3DE1 47                   ld b,a
0076+  3DE2 1A                   ld a,(de)
0077+  3DE3 FE 00                cp 0
0078+  3DE5 28 17                jr z,Str_compN1
0079+  3DE7 B8                   cp b
0080+  3DE8 20 10                jr nz,Str_compNEq
0081+  3DEA 13                   inc de
0082+  3DEB DD 23                inc ix
0083+  3DED 18 EB                jr Str_compScn
0084+  3DEF             Str_compL0:
0085+  3DEF 1A                   ld a,(de)
0086+  3DF0 FE 00                cp 0
0087+  3DF2 28 02                jr z,Str_compEq
0088+  3DF4 18 04                jr Str_compNEq
0089+  3DF6             Str_compEq:
0090+  3DF6 3E 00                ld a,0
0091+  3DF8 18 06                jr Str_compEx
0092+  3DFA             Str_compNEq:
0093+  3DFA 3E 02                ld a,2
0094+  3DFC 18 02                jr Str_compEx         
0095+  3DFE             Str_compN1:
0096+  3DFE 3E 01                ld a,1
0097+  3E00             Str_compEx:
0098+  3E00 DD E1                pop ix
0099+  3E02 D1                   pop de
0100+  3E03 C1                   pop bc
0101+  3E04 C9                   ret
0102+  3E05             
0103+  3E05             ; Copies string DE to IX
0104+  3E05             Str_Copy:
0105+  3E05 F5                   push af
0106+  3E06 D5                   push de
0107+  3E07 DD E5                push ix
0108+  3E09             Str_CpyScn:
0109+  3E09 1A                   ld a,(de)
0110+  3E0A DD 77 00             ld (ix),a
0111+  3E0D FE 00                cp 0
0112+  3E0F 28 05                jr z,StrCpyEx
0113+  3E11 13                   inc de
0114+  3E12 DD 23                inc ix
0115+  3E14 18 F3                jr Str_CpyScn
0116+  3E16             StrCpyEx:                  
0117+  3E16 DD E1                pop ix
0118+  3E18 D1                   pop de
0119+  3E19 F1                   pop af
0120+  3E1A C9                   ret
0121+  3E1B             
0122+  3E1B             ; Converts string DE to UpperCase
0123+  3E1B             Str_Upper:
0124+  3E1B F5                   push af
0125+  3E1C D5                   push de
0126+  3E1D             Str_UppScn:
0127+  3E1D 1A                   ld a,(de)
0128+  3E1E FE 00                cp 0
0129+  3E20 28 0E                jr z,Str_UppEx
0130+  3E22 FE 61                cp 'a'
0131+  3E24 38 07                jr c,Str_UppNCnv
0132+  3E26 FE 7A                cp 'z'
0133+  3E28 30 03                jr nc,Str_UppNCnv
0134+  3E2A D6 20                sub 32
0135+  3E2C 12                   ld (de),a
0136+  3E2D             Str_UppNCnv:
0137+  3E2D 13                   inc de         
0138+  3E2E 18 ED                jr Str_UppScn
0139+  3E30             Str_UppEx:         
0140+  3E30 D1                   pop de
0141+  3E31 F1                   pop af
0142+  3E32 C9                   ret
0143+  3E33             
0144+  3E33             ; Converts string DE to LowerCase
0145+  3E33             Str_Lower:
0146+  3E33 F5                   push af
0147+  3E34 D5                   push de
0148+  3E35             Str_LwrScn:
0149+  3E35 1A                   ld a,(de)
0150+  3E36 FE 00                cp 0
0151+  3E38 28 0E                jr z,Str_LwrEx
0152+  3E3A FE 41                cp 'A'
0153+  3E3C 38 07                jr c,Str_LwrNCnv
0154+  3E3E FE 5A                cp 'Z'
0155+  3E40 30 03                jr nc,Str_LwrNCnv
0156+  3E42 C6 20                add a,32
0157+  3E44 12                   ld (de),a
0158+  3E45             Str_LwrNCnv:
0159+  3E45 13                   inc de         
0160+  3E46 18 ED                jr Str_LwrScn
0161+  3E48             Str_LwrEx:         
0162+  3E48 D1                   pop de
0163+  3E49 F1                   pop af
0164+  3E4A C9                   ret
0165+  3E4B             
0166+  3E4B             ; Finds string DE in string IX first 254 bytes
0167+  3E4B             ; On return: A=position, starting from 0
0168+  3E4B             ; If not found then A=$ff                 
0169+  3E4B             Str_IndexOf:
0170+  3E4B C5                   push bc
0171+  3E4C D5                   push de
0172+  3E4D DD E5                push ix
0173+  3E4F             
0174+  3E4F 06 00                ld b,0
0175+  3E51             Str_InxScn:
0176+  3E51 DD 7E 00             ld a,(ix)
0177+  3E54 FE 00                cp 0
0178+  3E56 20 04                jr nz,Str_InxCompr
0179+  3E58 3E FF                ld a,$ff
0180+  3E5A 18 12                jr Str_InxEx
0181+  3E5C             Str_InxCompr:
0182+  3E5C CD D6 3D             call Str_Compare
0183+  3E5F FE 02                cp 2
0184+  3E61 20 0A                jr nz,Str_InxFound
0185+  3E63 04                   inc b
0186+  3E64 3E FF                ld a,$ff
0187+  3E66 B8                   cp b
0188+  3E67 28 05                jr z,Str_InxEx
0189+  3E69 DD 23                inc ix
0190+  3E6B 18 E4                jr Str_InxScn
0191+  3E6D             Str_InxFound:
0192+  3E6D 78                   ld a,b 
0193+  3E6E             Str_InxEx:                  
0194+  3E6E DD E1                pop ix
0195+  3E70 D1                   pop de
0196+  3E71 C1                   pop bc
0197+  3E72 C9                   ret
0198+  3E73             
0199+  3E73             ;returns a=0 and Z flag set if string IX contains substring DE
0200+  3E73             ; (length not limited)
0201+  3E73             Str_Contains:
0202+  3E73 DD E5                push ix
0203+  3E75             Str_Contai_Scn:
0204+  3E75 DD 7E 00             ld a,(ix)
0205+  3E78 FE 00                cp 0
0206+  3E7A 20 04                jr nz,Str_Contai_Cont
0207+  3E7C 3E 02                ld a,2
0208+  3E7E 18 0D                jr Str_Contai_ex
0209+  3E80             Str_Contai_Cont:      
0210+  3E80 CD D6 3D             call Str_Compare
0211+  3E83 FE 02                cp 2
0212+  3E85 20 04                jr nz,Str_Contai_found
0213+  3E87 DD 23                inc ix
0214+  3E89 18 EA                jr Str_Contai_Scn
0215+  3E8B             Str_Contai_found:
0216+  3E8B 3E 00                ld a,0
0217+  3E8D             Str_Contai_ex:          
0218+  3E8D DD E1                pop ix
0219+  3E8F FE 00                cp 0
0220+  3E91 C9                   ret
0221+  3E92             
0222+  3E92             ;
0223+  3E92             ; Places substring of IX into DE
0224+  3E92             ; c=starting char in IX, b-length in chars
0225+  3E92             ;
0226+  3E92             Str_Substr:
0227+  3E92 F5                   push af
0228+  3E93 C5                   push bc
0229+  3E94 D5                   push de
0230+  3E95 E5                   push hl       
0231+  3E96             
0232+  3E96 DD E5                push ix
0233+  3E98 E1                   pop hl
0234+  3E99 79                   ld a,c
0235+  3E9A FE 00                cp 0
0236+  3E9C 28 05                jr z,Str_SubAt0
0237+  3E9E C5                   push bc
0238+  3E9F 06 00                ld b,0
0239+  3EA1 09                   add hl,bc   ; offset
0240+  3EA2 C1                   pop bc
0241+  3EA3             Str_SubAt0:         
0242+  3EA3 48                   ld c,b
0243+  3EA4 06 00                ld b,0
0244+  3EA6 ED B0                ldir        ; copy bc bytes from HL to DE addrs.
0245+  3EA8 3E 00                ld a,0
0246+  3EAA 12                   ld (de),a
0247+  3EAB                      
0248+  3EAB E1                   pop hl
0249+  3EAC D1                   pop de
0250+  3EAD C1                   pop bc
0251+  3EAE F1                   pop af
0252+  3EAF C9                   ret
0253+  3EB0             
0254+  3EB0             ;
0255+  3EB0             ; Removes left spaces for string in DE
0256+  3EB0             ;
0257+  3EB0             Str_Ltrim:
0258+  3EB0 F5                   push af
0259+  3EB1 C5                   push bc
0260+  3EB2 D5                   push de
0261+  3EB3 DD E5                push ix
0262+  3EB5                      
0263+  3EB5 D5                   push de
0264+  3EB6 DD E1                pop ix
0265+  3EB8 0E 00                ld c,0
0266+  3EBA             Str_LtrScn:         
0267+  3EBA 1A                   ld a,(de)
0268+  3EBB FE 20                cp 32
0269+  3EBD 20 05                jr nz,Str_LtrNS
0270+  3EBF 13                   inc de
0271+  3EC0 0E 01                ld c,1
0272+  3EC2 18 F6                jr Str_LtrScn
0273+  3EC4             Str_LtrNS:
0274+  3EC4 79                   ld a,c
0275+  3EC5 FE 00                cp 0
0276+  3EC7 28 03                jr z,Str_LtrEx
0277+  3EC9 CD 05 3E             call Str_Copy
0278+  3ECC             Str_LtrEx:
0279+  3ECC DD E1                pop ix
0280+  3ECE D1                   pop de
0281+  3ECF C1                   pop bc
0282+  3ED0 F1                   pop af
0283+  3ED1 C9                   ret
0284+  3ED2                      
0285+  3ED2             ;
0286+  3ED2             ; Removes right spaces for string in DE
0287+  3ED2             ;
0288+  3ED2             Str_Rtrim:
0289+  3ED2 F5                   push af
0290+  3ED3 D5                   push de         
0291+  3ED4 1A                   ld a,(de)
0292+  3ED5 FE 00                cp 0
0293+  3ED7 28 12                jr z,Str_RtrEx
0294+  3ED9             Str_RtrRscn:
0295+  3ED9 13                   inc de        
0296+  3EDA 1A                   ld a,(de)
0297+  3EDB FE 00                cp 0
0298+  3EDD 28 02                jr z,Str_Rtr1
0299+  3EDF 18 F8                jr Str_RtrRscn
0300+  3EE1             Str_Rtr1:
0301+  3EE1 1B                   dec de
0302+  3EE2 FE 20                cp 32
0303+  3EE4 20 05                jr nz,Str_RtrEx
0304+  3EE6 3E 00                ld a,0
0305+  3EE8 12                   ld (de),a
0306+  3EE9 18 F6                jr Str_Rtr1
0307+  3EEB             Str_RtrEx:
0308+  3EEB D1                   pop de
0309+  3EEC F1                   pop af
0310+  3EED C9                   ret
0311+  3EEE             
0312+  3EEE             ; both trims
0313+  3EEE             Str_Alltrim:
0314+  3EEE CD D2 3E             call Str_Rtrim
0315+  3EF1 CD B0 3E             call Str_Ltrim
0316+  3EF4 C9                   ret
0317+  3EF5             
0318+  3EF5             ;
0319+  3EF5             ; Adds DE string at the end of IX string
0320+  3EF5             ;
0321+  3EF5             Str_Append:
0322+  3EF5 F5                   push af
0323+  3EF6 DD E5                push ix         
0324+  3EF8 DD 7E 00             ld a,(ix)
0325+  3EFB FE 00                cp 0
0326+  3EFD 28 0B                jr z,Str_App1
0327+  3EFF             Str_AppRscn:
0328+  3EFF DD 23                inc ix        
0329+  3F01 DD 7E 00             ld a,(ix)
0330+  3F04 FE 00                cp 0
0331+  3F06 28 02                jr z,Str_App1
0332+  3F08 18 F5                jr Str_AppRscn
0333+  3F0A             Str_App1:
0334+  3F0A CD 05 3E             call Str_Copy
0335+  3F0D DD E1                pop ix
0336+  3F0F F1                   pop af
0337+  3F10 C9                   ret
0338+  3F11             
0339+  3F11             ;
0340+  3F11             ; Replaces all DE substrings in IX string with HL string
0341+  3F11             ;
0342+  3F11             Str_Replace:
0343+  3F11 F5                   push af
0344+  3F12 C5                   push bc
0345+  3F13 E5                   push hl
0346+  3F14 DD E5                push ix
0347+  3F16                      
0348+  3F16 CD AD 3D             call Str_Len
0349+  3F19 4F                   ld c,a           ;c=Len(de-string)
0350+  3F1A FE 00                cp 0
0351+  3F1C 28 47                jr z,Str_ReplNo
0352+  3F1E             Str_ReplLoop:        
0353+  3F1E CD 4B 3E             call Str_IndexOf
0354+  3F21 FE FF                cp $ff
0355+  3F23 28 40                jr z,Str_ReplNo
0356+  3F25                      
0357+  3F25 D5                   push de
0358+  3F26 47                   ld b,a
0359+  3F27 11 6B 3F             ld de,Str_buf_
0360+  3F2A                      
0361+  3F2A DD E5                push ix
0362+  3F2C             Str_ReplIy0:                   ; copy till substr...
0363+  3F2C DD 7E 00             ld a,(ix)
0364+  3F2F 12                   ld (de),a
0365+  3F30 78                   ld a,b
0366+  3F31 FE 00                cp 0
0367+  3F33 28 06                jr z,Str_ReplIx0
0368+  3F35 DD 23                inc ix
0369+  3F37 13                   inc de
0370+  3F38 05                   dec b
0371+  3F39 18 F1                jr Str_ReplIy0
0372+  3F3B             Str_ReplIx0:
0373+  3F3B             
0374+  3F3B E5                   push hl
0375+  3F3C             Str_ReplIy1:                   ; copy new substring...         
0376+  3F3C 7E                   ld a,(hl)
0377+  3F3D 12                   ld (de),a
0378+  3F3E FE 00                cp 0
0379+  3F40 28 04                jr z,Str_ReplHl0
0380+  3F42 23                   inc hl
0381+  3F43 13                   inc de
0382+  3F44 18 F6                jr Str_ReplIy1
0383+  3F46             Str_ReplHl0:
0384+  3F46 E1                   pop hl
0385+  3F47                      
0386+  3F47 79                   ld a,c
0387+  3F48             Str_ReplSkp1:         
0388+  3F48 DD 23                inc ix                 ; skip substr
0389+  3F4A 3D                   dec a
0390+  3F4B 20 FB                jr nz,Str_ReplSkp1
0391+  3F4D             Str_ReplIy3:                    ; copy all string after...
0392+  3F4D DD 7E 00             ld a,(ix)
0393+  3F50 12                   ld (de),a
0394+  3F51 FE 00                cp 0
0395+  3F53 28 05                jr z,Str_ReplIx3
0396+  3F55 DD 23                inc ix
0397+  3F57 13                   inc de
0398+  3F58 18 F3                jr Str_ReplIy3
0399+  3F5A             Str_ReplIx3:
0400+  3F5A DD E1                pop ix
0401+  3F5C                      
0402+  3F5C 11 6B 3F             ld de,Str_buf_
0403+  3F5F CD 05 3E             call Str_Copy        ; copy new string to IX 
0404+  3F62             
0405+  3F62 D1                   pop de
0406+  3F63 18 B9                jr Str_ReplLoop        ; to replace all occurrances
0407+  3F65             Str_ReplNo:         
0408+  3F65 DD E1                pop ix
0409+  3F67 E1                   pop hl
0410+  3F68 C1                   pop bc
0411+  3F69 F1                   pop af
0412+  3F6A C9                   ret
0413+  3F6B                      
0414+  3F6B             Str_buf_ .ds $100
0415+  406B 00                   .byte 0
0416+  406C             
0417+  406C             
0418+  406C             ;
0419+  406C             ; This truncates DE string where new line (ascii 10 or 13)
0420+  406C             ; If string is longer 254 chars then truncates at space char.
0421+  406C             ; Sets IX as pointer to next line starting character
0422+  406C             ; This supposed to get safe-as-much-possible string opeations.
0423+  406C             
0424+  406C             Str_Line:
0425+  406C F5                   push af
0426+  406D C5                   push bc
0427+  406E D5                   push de
0428+  406F             
0429+  406F 01 00 00             ld bc,0
0430+  4072             Str_Ln_Scn:
0431+  4072 1A                   ld a,(de)       ; find end of line
0432+  4073 FE 00                cp 0
0433+  4075 28 28                jr z,Str_Ln_q1
0434+  4077 FE 0D                cp 13
0435+  4079 28 24                jr z,Str_Ln_q1
0436+  407B FE 0A                cp 10
0437+  407D 28 20                jr z,Str_Ln_q1
0438+  407F 13                   inc de
0439+  4080 0C                   inc c
0440+  4081 3E FF                ld a,$ff         ; reached 255?         
0441+  4083 B9                   cp c
0442+  4084 20 EC                jr nz, Str_Ln_Scn
0443+  4086                      
0444+  4086             Str_Ln_fSpc:         
0445+  4086                                        
0446+  4086 1A                   ld a,(de)         ; if string too long then finds space near 254th position
0447+  4087 FE 20                cp ' '
0448+  4089 28 14                jr z,Str_Ln_q1    ; use this position and truncate string
0449+  408B 1B                   dec de
0450+  408C 0D                   dec c
0451+  408D 20 F7                jr nz,Str_Ln_fSpc
0452+  408F                                 
0453+  408F             Str_Ln_cL:
0454+  408F 1A                   ld a,(de)          ; if cant find space then just searches for line end
0455+  4090 FE 00                cp 0               ; to obtain new IX anyway
0456+  4092 28 0B                jr z,Str_Ln_q1
0457+  4094 FE 0D                cp 13
0458+  4096 28 07                jr z,Str_Ln_q1
0459+  4098 FE 0A                cp 10
0460+  409A 28 03                jr z,Str_Ln_q1
0461+  409C 13                   inc de
0462+  409D 18 F0                jr Str_Ln_cL
0463+  409F                      
0464+  409F             Str_Ln_q1:
0465+  409F 3E 00                ld a,0          ; set to 0 till next line
0466+  40A1 12                   ld (de),a
0467+  40A2 13                   inc de
0468+  40A3 1A                   ld a,(de)
0469+  40A4 FE 00                cp 0          
0470+  40A6 28 F7                jr z,Str_Ln_q1
0471+  40A8 FE 0D                cp 13
0472+  40AA 28 F3                jr z,Str_Ln_q1
0473+  40AC FE 0A                cp 10
0474+  40AE 28 EF                jr z,Str_Ln_q1
0475+  40B0                      
0476+  40B0 D5                   push de
0477+  40B1 DD E1                pop ix
0478+  40B3                     
0479+  40B3 D1                   pop de
0480+  40B4 C1                   pop bc
0481+  40B5 F1                   pop af
0482+  40B6 C9                   ret
0483+  40B7             
0484+  40B7             ;
0485+  40B7             ; This removes all non-character symbols and sets TABs as 3 spaces
0486+  40B7             ; of string in DE.  Use after Str_Line not to lose line feeds.
0487+  40B7             ;                  
0488+  40B7             Str_CharsOnly:
0489+  40B7             
0490+  40B7 F5                   push af
0491+  40B8 D5                   push de
0492+  40B9 DD E5                push ix
0493+  40BB D5                   push de
0494+  40BC D5                   push de
0495+  40BD DD E1                pop ix
0496+  40BF 11 6B 3F             ld de,Str_buf_
0497+  40C2             Str_CharsO_loop:
0498+  40C2 DD 7E 00             ld a,(ix)
0499+  40C5 FE 00                cp 0
0500+  40C7 28 1A                jr z, Str_CharsO_Ex
0501+  40C9 FE 09                cp 9
0502+  40CB 20 0C                jr nz, Str_CharsO_nTb
0503+  40CD 3E 20                ld a,' '
0504+  40CF 12                   ld (de),a
0505+  40D0 13                   inc de
0506+  40D1 12                   ld (de),a
0507+  40D2 13                   inc de
0508+  40D3             Str_CharsO_cpy:         
0509+  40D3 12                   ld (de),a
0510+  40D4 13                   inc de
0511+  40D5 DD 23                inc ix
0512+  40D7 18 E9                jr Str_CharsO_loop
0513+  40D9             Str_CharsO_nTb:
0514+  40D9 FE 20                cp ' '
0515+  40DB 38 E5                jr c,Str_CharsO_loop
0516+  40DD FE FF                cp $ff
0517+  40DF 28 E1                jr z,Str_CharsO_loop
0518+  40E1 18 F0                jr Str_CharsO_cpy
0519+  40E3             Str_CharsO_Ex:
0520+  40E3 12                   ld (de),a
0521+  40E4 11 6B 3F             ld de,Str_buf_
0522+  40E7 DD E1                pop ix
0523+  40E9 CD 05 3E             call Str_Copy        ; copy new string to IX 
0524+  40EC DD E1                pop ix
0525+  40EE D1                   pop de
0526+  40EF F1                   pop af
0527+  40F0 C9                   ret
0528+  40F1             
0529+  40F1             ;
0530+  40F1             ; places value of integer in reg-a into DE string
0531+  40F1             ;
0532+  40F1             Str_itoa:
0533+  40F1 F5                   push af
0534+  40F2 C5                   push bc
0535+  40F3 D5                   push de
0536+  40F4 FE 00                cp 0
0537+  40F6 28 3E                jr z,Str_i2_0
0538+  40F8 FE C8                cp 200
0539+  40FA 30 26                jr nc,Str_i2a200
0540+  40FC FE 64                cp 100
0541+  40FE 30 2C                jr nc,Str_i2a100
0542+  4100 FE 0A                cp 10
0543+  4102 30 03                jr nc,Str_i2a10
0544+  4104 4F                   ld c,a
0545+  4105 18 11                jr Str_i2q
0546+  4107             Str_i2a10:
0547+  4107 06 00                ld b,0
0548+  4109             Str_i2a_l_10:         
0549+  4109 FE 0A                cp 10
0550+  410B 38 05                jr c,Str_i2a1
0551+  410D D6 0A                sub 10
0552+  410F 04                   inc b
0553+  4110 18 F7                jr Str_i2a_l_10
0554+  4112             Str_i2a1:
0555+  4112 4F                   ld c,a
0556+  4113 3E 30                ld a,'0'
0557+  4115 80                   add a,b
0558+  4116 12                   ld (de),a
0559+  4117 13                   inc de
0560+  4118 3E 30       Str_i2q: ld a,'0'
0561+  411A 81                   add a,c
0562+  411B 12                   ld (de),a
0563+  411C 13                   inc de
0564+  411D 3E 00                ld a,0
0565+  411F 12                   ld (de),a
0566+  4120 18 18                jr Str_i2ex                  
0567+  4122             Str_i2a200:
0568+  4122 D6 C8                sub 200
0569+  4124 4F                   ld c,a                 
0570+  4125 3E 32                ld a,'2'
0571+  4127 12                   ld (de),a
0572+  4128 13                   inc de
0573+  4129 79                   ld a,c         
0574+  412A 18 DB                jr Str_i2a10
0575+  412C             Str_i2a100:
0576+  412C D6 64                sub 100
0577+  412E 4F                   ld c,a         
0578+  412F 3E 31                ld a,'1'
0579+  4131 12                   ld (de),a
0580+  4132 13                   inc de
0581+  4133 79                   ld a,c
0582+  4134 18 D1                jr Str_i2a10
0583+  4136             Str_i2_0:
0584+  4136 0E 00                ld c,0
0585+  4138 18 DE                jr Str_i2q        
0586+  413A             Str_i2ex:
0587+  413A D1                   pop de
0588+  413B C1                   pop bc
0589+  413C F1                   pop af
0590+  413D C9                   ret
0591+  413E                      
0592+  413E             ;
0593+  413E             ; places integer value of DE string into reg-a
0594+  413E             ;
0595+  413E             Str_atoi:
0596+  413E C5                   push bc
0597+  413F D5                   push de
0598+  4140 E5                   push hl
0599+  4141                      
0600+  4141 EB                   ex de,hl ;hl=de
0601+  4142 11 00 00             ld de,0
0602+  4145 01 00 00             ld bc,0
0603+  4148             Str_a2iLoop:         
0604+  4148 7E                   ld a,(hl)
0605+  4149 23                   inc hl
0606+  414A FE 00                cp 0
0607+  414C 28 1A                jr z, Str_a2ex
0608+  414E FE 30                cp '0'
0609+  4150 38 16                jr c, Str_a2ex
0610+  4152 FE 3A                cp '9'+1
0611+  4154 30 12                jr nc, Str_a2ex
0612+  4156 18 00                jr Str_a2digit
0613+  4158             Str_a2digit:
0614+  4158 D6 30                sub '0'
0615+  415A 4F                   ld c,a
0616+  415B 78                   ld a,b
0617+  415C FE 00                cp 0
0618+  415E 28 0D                jr z,Str_a2ph1
0619+  4160 FE 01                cp 1
0620+  4162 28 0E                jr z,Str_a2ph2
0621+  4164 FE 02                cp 2
0622+  4166 28 0A                jr z,Str_a2ph2   ; the same method  *10+a
0623+  4168             Str_a2ex:               
0624+  4168 7A                   ld a,d          ; store to A
0625+  4169 18 17                jr Str_a2iEx         
0626+  416B             Str_a2Lp:
0627+  416B 18 DB                jr Str_a2iLoop
0628+  416D                      
0629+  416D             Str_a2ph1:
0630+  416D 51                   ld d,c  ; ones, save
0631+  416E 06 01                ld b,1
0632+  4170 18 F9                jr Str_a2Lp
0633+  4172             
0634+  4172             Str_a2ph2:
0635+  4172 7A                   ld a,d           ;d*10 = (d*8)+(d*2)
0636+  4173 CB 27                sla a   ; *2
0637+  4175                         
0638+  4175 CB 22                sla d
0639+  4177 CB 22                sla d
0640+  4179 CB 22                sla d   ;*8
0641+  417B 82                   add a,d  ;+ = become tens
0642+  417C 81                   add a,c  ; +ones
0643+  417D 57                   ld d,a   ;save
0644+  417E 06 02                ld b,2         
0645+  4180 18 E9                jr Str_a2Lp
0646+  4182                      
0647+  4182             Str_a2iEx:
0648+  4182 E1                   pop hl         
0649+  4183 D1                   pop de
0650+  4184 C1                   pop bc
0651+  4185 C9                   ret
0652+  4186             
0653+  4186             ; finds tags in string IX and copies substring between them to DE address
0654+  4186             ; tags are strings addressed by hl (as left tag) and iy (as right tag)
0655+  4186             ; for example: <div>substring between</div>
0656+  4186             ; Separators should be at least 1char.
0657+  4186             ; If can't find left tag till 254th position then returns empty string.
0658+  4186             ; If can't find right tag then truncates substring at 255th position anyway. 
0659+  4186             ;
0660+  4186             Str_TagSubstr:
0661+  4186 F5                   push af
0662+  4187 C5                   push bc
0663+  4188 D5                   push de
0664+  4189 E5                   push hl
0665+  418A DD E5                push ix
0666+  418C                      
0667+  418C D5                   push de
0668+  418D EB                   ex de,hl   ; de=hl (left tag)
0669+  418E 0E 00                ld c,0
0670+  4190             Str_TagScn:
0671+  4190 0C                   inc c
0672+  4191 3E FF                ld a,$ff
0673+  4193 B9                   cp c              ; if 255th reached
0674+  4194 28 15                jr z,Str_LTagNotFound
0675+  4196 CD D6 3D             call Str_Compare
0676+  4199 DD 23                inc ix
0677+  419B FE 02                cp 2
0678+  419D 28 F1                jr z,Str_TagScn
0679+  419F CD AD 3D             call Str_Len ;calculates length of left tag
0680+  41A2             Str_TagSkp1:
0681+  41A2 FE 01                cp 1
0682+  41A4 28 08                jr z,Str_TagBr1
0683+  41A6 DD 23                inc ix
0684+  41A8 3D                   dec a
0685+  41A9 18 F7                jr Str_TagSkp1
0686+  41AB                      
0687+  41AB             Str_LTagNotFound:
0688+  41AB E1                   pop hl   ; hl = de where to store substring 
0689+  41AC 18 1A                jr Str_TagBr2
0690+  41AE                      
0691+  41AE             Str_TagBr1:                  
0692+  41AE                      
0693+  41AE FD E5                push iy
0694+  41B0 D1                   pop de   ; de now = iy (right tag)
0695+  41B1 E1                   pop hl   ; hl = de where to store substring
0696+  41B2                      
0697+  41B2 0E 00                ld c,0
0698+  41B4             Str_TagSc2:
0699+  41B4 CD D6 3D             call Str_Compare
0700+  41B7 FE 02                cp 2
0701+  41B9 20 0D                jr nz,Str_TagBr2
0702+  41BB                       
0703+  41BB DD 7E 00             ld a,(ix)
0704+  41BE 77                   ld (hl),a
0705+  41BF 23                   inc hl
0706+  41C0 DD 23                inc ix
0707+  41C2 0C                   inc c
0708+  41C3 3E FF                ld a,$ff
0709+  41C5 B9                   cp c              ; if 255th reached
0710+  41C6 20 EC                jr nz,Str_TagSc2
0711+  41C8             Str_TagBr2:
0712+  41C8 3E 00                ld a,0
0713+  41CA 77                   ld (hl),a   ; end of new string
0714+  41CB DD E1                pop ix
0715+  41CD E1                   pop hl
0716+  41CE D1                   pop de
0717+  41CF C1                   pop bc
0718+  41D0 F1                   pop af         
0719+  41D1 C9                   ret
0720+  41D2                                 
0721+  41D2             
0722+  41D2             ;
0723+  41D2             ; Faster copy from IX to DE length of A
0724+  41D2             ;  (ignores 0)
0725+  41D2             ;
0726+  41D2             
0727+  41D2             Block_Copy_:
0728+  41D2 FE 00                cp 0
0729+  41D4 28 10                jr z,Block_CpyExit
0730+  41D6 F5                   push af
0731+  41D7 C5                   push bc
0732+  41D8 D5                   push de
0733+  41D9 E5                   push hl       
0734+  41DA             
0735+  41DA DD E5                push ix
0736+  41DC E1                   pop hl
0737+  41DD                      
0738+  41DD 4F                   ld c,a
0739+  41DE 06 00                ld b,0
0740+  41E0 ED B0                ldir        ; copy bc bytes from HL to DE addrs.
0741+  41E2                      
0742+  41E2 E1                   pop hl
0743+  41E3 D1                   pop de
0744+  41E4 C1                   pop bc
0745+  41E5 F1                   pop af
0746+  41E6             Block_CpyExit:         
0747+  41E6 C9                   ret
0748+  41E7                      
0749+  41E7             ; sets to 0 block in DE length of A
0750+  41E7             Block_Clear_:
0751+  41E7 FE 00                cp 0
0752+  41E9 28 15                jr z,Block_ClrExit
0753+  41EB F5                   push af
0754+  41EC C5                   push bc
0755+  41ED D5                   push de
0756+  41EE E5                   push hl       
0757+  41EF             
0758+  41EF 4F                   ld c,a
0759+  41F0 0D                   dec c
0760+  41F1                      
0761+  41F1 D5                   push de
0762+  41F2 E1                   pop hl
0763+  41F3                      
0764+  41F3 3A 01 42             ld a,(Block_ch0)
0765+  41F6 77                   ld (hl),a
0766+  41F7 13                   inc de
0767+  41F8                      
0768+  41F8 06 00                ld b,0
0769+  41FA ED B0                ldir        ; copy repeating 0 from HL to DE addrs.
0770+  41FC                              
0771+  41FC E1                   pop hl
0772+  41FD D1                   pop de
0773+  41FE C1                   pop bc
0774+  41FF F1                   pop af
0775+  4200             Block_ClrExit:         
0776+  4200 C9                   ret
0777+  4201             
0778+  4201 00          Block_ch0: .byte 0   ;uses this byte to set 0
0779+  4202                                  ; (can set spaces or other)
0780+  4202             
3648   4202             
3649   4202             JMP_0000: .equ $F3EF         ;good exit to DOS prompt for sure 
3650   4202                                 
3651   4202             ; Exporting addresses to include them in other modules 
3652   4202             ;      (recognises as labels)
3653   4202                       
3654   4202                      .export startFEN
3655   4202                      .export MOVE_str
3656   4202                      .export BOARD
3657   4202                      .export SIDE
3658   4202                      .export CASTLES
3659   4202                      .export ENPSQ
3660   4202                      .export WKSQ
3661   4202                      .export BKSQ
3662   4202                      .export NEXT_MVSTR
3663   4202                      .export NEXT_MVCNT
3664   4202                      .export NEXT_MOVES
3665   4202                      .export MOVE_CNT
3666   4202                      .export MOVE_HIST
3667   4202                      .export GenMovesAndString
3668   4202                      .export MOVE_byString
3669   4202                      .export MbyStrMove
3670   4202                      .export UndoAllMoves
3671   4202                      .export SQi
3672   4202                      .export SQt
3673   4202                      .export GenMoves
3674   4202                      .export IsEmpty      
3675   4202                      .export IsOccupied
3676   4202                      .export IsWhite
3677   4202                      .export IsBlack
3678   4202                      .export CaptPiece
3679   4202                      .export PromoPcId
3680   4202                      .export CastlMove
3681   4202                      .export MovesToStr
3682   4202                      .export MovesOut
3683   4202                      .export SetFEN
3684   4202                      .export GetFEN
3685   4202                      .export BoardOut
3686   4202                      .export printBOARD        
3687   4202                      .export ScanSqC
3688   4202                      .export SetSqScan
3689   4202                      .export ScanSqNxt
3690   4202                      .export IsCheck  
3691   4202                      .export MakeMove
3692   4202                      .export Swap_Sides
3693   4202                      .export UnMakeMove
3694   4202                      .export DEBUGs
3695   4202                      .export LD_Ix
3696   4202                      .export DEC_I
3697   4202                      
3698   4202             endProgram:
3699   4202             .end
3700   4202             
3701   4202             
tasm: Number of errors = 0
