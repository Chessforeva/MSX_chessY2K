0001   0000             .title ChessY2K
0002   0000             
0003   0000             ;
0004   0000             ; Chess assembler ASM code for MSX
0005   0000             ;
0006   0000             ;  MSDOS:
0007   0000             ;     TASM -80 -b ChessY2K.ASM ChessY2K.com
0008   0000             ;     TASM -80 -b ChessPG.ASM ChessPG.co2
0009   0000             ;     TASM -80 -b ChessPI.ASM ChessPI.co2
0010   0000             ;  Then run ChessY2K.com on MSX-DOS1
0011   0000             ;
0012   0000             ; Date: sep.,oct. 2012
0013   0000             ;  updated nov.2014
0014   0000             ;
0015   0000             ;Performance testing: 256 movement generations per minute on MSX machine -
0016   0000             ;                        not enaugh for chess but ok for pgn-viewer project.
0017   0000             
0018   0000             ;
0019   0000             ; Define PGN_COMPILE to compile separate module for pgn viewer replays
0020   0000             ; It can not be done in one .COM unfortunately - causes too much memory usage.
0021   0000             ; ChessPZ.COM is a compilation with no PGN version.
0022   0000             ; 
0023   0000             ;#define   PGN_COMPILE 1
0024   0000             
0025   0100                      .org $100      
0026   0100                                   
0027   0100             startProgram:
0028   0100 CD 2B 36             call ChessMN     ; process menu
0029   0103                                       ; chess logic is in this file
0030   0103                     
0031   0103 C3 EF F3             jp  JMP_0000     ; return to DOS
0032   0106 C9                   ret
0033   0107                             
0034   0107             startFEN:       
0035   0107 72 6E 62 71         .byte "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",0                       
0035   010B 6B 62 6E 72 
0035   010F 2F 70 70 70 
0035   0113 70 70 70 70 
0035   0117 70 2F 38 2F 
0035   011B 38 2F 38 2F 
0035   011F 38 2F 50 50 
0035   0123 50 50 50 50 
0035   0127 50 50 2F 52 
0035   012B 4E 42 51 4B 
0035   012F 42 4E 52 20 
0035   0133 77 20 4B 51 
0035   0137 6B 71 20 2D 
0035   013B 20 30 20 31 
0035   013F 00 
0036   0140             
0037   0140             
0038   0140             ; STATUSES OF CURRENT CHESS GAME 
0039   0140             
0040   0140             ; Current chess position
0041   0140             
0042   0140 61 31 20 20 BOARD:  .byte "a1    h1"        ;64 bytes of board
0042   0144 20 20 68 31 
0043   0148 61 32 20 20         .byte "a2    h2"
0043   014C 20 20 68 32 
0044   0150 20 20 20 20         .byte "        "
0044   0154 20 20 20 20 
0045   0158 20 20 20 20         .byte "        "
0045   015C 20 20 20 20 
0046   0160 20 20 20 20         .byte "        "
0046   0164 20 20 20 20 
0047   0168 20 20 20 20         .byte "        "
0047   016C 20 20 20 20 
0048   0170 20 20 20 20         .byte "        "
0048   0174 20 20 20 20 
0049   0178 61 38 20 20         .byte "a8    h8"
0049   017C 20 20 68 38 
0050   0180 00                  .byte 0
0051   0181                     
0052   0181 00          SIDE:     .byte 0       ; side to move 0-white, 1-black   
0053   0182 00          CASTLES:  .byte 0       ; castling allowance flags
0054   0183                                     ; if bits are set: 0 wK, 1 wQ, 2 bK, 3 bQ sides
0055   0183 FF          ENPSQ:    .byte $ff     ; en-passant square none
0056   0184 00          WKSQ:     .byte 0       ; square of white king
0057   0185 00          BKSQ:     .byte 0       ; square of black king
0058   0186                         
0059   0186 00          NEXT_MVCNT: .byte 0      ;count, values, and string to output          
0060   0187 00 00 00 00 NEXT_MOVES: .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0060   018B 00 00 00 00 
0060   018F 00 00 00 00 
0060   0193 00 00 00 00 
0060   0197 00 00 00 00 
0060   019B 00 00 00 00 
0060   019F 00 00 00 00 
0060   01A3 00 00 00 00 
0060   01A7 00 00 00 00 
0060   01AB 00 00 00 00 
0061   01AF 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0061   01B3 00 00 00 00 
0061   01B7 00 00 00 00 
0061   01BB 00 00 00 00 
0061   01BF 00 00 00 00 
0061   01C3 00 00 00 00 
0061   01C7 00 00 00 00 
0061   01CB 00 00 00 00 
0061   01CF 00 00 00 00 
0061   01D3 00 00 00 00 
0062   01D7 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0062   01DB 00 00 00 00 
0062   01DF 00 00 00 00 
0062   01E3 00 00 00 00 
0062   01E7 00 00 00 00 
0062   01EB 00 00 00 00 
0062   01EF 00 00 00 00 
0062   01F3 00 00 00 00 
0062   01F7 00 00 00 00 
0062   01FB 00 00 00 00 
0063   01FF 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0063   0203 00 00 00 00 
0063   0207 00 00 00 00 
0063   020B 00 00 00 00 
0063   020F 00 00 00 00 
0063   0213 00 00 00 00 
0063   0217 00 00 00 00 
0063   021B 00 00 00 00 
0063   021F 00 00 00 00 
0063   0223 00 00 00 00 
0064   0227 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0064   022B 00 00 00 00 
0064   022F 00 00 00 00 
0064   0233 00 00 00 00 
0064   0237 00 00 00 00 
0064   023B 00 00 00 00 
0064   023F 00 00 00 00 
0064   0243 00 00 00 00 
0064   0247 00 00 00 00 
0064   024B 00 00 00 00 
0065   024F 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0065   0253 00 00 00 00 
0065   0257 00 00 00 00 
0065   025B 00 00 00 00 
0065   025F 00 00 00 00 
0065   0263 00 00 00 00 
0065   0267 00 00 00 00 
0065   026B 00 00 00 00 
0065   026F 00 00 00 00 
0065   0273 00 00 00 00 
0066   0277 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0066   027B 00 00 00 00 
0066   027F 00 00 00 00 
0066   0283 00 00 00 00 
0066   0287 00 00 00 00 
0066   028B 00 00 00 00 
0066   028F 00 00 00 00 
0066   0293 00 00 00 00 
0066   0297 00 00 00 00 
0066   029B 00 00 00 00 
0067   029F 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0067   02A3 00 00 00 00 
0067   02A7 00 00 00 00 
0067   02AB 00 00 00 00 
0067   02AF 00 00 00 00 
0067   02B3 00 00 00 00 
0067   02B7 00 00 00 00 
0067   02BB 00 00 00 00 
0067   02BF 00 00 00 00 
0067   02C3 00 00 00 00 
0068   02C7 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0068   02CB 00 00 00 00 
0068   02CF 00 00 00 00 
0068   02D3 00 00 00 00 
0068   02D7 00 00 00 00 
0068   02DB 00 00 00 00 
0068   02DF 00 00 00 00 
0068   02E3 00 00 00 00 
0068   02E7 00 00 00 00 
0068   02EB 00 00 00 00 
0069   02EF 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0069   02F3 00 00 00 00 
0069   02F7 00 00 00 00 
0069   02FB 00 00 00 00 
0069   02FF 00 00 00 00 
0069   0303 00 00 00 00 
0069   0307 00 00 00 00 
0069   030B 00 00 00 00 
0069   030F 00 00 00 00 
0069   0313 00 00 00 00 
0070   0317 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0070   031B 00 00 00 00 
0070   031F 00 00 00 00 
0070   0323 00 00 00 00 
0070   0327 00 00 00 00 
0070   032B 00 00 00 00 
0070   032F 00 00 00 00 
0070   0333 00 00 00 00 
0070   0337 00 00 00 00 
0070   033B 00 00 00 00 
0071   033F 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0071   0343 00 00 00 00 
0071   0347 00 00 00 00 
0071   034B 00 00 00 00 
0071   034F 00 00 00 00 
0071   0353 00 00 00 00 
0071   0357 00 00 00 00 
0071   035B 00 00 00 00 
0071   035F 00 00 00 00 
0071   0363 00 00 00 00 
0072   0367                                   
0073   0367             ; list of moves from the root
0074   0367             ; bytes:
0075   0367             ;  square from,
0076   0367             ;  square to,
0077   0367             ;  promoted piece with flags
0078   0367             ;  en-passant square move before
0079   0367             
0080   0367 00          MOVE_CNT   .byte 0   ; count of moves (below 127 chess both-side-moves) 
0081   0368             
0082   0368             MOVE_HIST  .ds 1024; Kb for history of chess moves (4bytes per 1-side-move)
0083   0768                       
0084   0768             ; Container for UCI-string-of-moves in form "e2e4 e7e5 ... e1g1 ... b7b8q ... "
0085   0768             ; (set before MOVE_byString usage), it is for data passing
0086   0768 20 20 20 20 MOVE_str: .byte "                                                                "          
0086   076C 20 20 20 20 
0086   0770 20 20 20 20 
0086   0774 20 20 20 20 
0086   0778 20 20 20 20 
0086   077C 20 20 20 20 
0086   0780 20 20 20 20 
0086   0784 20 20 20 20 
0086   0788 20 20 20 20 
0086   078C 20 20 20 20 
0086   0790 20 20 20 20 
0086   0794 20 20 20 20 
0086   0798 20 20 20 20 
0086   079C 20 20 20 20 
0086   07A0 20 20 20 20 
0086   07A4 20 20 20 20 
0087   07A8 20 20 20 20           .byte "                                                                " 
0087   07AC 20 20 20 20 
0087   07B0 20 20 20 20 
0087   07B4 20 20 20 20 
0087   07B8 20 20 20 20 
0087   07BC 20 20 20 20 
0087   07C0 20 20 20 20 
0087   07C4 20 20 20 20 
0087   07C8 20 20 20 20 
0087   07CC 20 20 20 20 
0087   07D0 20 20 20 20 
0087   07D4 20 20 20 20 
0087   07D8 20 20 20 20 
0087   07DC 20 20 20 20 
0087   07E0 20 20 20 20 
0087   07E4 20 20 20 20 
0088   07E8 20 20 20 20           .byte "                                                                "
0088   07EC 20 20 20 20 
0088   07F0 20 20 20 20 
0088   07F4 20 20 20 20 
0088   07F8 20 20 20 20 
0088   07FC 20 20 20 20 
0088   0800 20 20 20 20 
0088   0804 20 20 20 20 
0088   0808 20 20 20 20 
0088   080C 20 20 20 20 
0088   0810 20 20 20 20 
0088   0814 20 20 20 20 
0088   0818 20 20 20 20 
0088   081C 20 20 20 20 
0088   0820 20 20 20 20 
0088   0824 20 20 20 20 
0089   0828 20 20 20 20           .byte "                                                                "
0089   082C 20 20 20 20 
0089   0830 20 20 20 20 
0089   0834 20 20 20 20 
0089   0838 20 20 20 20 
0089   083C 20 20 20 20 
0089   0840 20 20 20 20 
0089   0844 20 20 20 20 
0089   0848 20 20 20 20 
0089   084C 20 20 20 20 
0089   0850 20 20 20 20 
0089   0854 20 20 20 20 
0089   0858 20 20 20 20 
0089   085C 20 20 20 20 
0089   0860 20 20 20 20 
0089   0864 20 20 20 20 
0090   0868 20 20 20 20           .byte "                                                                "
0090   086C 20 20 20 20 
0090   0870 20 20 20 20 
0090   0874 20 20 20 20 
0090   0878 20 20 20 20 
0090   087C 20 20 20 20 
0090   0880 20 20 20 20 
0090   0884 20 20 20 20 
0090   0888 20 20 20 20 
0090   088C 20 20 20 20 
0090   0890 20 20 20 20 
0090   0894 20 20 20 20 
0090   0898 20 20 20 20 
0090   089C 20 20 20 20 
0090   08A0 20 20 20 20 
0090   08A4 20 20 20 20 
0091   08A8                       .ds $700
0092   0FA8                       ;above 2Kb of moves
0093   0FA8             
0094   0FA8             ;
0095   0FA8             ; variables and arrays for next movement generation
0096   0FA8             ; (for printing and displaying)          
0097   0FA8 20 20 20 20 NEXT_MVSTR: .byte "                                                    "
0097   0FAC 20 20 20 20 
0097   0FB0 20 20 20 20 
0097   0FB4 20 20 20 20 
0097   0FB8 20 20 20 20 
0097   0FBC 20 20 20 20 
0097   0FC0 20 20 20 20 
0097   0FC4 20 20 20 20 
0097   0FC8 20 20 20 20 
0097   0FCC 20 20 20 20 
0097   0FD0 20 20 20 20 
0097   0FD4 20 20 20 20 
0097   0FD8 20 20 20 20 
0098   0FDC 20 20 20 20             .byte "                                                    "
0098   0FE0 20 20 20 20 
0098   0FE4 20 20 20 20 
0098   0FE8 20 20 20 20 
0098   0FEC 20 20 20 20 
0098   0FF0 20 20 20 20 
0098   0FF4 20 20 20 20 
0098   0FF8 20 20 20 20 
0098   0FFC 20 20 20 20 
0098   1000 20 20 20 20 
0098   1004 20 20 20 20 
0098   1008 20 20 20 20 
0098   100C 20 20 20 20 
0099   1010 20 20 20 20             .byte "                                                    "
0099   1014 20 20 20 20 
0099   1018 20 20 20 20 
0099   101C 20 20 20 20 
0099   1020 20 20 20 20 
0099   1024 20 20 20 20 
0099   1028 20 20 20 20 
0099   102C 20 20 20 20 
0099   1030 20 20 20 20 
0099   1034 20 20 20 20 
0099   1038 20 20 20 20 
0099   103C 20 20 20 20 
0099   1040 20 20 20 20 
0100   1044 20 20 20 20             .byte "                                                    "
0100   1048 20 20 20 20 
0100   104C 20 20 20 20 
0100   1050 20 20 20 20 
0100   1054 20 20 20 20 
0100   1058 20 20 20 20 
0100   105C 20 20 20 20 
0100   1060 20 20 20 20 
0100   1064 20 20 20 20 
0100   1068 20 20 20 20 
0100   106C 20 20 20 20 
0100   1070 20 20 20 20 
0100   1074 20 20 20 20 
0101   1078 20 20 20 20             .byte "                                                    "                      
0101   107C 20 20 20 20 
0101   1080 20 20 20 20 
0101   1084 20 20 20 20 
0101   1088 20 20 20 20 
0101   108C 20 20 20 20 
0101   1090 20 20 20 20 
0101   1094 20 20 20 20 
0101   1098 20 20 20 20 
0101   109C 20 20 20 20 
0101   10A0 20 20 20 20 
0101   10A4 20 20 20 20 
0101   10A8 20 20 20 20 
0102   10AC 20 20 20 20             .byte "                                                    "
0102   10B0 20 20 20 20 
0102   10B4 20 20 20 20 
0102   10B8 20 20 20 20 
0102   10BC 20 20 20 20 
0102   10C0 20 20 20 20 
0102   10C4 20 20 20 20 
0102   10C8 20 20 20 20 
0102   10CC 20 20 20 20 
0102   10D0 20 20 20 20 
0102   10D4 20 20 20 20 
0102   10D8 20 20 20 20 
0102   10DC 20 20 20 20 
0103   10E0 20 20 20 20             .byte "                                                    "
0103   10E4 20 20 20 20 
0103   10E8 20 20 20 20 
0103   10EC 20 20 20 20 
0103   10F0 20 20 20 20 
0103   10F4 20 20 20 20 
0103   10F8 20 20 20 20 
0103   10FC 20 20 20 20 
0103   1100 20 20 20 20 
0103   1104 20 20 20 20 
0103   1108 20 20 20 20 
0103   110C 20 20 20 20 
0103   1110 20 20 20 20 
0104   1114 20 20 20 20             .byte "                                                    "
0104   1118 20 20 20 20 
0104   111C 20 20 20 20 
0104   1120 20 20 20 20 
0104   1124 20 20 20 20 
0104   1128 20 20 20 20 
0104   112C 20 20 20 20 
0104   1130 20 20 20 20 
0104   1134 20 20 20 20 
0104   1138 20 20 20 20 
0104   113C 20 20 20 20 
0104   1140 20 20 20 20 
0104   1144 20 20 20 20 
0105   1148 20 20 20 20             .byte "                                                    "
0105   114C 20 20 20 20 
0105   1150 20 20 20 20 
0105   1154 20 20 20 20 
0105   1158 20 20 20 20 
0105   115C 20 20 20 20 
0105   1160 20 20 20 20 
0105   1164 20 20 20 20 
0105   1168 20 20 20 20 
0105   116C 20 20 20 20 
0105   1170 20 20 20 20 
0105   1174 20 20 20 20 
0105   1178 20 20 20 20 
0106   117C 20 20 20 20             .byte "                                                    "
0106   1180 20 20 20 20 
0106   1184 20 20 20 20 
0106   1188 20 20 20 20 
0106   118C 20 20 20 20 
0106   1190 20 20 20 20 
0106   1194 20 20 20 20 
0106   1198 20 20 20 20 
0106   119C 20 20 20 20 
0106   11A0 20 20 20 20 
0106   11A4 20 20 20 20 
0106   11A8 20 20 20 20 
0106   11AC 20 20 20 20 
0107   11B0 20 20 20 20             .byte "                                                    "                      
0107   11B4 20 20 20 20 
0107   11B8 20 20 20 20 
0107   11BC 20 20 20 20 
0107   11C0 20 20 20 20 
0107   11C4 20 20 20 20 
0107   11C8 20 20 20 20 
0107   11CC 20 20 20 20 
0107   11D0 20 20 20 20 
0107   11D4 20 20 20 20 
0107   11D8 20 20 20 20 
0107   11DC 20 20 20 20 
0107   11E0 20 20 20 20 
0108   11E4 20 20 20 20             .byte "                                                    "
0108   11E8 20 20 20 20 
0108   11EC 20 20 20 20 
0108   11F0 20 20 20 20 
0108   11F4 20 20 20 20 
0108   11F8 20 20 20 20 
0108   11FC 20 20 20 20 
0108   1200 20 20 20 20 
0108   1204 20 20 20 20 
0108   1208 20 20 20 20 
0108   120C 20 20 20 20 
0108   1210 20 20 20 20 
0108   1214 20 20 20 20 
0109   1218 20 20 20 20             .byte "                                                    "
0109   121C 20 20 20 20 
0109   1220 20 20 20 20 
0109   1224 20 20 20 20 
0109   1228 20 20 20 20 
0109   122C 20 20 20 20 
0109   1230 20 20 20 20 
0109   1234 20 20 20 20 
0109   1238 20 20 20 20 
0109   123C 20 20 20 20 
0109   1240 20 20 20 20 
0109   1244 20 20 20 20 
0109   1248 20 20 20 20 
0110   124C 20 20 20 20             .byte "                                                    "
0110   1250 20 20 20 20 
0110   1254 20 20 20 20 
0110   1258 20 20 20 20 
0110   125C 20 20 20 20 
0110   1260 20 20 20 20 
0110   1264 20 20 20 20 
0110   1268 20 20 20 20 
0110   126C 20 20 20 20 
0110   1270 20 20 20 20 
0110   1274 20 20 20 20 
0110   1278 20 20 20 20 
0110   127C 20 20 20 20 
0111   1280                         
0112   1280             ; We use own memory of .COM file till now
0113   1280             ;  
0114   1280             ;  So, we are able to generate next chess moves, detect check and checkmate in 1.
0115   1280             ;  And print it out. No reasonable chess evaluation searches possible here!
0116   1280             
0117   1280             GenMovesAndString:
0118   1280 CD 04 13                call GenMoves            
0119   1283 CD BA 19                call MovesToStr    ; to print after 
0120   1286 C9                      ret
0121   1287                                                 
0122   1287             ;BEGIN of ========== MAKE MOVES BY UCI-MOVE-STRING          
0123   1287             ; use UndoAllMoves before or setFEN
0124   1287             ;
0125   1287                                                     
0126   1287             MOVE_byString:
0127   1287 F5                  push af
0128   1288 C5                  push bc
0129   1289 D5                  push de
0130   128A             
0131   128A 11 68 07            ld de, MOVE_str 
0132   128D                     
0133   128D             MbyStrLoop:
0134   128D CD 04 13            call GenMoves 
0135   1290                                                  
0136   1290 1A                  ld a,(de)          ; find separator
0137   1291 FE 20               cp ' '
0138   1293 28 0B               jr z,MbySover
0139   1295 FE 00               cp 0
0140   1297 28 07               jr z,MbySover
0141   1299                     
0142   1299 CD A4 12            call MbyStrMove    ; single move
0143   129C                     
0144   129C 13                  inc de
0145   129D 13                  inc de             ; skip promoted and blank too
0146   129E 18 ED               jr MbyStrLoop      ; and process next move   
0147   12A0             MbySover:        
0148   12A0 D1                  pop de
0149   12A1 C1                  pop bc
0150   12A2 F1                  pop af
0151   12A3 C9                  ret
0152   12A4             
0153   12A4             ; "move by string" in DE register
0154   12A4             ; restore registers after
0155   12A4             MbyStrMove:
0156   12A4 CD E1 12            call MbySgetSQ
0157   12A7 32 01 13            ld (SQi),a
0158   12AA CD E1 12            call MbySgetSQ
0159   12AD 32 02 13            ld (SQt),a
0160   12B0 1A                  ld a,(de)
0161   12B1 FE 20               cp ' '
0162   12B3 20 03               jr nz,MbyPromPiece
0163   12B5 1B                  dec de
0164   12B6 18 20               jr MbyNoN        
0165   12B8             MbyPromPiece:
0166   12B8 FE 71               cp 'q'
0167   12BA 20 04               jr nz,MbyNoQ
0168   12BC 3E 04               ld a,4
0169   12BE 18 1A               jr MbyProm
0170   12C0 FE 72       MbyNoQ: cp 'r'       
0171   12C2 20 04               jr nz,MbyNoR
0172   12C4 3E 03               ld a,3
0173   12C6 18 12               jr MbyProm
0174   12C8 FE 62       MbyNoR: cp 'b'       
0175   12CA 20 04               jr nz,MbyNoB
0176   12CC 3E 02               ld a,2
0177   12CE 18 0A               jr MbyProm
0178   12D0 FE 6E       MbyNoB: cp 'n'       
0179   12D2 20 04               jr nz,MbyNoN
0180   12D4 3E 01               ld a,1
0181   12D6 18 02               jr MbyProm
0182   12D8 3E 00       MbyNoN: ld a,0             ; not promoted       
0183   12DA             MbyProm:
0184   12DA 32 04 19            ld (PromoPcId),a
0185   12DD CD 67 21            call MakeMove
0186   12E0 C9                  ret
0187   12E1             
0188   12E1             MbySgetSQ:
0189   12E1 1A                  ld a,(de)
0190   12E2 13                  inc de
0191   12E3 D6 61               sub 'a'
0192   12E5 47                  ld b,a
0193   12E6 1A                  ld a,(de)
0194   12E7 13                  inc de
0195   12E8 D6 31               sub '1'
0196   12EA CB 27               sla a
0197   12EC CB 27               sla a
0198   12EE CB 27               sla a
0199   12F0 B0                  or b
0200   12F1 C9                  ret                ; a-reg contains square on return
0201   12F2             
0202   12F2             ;END
0203   12F2             
0204   12F2             
0205   12F2             ;BEGIN of ========== SIMPLY UNDO ALL MOVES
0206   12F2             
0207   12F2             UndoAllMoves:
0208   12F2 F5                   push af
0209   12F3             UndoAllLoop:
0210   12F3 3A 67 03             ld a,(MOVE_CNT)
0211   12F6 FE 00                cp 0
0212   12F8 28 05                jr z,UndoAllBrk
0213   12FA CD 3E 25             call UnMakeMove
0214   12FD 18 F4                jr UndoAllLoop
0215   12FF             UndoAllBrk:         
0216   12FF F1                   pop af
0217   1300 C9                   ret
0218   1301             ;END
0219   1301                   
0220   1301                                                               
0221   1301             ;BEGIN of ========== MOVE GEN - movement generation routine
0222   1301             ; Very proper - according to chess rules.
0223   1301             ; Scanning all board squares 0..63, trying to move pieces by type, then by directions.
0224   1301             ; If move seems good then adds to the list with verification on own king attacks after movement
0225   1301             ; to avoid illegal cases.
0226   1301             
0227   1301 00          SQi:         .byte 0    ;current square
0228   1302 00          SQt:         .byte 0    ;square to move to
0229   1303             
0230   1303 00          MateDetect:  .byte 0    ; if 1 then just find the first legal move and return
0231   1304             
0232   1304             GenMoves:
0233   1304 F5                   push af
0234   1305 C5                   push bc
0235   1306 D5                   push de
0236   1307 E5                   push hl
0237   1308 DD E5                push ix
0238   130A FD E5                push iy
0239   130C                               
0240   130C 3E 00                ld a,0    
0241   130E 32 05 19             ld (CastlMove),a
0242   1311 32 04 19             ld (PromoPcId),a
0243   1314 32 03 19             ld (CaptPiece),a 
0244   1317                      
0245   1317 3A 03 13             ld a, (MateDetect)
0246   131A FE 01                cp 1
0247   131C 28 08                jr z,GenMvNoClr    ; if we are not gona save
0248   131E                               
0249   131E DD 21 86 01          ld ix, NEXT_MVCNT
0250   1322 DD 36 00 00          ld (ix), 0
0251   1326                      
0252   1326             GenMvNoClr:         
0253   1326 3E 00                ld a, 0            ; square counter 0..63
0254   1328 32 01 13             ld (SQi), a
0255   132B 21 40 01             ld hl, BOARD
0256   132E             GenMvSqScan:
0257   132E 7E                   ld a, (hl)          ; piece
0258   132F                      
0259   132F E5                   push hl
0260   1330 FD E1                pop iy    ; set to remember square-from
0261   1332                      
0262   1332 7E                   ld a, (hl)          ; get piece standing there
0263   1333 FE 00                cp 0
0264   1335 28 5F                jr z, OverMGSq      ; empty square
0265   1337                      
0266   1337 FE 61                cp 'a'              ; pieces
0267   1339 30 0A                jr nc, BlackPiece
0268   133B             
0269   133B             WhitePiece:                  ; A-Z                    
0270   133B 3A 81 01             ld a,(SIDE)
0271   133E FE 00                cp 0        
0272   1340 20 54                jr nz, OverMGSq     ; not turn
0273   1342 7E                   ld a, (hl)
0274   1343 18 0A                jr WhichPiece        
0275   1345             BlackPiece:       
0276   1345 3A 81 01             ld a,(SIDE)
0277   1348 FE 01                cp 1 
0278   134A 20 4A                jr nz, OverMGSq     ; not turn
0279   134C 7E                   ld a, (hl)
0280   134D D6 20                sub 32            ; to uppercase
0281   134F             WhichPiece: 
0282   134F FE 50                cp 'P'
0283   1351 28 16                jr z, Pmoves
0284   1353 FE 4E                cp 'N'
0285   1355 28 23                jr z, Knmoves       
0286   1357 FE 42                cp 'B'
0287   1359 28 24                jr z, Bsmoves
0288   135B FE 52                cp 'R'
0289   135D 28 25                jr z, Rkmoves
0290   135F FE 51                cp 'Q'
0291   1361 28 26                jr z, Qnmoves
0292   1363 FE 4B                cp 'K'
0293   1365 28 2A                jr z, Kgmoves                                          
0294   1367 18 2D                jr OverMGSq                
0295   1369             Pmoves:
0296   1369 3A 81 01             ld a,(SIDE)
0297   136C FE 01                cp 1
0298   136E 28 05                jr z, blackPmoves
0299   1370 CD F1 13             call MoveGenWPawn
0300   1373 18 21                jr OverMGSq
0301   1375             blackPmoves:
0302   1375 CD 92 14             call MoveGenBPawn
0303   1378 18 1C                jr OverMGSq
0304   137A             Knmoves:
0305   137A CD CA 16             call MoveGenKnight
0306   137D 18 17                jr OverMGSq
0307   137F             Bsmoves:
0308   137F CD 09 16             call MoveGenBishop
0309   1382 18 12                jr OverMGSq
0310   1384             Rkmoves:
0311   1384 CD 50 15             call MoveGenRook
0312   1387 18 0D                jr OverMGSq                                                           
0313   1389             Qnmoves:
0314   1389 CD 09 16             call MoveGenBishop   ; simply
0315   138C CD 50 15             call MoveGenRook     ; the same
0316   138F 18 05                jr OverMGSq
0317   1391             Kgmoves:
0318   1391 CD 8D 17             call MoveGenKing
0319   1394 18 00                jr OverMGSq
0320   1396                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
0321   1396             OverMGSq:
0322   1396 23                   inc hl
0323   1397                      
0324   1397 3A 03 13             ld a, (MateDetect)
0325   139A FE 02                cp 2
0326   139C 20 02                jr nz, GenMVscn
0327   139E 18 0B                jr GenMVexit
0328   13A0             GenMVscn:         
0329   13A0 3A 01 13             ld a, (SQi)       
0330   13A3 3C                   inc a
0331   13A4 32 01 13             ld (SQi),a
0332   13A7 D6 40                sub 64   ; Loop 0-63
0333   13A9 20 83                jr nz, GenMvSqScan
0334   13AB             GenMVexit:
0335   13AB             
0336   13AB CD A0 26             call LookForCheckmates   ; verifies checkmates
0337   13AE                                                  
0338   13AE FD E1                pop iy
0339   13B0 DD E1                pop ix
0340   13B2 E1                   pop hl
0341   13B3 D1                   pop de
0342   13B4 C1                   pop bc
0343   13B5 F1                   pop af
0344   13B6 C9                   ret
0345   13B7             
0346   13B7                               
0347   13B7             ; helping procedure to obtain current X,Y on board and store to d,e regs.
0348   13B7             StoreXYtoDE:
0349   13B7 3A 01 13             ld a, (SQi)
0350   13BA E6 07                and 7
0351   13BC 57                   ld d,a      ; X- a..h
0352   13BD 3A 01 13             ld a, (SQi)
0353   13C0 CB 3F                srl a
0354   13C2 CB 3F                srl a
0355   13C4 CB 3F                srl a
0356   13C6 5F                   ld e,a      ; Y- 1..8
0357   13C7 C9                   ret
0358   13C8             
0359   13C8             ; sets new SQt to move and calculates new hl position          
0360   13C8             StoreSqToMove:                 
0361   13C8 7B                   ld a,e
0362   13C9 CB 27                sla a
0363   13CB CB 27                sla a
0364   13CD CB 27                sla a
0365   13CF B2                   or d
0366   13D0 32 02 13             ld (SQt),a              ;a-reg. contains the new square to jump
0367   13D3                      
0368   13D3 06 00                ld b,0
0369   13D5 3A 01 13             ld a,(SQi)
0370   13D8 4F                   ld c,a
0371   13D9 3A 02 13             ld a,(SQt)
0372   13DC 91                   sub c
0373   13DD 38 04                jr c, StDistNeg
0374   13DF 4F                   ld c,a
0375   13E0 09                   add hl,bc              ;new hl position sq-forward
0376   13E1 18 0D                jr StNSqOver
0377   13E3             StDistNeg:
0378   13E3 3A 02 13             ld a,(SQt)
0379   13E6 4F                   ld c,a
0380   13E7 3A 01 13             ld a,(SQi)         
0381   13EA 91                   sub c
0382   13EB 4F                   ld c,a                         
0383   13EC 37                   scf
0384   13ED 3F                   ccf
0385   13EE ED 42                sbc hl,bc              ;new hl position sq-backward
0386   13F0             StNSqOver:         
0387   13F0 C9                   ret
0388   13F1             ;END
0389   13F1             
0390   13F1             
0391   13F1             ;BEGIN of ========== MOVE GEN for WHITE PAWN goes up
0392   13F1             
0393   13F1             MoveGenWPawn:
0394   13F1             
0395   13F1 F5                   push af
0396   13F2 D5                   push de
0397   13F3                      
0398   13F3 3E 00                ld a,0
0399   13F5 32 03 19             ld (CaptPiece),a
0400   13F8             
0401   13F8 3A 83 01             ld a, (ENPSQ)
0402   13FB 57                   ld d,a         
0403   13FC                               
0404   13FC 3A 01 13             ld a,(SQi)                  
0405   13FF C6 08                add a, 8
0406   1401 32 02 13             ld (SQt),a
0407   1404 01 08 00             ld bc,8         ;1-7 vert. try next sq forward        
0408   1407 09                   add hl, bc      ;new square-to
0409   1408                      
0410   1408 CD AF 18             call IsEmpty
0411   140B 30 1B                jr nc, wpNoFWmoves
0412   140D CD 06 19             call AddMovPromo
0413   1410                      
0414   1410 3A 01 13             ld a, (SQi)
0415   1413 FE 10                cp 16          ;below row 3
0416   1415 30 11                jr nc, wpNoFWmoves
0417   1417 C6 10                add a, 8+8
0418   1419 32 02 13             ld (SQt),a 
0419   141C 01 08 00             ld bc, 8        ;another (double) move
0420   141F 09                   add hl, bc      ;new square-to
0421   1420                      
0422   1420 CD AF 18             call IsEmpty
0423   1423 30 03                jr nc, wpNoFWmoves
0424   1425 CD 0B 19             call AddMove
0425   1428             
0426   1428             wpNoFWmoves:         
0427   1428 FD E5                push iy
0428   142A E1                   pop hl    ; restore 
0429   142B                      
0430   142B 3E 01                ld a,1
0431   142D 32 03 19             ld (CaptPiece),a
0432   1430                      
0433   1430 3A 01 13             ld a, (SQi)
0434   1433 E6 07                and 7
0435   1435 FE 00                cp 0
0436   1437 28 21                jr z, wpTryCaptRight
0437   1439             
0438   1439 3A 01 13             ld a, (SQi)                  
0439   143C C6 07                add a, 8-1 ; try capture left
0440   143E 32 02 13             ld (SQt),a
0441   1441 01 07 00             ld bc, 8-1
0442   1444 09                   add hl, bc
0443   1445             
0444   1445 CD E4 18             call IsBlack
0445   1448 30 05                jr nc, wpTryLeftEnPs
0446   144A                      
0447   144A CD 06 19             call AddMovPromo
0448   144D 18 0B                jr wpTryCaptRight
0449   144F                      
0450   144F             wpTryLeftEnPs:              
0451   144F 3A 02 13             ld a,(SQt)
0452   1452 BA                   cp d
0453   1453 20 05                jr nz, wpTryCaptRight
0454   1455                                             
0455   1455 CD 06 19             call AddMovPromo
0456   1458 18 00                jr wpTryCaptRight
0457   145A                                                                                            
0458   145A             wpTryCaptRight:
0459   145A FD E5                push iy
0460   145C E1                   pop hl    ; restore 
0461   145D                      
0462   145D 3A 01 13             ld a, (SQi)
0463   1460 E6 07                and 7
0464   1462 FE 07                cp 7
0465   1464 28 21                jr z, wpMGend
0466   1466                               
0467   1466 3A 01 13             ld a, (SQi)
0468   1469 C6 09                add a, 8+1 ; try capture right
0469   146B 32 02 13             ld (SQt),a
0470   146E 01 09 00             ld bc, 8+1
0471   1471 09                   add hl, bc
0472   1472             
0473   1472 CD E4 18             call IsBlack
0474   1475 30 05                jr nc, wpTryRightEnPs
0475   1477                      
0476   1477 CD 06 19             call AddMovPromo
0477   147A 18 0B                jr wpMGend
0478   147C                      
0479   147C             wpTryRightEnPs:              
0480   147C 3A 02 13             ld a,(SQt)
0481   147F BA                   cp d
0482   1480 20 05                jr nz, wpMGend
0483   1482                                  
0484   1482 CD 06 19             call AddMovPromo
0485   1485 18 00                jr wpMGend
0486   1487                                                                                                                                                            
0487   1487             wpMGend:
0488   1487 FD E5                push iy
0489   1489 E1                   pop hl    ; restore 
0490   148A             
0491   148A 3E 00                ld a,0
0492   148C 32 04 19             ld (PromoPcId),a
0493   148F                      
0494   148F D1                   pop de
0495   1490 F1                   pop af
0496   1491 C9                   ret
0497   1492                  
0498   1492             ;END
0499   1492             
0500   1492             ;BEGIN of ========== MOVE GEN for BLACK PAWN goes down
0501   1492             
0502   1492             MoveGenBPawn:
0503   1492             
0504   1492 F5                   push af
0505   1493 D5                   push de
0506   1494                      
0507   1494 3E 00                ld a,0
0508   1496 32 03 19             ld (CaptPiece),a
0509   1499             
0510   1499 3A 83 01             ld a, (ENPSQ)
0511   149C 57                   ld d,a         
0512   149D                               
0513   149D 3A 01 13             ld a,(SQi)                  
0514   14A0 D6 08                sub 8
0515   14A2 32 02 13             ld (SQt),a
0516   14A5 37                   scf
0517   14A6 3F                   ccf
0518   14A7 01 08 00             ld bc,8         ;1-7 vert. try next sq forward        
0519   14AA ED 42                sbc hl, bc      ;new square-to
0520   14AC                      
0521   14AC CD AF 18             call IsEmpty
0522   14AF 30 1E                jr nc, bpNoFWmoves
0523   14B1 CD 06 19             call AddMovPromo
0524   14B4                      
0525   14B4 3A 01 13             ld a, (SQi)
0526   14B7 FE 30                cp 48           ;above row 6
0527   14B9 38 14                jr c, bpNoFWmoves
0528   14BB D6 10                sub 8+8
0529   14BD 32 02 13             ld (SQt),a
0530   14C0 37                   scf
0531   14C1 3F                   ccf 
0532   14C2 01 08 00             ld bc, 8        ;another (double) move
0533   14C5 ED 42                sbc hl, bc      ;new square-to
0534   14C7                      
0535   14C7 CD AF 18             call IsEmpty
0536   14CA 30 03                jr nc, bpNoFWmoves
0537   14CC CD 0B 19             call AddMove
0538   14CF             
0539   14CF             bpNoFWmoves:         
0540   14CF FD E5                push iy
0541   14D1 E1                   pop hl    ; restore 
0542   14D2                      
0543   14D2 3E 01                ld a,1
0544   14D4 32 03 19             ld (CaptPiece),a
0545   14D7                      
0546   14D7 3A 01 13             ld a, (SQi)
0547   14DA E6 07                and 7
0548   14DC FE 07                cp 7
0549   14DE 28 24                jr z, bpTryCaptRight
0550   14E0             
0551   14E0 3A 01 13             ld a, (SQi)                  
0552   14E3 D6 07                sub 8-1 ; try capture left
0553   14E5 32 02 13             ld (SQt),a
0554   14E8 37                   scf
0555   14E9 3F                   ccf
0556   14EA 01 07 00             ld bc, 8-1
0557   14ED ED 42                sbc hl, bc
0558   14EF             
0559   14EF CD C5 18             call IsWhite
0560   14F2 30 05                jr nc, bpTryLeftEnPs
0561   14F4                      
0562   14F4 CD 06 19             call AddMovPromo
0563   14F7 18 0B                jr bpTryCaptRight
0564   14F9                      
0565   14F9             bpTryLeftEnPs:              
0566   14F9 3A 02 13             ld a,(SQt)
0567   14FC BA                   cp d
0568   14FD 20 05                jr nz, bpTryCaptRight
0569   14FF                                             
0570   14FF CD 06 19             call AddMovPromo
0571   1502 18 00                jr bpTryCaptRight
0572   1504                                                                                            
0573   1504             bpTryCaptRight:
0574   1504 FD E5                push iy
0575   1506 E1                   pop hl    ; restore 
0576   1507                      
0577   1507 3A 01 13             ld a, (SQi)
0578   150A E6 07                and 7
0579   150C FE 00                cp 0
0580   150E 28 24                jr z, bpMGend
0581   1510                               
0582   1510 3A 01 13             ld a, (SQi)
0583   1513 D6 09                sub 8+1 ; try capture right
0584   1515 32 02 13             ld (SQt),a
0585   1518 37                   scf
0586   1519 3F                   ccf
0587   151A 01 09 00             ld bc, 8+1
0588   151D ED 42                sbc hl, bc
0589   151F             
0590   151F CD C5 18             call IsWhite
0591   1522 30 05                jr nc, bpTryRightEnPs
0592   1524                      
0593   1524 CD 06 19             call AddMovPromo      
0594   1527 18 0B                jr bpMGend
0595   1529                      
0596   1529             bpTryRightEnPs:              
0597   1529 3A 02 13             ld a,(SQt)
0598   152C BA                   cp d
0599   152D 20 05                jr nz, bpMGend
0600   152F                                             
0601   152F CD 06 19             call AddMovPromo
0602   1532 18 00                jr bpMGend
0603   1534                                                                                                                                                            
0604   1534             bpMGend:
0605   1534 FD E5                push iy
0606   1536 E1                   pop hl    ; restore 
0607   1537             
0608   1537 3E 00                ld a,0
0609   1539 32 04 19             ld (PromoPcId),a
0610   153C                      
0611   153C D1                   pop de
0612   153D F1                   pop af
0613   153E C9                   ret
0614   153F                  
0615   153F             ;END
0616   153F             
0617   153F             
0618   153F             ;BEGIN of ========== MOVE GEN for ROOKS
0619   153F             
0620   153F 2B 01 3D 00 rookMoves: .byte '+',1,'=',0 ,'-',1,'=',0 ,'=',0,'+',1 ,'=',0,'-',1 ,
0620   1543 2D 01 3D 00 
0620   1547 3D 00 2B 01 
0620   154B 3D 00 2D 01 
0621   154F 00                     .byte 0
0622   1550                                       
0623   1550             MoveGenRook:
0624   1550             
0625   1550 F5                   push af
0626   1551 C5                   push bc
0627   1552 DD E5                push ix
0628   1554                      
0629   1554 CD B7 13             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
0630   1557                      
0631   1557 DD 21 3F 15          ld ix,rookMoves
0632   155B 06 04                ld b, 4
0633   155D                      
0634   155D             RookScan4directions:
0635   155D             
0636   155D D5                   push de
0637   155E             RookLoop:
0638   155E CD 75 15             call RookTryMove
0639   1561 FE 00                cp 0
0640   1563 28 F9                jr z,RookLoop
0641   1565 D1                   pop de
0642   1566                              
0643   1566 DD 23                inc ix
0644   1568 DD 23                inc ix
0645   156A DD 23                inc ix
0646   156C DD 23                inc ix
0647   156E                      
0648   156E 10 ED                djnz RookScan4directions
0649   1570                    
0650   1570 DD E1                pop ix
0651   1572 C1                   pop bc
0652   1573 F1                   pop af
0653   1574 C9                   ret
0654   1575                      
0655   1575             ; try move to that direction
0656   1575             RookTryMove:
0657   1575             
0658   1575 C5                   push bc
0659   1576 DD E5                push ix
0660   1578                      
0661   1578 3E 00                ld a,0
0662   157A 32 03 19             ld (CaptPiece),a
0663   157D                               
0664   157D DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,=0
0665   1580 DD 23                inc ix
0666   1582 FE 3D                cp '='
0667   1584 28 16                jr z, RkZero1
0668   1586 FE 2D                cp '-'
0669   1588 28 08                jr z, RkNegX      
0670   158A 7A                   ld a,d
0671   158B 3C                   inc a           ;a=direction +1 of X 
0672   158C FE 08                cp 8
0673   158E 30 5F                jr nc, RkNo
0674   1590 18 09                jr RkCanOk1  
0675   1592             RkNegX:
0676   1592 3E 00                ld a,0          ;a=direction -1 of X
0677   1594 BA                   cp d
0678   1595 38 02                jr c, RkCanSubtrX
0679   1597 18 56                jr RkNo
0680   1599             RkCanSubtrX:         
0681   1599 7A                   ld a,d
0682   159A 3D                   dec a 
0683   159B             RkCanOk1:
0684   159B 57                   ld d,a         
0685   159C DD 23       RkZero1: inc ix
0686   159E                      
0687   159E DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,=0
0688   15A1 DD 23                inc ix
0689   15A3 FE 3D                cp '='
0690   15A5 28 16                jr z, RkZero2        
0691   15A7 FE 2D                cp '-'
0692   15A9 28 08                jr z, RkNegY
0693   15AB 7B                   ld a,e
0694   15AC 3C                   inc a          ;a=direction +1 of Y  
0695   15AD FE 08                cp 8
0696   15AF 30 3E                jr nc, RkNo
0697   15B1 18 09                jr RkCanOk2   
0698   15B3             RkNegY:
0699   15B3 3E 00                ld a,0         ;a=direction -1 of Y
0700   15B5 BB                   cp e
0701   15B6 38 02                jr c, RkCanSubtrY
0702   15B8 18 35                jr RkNo
0703   15BA             RkCanSubtrY:         
0704   15BA 7B                   ld a, e
0705   15BB 3D                   dec a
0706   15BC             RkCanOk2:
0707   15BC 5F                   ld e,a
0708   15BD DD 23       RkZero2: inc ix         
0709   15BF                      
0710   15BF CD C8 13             call StoreSqToMove    ;new SQt,hl        
0711   15C2             
0712   15C2 3A 81 01             ld a, (SIDE)
0713   15C5 FE 01                cp 1
0714   15C7 28 0E                jr z,RkThisBlack
0715   15C9 CD E4 18             call IsBlack           ; enemy?
0716   15CC 38 17                jr c,RkCaptMove
0717   15CE CD C5 18             call IsWhite           ; our?
0718   15D1 38 1C                jr c,RkNo
0719   15D3 3E 00                ld a,0                 ; continue after to this direction
0720   15D5 18 13                jr RkAdd        
0721   15D7             RkThisBlack:         
0722   15D7 CD C5 18             call IsWhite           ; enemy?
0723   15DA 38 09                jr c,RkCaptMove
0724   15DC CD E4 18             call IsBlack           ; our?                        
0725   15DF 38 0E                jr c,RkNo
0726   15E1 3E 00                ld a,0                 ; continue after to this direction
0727   15E3 18 05                jr RkAdd
0728   15E5             RkCaptMove:
0729   15E5 3E 01                ld a,1
0730   15E7 32 03 19             ld (CaptPiece),a       ; and stop to this direction  
0731   15EA             RkAdd:
0732   15EA CD 0B 19             call AddMove
0733   15ED 18 02                jr RkOver        
0734   15EF             
0735   15EF 3E 01       RkNo:    ld a,1                 ; stop to this direction
0736   15F1             
0737   15F1             RkOver:
0738   15F1 FD E5                push iy
0739   15F3 E1                   pop hl
0740   15F4                      
0741   15F4 DD E1                pop ix
0742   15F6 C1                   pop bc
0743   15F7 C9                   ret 
0744   15F8             
0745   15F8             ;END
0746   15F8             
0747   15F8             
0748   15F8             
0749   15F8             ;BEGIN of ========== MOVE GEN for BISHOPS
0750   15F8             
0751   15F8 2B 01 2B 01 bishopMoves: .byte '+',1,'+',1 ,'+',1,'-',1 ,'-',1,'+',1 ,'-',1,'-',1 ,
0751   15FC 2B 01 2D 01 
0751   1600 2D 01 2B 01 
0751   1604 2D 01 2D 01 
0752   1608 00                       .byte 0
0753   1609                                       
0754   1609             MoveGenBishop:
0755   1609             
0756   1609 F5                   push af
0757   160A C5                   push bc
0758   160B DD E5                push ix
0759   160D                      
0760   160D CD B7 13             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
0761   1610                      
0762   1610 DD 21 F8 15          ld ix,bishopMoves
0763   1614 06 04                ld b, 4
0764   1616                      
0765   1616             BishopScan4directions:
0766   1616             
0767   1616 D5                   push de
0768   1617             BishopLoop:
0769   1617 CD 2E 16             call BishopTryMove
0770   161A FE 00                cp 0
0771   161C 28 F9                jr z,BishopLoop
0772   161E D1                   pop de
0773   161F                              
0774   161F DD 23                inc ix
0775   1621 DD 23                inc ix
0776   1623 DD 23                inc ix
0777   1625 DD 23                inc ix
0778   1627                      
0779   1627 10 ED                djnz BishopScan4directions
0780   1629                    
0781   1629 DD E1                pop ix
0782   162B C1                   pop bc
0783   162C F1                   pop af
0784   162D C9                   ret
0785   162E                      
0786   162E             ; try move to that direction
0787   162E             BishopTryMove:
0788   162E             
0789   162E C5                   push bc
0790   162F DD E5                push ix
0791   1631                               
0792   1631 3E 00                ld a,0
0793   1633 32 03 19             ld (CaptPiece),a
0794   1636                      
0795   1636 DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1
0796   1639 DD 23                inc ix
0797   163B FE 2D                cp '-'
0798   163D 28 08                jr z, BsNegX      
0799   163F 7A                   ld a,d
0800   1640 3C                   inc a           ;a=direction +1 of X 
0801   1641 FE 08                cp 8
0802   1643 30 5B                jr nc, BsNo
0803   1645 18 09                jr BsCanOk1  
0804   1647             BsNegX:
0805   1647 3E 00                ld a,0          ;a=direction -1 of X
0806   1649 BA                   cp d
0807   164A 38 02                jr c, BsCanSubtrX
0808   164C 18 52                jr BsNo
0809   164E             BsCanSubtrX:         
0810   164E 7A                   ld a,d
0811   164F 3D                   dec a 
0812   1650             BsCanOk1:
0813   1650 57                   ld d,a         
0814   1651 DD 23                inc ix
0815   1653                      
0816   1653 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1
0817   1656 DD 23                inc ix
0818   1658 FE 2D                cp '-'
0819   165A 28 08                jr z, BsNegY
0820   165C 7B                   ld a,e
0821   165D 3C                   inc a          ;a=direction +1 of Y  
0822   165E FE 08                cp 8
0823   1660 30 3E                jr nc, BsNo
0824   1662 18 09                jr BsCanOk2   
0825   1664             BsNegY:
0826   1664 3E 00                ld a,0         ;a=direction -1 of Y
0827   1666 BB                   cp e
0828   1667 38 02                jr c, BsCanSubtrY
0829   1669 18 35                jr BsNo
0830   166B             BsCanSubtrY:         
0831   166B 7B                   ld a, e
0832   166C 3D                   dec a
0833   166D             BsCanOk2:
0834   166D 5F                   ld e,a
0835   166E DD 23                inc ix         
0836   1670                      
0837   1670 CD C8 13             call StoreSqToMove    ;new SQt,hl        
0838   1673             
0839   1673 3A 81 01             ld a, (SIDE)
0840   1676 FE 01                cp 1
0841   1678 28 0E                jr z,BsThisBlack
0842   167A CD E4 18             call IsBlack           ; enemy?
0843   167D 38 17                jr c,BsCaptMove
0844   167F CD C5 18             call IsWhite           ; our?
0845   1682 38 1C                jr c,BsNo
0846   1684 3E 00                ld a,0                 ; continue after to this direction
0847   1686 18 13                jr BsAdd        
0848   1688             BsThisBlack:         
0849   1688 CD C5 18             call IsWhite           ; enemy?
0850   168B 38 09                jr c,BsCaptMove
0851   168D CD E4 18             call IsBlack           ; our?                        
0852   1690 38 0E                jr c,BsNo
0853   1692 3E 00                ld a,0                 ; continue after to this direction
0854   1694 18 05                jr BsAdd
0855   1696             BsCaptMove:
0856   1696 3E 01                ld a,1
0857   1698 32 03 19             ld (CaptPiece),a       ; and stop to this direction  
0858   169B             BsAdd:
0859   169B CD 0B 19             call AddMove
0860   169E 18 02                jr BsOver        
0861   16A0             
0862   16A0 3E 01       BsNo:    ld a,1                 ; stop to this direction
0863   16A2             
0864   16A2             BsOver:
0865   16A2 FD E5                push iy
0866   16A4 E1                   pop hl
0867   16A5                      
0868   16A5 DD E1                pop ix
0869   16A7 C1                   pop bc
0870   16A8 C9                   ret 
0871   16A9             
0872   16A9             ;END
0873   16A9             
0874   16A9             
0875   16A9             
0876   16A9             
0877   16A9             ;BEGIN of ========== MOVE GEN for KNIGHTS
0878   16A9             
0879   16A9 2B 01 2B 02 knightMoves: .byte '+',1,'+',2 ,'+',2,'+',1 ,'+',2,'-',1 ,'+',1,'-',2 ,
0879   16AD 2B 02 2B 01 
0879   16B1 2B 02 2D 01 
0879   16B5 2B 01 2D 02 
0880   16B9 2D 01 2D 02              .byte '-',1,'-',2 ,'-',2,'-',1 ,'-',2,'+',1 ,'-',1,'+',2 , 
0880   16BD 2D 02 2D 01 
0880   16C1 2D 02 2B 01 
0880   16C5 2D 01 2B 02 
0881   16C9 00                       .byte 0
0882   16CA                          
0883   16CA             
0884   16CA             MoveGenKnight:
0885   16CA             
0886   16CA F5                   push af
0887   16CB C5                   push bc
0888   16CC D5                   push de
0889   16CD DD E5                push ix
0890   16CF                      
0891   16CF CD B7 13             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
0892   16D2                      
0893   16D2 DD 21 A9 16          ld ix, knightMoves
0894   16D6 06 08                ld b, 8
0895   16D8             KnightScan8moves:
0896   16D8 CD EB 16             call KnightTryMove
0897   16DB DD 23                inc ix
0898   16DD DD 23                inc ix
0899   16DF DD 23                inc ix
0900   16E1 DD 23                inc ix
0901   16E3 10 F3                djnz KnightScan8moves
0902   16E5                    
0903   16E5 DD E1                pop ix
0904   16E7 D1                   pop de
0905   16E8 C1                   pop bc
0906   16E9 F1                   pop af
0907   16EA C9                   ret
0908   16EB             
0909   16EB             ; try move to that square
0910   16EB             KnightTryMove:
0911   16EB C5                   push bc
0912   16EC D5                   push de
0913   16ED DD E5                push ix
0914   16EF                      
0915   16EF 3E 00                ld a,0
0916   16F1 32 03 19             ld (CaptPiece),a
0917   16F4                      
0918   16F4 DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,-2,+2
0919   16F7 DD 23                inc ix
0920   16F9 FE 2D                cp '-'
0921   16FB 28 0A                jr z, KnNegX
0922   16FD DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of X      
0923   1700 82                   add a,d
0924   1701 FE 08                cp 8
0925   1703 30 5F                jr nc, KnNo
0926   1705 18 0D                jr KnCanOk1  
0927   1707             KnNegX:
0928   1707 DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of X
0929   170A 3D                   dec a
0930   170B BA                   cp d
0931   170C 38 02                jr c, KnCanSubtrX
0932   170E 18 54                jr KnNo
0933   1710             KnCanSubtrX:         
0934   1710 7A                   ld a, d
0935   1711 DD 96 00             sub (ix)    
0936   1714             KnCanOk1:
0937   1714 57                   ld d,a         
0938   1715 DD 23                inc ix
0939   1717                      
0940   1717 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,-2,+2
0941   171A DD 23                inc ix
0942   171C FE 2D                cp '-'
0943   171E 28 0A                jr z, KnNegY
0944   1720 DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of Y  
0945   1723 83                   add a,e
0946   1724 FE 08                cp 8
0947   1726 30 3C                jr nc, KnNo
0948   1728 18 0D                jr KnCanOk2   
0949   172A             KnNegY:
0950   172A DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of Y
0951   172D 3D                   dec a 
0952   172E BB                   cp e
0953   172F 38 02                jr c, KnCanSubtrY
0954   1731 18 31                jr KnNo
0955   1733             KnCanSubtrY:         
0956   1733 7B                   ld a, e
0957   1734 DD 96 00             sub (ix)
0958   1737             KnCanOk2:
0959   1737 5F                   ld e, a
0960   1738 DD 23                inc ix         
0961   173A                      
0962   173A CD C8 13             call StoreSqToMove    ;new SQt,hl        
0963   173D             
0964   173D 3A 81 01             ld a, (SIDE)
0965   1740 FE 01                cp 1
0966   1742 28 0C                jr z, KnThisBlack
0967   1744 CD E4 18             call IsBlack           ; enemy?
0968   1747 38 13                jr c,KnCaptMove
0969   1749 CD C5 18             call IsWhite           ; our?
0970   174C 38 16                jr c,KnNo
0971   174E 18 11                jr KnAdd        
0972   1750             KnThisBlack:         
0973   1750 CD C5 18             call IsWhite           ; enemy?
0974   1753 38 07                jr c,KnCaptMove
0975   1755 CD E4 18             call IsBlack           ; our?                        
0976   1758 38 0A                jr c,KnNo
0977   175A 18 05                jr KnAdd
0978   175C             KnCaptMove:
0979   175C 3E 01                ld a,1
0980   175E 32 03 19             ld (CaptPiece),a           
0981   1761             KnAdd:
0982   1761 CD 0B 19             call AddMove         
0983   1764             
0984   1764             KnNo:
0985   1764 FD E5                push iy
0986   1766 E1                   pop hl
0987   1767                      
0988   1767 DD E1                pop ix
0989   1769 D1                   pop de
0990   176A C1                   pop bc
0991   176B C9                   ret 
0992   176C             
0993   176C             ;END
0994   176C             
0995   176C             ;BEGIN of ========== MOVE GEN for KINGS
0996   176C             
0997   176C 2D 01 3D 00 kingMoves: .byte '-',1,'=',0 ,'-',1,'+',1 ,'=',0,'+',1 ,'+',1,'+',1 ,
0997   1770 2D 01 2B 01 
0997   1774 3D 00 2B 01 
0997   1778 2B 01 2B 01 
0998   177C 2B 01 3D 00            .byte '+',1,'=',0 ,'+',1,'-',1 ,'=',0,'-',1 ,'-',1,'-',1 ,
0998   1780 2B 01 2D 01 
0998   1784 3D 00 2D 01 
0998   1788 2D 01 2D 01 
0999   178C 00                     .byte 0
1000   178D                                       
1001   178D             MoveGenKing:
1002   178D             
1003   178D F5                   push af
1004   178E C5                   push bc
1005   178F DD E5                push ix
1006   1791                      
1007   1791 CD B7 13             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
1008   1794                      
1009   1794 3E 04                ld a,4       ; on E?
1010   1796 BA                   cp d
1011   1797 20 03                jr nz, CastleCantBe
1012   1799 CD 31 18             call CastleMOVES   ; add castling moves without check-verification
1013   179C                      
1014   179C             CastleCantBe:
1015   179C                      
1016   179C DD 21 6C 17          ld ix,kingMoves
1017   17A0 06 08                ld b, 8
1018   17A2                      
1019   17A2             KingScan8moves:
1020   17A2 CD B4 17             call KingTryMove
1021   17A5 DD 23                inc ix
1022   17A7 DD 23                inc ix
1023   17A9 DD 23                inc ix
1024   17AB DD 23                inc ix
1025   17AD 10 F3                djnz KingScan8moves
1026   17AF                                    
1027   17AF DD E1                pop ix
1028   17B1 C1                   pop bc
1029   17B2 F1                   pop af
1030   17B3 C9                   ret
1031   17B4                      
1032   17B4             ; try move to that square
1033   17B4             KingTryMove:
1034   17B4 C5                   push bc
1035   17B5 D5                   push de
1036   17B6 DD E5                push ix
1037   17B8                      
1038   17B8 3E 00                ld a,0
1039   17BA 32 03 19             ld (CaptPiece),a
1040   17BD                               
1041   17BD DD 7E 00             ld a, (ix)      ;given directions for a..h  -1,+1,=0
1042   17C0 DD 23                inc ix
1043   17C2 FE 3D                cp '='
1044   17C4 28 16                jr z, KgZero1
1045   17C6 FE 2D                cp '-'
1046   17C8 28 08                jr z, KgNegX      
1047   17CA 7A                   ld a,d
1048   17CB 3C                   inc a           ;a=direction +1 of X 
1049   17CC FE 08                cp 8
1050   17CE 30 59                jr nc, KgOver
1051   17D0 18 09                jr KgCanOk1  
1052   17D2             KgNegX:
1053   17D2 3E 00                ld a,0          ;a=direction -1 of X
1054   17D4 BA                   cp d
1055   17D5 38 02                jr c, KgCanSubtrX
1056   17D7 18 50                jr KgOver
1057   17D9             KgCanSubtrX:         
1058   17D9 7A                   ld a,d
1059   17DA 3D                   dec a 
1060   17DB             KgCanOk1:
1061   17DB 57                   ld d,a         
1062   17DC DD 23       KgZero1: inc ix
1063   17DE                      
1064   17DE DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,=0
1065   17E1 DD 23                inc ix
1066   17E3 FE 3D                cp '='
1067   17E5 28 16                jr z, KgZero2        
1068   17E7 FE 2D                cp '-'
1069   17E9 28 08                jr z, KgNegY
1070   17EB 7B                   ld a,e
1071   17EC 3C                   inc a          ;a=direction +1 of Y  
1072   17ED FE 08                cp 8
1073   17EF 30 38                jr nc, KgOver
1074   17F1 18 09                jr KgCanOk2   
1075   17F3             KgNegY:
1076   17F3 3E 00                ld a,0         ;a=direction -1 of Y
1077   17F5 BB                   cp e
1078   17F6 38 02                jr c, KgCanSubtrY
1079   17F8 18 2F                jr KgOver
1080   17FA             KgCanSubtrY:         
1081   17FA 7B                   ld a, e
1082   17FB 3D                   dec a
1083   17FC             KgCanOk2:
1084   17FC 5F                   ld e,a
1085   17FD DD 23       KgZero2: inc ix         
1086   17FF                      
1087   17FF CD C8 13             call StoreSqToMove    ;new SQt,hl        
1088   1802             
1089   1802 3A 81 01             ld a, (SIDE)
1090   1805 FE 01                cp 1
1091   1807 28 0C                jr z,KgThisBlack
1092   1809 CD E4 18             call IsBlack           ; enemy?
1093   180C 38 13                jr c,KgCaptMove
1094   180E CD C5 18             call IsWhite           ; our?
1095   1811 38 16                jr c,KgOver
1096   1813 18 11                jr KgAdd        
1097   1815             KgThisBlack:         
1098   1815 CD C5 18             call IsWhite           ; enemy?
1099   1818 38 07                jr c,KgCaptMove
1100   181A CD E4 18             call IsBlack           ; our?                        
1101   181D 38 0A                jr c,KgOver
1102   181F 18 05                jr KgAdd
1103   1821             KgCaptMove:
1104   1821 3E 01                ld a,1
1105   1823 32 03 19             ld (CaptPiece),a
1106   1826             KgAdd:
1107   1826 CD 0B 19             call AddMove
1108   1829             KgOver:
1109   1829 FD E5                push iy
1110   182B E1                   pop hl
1111   182C                      
1112   182C DD E1                pop ix
1113   182E D1                   pop de
1114   182F C1                   pop bc
1115   1830 C9                   ret 
1116   1831             
1117   1831             ; Add castling moves to list
1118   1831             CastleMOVES:
1119   1831                                              
1120   1831 3E 00                ld a,0
1121   1833 32 03 19             ld (CaptPiece),a      
1122   1836 3E 01                ld a,1
1123   1838 32 05 19             ld (CastlMove),a
1124   183B                      
1125   183B 0E 01                ld c,1       ; directions 0-King side, 1-Queen side
1126   183D             CastleDirScan:       
1127   183D 3A 82 01             ld a, (CASTLES)
1128   1840 47                   ld b,a       ; b contains castlings flags
1129   1841 7B                   ld a,e
1130   1842 FE 07                cp 7         ; detect king
1131   1844 20 06                jr nz, CstlWhite
1132   1846 CB 38                srl b        ; simply roll castling flags for black
1133   1848 CB 38                srl b
1134   184A 18 04                jr CstlBegin
1135   184C             CstlWhite:
1136   184C FE 00                cp 0
1137   184E 20 56                jr nz, CastleBrk    
1138   1850             CstlBegin:
1139   1850 D5                   push de
1140   1851 3E 00                ld a,0
1141   1853 B9                   cp c
1142   1854 28 22                jr z, CstlQside       
1143   1856 78                   ld a,b
1144   1857 CB 47                bit 0,a
1145   1859 28 3F                jr z,CstlLoop
1146   185B             CstEmpty1:
1147   185B 14                   inc d
1148   185C 23                   inc hl
1149   185D 7A                   ld a,d
1150   185E FE 07                cp 7
1151   1860 28 07                jr z, CstlGood1
1152   1862 CD AF 18             call IsEmpty
1153   1865 30 33                jr nc, CstlLoop
1154   1867 18 F2                jr CstEmpty1
1155   1869             CstlGood1:
1156   1869 15                   dec d              ; back h1->g1  or h8->g8
1157   186A 2B                   dec hl
1158   186B 3A 01 13             ld a,(SQi)
1159   186E 3C                   inc a
1160   186F 3C                   inc a
1161   1870 32 02 13             ld (SQt),a
1162   1873 CD 0B 19             call AddMove
1163   1876 18 22                jr CstlLoop
1164   1878             CstlQside:
1165   1878 78                   ld a,b
1166   1879 CB 48                bit 1,b
1167   187B 28 1D                jr z,CstlLoop
1168   187D             CstEmpty2:          
1169   187D 15                   dec d
1170   187E 2B                   dec hl
1171   187F 7A                   ld a,d
1172   1880 FE 00                cp 0
1173   1882 28 07                jr z, CstlGood2
1174   1884 CD AF 18             call IsEmpty
1175   1887 30 11                jr nc, CstlLoop
1176   1889 18 F2                jr CstEmpty2
1177   188B             CstlGood2:
1178   188B 14                   inc d
1179   188C 14                   inc d              ; back a1->c1  or a8->c8
1180   188D 23                   inc hl
1181   188E 23                   inc hl
1182   188F 3A 01 13             ld a,(SQi)
1183   1892 3D                   dec a
1184   1893 3D                   dec a
1185   1894 32 02 13             ld (SQt),a
1186   1897 CD 0B 19             call AddMove         
1187   189A             CstlLoop:
1188   189A D1                   pop de
1189   189B 3E 00                ld a,0
1190   189D B9                   cp c
1191   189E 28 06                jr z,CastleBrk
1192   18A0 0D                   dec c
1193   18A1                      
1194   18A1 FD E5                push iy
1195   18A3 E1                   pop hl   ; restore hl
1196   18A4                      
1197   18A4 18 97                jr CastleDirScan    ;Next direction
1198   18A6                      
1199   18A6             CastleBrk:         
1200   18A6 FD E5                push iy
1201   18A8 E1                   pop hl   ; restore hl
1202   18A9                      
1203   18A9 3E 00                ld a,0
1204   18AB 32 05 19             ld (CastlMove),a                    
1205   18AE             
1206   18AE C9                   ret
1207   18AF             
1208   18AF             ;END
1209   18AF             
1210   18AF             ;BEGIN of ========== Is empty square?
1211   18AF             
1212   18AF             IsEmpty:
1213   18AF 7E                   ld a, (hl)
1214   18B0 FE 00                cp 0
1215   18B2 28 04                jr z, EmptySqIs
1216   18B4 37                   scf
1217   18B5 3F                   ccf
1218   18B6 18 01                jr EmptySqOver
1219   18B8             EmptySqIs:
1220   18B8 37                   scf
1221   18B9             EmptySqOver:
1222   18B9 C9                   ret           
1223   18BA             ;END
1224   18BA             
1225   18BA             ;BEGIN of ========== Is square occupied?
1226   18BA             
1227   18BA             IsOccupied:
1228   18BA 7E                   ld a, (hl)
1229   18BB FE 00                cp 0
1230   18BD 28 04                jr z, OccupiedSqIs
1231   18BF 37                   scf
1232   18C0 3F                   ccf
1233   18C1 18 01                jr OccupiedSqOver
1234   18C3             OccupiedSqIs:
1235   18C3 37                   scf
1236   18C4             OccupiedSqOver:
1237   18C4 C9                   ret           
1238   18C5             ;END
1239   18C5             
1240   18C5             
1241   18C5             ;BEGIN of ========== Is piece white?
1242   18C5             
1243   18C5             IsWhite:
1244   18C5 7E                   ld a, (hl)
1245   18C6 FE 50                cp 'P'
1246   18C8 28 18                jr z, WhitePcIs
1247   18CA FE 4E                cp 'N'
1248   18CC 28 14                jr z, WhitePcIs
1249   18CE FE 42                cp 'B'
1250   18D0 28 10                jr z, WhitePcIs
1251   18D2 FE 52                cp 'R'
1252   18D4 28 0C                jr z, WhitePcIs
1253   18D6 FE 51                cp 'Q'
1254   18D8 28 08                jr z, WhitePcIs
1255   18DA FE 4B                cp 'K'
1256   18DC 28 04                jr z, WhitePcIs
1257   18DE 37                   scf
1258   18DF 3F                   ccf
1259   18E0 18 01                jr WhitePcOver
1260   18E2             WhitePcIs:
1261   18E2 37                   scf
1262   18E3             WhitePcOver:
1263   18E3 C9                   ret    
1264   18E4             
1265   18E4             ;END
1266   18E4             
1267   18E4             ;BEGIN of ========== Is piece black?
1268   18E4             
1269   18E4             IsBlack:
1270   18E4 7E                   ld a, (hl)
1271   18E5 FE 70                cp 'p'
1272   18E7 28 18                jr z, BlackPcIs
1273   18E9 FE 6E                cp 'n'
1274   18EB 28 14                jr z, BlackPcIs
1275   18ED FE 62                cp 'b'
1276   18EF 28 10                jr z, BlackPcIs
1277   18F1 FE 72                cp 'r'
1278   18F3 28 0C                jr z, BlackPcIs
1279   18F5 FE 71                cp 'q'
1280   18F7 28 08                jr z, BlackPcIs
1281   18F9 FE 6B                cp 'k'
1282   18FB 28 04                jr z, BlackPcIs
1283   18FD 37                   scf
1284   18FE 3F                   ccf
1285   18FF 18 01                jr BlackPcOver
1286   1901             BlackPcIs:
1287   1901 37                   scf
1288   1902             BlackPcOver:
1289   1902 C9                   ret    
1290   1903             
1291   1903             ;END
1292   1903             
1293   1903             ;BEGIN of ========== ADD NEW MOVE to the list with verification
1294   1903             
1295   1903             ;various flags
1296   1903 00          CaptPiece:  .byte 0
1297   1904 00          PromoPcId:  .byte 0
1298   1905 00          CastlMove:  .byte 0
1299   1906             
1300   1906             AddMovPromo:
1301   1906 3E 04                ld a,4
1302   1908 32 04 19             ld (PromoPcId),a        ; pawns may promote, so this counter is like promoted-piece-id of Q,R.B.N
1303   190B             AddMove:
1304   190B F5                   push af
1305   190C                      
1306   190C CD A1 1D             call ValidateKingCheck  ; this verifies if king is attacked after movement, or can not castle
1307   190F FE 00                cp 0
1308   1911 28 02                jr z,AddMLegal          ; if valid move
1309   1913                      
1310   1913 18 59                jr fAddMVover
1311   1915                      
1312   1915             AddMLegal:
1313   1915 3A 03 13             ld a, (MateDetect)
1314   1918 FE 00                cp 0
1315   191A 28 07                jr z, AddMNormalCase
1316   191C                     
1317   191C 3E 02                ld a,2                  ; we found a legal move, so not checkmate
1318   191E 32 03 13             ld (MateDetect),a
1319   1921 18 4B                jr fAddMVover   
1320   1923                      
1321   1923             AddMNormalCase:         
1322   1923                               
1323   1923 C5                   push bc
1324   1924 DD E5                push ix
1325   1926 DD 21 86 01          ld ix, NEXT_MVCNT
1326   192A DD 4E 00             ld c, (ix)     ;n
1327   192D 06 00                ld b, 0
1328   192F DD 34 00             inc (ix)       ;n=n+1
1329   1932 DD 21 87 01          ld ix, NEXT_MOVES
1330   1936 CB 21                sla c
1331   1938 CB 21                sla c
1332   193A DD 09                add ix, bc     ;n*(piece,from,to,flags)
1333   193C FD 7E 00             ld a, (iy)     ;piece
1334   193F FE 61                cp 'a'
1335   1941 38 02                jr c, addMVupperAlready
1336   1943 D6 20                sub 32         ;to uppercase
1337   1945                      
1338   1945             addMVupperAlready:         
1339   1945 DD 77 00             ld (ix), a
1340   1948 DD 23                inc ix
1341   194A                              
1342   194A 3A 01 13             ld a, (SQi)    ;from square
1343   194D DD 77 00             ld (ix), a
1344   1950 DD 23                inc ix
1345   1952                              
1346   1952 3A 02 13             ld a, (SQt)    ;to square
1347   1955 DD 77 00             ld (ix), a
1348   1958 DD 23                inc ix
1349   195A                      
1350   195A                      ; and add one byte for flags
1351   195A                      
1352   195A 3A 03 19             ld a, (CaptPiece)
1353   195D 47                   ld b, a                ; bit 0 - captured a piece
1354   195E             
1355   195E 3A 04 19             ld a, (PromoPcId)
1356   1961 FE 00                cp 0
1357   1963 28 25                jr z, addMVnoprom
1358   1965                               
1359   1965 3A 02 13             ld a, (SQt)    ;to
1360   1968 FE 38                cp 64-8        ;row 8?
1361   196A 38 04                jr c, addMVq
1362   196C 18 06                jr addMVpromos
1363   196E                      
1364   196E             fAddMVover:
1365   196E 18 48                jr AddMVover 
1366   1970                      
1367   1970             addMVq:
1368   1970 FE 08                cp 8           ;row 1?
1369   1972 30 16                jr nc, addMVnoprom
1370   1974             
1371   1974             addMVpromos:         
1372   1974 CB C8                set 1,b                ; bit 1 - promotion, bits 2,3 - promoted piece Nr. Q=3,R=2,B=1,N=0   
1373   1976 3A 04 19             ld a, (PromoPcId)
1374   1979 3D                   dec a
1375   197A 32 04 19             ld (PromoPcId),a
1376   197D FE 00                cp 0
1377   197F 28 03                jr z, addMVp2
1378   1981                      
1379   1981 CD 0B 19             call AddMove          ; promotion move for all other pieces, check detection lags here     
1380   1984                      
1381   1984             addMVp2:        
1382   1984 CB 27                sla a
1383   1986 CB 27                sla a
1384   1988 B0                   or b
1385   1989 47                   ld b,a       
1386   198A                
1387   198A             addMVnoprom:
1388   198A 3A 05 19             ld a, (CastlMove)
1389   198D FE 00                cp 0
1390   198F 28 02                jr z, addMVnoCastle
1391   1991 CB E0                set 4,b                ; bit 4 - castling indicator
1392   1993             addMVnoCastle:
1393   1993             
1394   1993 3A 03 19             ld a, (CaptPiece)
1395   1996 FE 00                cp 0
1396   1998 28 10                jr z,addMVnoEP
1397   199A 3A 83 01             ld a, (ENPSQ)
1398   199D FE FF                cp $ff
1399   199F 28 09                jr z,addMVnoEP 
1400   19A1 4F                   ld c,a
1401   19A2 3A 02 13             ld a, (SQt)
1402   19A5 B9                   cp c
1403   19A6 20 02                jr nz,addMVnoEP
1404   19A8 CB E8                set 5,b                ; bit 5 - en-passant capture
1405   19AA                                             ; bit 6 - later for check+ detection
1406   19AA                                             ; bit 7 - later for checkmate detection
1407   19AA             addMVnoEP:
1408   19AA                                                 
1409   19AA DD 70 00             ld (ix), b
1410   19AD DD 23                inc ix
1411   19AF                      
1412   19AF DD E1                pop ix
1413   19B1 C1                   pop bc        
1414   19B2                                                                                         
1415   19B2 CD 67 21             call MakeMove         ; check+ detection action, with checkmate detection later
1416   19B5 CD 3E 25             call UnMakeMove
1417   19B8                                      
1418   19B8             AddMVover:
1419   19B8 F1                   pop af         
1420   19B9 C9                   ret
1421   19BA             
1422   19BA             ;END
1423   19BA             
1424   19BA             
1425   19BA             ;BEGIN of ========== Composes notation string for output for current list of generated moves
1426   19BA             ;                   (last by MOVE GENs) 
1427   19BA             
1428   19BA             MovesToStr:
1429   19BA F5                   push af
1430   19BB C5                   push bc
1431   19BC D5                   push de
1432   19BD DD E5                push ix
1433   19BF                      
1434   19BF 11 A8 0F             ld de, NEXT_MVSTR
1435   19C2 DD 21 86 01          ld ix, NEXT_MVCNT
1436   19C6             
1437   19C6 DD 46 00             ld b,(ix)
1438   19C9 DD 21 87 01          ld ix, NEXT_MOVES
1439   19CD 78                   ld a, b
1440   19CE FE 00                cp 0
1441   19D0 28 5B                jr z, MV2sEndSymb 
1442   19D2                      
1443   19D2             MV2sToLoop:
1444   19D2             
1445   19D2 DD 7E 00             ld a, (ix)   ; piece
1446   19D5 FE 50                cp 'P'
1447   19D7 28 02                jr z, MV2sNoPieceNotate
1448   19D9 12                   ld (de),a
1449   19DA 13                   inc de
1450   19DB             MV2sNoPieceNotate:
1451   19DB DD 23                inc ix
1452   19DD                             
1453   19DD CD 83 1A             call MC2getSQ   ; from square
1454   19E0 13                   inc de    
1455   19E1 13                   inc de
1456   19E2 CD 83 1A             call MC2getSQ   ; to square
1457   19E5 1B                   dec de    
1458   19E6 1B                   dec de
1459   19E7                                        
1460   19E7 DD 7E 00             ld a, (ix)    ; flags
1461   19EA CB 67                bit 4,a
1462   19EC 28 05                jr z,MV2sNoCastle
1463   19EE CD 64 1A             call MC2sCASTLEs   ; redraws castling 0-0 or 0-0-0      
1464   19F1 18 1B                jr MV2sNoProm    
1465   19F3             MV2sNoCastle:
1466   19F3 DD 7E 00             ld a, (ix)    ; flags again
1467   19F6 CB 47                bit 0,a
1468   19F8 28 04                jr z, MV2sNoCapt
1469   19FA 3E 78                ld a, 'x'
1470   19FC 18 02                jr MV2xTo
1471   19FE             MV2sNoCapt:
1472   19FE 3E 2D                ld a, '-'
1473   1A00             MV2xTo:         
1474   1A00 12                   ld (de),a
1475   1A01 13                   inc de        
1476   1A02 13                   inc de
1477   1A03 13                   inc de
1478   1A04                             
1479   1A04 DD 7E 00             ld a, (ix)    ; possibly promotion
1480   1A07 CB 4F                bit 1,a
1481   1A09 28 03                jr z, MV2sNoProm
1482   1A0B                      
1483   1A0B CD 3A 1A             call MV2sPromotion ; add piece promotion text =Q..N 
1484   1A0E             
1485   1A0E             MV2sNoProm:
1486   1A0E DD 7E 00             ld a, (ix)    ; possibly check+
1487   1A11 CB 77                bit 6,a
1488   1A13 28 0F                jr z, MV2sNoCheck
1489   1A15                      
1490   1A15 DD 7E 00             ld a, (ix)    ; possibly checkmate
1491   1A18 CB 7F                bit 7,a
1492   1A1A 28 04                jr z, MV2sJustCheck
1493   1A1C             
1494   1A1C 3E 23                ld a, '#'
1495   1A1E 18 02                jr MV2sCk1
1496   1A20                      
1497   1A20             MV2sJustCheck:         
1498   1A20 3E 2B                ld a, '+'
1499   1A22 12          MV2sCk1: ld (de),a        
1500   1A23 13                   inc de         
1501   1A24                      
1502   1A24             MV2sNoCheck:                     
1503   1A24 DD 23                inc ix
1504   1A26                              
1505   1A26 3E 2C                ld a, ','
1506   1A28 12                   ld (de),a        
1507   1A29 13                   inc de
1508   1A2A                      
1509   1A2A 10 A6                djnz MV2sToLoop
1510   1A2C 1B                   dec de
1511   1A2D                      
1512   1A2D             MV2sEndSymb:         
1513   1A2D 3E 24                ld a, '$'
1514   1A2F 12                   ld (de),a         
1515   1A30 13                   inc de
1516   1A31 3E 00                ld a, 0
1517   1A33 12                   ld (de),a 
1518   1A34                              
1519   1A34 DD E1                pop ix
1520   1A36 D1                   pop de
1521   1A37 C1                   pop bc
1522   1A38 F1                   pop af
1523   1A39 C9                   ret
1524   1A3A             
1525   1A3A             MV2sPromotion:
1526   1A3A             
1527   1A3A 3E 3D                ld a, '='
1528   1A3C 12                   ld (de),a
1529   1A3D 13                   inc de
1530   1A3E                               
1531   1A3E DD 7E 00             ld a, (ix)    ; which piece?
1532   1A41 CB 3F                srl a
1533   1A43 CB 3F                srl a
1534   1A45 E6 03                and 3         ; 0..3 piece Id
1535   1A47 FE 03                cp 3          ; Queen?
1536   1A49 20 04                jr nz, MC2sNoQ
1537   1A4B 3E 51                ld a, 'Q'
1538   1A4D 18 12                jr MC2sPrId         
1539   1A4F FE 02       MC2sNoQ: cp 2          ; Rook?
1540   1A51 20 04                jr nz, MC2sNoR
1541   1A53 3E 52                ld a, 'R'
1542   1A55 18 0A                jr MC2sPrId        
1543   1A57 FE 01       MC2sNoR: cp 1          ; Bishop?
1544   1A59 20 04                jr nz, MC2sNoB
1545   1A5B 3E 42                ld a, 'B'
1546   1A5D 18 02                jr MC2sPrId
1547   1A5F 3E 4E       MC2sNoB: ld a, 'N'     ; Knight
1548   1A61             MC2sPrId:
1549   1A61 12                   ld (de),a
1550   1A62 13                   inc de
1551   1A63 C9                   ret
1552   1A64                       
1553   1A64             MC2sCASTLEs:           ; simply rewrites characters in buffer 
1554   1A64             
1555   1A64 13                   inc de
1556   1A65 1A                   ld a,(de)
1557   1A66 1B                   dec de
1558   1A67 1B                   dec de
1559   1A68 1B                   dec de
1560   1A69 1B                   dec de
1561   1A6A FE 63                cp 'c'
1562   1A6C 20 08                jr nz,MC2sShort       
1563   1A6E 3E 30                ld a, '0'     ; 0-0-0
1564   1A70 12                   ld (de),a
1565   1A71 13                   inc de
1566   1A72 3E 2D                ld a, '-'
1567   1A74 12                   ld (de),a
1568   1A75 13                   inc de
1569   1A76             MC2sShort:
1570   1A76 3E 30                ld a, '0'     ; just 0-0 part
1571   1A78 12                   ld (de),a
1572   1A79 13                   inc de
1573   1A7A 3E 2D                ld a, '-'
1574   1A7C 12                   ld (de),a
1575   1A7D 13                   inc de
1576   1A7E 3E 30                ld a, '0'
1577   1A80 12                   ld (de),a
1578   1A81 13                   inc de                           
1579   1A82             
1580   1A82 C9                   ret
1581   1A83             ; get square and store to text string
1582   1A83             MC2getSQ:
1583   1A83 DD 7E 00             ld a, (ix)
1584   1A86 E6 07                and 7
1585   1A88 C6 61                add a, 'a'
1586   1A8A 12                   ld (de),a        
1587   1A8B 13                   inc de
1588   1A8C DD 7E 00             ld a, (ix)
1589   1A8F CB 3F                srl a
1590   1A91 CB 3F                srl a
1591   1A93 CB 3F                srl a
1592   1A95 C6 31                add a, '1'
1593   1A97 12                   ld (de),a
1594   1A98 DD 23                inc ix
1595   1A9A C9                   ret
1596   1A9B             
1597   1A9B             ; printing of current legal moves to output
1598   1A9B             MovesOut:
1599   1A9B D5                   push de
1600   1A9C 11 A8 0F             ld de, NEXT_MVSTR
1601   1A9F CD C6 38             call PrintString
1602   1AA2 D1                   pop de
1603   1AA3 C9                   ret
1604   1AA4             
1605   1AA4             ;END        
1606   1AA4             
1607   1AA4             ;BEGIN of ========== SET FEN position on BOARD and variables
1608   1AA4             ;
1609   1AA4             ; parameter: a-reg
1610   1AA4             ;  0 - set by using startFEN
1611   1AA4             ;  1 - set fen provided in IX register
1612   1AA4             ;
1613   1AA4             SetFEN:
1614   1AA4 F5                   push af
1615   1AA5 C5                   push bc
1616   1AA6 D5                   push de
1617   1AA7 E5                   push hl
1618   1AA8             
1619   1AA8 FE 00                cp 0
1620   1AAA 28 05                jr z, SetFENstartpos
1621   1AAC DD E5                push ix
1622   1AAE D1                   pop de   ;de contains FEN address now
1623   1AAF 18 03                jr SetFENp
1624   1AB1             SetFENstartpos:         
1625   1AB1 11 07 01             ld de, startFEN
1626   1AB4 3E FF       SetFENp: ld a,$ff
1627   1AB6 32 84 01             ld (WKSQ),a
1628   1AB9 32 85 01             ld (BKSQ),a
1629   1ABC CD EB 1C             call SetSqScan
1630   1ABF CD F4 1C             call ScanSqNxt
1631   1AC2 06 40                ld b, 64
1632   1AC4             setBoardSquare:
1633   1AC4 1A                   ld a, (de)
1634   1AC5 13                   inc de
1635   1AC6 FE 2F                cp '/'
1636   1AC8 28 FA                jr z, setBoardSquare
1637   1ACA 4F                   ld c, a
1638   1ACB FE 31                cp '1'
1639   1ACD 38 16                jr c, notFenDigit  ;ifA<'1' then jump
1640   1ACF FE 39                cp '9'
1641   1AD1 30 12                jr nc, notFenDigit ;ifA>='9' then jump
1642   1AD3 D6 30                sub '0'
1643   1AD5 4F                   ld c,a
1644   1AD6             setFenEmptyPiece:
1645   1AD6 36 00                ld (hl), 0
1646   1AD8 CD F4 1C             call ScanSqNxt
1647   1ADB 0D                   dec c
1648   1ADC 05                   dec b
1649   1ADD 79                   ld a,c
1650   1ADE FE 00                cp 0
1651   1AE0 20 F4                jr nz, setFenEmptyPiece
1652   1AE2 04                   inc b
1653   1AE3 18 1A                jr nextFenPiece
1654   1AE5             notFenDigit:
1655   1AE5 77                   ld (hl),a
1656   1AE6 FE 4B                cp 'K'
1657   1AE8 20 07                jr nz, setFenNoWK
1658   1AEA CD 1A 1D             call GetScanSQ
1659   1AED 32 84 01             ld (WKSQ),a
1660   1AF0 7E                   ld a,(hl)
1661   1AF1             setFenNoWK:
1662   1AF1 FE 6B                cp 'k'
1663   1AF3 20 07                jr nz, setFenNoBK
1664   1AF5 CD 1A 1D             call GetScanSQ
1665   1AF8 32 85 01             ld (BKSQ),a
1666   1AFB 7E                   ld a,(hl)
1667   1AFC             setFenNoBK:         
1668   1AFC CD F4 1C             call ScanSqNxt
1669   1AFF             nextFenPiece:
1670   1AFF 10 C3                djnz setBoardSquare
1671   1B01                      
1672   1B01 13                   inc de                 ; detects which side to move
1673   1B02 1A                   ld a, (de)
1674   1B03 FE 77                cp 'w'
1675   1B05 20 04                jr nz,setFenBlackMv
1676   1B07 3E 00                ld a,0
1677   1B09 18 02                jr setFenCol2Mv
1678   1B0B             setFenBlackMv:
1679   1B0B 3E 01                ld a,1
1680   1B0D             setFenCol2Mv:
1681   1B0D 32 81 01             ld (SIDE),a
1682   1B10 13                   inc de
1683   1B11 13                   inc de
1684   1B12             
1685   1B12 06 00                ld b,0           
1686   1B14             setFenCastlings:
1687   1B14 1A                   ld a, (de)
1688   1B15 13                   inc de
1689   1B16 FE 20                cp ' '
1690   1B18 28 24                jr z,setFenCsOver ; break loop
1691   1B1A              
1692   1B1A FE 2D                cp '-'
1693   1B1C 28 1E                jr z,setFenCs     ; just skip
1694   1B1E             
1695   1B1E FE 4B                cp 'K'
1696   1B20 20 04                jr nz,setFenC2
1697   1B22 CB C0                set 0,b
1698   1B24 18 16                jr setFenCs
1699   1B26             setFenC2:
1700   1B26 FE 51                cp 'Q'
1701   1B28 20 04                jr nz,setFenC3
1702   1B2A CB C8                set 1,b
1703   1B2C 18 0E                jr setFenCs
1704   1B2E             setFenC3:
1705   1B2E FE 6B                cp 'k'
1706   1B30 20 04                jr nz,setFenC4
1707   1B32 CB D0                set 2,b
1708   1B34 18 06                jr setFenCs
1709   1B36             setFenC4:
1710   1B36 FE 71                cp 'q'
1711   1B38 20 02                jr nz,setFenCs
1712   1B3A CB D8                set 3,b     
1713   1B3C             setFenCs:
1714   1B3C 18 D6                jr setFenCastlings ;just go next      
1715   1B3E             setFenCsOver:
1716   1B3E 78                   ld a,b
1717   1B3F 32 82 01             ld (CASTLES),a
1718   1B42                      
1719   1B42 1A                   ld a, (de)           ; is en-passant square provided?
1720   1B43 13                   inc de
1721   1B44 FE 2D                cp '-'
1722   1B46 28 10                jr z,setFenNoEnp     ; just skip
1723   1B48 D6 61                sub 'a'
1724   1B4A 47                   ld b,a         
1725   1B4B 1A                   ld a, (de)
1726   1B4C 13                   inc de
1727   1B4D D6 31                sub '1'
1728   1B4F CB 27                sla a
1729   1B51 CB 27                sla a
1730   1B53 CB 27                sla a       
1731   1B55 B0                   or b                 ; reg-a = given en-passant square
1732   1B56 18 02                jr setFenENPsq     
1733   1B58             setFenNoEnp:
1734   1B58 3E FF                ld a,$ff
1735   1B5A             setFenENPsq:
1736   1B5A 32 83 01             ld (ENPSQ),a         ; save en-passant square
1737   1B5D             
1738   1B5D 13                   inc de
1739   1B5E 3E 00                ld a,0
1740   1B60 32 67 03             ld (MOVE_CNT),a
1741   1B63                                                                                                                                                                                                                
1742   1B63 E1                   pop hl
1743   1B64 D1                   pop de
1744   1B65 C1                   pop bc
1745   1B66 F1                   pop af
1746   1B67 C9                   ret
1747   1B68             
1748   1B68             ;END
1749   1B68             
1750   1B68             ;BEGIN of ========== GET FEN position from BOARD and variables
1751   1B68             ;
1752   1B68             ; parameter:  address in DE register for resulting string,
1753   1B68             ;   ends with $, can be printed right after
1754   1B68             ;
1755   1B68             GetFEN:
1756   1B68 F5                   push af
1757   1B69 C5                   push bc
1758   1B6A D5                   push de
1759   1B6B E5                   push hl
1760   1B6C DD E5                push ix
1761   1B6E                      
1762   1B6E D5                   push de
1763   1B6F DD E1                pop ix        ; ix = de
1764   1B71                   
1765   1B71 CD EB 1C             call SetSqScan
1766   1B74 06 40                ld b,64
1767   1B76 16 00                ld d,0        ; current column
1768   1B78             getBoardSquare:
1769   1B78                               
1770   1B78 7A                   ld a,d
1771   1B79 FE 08                cp 8           ; if slash for new line
1772   1B7B 20 09                jr nz,getBoNsl
1773   1B7D                      
1774   1B7D 3E 2F                ld a,'/'
1775   1B7F DD 77 00             ld (ix),a
1776   1B82 DD 23                inc ix
1777   1B84 16 00                ld d,0
1778   1B86             getBoNsl:
1779   1B86 CD F4 1C             call ScanSqNxt
1780   1B89 7E                   ld a, (hl)
1781   1B8A             
1782   1B8A FE 00                cp 0
1783   1B8C 28 06                jr z,getBo0
1784   1B8E FE 20                cp ' '
1785   1B90 28 02                jr z,getBo0  ; if empty square or space
1786   1B92 18 1E                jr getBoNo0
1787   1B94             getBo0:         
1788   1B94 7A                   ld a,d
1789   1B95 FE 00                cp 0
1790   1B97 20 04                jr nz,getBoC2
1791   1B99 3E 31       getBo1:  ld a,'1'          ; first space
1792   1B9B 18 15                jr getBoNo0
1793   1B9D             getBoC2:
1794   1B9D DD 2B                dec ix         
1795   1B9F DD 7E 00             ld a,(ix)
1796   1BA2 DD 23                inc ix
1797   1BA4 D6 31                sub '1'
1798   1BA6 38 F1                jr c,getBo1         
1799   1BA8 FE 08                cp 8
1800   1BAA 30 ED                jr nc,getBo1
1801   1BAC DD 2B                dec ix         
1802   1BAE DD 7E 00             ld a,(ix)
1803   1BB1 3C                   inc a            ; char+1 counter of empty squares
1804   1BB2             getBoNo0:
1805   1BB2 DD 77 00             ld (ix),a
1806   1BB5 DD 23                inc ix
1807   1BB7                      
1808   1BB7 14                   inc d
1809   1BB8 10 BE                djnz getBoardSquare  ; scan all 64 squares    
1810   1BBA                      
1811   1BBA CD 59 1C             call getBo_      ; space
1812   1BBD                      
1813   1BBD 3A 81 01             ld a,(SIDE)      ; side to move
1814   1BC0 FE 00                cp 0
1815   1BC2 20 04                jr nz,getBoB
1816   1BC4 3E 77                ld a,'w'
1817   1BC6 18 02                jr getBoSd
1818   1BC8 3E 62       getBoB:  ld a,'b'
1819   1BCA DD 77 00    getBoSd: ld (ix),a
1820   1BCD DD 23                inc ix
1821   1BCF                               
1822   1BCF CD 59 1C             call getBo_
1823   1BD2             
1824   1BD2 3A 82 01             ld a,(CASTLES)
1825   1BD5 47                   ld b,a
1826   1BD6 E6 0F                and %00001111
1827   1BD8 FE 00                cp 0
1828   1BDA 28 2E                jr z,getBoNoCst
1829   1BDC CB 40                bit 0,b
1830   1BDE 28 07                jr z,getBnWK
1831   1BE0 3E 4B                ld a,'K'
1832   1BE2 DD 77 00             ld (ix),a
1833   1BE5 DD 23                inc ix
1834   1BE7             getBnWK:  
1835   1BE7 CB 48                bit 1,b
1836   1BE9 28 07                jr z,getBnWQ
1837   1BEB 3E 51                ld a,'Q'
1838   1BED DD 77 00             ld (ix),a
1839   1BF0 DD 23                inc ix
1840   1BF2             getBnWQ:  
1841   1BF2 CB 50                bit 2,b
1842   1BF4 28 07                jr z,getBnBK
1843   1BF6 3E 6B                ld a,'k'
1844   1BF8 DD 77 00             ld (ix),a
1845   1BFB DD 23                inc ix
1846   1BFD             getBnBK:  
1847   1BFD CB 58                bit 3,b
1848   1BFF 28 0C                jr z,getBoCsOver
1849   1C01 3E 71                ld a,'q'
1850   1C03 DD 77 00             ld (ix),a
1851   1C06 DD 23                inc ix         
1852   1C08 18 03                jr getBoCsOver
1853   1C0A                               
1854   1C0A             getBoNoCst:
1855   1C0A CD 61 1C             call getBoM    ; sign - 
1856   1C0D             getBoCsOver:
1857   1C0D             
1858   1C0D CD 59 1C             call getBo_
1859   1C10             
1860   1C10 3A 83 01             ld a,(ENPSQ)   ; add en-passant info
1861   1C13 FE FF                cp $ff
1862   1C15 28 1A                jr z,getBoNoEp
1863   1C17 47                   ld b,a
1864   1C18 E6 07                and 7
1865   1C1A C6 61                add a,'a'
1866   1C1C DD 77 00             ld (ix),a
1867   1C1F DD 23                inc ix
1868   1C21 78                   ld a,b
1869   1C22 CB 3F                srl a
1870   1C24 CB 3F                srl a
1871   1C26 CB 3F                srl a
1872   1C28 C6 31                add a,'1'
1873   1C2A DD 77 00             ld (ix),a
1874   1C2D DD 23                inc ix
1875   1C2F 18 03                jr getBoEpOver
1876   1C31             getBoNoEp:
1877   1C31 CD 61 1C             call getBoM    ; sign - 
1878   1C34             getBoEpOver:
1879   1C34 CD 59 1C             call getBo_
1880   1C37             
1881   1C37 3E 30                ld a,'0'       ; ignore halfmoves
1882   1C39 DD 77 00             ld (ix),a
1883   1C3C DD 23                inc ix
1884   1C3E                      
1885   1C3E CD 59 1C             call getBo_
1886   1C41                      
1887   1C41 3A 67 03             ld a,(MOVE_CNT)
1888   1C44 CB 3F                srl a          ; =1+int(/2)
1889   1C46 C6 31                add a,'1'
1890   1C48 DD 77 00             ld (ix),a
1891   1C4B DD 23                inc ix
1892   1C4D                      
1893   1C4D 3E 24                ld a,'$'
1894   1C4F DD 77 00             ld (ix),a
1895   1C52                      
1896   1C52 DD E1                pop ix                                                                                                                                                                                           
1897   1C54 E1                   pop hl
1898   1C55 D1                   pop de
1899   1C56 C1                   pop bc
1900   1C57 F1                   pop af
1901   1C58 C9                   ret
1902   1C59                      
1903   1C59 3E 20       getBo_:  ld a,' '
1904   1C5B DD 77 00             ld (ix),a
1905   1C5E DD 23                inc ix
1906   1C60 C9                   ret         
1907   1C61 3E 2D       getBoM:  ld a,'-'
1908   1C63 DD 77 00             ld (ix),a
1909   1C66 DD 23                inc ix
1910   1C68 C9                   ret         
1911   1C69                      
1912   1C69             
1913   1C69             ;END
1914   1C69             
1915   1C69             ;BEGIN of ========== BOARD printing out
1916   1C69             
1917   1C69             BoardOut:
1918   1C69 2E 2E 2E 2E         .byte "........", 13, 10   ;output string
1918   1C6D 2E 2E 2E 2E 
1918   1C71 0D 0A 
1919   1C73 2E 2E 2E 2E         .byte "........", 13, 10
1919   1C77 2E 2E 2E 2E 
1919   1C7B 0D 0A 
1920   1C7D 2E 2E 2E 2E         .byte "........", 13, 10
1920   1C81 2E 2E 2E 2E 
1920   1C85 0D 0A 
1921   1C87 2E 2E 2E 2E         .byte "........", 13, 10
1921   1C8B 2E 2E 2E 2E 
1921   1C8F 0D 0A 
1922   1C91 2E 2E 2E 2E         .byte "........", 13, 10
1922   1C95 2E 2E 2E 2E 
1922   1C99 0D 0A 
1923   1C9B 2E 2E 2E 2E         .byte "........", 13, 10
1923   1C9F 2E 2E 2E 2E 
1923   1CA3 0D 0A 
1924   1CA5 2E 2E 2E 2E         .byte "........", 13, 10
1924   1CA9 2E 2E 2E 2E 
1924   1CAD 0D 0A 
1925   1CAF 2E 2E 2E 2E         .byte "........", 13, 10
1925   1CB3 2E 2E 2E 2E 
1925   1CB7 0D 0A 
1926   1CB9 24 00               .byte "$", 0   
1927   1CBB                     
1928   1CBB             printBOARD:
1929   1CBB F5                   push af
1930   1CBC C5                   push bc
1931   1CBD D5                   push de
1932   1CBE E5                   push hl
1933   1CBF 06 08                ld b, 8
1934   1CC1 CD EB 1C             call SetSqScan
1935   1CC4 11 69 1C             ld de, BoardOut
1936   1CC7             printBoardLine:
1937   1CC7 0E 08                ld c, 8
1938   1CC9             printCharsInLine:         
1939   1CC9 CD F4 1C             call ScanSqNxt
1940   1CCC 7E                   ld a, (hl)
1941   1CCD FE 00                cp 0
1942   1CCF 20 02                jr nz, printCh1
1943   1CD1 3E 20                ld a, ' '            ; Empty square     
1944   1CD3             printCh1:
1945   1CD3 12                   ld (de), a
1946   1CD4 13                   inc de
1947   1CD5 0D                   dec c
1948   1CD6 79                   ld a,c
1949   1CD7 FE 00                cp 0
1950   1CD9 20 EE                jr nz, printCharsInLine   ; 8x8
1951   1CDB 13                   inc de                    ; chr(13)+chr(10)
1952   1CDC 13                   inc de
1953   1CDD 10 E8                djnz printBoardLine
1954   1CDF             
1955   1CDF 11 69 1C             ld de, BoardOut
1956   1CE2 CD C6 38             call PrintString
1957   1CE5             
1958   1CE5 E1                   pop hl
1959   1CE6 D1                   pop de
1960   1CE7 C1                   pop bc
1961   1CE8 F1                   pop af
1962   1CE9 C9                   ret
1963   1CEA             ;END
1964   1CEA             
1965   1CEA             
1966   1CEA             ;BEGIN of ========== BOARD scanning A1,B1,...,H1,A2,B2...,H8
1967   1CEA             
1968   1CEA             ; board order on screen or FEN notation is A8,B8,...,H8,A7,B7.... H1
1969   1CEA             ; so we go to square 57 then scan to 63, then jump to 49 ... till last square is 7 
1970   1CEA             
1971   1CEA 00          ScanSqC:  .byte 0   ;counter 1..8, reg HL contains pointer to BOARD square 
1972   1CEB             
1973   1CEB             SetSqScan:
1974   1CEB 21 EA 1C             ld hl, ScanSqC
1975   1CEE 36 00                ld (hl),0              ; +1 for first loop 
1976   1CF0 21 77 01             ld hl, BOARD+64-8-1
1977   1CF3 C9                   ret
1978   1CF4             ScanSqNxt:
1979   1CF4 F5                   push af         
1980   1CF5 C5                   push bc
1981   1CF6 DD E5                push ix
1982   1CF8 DD 21 EA 1C          ld ix, ScanSqC
1983   1CFC DD 34 00             inc (ix)
1984   1CFF DD 7E 00             ld a,(ix)
1985   1D02 FE 09                cp 8+1
1986   1D04 28 06                jr z, ScanSqNxtRow
1987   1D06 23                   inc hl                 ;just next square
1988   1D07             retSqScan:         
1989   1D07 DD E1                pop ix
1990   1D09 C1                   pop bc
1991   1D0A F1                   pop af
1992   1D0B C9                   ret
1993   1D0C             ScanSqNxtRow:
1994   1D0C 3E 01                ld a,1
1995   1D0E DD 77 00             ld (ix),a
1996   1D11 01 0F 00             ld bc, 8+7           ;square of previous row, -7
1997   1D14 37                   scf
1998   1D15 3F                   ccf
1999   1D16 ED 42                sbc hl, bc           ;there is no sub oper., so we use sbc                          
2000   1D18 18 ED                jr retSqScan
2001   1D1A             GetScanSQ:                   ; returns current square I
2002   1D1A C5                   push bc
2003   1D1B E5                   push hl
2004   1D1C 01 40 01             ld bc, BOARD
2005   1D1F 37                   scf
2006   1D20 3F                   ccf
2007   1D21 ED 42                sbc hl, bc          ; difference BOARD - hl-reg
2008   1D23                       
2009   1D23 E5                   push hl
2010   1D24 C1                   pop bc
2011   1D25 79                   ld a,c              ; will contain square Nr.
2012   1D26 E1                   pop hl
2013   1D27 C1                   pop bc
2014   1D28 C9                   ret
2015   1D29             
2016   1D29             ;END
2017   1D29             
2018   1D29             
2019   1D29             ;BEGIN of ========== KING CHECK+ DETECTION
2020   1D29             ;
2021   1D29             ; on return a-reg 1-is check, 0-not check
2022   1D29             ;
2023   1D29 00          SQ_ck_i:      .byte 0   ; storing to restore later  
2024   1D2A 00          SQ_ck_t:      .byte 0
2025   1D2B 00          CastlMove_ck: .byte 0
2026   1D2C 00          PromoPcId_ck: .byte 0
2027   1D2D 00          CaptPiece_ck: .byte 0
2028   1D2E             
2029   1D2E             IsCheck:
2030   1D2E FD E5               push iy
2031   1D30 E5                  push hl
2032   1D31                     
2033   1D31 3A 05 19            ld a,(CastlMove)
2034   1D34 32 2B 1D            ld (CastlMove_ck),a
2035   1D37 3A 04 19            ld a,(PromoPcId)
2036   1D3A 32 2C 1D            ld (PromoPcId_ck),a
2037   1D3D 3A 03 19            ld a,(CaptPiece)
2038   1D40 32 2D 1D            ld (CaptPiece_ck),a
2039   1D43                             
2040   1D43 3E 00               ld a,0    
2041   1D45 32 05 19            ld (CastlMove),a
2042   1D48 32 04 19            ld (PromoPcId),a
2043   1D4B 32 03 19            ld (CaptPiece),a 
2044   1D4E                                   
2045   1D4E 3A 01 13            ld a, (SQi)      ; save
2046   1D51 32 29 1D            ld (SQ_ck_i),a
2047   1D54 3A 02 13            ld a, (SQt)
2048   1D57 32 2A 1D            ld (SQ_ck_t),a
2049   1D5A 3A 81 01            ld a, (SIDE)
2050   1D5D FE 00               cp 0
2051   1D5F 20 05               jr nz,IsCkBlack
2052   1D61 3A 84 01            ld a,(WKSQ)
2053   1D64 18 03               jr IsChSt
2054   1D66             IsCkBlack:
2055   1D66 3A 85 01            ld a,(BKSQ)        
2056   1D69             IsChSt: 
2057   1D69 32 02 13            ld (SQt),a      
2058   1D6C 32 01 13            ld (SQi),a
2059   1D6F CD 31 22            call MM_hl        ; position hl to the square of king
2060   1D72                                     
2061   1D72 E5                  push hl
2062   1D73 FD E1               pop iy            ; contains square of king
2063   1D75                     
2064   1D75 CD A1 1D            call ValidateKingCheck
2065   1D78 F5                  push af
2066   1D79                     
2067   1D79 3A 29 1D            ld a, (SQ_ck_i)  ;restore
2068   1D7C 32 01 13            ld (SQi),a
2069   1D7F 3A 2A 1D            ld a, (SQ_ck_t)
2070   1D82 32 02 13            ld (SQt),a
2071   1D85                     
2072   1D85 3A 2B 1D            ld a,(CastlMove_ck)
2073   1D88 32 05 19            ld (CastlMove),a
2074   1D8B 3A 2C 1D            ld a,(PromoPcId_ck)
2075   1D8E 32 04 19            ld (PromoPcId),a
2076   1D91 3A 2D 1D            ld a,(CaptPiece_ck)
2077   1D94 32 03 19            ld (CaptPiece),a
2078   1D97                     
2079   1D97 F1                  pop af
2080   1D98                     
2081   1D98 E1                  pop hl
2082   1D99 FD E1               pop iy
2083   1D9B C9                  ret        
2084   1D9C                     
2085   1D9C             ;END
2086   1D9C             
2087   1D9C             
2088   1D9C             ;BEGIN of ========== VALIDATE KING CHECK
2089   1D9C             ;
2090   1D9C             ; Usually king validation is done by opposit movement generation with king capture detection.
2091   1D9C             ; As it takes long to try all moves, we better verify square-attackers.
2092   1D9C             ; This gives advantage that only really legal moves are in the list without further iterations.
2093   1D9C             ;
2094   1D9C             ; on return a=0 on valid move, 1-not valid
2095   1D9C             
2096   1D9C 00          SQ_i:     .byte 0   
2097   1D9D 00          SQ_t:     .byte 0
2098   1D9E 00          SQ1:      .byte 0   ;contains flag that this square is nearby (+-1 sq)
2099   1D9F 00          SQk:      .byte 0   ;king square after movement
2100   1DA0 00          SQc:      .byte 0   ;square for castle checking
2101   1DA1             
2102   1DA1                       
2103   1DA1             ValidateKingCheck:
2104   1DA1                                   
2105   1DA1 C5                   push bc
2106   1DA2 D5                   push de
2107   1DA3 E5                   push hl
2108   1DA4 DD E5                push ix
2109   1DA6                      
2110   1DA6 FD E5                push iy
2111   1DA8 E1                   pop hl              ;set back pointer to square of piece
2112   1DA9                      
2113   1DA9 3A 02 13             ld a,(SQt)          ;save values
2114   1DAC 32 9D 1D             ld (SQ_t),a
2115   1DAF 3A 01 13             ld a,(SQi)
2116   1DB2 32 9C 1D             ld (SQ_i),a
2117   1DB5                      
2118   1DB5 3A 01 13             ld a,(SQi)
2119   1DB8 47                   ld b,a
2120   1DB9 3A 84 01             ld a,(WKSQ)
2121   1DBC B8                   cp b
2122   1DBD 20 05                jr nz,V_notWKing
2123   1DBF 32 9F 1D             ld (SQk),a                                  
2124   1DC2 18 2B                jr V_ifCastl       ; castling of white king?
2125   1DC4             V_notWKing:
2126   1DC4 3A 85 01             ld a,(BKSQ)
2127   1DC7 B8                   cp b
2128   1DC8 20 05                jr nz,V_notKing
2129   1DCA 32 9F 1D             ld (SQk),a
2130   1DCD 18 20                jr V_ifCastl       ; castling of black king?
2131   1DCF             V_notKing:
2132   1DCF 3A 81 01             ld a,(SIDE)
2133   1DD2 FE 00                cp 0
2134   1DD4 20 08                jr nz, V_blackPc
2135   1DD6 3A 84 01             ld a,(WKSQ)
2136   1DD9 32 9F 1D             ld (SQk),a 
2137   1DDC 18 06                jr V_Pc1
2138   1DDE             V_blackPc:
2139   1DDE 3A 85 01             ld a,(BKSQ)
2140   1DE1 32 9F 1D             ld (SQk),a
2141   1DE4 47          V_Pc1:   ld b,a
2142   1DE5 CD 67 1E             call V_hl_setpos   ; new position of hl at square of king
2143   1DE8 CD 8B 1E             call ValidateKSq   ; if check after movement to?        
2144   1DEB 30 64                jr nc,KgNotValid  
2145   1DED 18 5E                jr KgIsValid                  
2146   1DEF             V_ifCastl:                         
2147   1DEF 3A 05 19             ld a, (CastlMove)
2148   1DF2 FE 00                cp 0
2149   1DF4 28 4B                jr z, V_noCastl
2150   1DF6                      
2151   1DF6 78                   ld a,b
2152   1DF7 32 A0 1D             ld (SQc),a
2153   1DFA                                        ; castling, b-reg contains king position already
2154   1DFA CD 8B 1E             call ValidateKSq  ; if check?
2155   1DFD 30 52                jr nc,KgNotValid
2156   1DFF             
2157   1DFF 3A A0 1D             ld a,(SQc)
2158   1E02 47                   ld b,a                
2159   1E03 3A 9D 1D             ld a,(SQ_t)
2160   1E06 B8                   cp b
2161   1E07 38 1C                jr c, V_decWCstl
2162   1E09                                        
2163   1E09 CD 1B 1E             call V_CstlInc
2164   1E0C CD 8B 1E             call ValidateKSq  ; f1,f8 under check?
2165   1E0F 30 40                jr nc,KgNotValid
2166   1E11                      
2167   1E11 CD 1B 1E             call V_CstlInc
2168   1E14 CD 8B 1E             call ValidateKSq  ; g1,g8 under check?
2169   1E17 30 38                jr nc,KgNotValid
2170   1E19                      
2171   1E19 18 32                jr KgIsValid
2172   1E1B                      
2173   1E1B             V_CstlInc:
2174   1E1B 3A A0 1D             ld a,(SQc)
2175   1E1E 3C                   inc a
2176   1E1F 32 A0 1D             ld (SQc),a
2177   1E22 47                   ld b,a
2178   1E23 23                   inc hl
2179   1E24 C9                   ret   
2180   1E25                               
2181   1E25             V_decWCstl:
2182   1E25 CD 37 1E             call V_CstlDec
2183   1E28 CD 8B 1E             call ValidateKSq  ; d1,d8 under check?
2184   1E2B 30 24                jr nc,KgNotValid
2185   1E2D                      
2186   1E2D CD 37 1E             call V_CstlDec
2187   1E30 CD 8B 1E             call ValidateKSq  ; c1,c8 under check?
2188   1E33 30 1C                jr nc,KgNotValid
2189   1E35                      
2190   1E35 18 16                jr KgIsValid
2191   1E37             
2192   1E37             V_CstlDec:
2193   1E37 3A A0 1D             ld a,(SQc)
2194   1E3A 3D                   dec a
2195   1E3B 32 A0 1D             ld (SQc),a
2196   1E3E 47                   ld b,a
2197   1E3F 2B                   dec hl
2198   1E40 C9                   ret 
2199   1E41                               
2200   1E41             V_noCastl:
2201   1E41 3A 02 13             ld a,(SQt)        ; move to under check?
2202   1E44 47                   ld b,a
2203   1E45 CD 67 1E             call V_hl_setpos  ; new position of hl at square of king         
2204   1E48 CD 8B 1E             call ValidateKSq
2205   1E4B 30 04                jr nc,KgNotValid                          
2206   1E4D             
2207   1E4D             KgIsValid:         
2208   1E4D 3E 00                ld a,0
2209   1E4F 18 02                jr KgVret         
2210   1E51             KgNotValid:
2211   1E51 3E 01                ld a,1
2212   1E53             KgVret:
2213   1E53             
2214   1E53 F5                   push af
2215   1E54 3A 9D 1D             ld a,(SQ_t)          ;restore values
2216   1E57 32 02 13             ld (SQt),a
2217   1E5A 3A 9C 1D             ld a,(SQ_i)
2218   1E5D 32 01 13             ld (SQi),a
2219   1E60 F1                   pop af
2220   1E61                      
2221   1E61 DD E1                pop ix
2222   1E63 E1                   pop hl
2223   1E64 D1                   pop de
2224   1E65 C1                   pop bc
2225   1E66 C9                   ret
2226   1E67                                                                                                                                              
2227   1E67             ; reposition of hl pointer to square, by calculation
2228   1E67             V_hl_setpos:
2229   1E67 C5                   push bc
2230   1E68 78                   ld a,b
2231   1E69 32 01 13             ld (SQi),a
2232   1E6C                      
2233   1E6C 06 00                ld b,0
2234   1E6E 3A 9C 1D             ld a,(SQ_i)
2235   1E71 4F                   ld c,a
2236   1E72 3A 01 13             ld a,(SQi)
2237   1E75 91                   sub c
2238   1E76 38 04                jr c, V_StDistNeg
2239   1E78 4F                   ld c,a
2240   1E79 09                   add hl,bc              ;new hl position sq-forward
2241   1E7A 18 0D                jr V_hl_rdy1
2242   1E7C             V_StDistNeg:
2243   1E7C 3A 01 13             ld a,(SQi)
2244   1E7F 4F                   ld c,a
2245   1E80 3A 9C 1D             ld a,(SQ_i)         
2246   1E83 91                   sub c
2247   1E84 4F                   ld c,a                         
2248   1E85 37                   scf
2249   1E86 3F                   ccf
2250   1E87 ED 42                sbc hl,bc              ;new hl position sq-backward
2251   1E89             V_hl_rdy1:
2252   1E89 C1                   pop bc
2253   1E8A C9                   ret
2254   1E8B             
2255   1E8B             ; detect if given square (in b) is under attack of opponent
2256   1E8B               
2257   1E8B             ValidateKSq:
2258   1E8B                                               
2259   1E8B 78                   ld a,b
2260   1E8C 32 01 13             ld (SQi),a
2261   1E8F             
2262   1E8F CD B7 13             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]  
2263   1E92                                                                
2264   1E92                      ; try to attack this square in SQi (threat comes from SQt)
2265   1E92             
2266   1E92                      ; diognals
2267   1E92 DD 21 F8 15          ld ix,bishopMoves
2268   1E96 06 04                ld b, 4
2269   1E98                      
2270   1E98             DiognalScan4directions:
2271   1E98             
2272   1E98 D5                   push de
2273   1E99 3E 01                ld a,1
2274   1E9B 32 9E 1D             ld (SQ1),a
2275   1E9E             DiognalLoop:
2276   1E9E CD F3 1E             call DiognalAttacks
2277   1EA1 FE 00                cp 0
2278   1EA3 28 F9                jr z,DiognalLoop
2279   1EA5 D1                   pop de
2280   1EA6 FE 02                cp 2
2281   1EA8 28 46                jr z,NotValidKgSq
2282   1EAA                                       
2283   1EAA DD 23                inc ix
2284   1EAC DD 23                inc ix
2285   1EAE DD 23                inc ix
2286   1EB0 DD 23                inc ix
2287   1EB2                      
2288   1EB2 10 E4                djnz DiognalScan4directions        
2289   1EB4                      
2290   1EB4                      ; horizontals and verticals       
2291   1EB4 DD 21 3F 15          ld ix,rookMoves
2292   1EB8 06 04                ld b, 4
2293   1EBA                      
2294   1EBA             HorzVertScan4directions:
2295   1EBA             
2296   1EBA D5                   push de
2297   1EBB 3E 01                ld a,1
2298   1EBD 32 9E 1D             ld (SQ1),a
2299   1EC0             HorzVertLoop:
2300   1EC0 CD 21 20             call HorzVertAttacks
2301   1EC3 FE 00                cp 0
2302   1EC5 28 F9                jr z,HorzVertLoop
2303   1EC7 D1                   pop de
2304   1EC8 FE 02                cp 2
2305   1ECA 28 24                jr z,NotValidKgSq
2306   1ECC                           
2307   1ECC DD 23                inc ix
2308   1ECE DD 23                inc ix
2309   1ED0 DD 23                inc ix
2310   1ED2 DD 23                inc ix
2311   1ED4                      
2312   1ED4 10 E4                djnz HorzVertScan4directions
2313   1ED6             
2314   1ED6                      ; knights       
2315   1ED6 DD 21 A9 16          ld ix, knightMoves
2316   1EDA 06 08                ld b, 8
2317   1EDC             VKnightScan8moves:
2318   1EDC CD E7 20             call KnightAttacks
2319   1EDF FE 02                cp 2
2320   1EE1 28 0D                jr z,NotValidKgSq
2321   1EE3 DD 23                inc ix
2322   1EE5 DD 23                inc ix
2323   1EE7 DD 23                inc ix
2324   1EE9 DD 23                inc ix
2325   1EEB 10 EF                djnz VKnightScan8moves
2326   1EED                      
2327   1EED             ValidKgSq:
2328   1EED 37                   scf
2329   1EEE 18 02                jr ValidKgSqRet
2330   1EF0             NotValidKgSq:
2331   1EF0 37                   scf
2332   1EF1 3F                   ccf
2333   1EF2             ValidKgSqRet:
2334   1EF2 C9                   ret
2335   1EF3             
2336   1EF3             
2337   1EF3             ; look for diognal-attacks to that direction
2338   1EF3             DiognalAttacks:
2339   1EF3             
2340   1EF3 C5                   push bc
2341   1EF4 E5                   push hl
2342   1EF5 DD E5                push ix
2343   1EF7                                       
2344   1EF7 DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1
2345   1EFA DD 23                inc ix
2346   1EFC FE 2D                cp '-'
2347   1EFE 28 08                jr z, V_BsNegX      
2348   1F00 7A                   ld a,d
2349   1F01 3C                   inc a           ;a=direction +1 of X 
2350   1F02 FE 08                cp 8
2351   1F04 30 69                jr nc, V_BsSt
2352   1F06 18 09                jr V_BsCanOk1
2353   1F08                      
2354   1F08             V_BsNegX:
2355   1F08 3E 00                ld a,0          ;a=direction -1 of X
2356   1F0A BA                   cp d
2357   1F0B 38 02                jr c, V_BsCanSubtrX
2358   1F0D 18 60                jr V_BsSt
2359   1F0F             V_BsCanSubtrX:         
2360   1F0F 7A                   ld a,d
2361   1F10 3D                   dec a 
2362   1F11             V_BsCanOk1:
2363   1F11 57                   ld d,a         
2364   1F12 DD 23                inc ix
2365   1F14                      
2366   1F14 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1
2367   1F17 DD 23                inc ix
2368   1F19 FE 2D                cp '-'
2369   1F1B 28 08                jr z, V_BsNegY
2370   1F1D 7B                   ld a,e
2371   1F1E 3C                   inc a          ;a=direction +1 of Y  
2372   1F1F FE 08                cp 8
2373   1F21 30 4C                jr nc, V_BsSt
2374   1F23 18 09                jr V_BsCanOk2   
2375   1F25             V_BsNegY:
2376   1F25 3E 00                ld a,0         ;a=direction -1 of Y
2377   1F27 BB                   cp e
2378   1F28 38 02                jr c, V_BsCanSubtrY
2379   1F2A 18 43                jr V_BsSt
2380   1F2C             V_BsCanSubtrY:         
2381   1F2C 7B                   ld a, e
2382   1F2D 3D                   dec a
2383   1F2E             V_BsCanOk2:
2384   1F2E 5F                   ld e,a
2385   1F2F DD 23                inc ix         
2386   1F31                      
2387   1F31 CD C8 13             call StoreSqToMove    ;new SQt,hl        
2388   1F34                      
2389   1F34 3A 02 13             ld a, (SQt)
2390   1F37 47                   ld b,a
2391   1F38 3A 9C 1D             ld a, (SQ_i)
2392   1F3B B8                   cp b
2393   1F3C 28 24                jr z,V_cont_f        ; if piece is on that square then will be empty
2394   1F3E 3A 9D 1D             ld a, (SQ_t)
2395   1F41 B8                   cp b
2396   1F42 28 21                jr z,V_IsThisK       ; if piece goes to that square
2397   1F44                                           ; then if piece is not king then
2398   1F44                                           ; our king is protected                             
2399   1F44 CD AF 18             call IsEmpty
2400   1F47 38 7A                jr c,V_cont       
2401   1F49                      
2402   1F49 3A 81 01             ld a, (SIDE)
2403   1F4C FE 01                cp 1
2404   1F4E 28 77                jr z,V_BsThisBlack
2405   1F50                      
2406   1F50             V_BsThisWhite:         
2407   1F50 CD E4 18             call IsBlack           ; enemy?
2408   1F53 30 60                jr nc,V_NoBlack
2409   1F55                      
2410   1F55 FE 6B                cp 'k'
2411   1F57 20 1B                jr nz, V_NoBK
2412   1F59                      
2413   1F59 3A 9E 1D    V_Sq1:   ld a, (SQ1)            ; nearby square
2414   1F5C FE 01                cp 1
2415   1F5E 20 0F                jr nz,V_BsSt
2416   1F60 18 4F                jr V_dont              ; king or pawn beats
2417   1F62             
2418   1F62 C3 C3 1F    V_cont_f:   jp V_cont
2419   1F65                      
2420   1F65             V_IsThisK:                      ; king can not protect self
2421   1F65 3A 9F 1D             ld a,(SQk)
2422   1F68 47                   ld b,a
2423   1F69 3A 9C 1D             ld a,(SQ_i)
2424   1F6C B8                   cp b
2425   1F6D 28 54                jr z, V_cont           ; our king goes to this direction, continue
2426   1F6F                                             ; stop, our piece protects anyway
2427   1F6F             
2428   1F6F 3E 01       V_BsSt:  ld a,1                 ; stop to this direction, our piece protects king
2429   1F71 C3 0F 20             jp V_BsOver
2430   1F74                       
2431   1F74             V_NoBK:    
2432   1F74 FE 62                cp 'b'
2433   1F76 28 39                jr z, V_dont           ; bishop beats
2434   1F78 FE 71                cp 'q'
2435   1F7A 28 35                jr z, V_dont           ; queen beats
2436   1F7C FE 70                cp 'p'
2437   1F7E 20 EF                jr nz, V_BsSt          ; otherwise knight and cant beat
2438   1F80                      
2439   1F80 3A 9F 1D             ld a,(SQk)
2440   1F83 47                   ld b,a
2441   1F84 3A 9C 1D             ld a,(SQ_i)
2442   1F87 B8                   cp b
2443   1F88 28 1B                jr z, V_KuBp           ; if our king goes under pawn attack?
2444   1F8A                      
2445   1F8A 3A 83 01             ld a,(ENPSQ)
2446   1F8D 47                   ld b,a
2447   1F8E 3A 9D 1D             ld a,(SQ_t)
2448   1F91 B8                   cp b
2449   1F92 28 02                jr z,V_CapBep
2450   1F94 18 0F                jr V_KuBp
2451   1F96                      
2452   1F96             V_CapBep:                       ; do we capture en-passant?
2453   1F96 3A 02 13             ld a,(SQt)
2454   1F99 C6 08                add a,8
2455   1F9B B8                   cp b
2456   1F9C 20 07                jr nz,V_KuBp
2457   1F9E 3A 03 19             ld a,(CaptPiece)       ; we are capturing
2458   1FA1 FE 00                cp 0
2459   1FA3 20 CA                jr nz,V_BsSt           ; this is the pawn that did check+       
2460   1FA5             
2461   1FA5             V_KuBp:         
2462   1FA5 3A 01 13             ld a,(SQi)             ; pawn direction verif. black pawn is above
2463   1FA8 47                   ld b,a
2464   1FA9 3A 02 13             ld a,(SQt)           
2465   1FAC B8                   cp b
2466   1FAD 30 AA                jr nc,V_Sq1
2467   1FAF 18 BE                jr V_BsSt
2468   1FB1             
2469   1FB1 3E 02       V_dont:  ld a,2                 ; stop and not valid move, king in check+
2470   1FB3 18 5A                jr V_BsOver 
2471   1FB5             V_NoBlack:
2472   1FB5 CD C5 18             call IsWhite           ; our?
2473   1FB8 38 B5                jr c,V_BsSt
2474   1FBA 18 07                jr V_cont
2475   1FBC             V_NoWhite:
2476   1FBC CD E4 18             call IsBlack           ; our?
2477   1FBF 38 AE                jr c,V_BsSt
2478   1FC1 18 00                jr V_cont
2479   1FC3             V_cont:         
2480   1FC3 3E 00                ld a,0                 ; continue after to this direction
2481   1FC5 18 48                jr V_BsOver
2482   1FC7                              
2483   1FC7             V_BsThisBlack:         
2484   1FC7 CD C5 18             call IsWhite           ; enemy?
2485   1FCA 30 F0                jr nc, V_NoWhite
2486   1FCC             
2487   1FCC FE 4B                cp 'K'
2488   1FCE 20 02                jr nz, V_NoWK
2489   1FD0 18 87                jr V_Sq1
2490   1FD2             V_NoWK:    
2491   1FD2 FE 42                cp 'B'
2492   1FD4 28 DB                jr z, V_dont           ; bishop beats
2493   1FD6 FE 51                cp 'Q'
2494   1FD8 28 D7                jr z, V_dont           ; queen beats
2495   1FDA FE 50                cp 'P'
2496   1FDC 20 91                jr nz, V_BsSt          ; otherwise knight and cant beat
2497   1FDE                      
2498   1FDE 3A 9F 1D             ld a,(SQk)
2499   1FE1 47                   ld b,a
2500   1FE2 3A 9C 1D             ld a,(SQ_i)
2501   1FE5 B8                   cp b
2502   1FE6 28 1B                jr z, V_KuWp           ; if our king goes under pawn attack?
2503   1FE8                      
2504   1FE8 3A 83 01             ld a,(ENPSQ)
2505   1FEB 47                   ld b,a
2506   1FEC 3A 9D 1D             ld a,(SQ_t)
2507   1FEF B8                   cp b
2508   1FF0 28 02                jr z,V_CapWep
2509   1FF2 18 0F                jr V_KuWp
2510   1FF4                      
2511   1FF4             V_CapWep:                       ; do we capture en-passant?
2512   1FF4 3A 02 13             ld a,(SQt)
2513   1FF7 D6 08                sub 8
2514   1FF9 B8                   cp b
2515   1FFA 20 07                jr nz,V_KuWp
2516   1FFC 3A 03 19             ld a,(CaptPiece)       ; we are capturing
2517   1FFF FE 00                cp 0
2518   2001 20 1B                jr nz,V_BsSt_f         ; this is the pawn that did check+       
2519   2003             
2520   2003             V_KuWp:
2521   2003                      
2522   2003 3A 01 13             ld a,(SQi)             ; pawn direction verif. white pawn is below
2523   2006 47                   ld b,a
2524   2007 3A 02 13             ld a,(SQt)           
2525   200A B8                   cp b
2526   200B 38 0E                jr c,V_Sq1_f
2527   200D 18 0F                jr V_BsSt_f
2528   200F                    
2529   200F             V_BsOver:
2530   200F             
2531   200F F5                   push af
2532   2010 3E 00                ld a,0
2533   2012 32 9E 1D             ld (SQ1),a      ;next square will be not nearby in that direction anyway
2534   2015 F1                   pop af
2535   2016                      
2536   2016 DD E1                pop ix
2537   2018 E1                   pop hl
2538   2019 C1                   pop bc
2539   201A C9                   ret
2540   201B                             
2541   201B C3 59 1F    V_Sq1_f:    jp V_Sq1
2542   201E C3 6F 1F    V_BsSt_f:   jp V_BsSt
2543   2021             
2544   2021             ; look for horizontal-vertical-attacks to that direction
2545   2021             HorzVertAttacks:
2546   2021             
2547   2021 C5                   push bc
2548   2022 E5                   push hl
2549   2023 DD E5                push ix
2550   2025                               
2551   2025 DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,=0
2552   2028 DD 23                inc ix
2553   202A FE 3D                cp '='
2554   202C 28 16                jr z, V_RkZero1
2555   202E FE 2D                cp '-'
2556   2030 28 08                jr z, V_RkNegX      
2557   2032 7A                   ld a,d
2558   2033 3C                   inc a           ;a=direction +1 of X 
2559   2034 FE 08                cp 8
2560   2036 30 66                jr nc, V_RkSt
2561   2038 18 09                jr V_RkCanOk1  
2562   203A             V_RkNegX:
2563   203A 3E 00                ld a,0          ;a=direction -1 of X
2564   203C BA                   cp d
2565   203D 38 02                jr c, V_RkCanSubtrX
2566   203F 18 5D                jr V_RkSt
2567   2041             V_RkCanSubtrX:         
2568   2041 7A                   ld a,d
2569   2042 3D                   dec a 
2570   2043             V_RkCanOk1:
2571   2043 57                   ld d,a         
2572   2044             V_RkZero1:
2573   2044 DD 23                inc ix 
2574   2046 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,=0
2575   2049 DD 23                inc ix
2576   204B FE 3D                cp '='
2577   204D 28 16                jr z, V_RkZero2        
2578   204F FE 2D                cp '-'
2579   2051 28 08                jr z, V_RkNegY
2580   2053 7B                   ld a,e
2581   2054 3C                   inc a          ;a=direction +1 of Y  
2582   2055 FE 08                cp 8
2583   2057 30 45                jr nc, V_RkSt
2584   2059 18 09                jr V_RkCanOk2   
2585   205B             V_RkNegY:
2586   205B 3E 00                ld a,0         ;a=direction -1 of Y
2587   205D BB                   cp e
2588   205E 38 02                jr c, V_RkCanSubtrY
2589   2060 18 3C                jr V_RkSt
2590   2062             V_RkCanSubtrY:         
2591   2062 7B                   ld a, e
2592   2063 3D                   dec a
2593   2064             V_RkCanOk2:
2594   2064 5F                   ld e,a
2595   2065             V_RkZero2:
2596   2065 DD 23                inc ix         
2597   2067                      
2598   2067 CD C8 13             call StoreSqToMove    ;new SQt,hl
2599   206A                             
2600   206A 3A 02 13             ld a, (SQt)
2601   206D 47                   ld b,a
2602   206E 3A 9C 1D             ld a, (SQ_i)
2603   2071 B8                   cp b
2604   2072 28 26                jr z,V_Rkcont           ; if piece is on that square then will be empty
2605   2074 3A 9D 1D             ld a, (SQ_t)
2606   2077 B8                   cp b
2607   2078 28 28                jr z,V_RkIsThisK       ; if piece goes to that square
2608   207A                                             ; then if piece is not king then
2609   207A                                             ; our king is protected
2610   207A CD AF 18             call IsEmpty
2611   207D 38 1B                jr c,V_Rkcont
2612   207F                      
2613   207F 3A 81 01             ld a, (SIDE)
2614   2082 FE 01                cp 1
2615   2084 28 40                jr z,V_RkThisBlack
2616   2086                      
2617   2086             V_RkThisWhite:         
2618   2086 CD E4 18             call IsBlack           ; enemy?
2619   2089 30 2D                jr nc,V_RkNoBlack
2620   208B                      
2621   208B FE 6B                cp 'k'
2622   208D 20 1F                jr nz, V_RkNoBK
2623   208F                      
2624   208F 3A 9E 1D    V_RkSq1: ld a, (SQ1)            ; nearby square
2625   2092 FE 01                cp 1
2626   2094 20 08                jr nz,V_RkSt
2627   2096                      ;otherwise king beats our king
2628   2096                      
2629   2096             V_Rkdont:
2630   2096 3E 02                ld a,2                 ; stop and not valid move, king in check+
2631   2098 18 41                jr V_RkOver
2632   209A             V_Rkcont:         
2633   209A 3E 00                ld a,0                 ; continue after to this direction
2634   209C 18 3D                jr V_RkOver
2635   209E                      
2636   209E 3E 01       V_RkSt:  ld a,1                 ; stop to this direction, our piece protects king
2637   20A0 18 39                jr V_RkOver
2638   20A2                                
2639   20A2             V_RkIsThisK:                    ; king can not protect itself
2640   20A2 3A 9F 1D             ld a,(SQk)
2641   20A5 47                   ld b,a
2642   20A6 3A 9C 1D             ld a,(SQ_i)
2643   20A9 B8                   cp b
2644   20AA 28 EE                jr z, V_Rkcont         ; our king goes to this direction, continue
2645   20AC                                             ; stop, our piece protects anyway
2646   20AC 18 F0                jr V_RkSt                       
2647   20AE                       
2648   20AE             V_RkNoBK:    
2649   20AE FE 72                cp 'r'
2650   20B0 28 E4                jr z, V_Rkdont           ; rook beats
2651   20B2 FE 71                cp 'q'
2652   20B4 28 E0                jr z, V_Rkdont           ; queen beats
2653   20B6 18 E6                jr V_RkSt                ; otherwise can not beat
2654   20B8             V_RkNoBlack:
2655   20B8 CD C5 18             call IsWhite           ; our?
2656   20BB 38 E1                jr c,V_RkSt
2657   20BD 18 DB                jr V_Rkcont
2658   20BF             V_RkNoWhite:
2659   20BF CD E4 18             call IsBlack           ; our?
2660   20C2 38 DA                jr c,V_RkSt
2661   20C4 18 D4                jr V_Rkcont                 
2662   20C6             V_RkThisBlack:         
2663   20C6 CD C5 18             call IsWhite           ; enemy?
2664   20C9 30 F4                jr nc,V_RkNoWhite
2665   20CB             
2666   20CB FE 4B                cp 'K'
2667   20CD 20 02                jr nz, V_RkNoWK
2668   20CF 18 BE                jr V_RkSq1
2669   20D1             V_RkNoWK:    
2670   20D1 FE 52                cp 'R'
2671   20D3 28 C1                jr z, V_Rkdont           ; rook beats
2672   20D5 FE 51                cp 'Q'
2673   20D7 28 BD                jr z, V_Rkdont           ; queen beats
2674   20D9 18 C3                jr V_RkSt                ; otherwise can not beat  
2675   20DB             
2676   20DB             V_RkOver:
2677   20DB F5                   push af
2678   20DC 3E 00                ld a,0
2679   20DE 32 9E 1D             ld (SQ1),a      ;next square will be not nearby in that direction anyway
2680   20E1 F1                   pop af
2681   20E2                      
2682   20E2 DD E1                pop ix
2683   20E4 E1                   pop hl
2684   20E5 C1                   pop bc
2685   20E6 C9                   ret 
2686   20E7             
2687   20E7             ; look for knight-attack
2688   20E7             KnightAttacks:
2689   20E7 C5                   push bc
2690   20E8 D5                   push de
2691   20E9 E5                   push hl
2692   20EA DD E5                push ix
2693   20EC                              
2694   20EC DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,-2,+2
2695   20EF DD 23                inc ix
2696   20F1 FE 2D                cp '-'
2697   20F3 28 0A                jr z, V_KnNegX
2698   20F5 DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of X      
2699   20F8 82                   add a,d
2700   20F9 FE 08                cp 8
2701   20FB 30 62                jr nc, V_KnNo
2702   20FD 18 0D                jr V_KnCanOk1  
2703   20FF             V_KnNegX:
2704   20FF DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of X
2705   2102 3D                   dec a
2706   2103 BA                   cp d
2707   2104 38 02                jr c, V_KnCanSubtrX
2708   2106 18 57                jr V_KnNo
2709   2108             V_KnCanSubtrX:         
2710   2108 7A                   ld a, d
2711   2109 DD 96 00             sub (ix)    
2712   210C             V_KnCanOk1:
2713   210C 57                   ld d,a         
2714   210D DD 23                inc ix
2715   210F                      
2716   210F DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,-2,+2
2717   2112 DD 23                inc ix
2718   2114 FE 2D                cp '-'
2719   2116 28 0A                jr z, V_KnNegY
2720   2118 DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of Y  
2721   211B 83                   add a,e
2722   211C FE 08                cp 8
2723   211E 30 3F                jr nc, V_KnNo
2724   2120 18 0D                jr V_KnCanOk2   
2725   2122             V_KnNegY:
2726   2122 DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of Y
2727   2125 3D                   dec a 
2728   2126 BB                   cp e
2729   2127 38 02                jr c, V_KnCanSubtrY
2730   2129 18 34                jr V_KnNo
2731   212B             V_KnCanSubtrY:         
2732   212B 7B                   ld a, e
2733   212C DD 96 00             sub (ix)
2734   212F             V_KnCanOk2:
2735   212F 5F                   ld e, a
2736   2130 DD 23                inc ix         
2737   2132                      
2738   2132 CD C8 13             call StoreSqToMove    ;new SQt,hl
2739   2135                             
2740   2135 CD AF 18             call IsEmpty
2741   2138 38 25                jr c,V_KnNo
2742   213A                      
2743   213A 3A 02 13             ld a, (SQt)
2744   213D 47                   ld b,a
2745   213E 3A 9D 1D             ld a, (SQ_t)
2746   2141 B8                   cp b
2747   2142 20 02                jr nz, V_KnIsKn
2748   2144 18 19                jr V_KnNo              ; we beat this piece
2749   2146             
2750   2146             V_KnIsKn:         
2751   2146 3A 81 01             ld a, (SIDE)
2752   2149 FE 01                cp 1
2753   214B 28 07                jr z, V_KnThisKingBlack
2754   214D             V_KnThisKingWhite:         
2755   214D 7E                   ld a,(hl)
2756   214E FE 6E                cp 'n'                 ; knight?
2757   2150 28 09                jr z,V_Kndont
2758   2152 18 0B                jr V_KnNo              ; otherwise our
2759   2154             V_KnThisKingBlack:         
2760   2154 7E                   ld a,(hl)
2761   2155 FE 4E                cp 'N'                 ; knight?
2762   2157 28 02                jr z,V_Kndont
2763   2159 18 04                jr V_KnNo              ; otherwise our    
2764   215B             V_Kndont:
2765   215B 3E 02                ld a,2                 ; not valid move, king in check+
2766   215D 18 02                jr V_KnOver
2767   215F             V_KnNo:         
2768   215F 3E 00                ld a,0                 ; not attacked
2769   2161             V_KnOver:
2770   2161 DD E1                pop ix
2771   2163 E1                   pop hl
2772   2164 D1                   pop de
2773   2165 C1                   pop bc
2774   2166 C9                   ret 
2775   2167             ;END
2776   2167             
2777   2167             
2778   2167             ;BEGIN of ========== MAKE MOVE
2779   2167             ;
2780   2167             ; Make move on BOARD
2781   2167             ; SQi - from square
2782   2167             ; SQt - to square
2783   2167             ; PromoPcId - id of piece to promote = 4-queen,3-rook,2-bishop,1-knight, 0-no promotion
2784   2167             ;
2785   2167             
2786   2167             MakeMove:
2787   2167             
2788   2167 F5                   push af
2789   2168 C5                   push bc
2790   2169 D5                   push de
2791   216A E5                   push hl
2792   216B DD E5                push ix
2793   216D FD E5                push iy
2794   216F                      
2795   216F DD 21 86 01          ld ix, NEXT_MVCNT
2796   2173 DD 46 00             ld b,(ix)
2797   2176 DD 21 87 01          ld ix, NEXT_MOVES
2798   217A 78                   ld a, b
2799   217B FE 00                cp 0
2800   217D 20 02                jr nz, MKMthereAre
2801   217F             
2802   217F 18 75                jr fMKMEnd
2803   2181                      
2804   2181             MKMthereAre: 
2805   2181 1E 00                ld e,0       ; flag that found
2806   2183             
2807   2183             MKMToLoop:
2808   2183 C5                   push bc
2809   2184 DD E5                push ix
2810   2186             
2811   2186 DD 7E 00             ld a, (ix)   ; notated piece
2812   2189 57                   ld d,a
2813   218A DD 23                inc ix
2814   218C             
2815   218C 3A 01 13             ld a, (SQi)
2816   218F 47                   ld b,a
2817   2190 DD 7E 00             ld a, (ix)   ; from square
2818   2193 B8                   cp b
2819   2194 20 7B                jr nz, MKMnotMV
2820   2196                      
2821   2196 DD 23                inc ix            
2822   2198 3A 02 13             ld a, (SQt)
2823   219B 4F                   ld c,a
2824   219C DD 7E 00             ld a, (ix)   ; to square
2825   219F B9                   cp c
2826   21A0 20 6F                jr nz, MKMnotMV
2827   21A2                      
2828   21A2 CD 3F 22             call MKifPromoTheSame ; verifies if promoted piece the same in list
2829   21A5 FE 01                cp 1                  ; actually we can ignore it, because undo just places
2830   21A7 20 68                jr nz, MKMnotMV      ; back a pawn
2831   21A9                      
2832   21A9                      ; ok, this move. Let's do it
2833   21A9                      
2834   21A9 CD 67 22             call MKMcastlesDO   ; saves castling flags and verifies rooks
2835   21AC                                                  
2836   21AC CD 50 23             call MKMsaveEPSQ
2837   21AF                      
2838   21AF DD 2B                dec ix         
2839   21B1 DD 7E 00             ld a, (ix)   ; from square
2840   21B4 CD 31 22             call MM_hl
2841   21B7 7E                   ld a,(hl)
2842   21B8 57                   ld d,a       ; save piece
2843   21B9                      
2844   21B9 CD DD 22             call UpdateKingSQ   ; and castling flags too
2845   21BC                               
2846   21BC CD 3B 22             call MM_0    ; empty square now
2847   21BF                      
2848   21BF DD 23                inc ix
2849   21C1 DD 7E 00             ld a, (ix)   ; to square
2850   21C4 CD 31 22             call MM_hl
2851   21C7                      
2852   21C7 D5                   push de
2853   21C8 56                   ld d,(hl)    ; save captured piece
2854   21C9                      
2855   21C9 7E                   ld a,(hl)
2856   21CA FE 00                cp 0
2857   21CC 28 03                jr z, MM_noCapture  ;en-passant is not in list
2858   21CE                      
2859   21CE CD 7A 23             call MM_capt2list   ;should save last captured piece in list   
2860   21D1                      
2861   21D1             MM_noCapture:         
2862   21D1                      
2863   21D1 D1                   pop de       ; restore our piece
2864   21D2                      
2865   21D2 7A                   ld a,d
2866   21D3 77                   ld (hl),a    ; just place our piece here
2867   21D4                               
2868   21D4 DD 23                inc ix
2869   21D6 DD 7E 00             ld a, (ix)     ; flags
2870   21D9 CB 67                bit 4,a        ; castling
2871   21DB 28 03                jr z,MMNoCastle
2872   21DD                      
2873   21DD CD 8E 23             call  MMcastles          
2874   21E0                                         
2875   21E0             MMNoCastle:
2876   21E0 DD 7E 00             ld a, (ix)     ; flags    
2877   21E3 CB 4F                bit 1,a        ; possibly promotion
2878   21E5 28 03                jr z, MMNoProm
2879   21E7                      
2880   21E7 CD EA 23             call MMPromotion ; put new piece on board         
2881   21EA             MMNoProm:
2882   21EA DD 7E 00             ld a, (ix)     ; flags
2883   21ED CB 6F                bit 5,a        ; en-passant 
2884   21EF 28 09                jr z,MMNoEP
2885   21F1             
2886   21F1 CD 1B 24             call MMEnPass  ; en-passant capture
2887   21F4 18 04                jr MMNoEP                                          
2888   21F6             
2889   21F6 18 2B       fMKMEnd: jr MKMEnd
2890   21F8             
2891   21F8 18 89       fMKMToLoop: jr MKMToLoop      ; jump far                                            
2892   21FA                                                                                                                                                    
2893   21FA             MMNoEP:                                         
2894   21FA 1E 01                ld e,1         ; we found already
2895   21FC                              
2896   21FC CD CA 22             call Swap_Sides   ; Swap
2897   21FF CD 2E 1D             call IsCheck
2898   2202 FE 00                cp 0
2899   2204 28 08                jr z, MKMnoCheck
2900   2206                      
2901   2206 DD 7E 00             ld a, (ix)     ; flags
2902   2209 CB F7                set 6,a        ; bit 6 - check
2903   220B DD 77 00             ld (ix),a      ; save to flags
2904   220E             MKMnoCheck:         
2905   220E                      
2906   220E CD 77 22             call MKMsave2Hist ; Save history
2907   2211             MKMnotMV:
2908   2211 DD E1                pop ix
2909   2213                      
2910   2213 DD 23                inc ix        ; piece
2911   2215 DD 23                inc ix        ; from
2912   2217 DD 23                inc ix        ; to
2913   2219 DD 23                inc ix        ; flags
2914   221B             
2915   221B C1                   pop bc
2916   221C                      
2917   221C 7B                   ld a,e
2918   221D FE 01                cp 1
2919   221F 28 02                jr z, MKMEnd
2920   2221 10 D5                djnz fMKMToLoop
2921   2223             
2922   2223             MKMEnd:
2923   2223             
2924   2223 7B                   ld a,e
2925   2224 FE 00                cp 0
2926   2226 20 00                jr nz, MKMfoundmove
2927   2228             MKMfoundmove:
2928   2228 FD E1                pop iy                                                                                                   
2929   222A DD E1                pop ix
2930   222C E1                   pop hl
2931   222D D1                   pop de
2932   222E C1                   pop bc
2933   222F F1                   pop af
2934   2230 C9                   ret
2935   2231                      
2936   2231             MM_hl:                        ; reposition of hl to square provided in a-reg
2937   2231 C5                   push bc
2938   2232 06 00                ld b,0
2939   2234 4F                   ld c,a
2940   2235 21 40 01             ld hl, BOARD
2941   2238 09                   add hl,bc            ; points to piece to move
2942   2239 C1                   pop bc
2943   223A C9                   ret
2944   223B             
2945   223B 3E 00       MM_0:    ld a,0               ; empty square now 
2946   223D 77                   ld (hl),a 
2947   223E C9                   ret
2948   223F             
2949   223F             ; verifies promoted piece
2950   223F             MKifPromoTheSame:
2951   223F C5                   push bc
2952   2240 3A 04 19             ld a, (PromoPcId)
2953   2243 FE 00                cp 0
2954   2245 28 1C                jr z, MKsamePromo
2955   2247 3D                   dec a
2956   2248 47                   ld b,a
2957   2249 DD 23                inc ix
2958   224B DD 7E 00             ld a, (ix)       ; flags
2959   224E 4F                   ld c,a
2960   224F DD 2B                dec ix
2961   2251 CB 4F                bit 1,a
2962   2253 28 0E                jr z, MKsamePromo
2963   2255 79                   ld a,c
2964   2256 CB 3F                srl a
2965   2258 CB 3F                srl a
2966   225A E6 03                and 3
2967   225C B8                   cp b
2968   225D 28 04                jr z, MKsamePromo
2969   225F 3E 00                ld a,0
2970   2261 18 02                jr MKsamePover                           
2971   2263             MKsamePromo:
2972   2263 3E 01                ld a,1
2973   2265             MKsamePover:
2974   2265 C1                   pop bc
2975   2266 C9                   ret
2976   2267             
2977   2267             ; works on castling flags          
2978   2267             MKMcastlesDO:
2979   2267 F5                   push af
2980   2268 3A 82 01             ld a,(CASTLES)
2981   226B 32 79 23             ld (Cstl2hist),a   ; save for history
2982   226E FE 00                cp 0
2983   2270 28 03                jr z,MKMNoRvf
2984   2272 CD 0F 23             call MKMUpdateRookMvCapt
2985   2275             MKMNoRvf:
2986   2275 F1                   pop af         
2987   2276 C9                   ret
2988   2277             
2989   2277             ; Saves move into history of moves made
2990   2277             MKMsave2Hist:
2991   2277 E5                   push hl
2992   2278 C5                   push bc
2993   2279 06 00                ld b,0
2994   227B 3A 67 03             ld a,(MOVE_CNT)
2995   227E 4F                   ld c,a
2996   227F 3C                   inc a
2997   2280 32 67 03             ld (MOVE_CNT),a
2998   2283 21 68 03             ld hl, MOVE_HIST
2999   2286                      
3000   2286 FE 3C                cp 60
3001   2288 38 07                jr c,slowBcAdd1     
3002   228A CB 21                sla c
3003   228C CB 21                sla c      ; 4*c
3004   228E                       ;1.byte = from sq
3005   228E                       ;2.byte = to sq
3006   228E                       ;3.byte = flags and promoted to
3007   228E                       ;4.byte = castling flags, en-passant square before
3008   228E 09                   add hl,bc
3009   228F 18 04                jr overBcAdd1         
3010   2291             slowBcAdd1:         
3011   2291 09                   add hl,bc
3012   2292 09                   add hl,bc
3013   2293 09                   add hl,bc
3014   2294 09                   add hl,bc
3015   2295             overBcAdd1:         
3016   2295                      
3017   2295                               
3018   2295 3A 01 13             ld a,(SQi)
3019   2298 77                   ld (hl),a  ; from
3020   2299 23                   inc hl
3021   229A 3A 02 13             ld a,(SQt) ; to
3022   229D 77                   ld (hl),a
3023   229E 23                   inc hl
3024   229F DD 7E 00             ld a, (ix) ; flags with piece promoted
3025   22A2 77                   ld (hl),a  ;
3026   22A3 23                   inc hl
3027   22A4 3A 78 23             ld a,(EnPs2hist)
3028   22A7 FE FF                cp $ff
3029   22A9 28 0C                jr z,EnP0hs
3030   22AB FE 20                cp 32
3031   22AD 30 04                jr nc,EnPBlackHs
3032   22AF D6 0F                sub 15    ;a3=1...h3=8
3033   22B1 18 06                jr EnPSvhs 
3034   22B3             EnPBlackHs:
3035   22B3 D6 1F                sub 31    ;a6=9...h6=16
3036   22B5 18 02                jr EnPSvhs
3037   22B7 3E 00       EnP0hs:  ld a,0
3038   22B9 47          EnPSvhs: ld b,a
3039   22BA 3A 79 23             ld a,(Cstl2hist)
3040   22BD CB 27                sla a           ; 4 shifts
3041   22BF CB 27                sla a
3042   22C1 CB 27                sla a
3043   22C3 CB 27                sla a
3044   22C5 B0                   or b
3045   22C6 77                   ld (hl),a  ; save en-passant square and castling info that was before
3046   22C7 C1                   pop bc
3047   22C8 E1                   pop hl
3048   22C9 C9                   ret
3049   22CA             
3050   22CA             ; Just swap both sides
3051   22CA             Swap_Sides:
3052   22CA F5                   push af
3053   22CB 3A 81 01             ld a,(SIDE)       ; swap sides
3054   22CE FE 00                cp 0
3055   22D0 28 04                jr z,SwSdBl
3056   22D2 3E 00                ld a,0
3057   22D4 18 02                jr SwSdSt
3058   22D6 3E 01       SwSdBl:  ld a,1
3059   22D8 32 81 01    SwSdSt:  ld (SIDE),a
3060   22DB F1                   pop af
3061   22DC C9                   ret
3062   22DD                      
3063   22DD             ; save king square         
3064   22DD             UpdateKingSQ:
3065   22DD 7A                   ld a,d
3066   22DE FE 4B                cp 'K'
3067   22E0 20 16                jr nz,MKMnoWK1
3068   22E2 79                   ld a,c
3069   22E3 32 84 01             ld (WKSQ),a
3070   22E6 FE 04                cp 4
3071   22E8 28 0C                jr z,KingStillE1
3072   22EA F5                   push af
3073   22EB 3A 82 01             ld a,(CASTLES)
3074   22EE E6 FC                and %11111100
3075   22F0 32 82 01             ld (CASTLES),a
3076   22F3 F1                   pop af         
3077   22F4 18 18                jr MKMkingOut         
3078   22F6             KingStillE1:         
3079   22F6 18 16                jr MKMkingOut         
3080   22F8             MKMnoWK1:          
3081   22F8 FE 6B                cp 'k'
3082   22FA 20 12                jr nz,MKMkingOut
3083   22FC 79                   ld a,c
3084   22FD 32 85 01             ld (BKSQ),a
3085   2300 FE 3C                cp 60
3086   2302 28 0A                jr z,KingStillE8
3087   2304 F5                   push af
3088   2305 3A 82 01             ld a,(CASTLES)
3089   2308 E6 F3                and %11110011
3090   230A 32 82 01             ld (CASTLES),a         
3091   230D F1                   pop af
3092   230E             KingStillE8:         
3093   230E                      
3094   230E             MKMkingOut:
3095   230E C9                   ret
3096   230F             
3097   230F             ; if rook has moved or has been captured, clear and save castling flags
3098   230F             MKMUpdateRookMvCapt:
3099   230F D5                   push de
3100   2310 3A 82 01             ld a,(CASTLES)
3101   2313 57                   ld d,a
3102   2314 78                   ld a,b        ;from
3103   2315 CD 34 23             call MKMiWKK
3104   2318 CD 3B 23             call MKMiWKQ
3105   231B CD 42 23             call MKMiBKK
3106   231E CD 49 23             call MKMiBKQ
3107   2321 79                   ld a,c        ;to
3108   2322 CD 34 23             call MKMiWKK
3109   2325 CD 3B 23             call MKMiWKQ
3110   2328 CD 42 23             call MKMiBKK
3111   232B CD 49 23             call MKMiBKQ
3112   232E 7A                   ld a,d
3113   232F 32 82 01             ld (CASTLES),a
3114   2332 D1                   pop de
3115   2333 C9                   ret
3116   2334                      
3117   2334 FE 07       MKMiWKK: cp 7          ; is H1?
3118   2336 20 02                jr nz,MKMoWKK
3119   2338 CB 82                res 0,d       
3120   233A C9          MKMoWKK: ret
3121   233B FE 00       MKMiWKQ: cp 0          ; is A1?
3122   233D 20 02                jr nz,MKMoWKQ
3123   233F CB 8A                res 1,d       
3124   2341 C9          MKMoWKQ: ret
3125   2342 FE 3F       MKMiBKK: cp 63         ; is H8?
3126   2344 20 02                jr nz,MKMoBKK
3127   2346 CB 92                res 2,d       
3128   2348 C9          MKMoBKK: ret
3129   2349 FE 38       MKMiBKQ: cp 56         ; is A8?
3130   234B 20 02                jr nz,MKMoBKQ
3131   234D CB 9A                res 3,d       
3132   234F C9          MKMoBKQ: ret
3133   2350             
3134   2350                       
3135   2350             
3136   2350                               
3137   2350             ; save new en-passant square
3138   2350             MKMsaveEPSQ:
3139   2350 3A 83 01             ld a,(ENPSQ)
3140   2353 32 78 23             ld (EnPs2hist),a   ; save for history
3141   2356 3E FF                ld a,$ff
3142   2358 32 83 01             ld (ENPSQ),a
3143   235B 7A                   ld a,d
3144   235C FE 50                cp 'P'
3145   235E 20 17                jr nz, MKMnoeps
3146   2360 79                   ld a,c
3147   2361 D6 10                sub 16           ; are there 16 squares inbetween
3148   2363 B8                   cp b
3149   2364 28 08                jr z, MKMwEp     ; double move of white pawn
3150   2366                      ; try for black pawn
3151   2366 79                   ld a,c
3152   2367 C6 10                add a,16
3153   2369 B8                   cp b
3154   236A 28 06                jr z, MKMbEp      ; double move of black pawn 
3155   236C 18 09                jr MKMnoeps
3156   236E C6 08       MKMwEp:  add a,8
3157   2370 18 02                jr MKMsaveNewEp
3158   2372 D6 08       MKMbEp:  sub 8
3159   2374             MKMsaveNewEp:
3160   2374 32 83 01             ld (ENPSQ),a
3161   2377             MKMnoeps:
3162   2377 C9                   ret                                    
3163   2378             
3164   2378 00          EnPs2hist: .byte 0        ; to save en-passant square for history later
3165   2379             
3166   2379 00          Cstl2hist: .byte 0        ; to save castling flags for history later
3167   237A                                                                             
3168   237A             ; saves captured piece in list         
3169   237A             MM_capt2list:                      
3170   237A E5                   push hl
3171   237B 21 35 24             ld hl, UnMakeList
3172   237E             MKMloop1:         
3173   237E 7E                   ld a,(hl)
3174   237F FE 20                cp ' '
3175   2381 28 07                jr z,MKMblankL1
3176   2383 FE 00                cp 0
3177   2385 28 03                jr z,MKMblankL1
3178   2387 23                   inc hl
3179   2388 18 F4                jr MKMloop1
3180   238A             MKMblankL1:
3181   238A 7A                   ld a,d
3182   238B 77                   ld (hl),a       ; should save for next UnMakeMove      
3183   238C E1                   pop hl
3184   238D C9                   ret
3185   238E                      
3186   238E             ; castling moves, should move rook too                 
3187   238E             MMcastles:
3188   238E E5                   push hl
3189   238F 79                   ld a,c
3190   2390 FE 06                cp 6         ; g1?
3191   2392 20 12                jr nz,MMNoG1
3192   2394 3E 07                ld a, 7      ; rook on h1
3193   2396 CD 31 22             call MM_hl
3194   2399 CD 3B 22             call MM_0    ; empty square now
3195   239C 3E 05                ld a, 5      ; f1
3196   239E CD 31 22             call MM_hl
3197   23A1 3E 52                ld a,'R'
3198   23A3 77                   ld (hl),a
3199   23A4 18 42                jr MMoverC         
3200   23A6             MMNoG1:
3201   23A6 FE 02                cp 2         ; c1?
3202   23A8 20 12                jr nz,MMNoC1
3203   23AA 3E 00                ld a, 0      ; rook on a1
3204   23AC CD 31 22             call MM_hl
3205   23AF CD 3B 22             call MM_0    ; empty square now
3206   23B2 3E 03                ld a, 3      ; d1
3207   23B4 CD 31 22             call MM_hl
3208   23B7 3E 52                ld a,'R'
3209   23B9 77                   ld (hl),a
3210   23BA 18 2C                jr MMoverC
3211   23BC             MMNoC1:
3212   23BC FE 3E                cp 62        ; g8?
3213   23BE 20 12                jr nz,MMNoG8
3214   23C0 3E 3F                ld a, 63     ; rook on h8
3215   23C2 CD 31 22             call MM_hl
3216   23C5 CD 3B 22             call MM_0    ; empty square now
3217   23C8 3E 3D                ld a, 61     ; f8
3218   23CA CD 31 22             call MM_hl
3219   23CD 3E 72                ld a,'r'
3220   23CF 77                   ld (hl),a
3221   23D0 18 16                jr MMoverC
3222   23D2             MMNoG8:
3223   23D2 FE 3A                cp 58        ; c8?
3224   23D4 20 12                jr nz,MMoverC
3225   23D6 3E 38                ld a, 56     ; rook on a8
3226   23D8 CD 31 22             call MM_hl
3227   23DB CD 3B 22             call MM_0    ; empty square now
3228   23DE 3E 3B                ld a, 59     ; d8
3229   23E0 CD 31 22             call MM_hl
3230   23E3 3E 72                ld a,'r'
3231   23E5 77                   ld (hl),a
3232   23E6 18 00                jr MMoverC
3233   23E8 E1          MMoverC: pop hl
3234   23E9 C9                   ret
3235   23EA             
3236   23EA             ; promoted pieces
3237   23EA             MMPromotion:
3238   23EA                      ; which piece?
3239   23EA 3A 04 19             ld a, (PromoPcId)
3240   23ED FE 04                cp 4          ; Queen?
3241   23EF 20 04                jr nz, MMNoQ
3242   23F1 3E 51                ld a, 'Q'
3243   23F3 18 1A                jr MMPcPut        
3244   23F5 FE 03       MMNoQ:   cp 3          ; Rook?
3245   23F7 20 04                jr nz, MMNoR
3246   23F9 3E 52                ld a, 'R'
3247   23FB 18 12                jr MMPcPut        
3248   23FD FE 02       MMNoR:   cp 2          ; Bishop?
3249   23FF 20 04                jr nz, MMNoB
3250   2401 3E 42                ld a, 'B'
3251   2403 18 0A                jr MMPcPut
3252   2405 FE 01       MMNoB:   cp 1          ; Knight?  
3253   2407 20 04                jr nz, MMNoN
3254   2409 3E 4E                ld a, 'N'
3255   240B 18 02                jr MMPcPut
3256   240D 3E 51       MMNoN:   ld a, 'Q'     ; actually, should provide 3
3257   240F             
3258   240F             MMPcPut:
3259   240F 4F                   ld c,a        ; save
3260   2410 7A                   ld a,d
3261   2411 FE 50                cp 'P'
3262   2413 28 04                jr z,MMPcWProm
3263   2415 3E 20                ld a,32
3264   2417 81                   add a,c
3265   2418 4F                   ld c,a        ; to lowercase
3266   2419             MMPcWProm:
3267   2419 71                   ld (hl),c
3268   241A C9                   ret
3269   241B                      
3270   241B             ; en-passant capture         
3271   241B             MMEnPass:
3272   241B E5                   push hl
3273   241C 7A                   ld a,d
3274   241D FE 50                cp 'P'
3275   241F 20 07                jr nz,MMPcBEnp         
3276   2421 3A 02 13             ld a,(SQt)
3277   2424 D6 08                sub 8
3278   2426 18 05                jr MMEnp1
3279   2428             MMPcBEnp:
3280   2428 3A 02 13             ld a,(SQt)
3281   242B C6 08                add a,8
3282   242D CD 31 22    MMEnp1:  call MM_hl
3283   2430 CD 3B 22             call MM_0    ; empty square now
3284   2433 E1                   pop hl
3285   2434 C9                   ret
3286   2435             ;END
3287   2435             
3288   2435             ;BEGIN of ========== UNMAKE MOVE
3289   2435             ;
3290   2435             ; UnMake move on BOARD (undo)
3291   2435             ; uses own history recordings in MOVE_HIST
3292   2435             ; which sets
3293   2435             ;  SQi - from square
3294   2435             ;  SQt - to square
3295   2435             ;   +also uses flags from history
3296   2435             
3297   2435                          ; we keep list of captured pieces to unmake later as stack
3298   2435             UnMakeList:
3299   2435 20 20 20 20          .byte "                                                                  "
3299   2439 20 20 20 20 
3299   243D 20 20 20 20 
3299   2441 20 20 20 20 
3299   2445 20 20 20 20 
3299   2449 20 20 20 20 
3299   244D 20 20 20 20 
3299   2451 20 20 20 20 
3299   2455 20 20 20 20 
3299   2459 20 20 20 20 
3299   245D 20 20 20 20 
3299   2461 20 20 20 20 
3299   2465 20 20 20 20 
3299   2469 20 20 20 20 
3299   246D 20 20 20 20 
3299   2471 20 20 20 20 
3299   2475 20 20 
3300   2477 20 20 20 20          .byte "                                                                  "
3300   247B 20 20 20 20 
3300   247F 20 20 20 20 
3300   2483 20 20 20 20 
3300   2487 20 20 20 20 
3300   248B 20 20 20 20 
3300   248F 20 20 20 20 
3300   2493 20 20 20 20 
3300   2497 20 20 20 20 
3300   249B 20 20 20 20 
3300   249F 20 20 20 20 
3300   24A3 20 20 20 20 
3300   24A7 20 20 20 20 
3300   24AB 20 20 20 20 
3300   24AF 20 20 20 20 
3300   24B3 20 20 20 20 
3300   24B7 20 20 
3301   24B9 20 20 20 20          .byte "                                                                  "
3301   24BD 20 20 20 20 
3301   24C1 20 20 20 20 
3301   24C5 20 20 20 20 
3301   24C9 20 20 20 20 
3301   24CD 20 20 20 20 
3301   24D1 20 20 20 20 
3301   24D5 20 20 20 20 
3301   24D9 20 20 20 20 
3301   24DD 20 20 20 20 
3301   24E1 20 20 20 20 
3301   24E5 20 20 20 20 
3301   24E9 20 20 20 20 
3301   24ED 20 20 20 20 
3301   24F1 20 20 20 20 
3301   24F5 20 20 20 20 
3301   24F9 20 20 
3302   24FB 20 20 20 20          .byte "                                                                  "
3302   24FF 20 20 20 20 
3302   2503 20 20 20 20 
3302   2507 20 20 20 20 
3302   250B 20 20 20 20 
3302   250F 20 20 20 20 
3302   2513 20 20 20 20 
3302   2517 20 20 20 20 
3302   251B 20 20 20 20 
3302   251F 20 20 20 20 
3302   2523 20 20 20 20 
3302   2527 20 20 20 20 
3302   252B 20 20 20 20 
3302   252F 20 20 20 20 
3302   2533 20 20 20 20 
3302   2537 20 20 20 20 
3302   253B 20 20 
3303   253D 00          flag_ix:       .byte 0      ; temporary flag of move made
3304   253E                     
3305   253E             UnMakeMove:
3306   253E F5                   push af
3307   253F C5                   push bc
3308   2540 D5                   push de
3309   2541 E5                   push hl
3310   2542 DD E5                push ix
3311   2544 FD E5                push iy
3312   2546                      
3313   2546 CD A1 25             call UnMKrestoreFromHist       ; Restores from history
3314   2549                            
3315   2549 3A 01 13             ld a, (SQi)   ; from square
3316   254C 47                   ld b,a
3317   254D                                
3318   254D 3A 02 13             ld a, (SQt)   ; to square
3319   2550 4F                   ld c,a
3320   2551                              
3321   2551                      ; Let's undo it
3322   2551 CD CA 22             call Swap_Sides   ; Swap sides
3323   2554                      
3324   2554 CD 31 22             call MM_hl
3325   2557 56                   ld d,(hl)
3326   2558 CD 3B 22             call MM_0      ; empty square now
3327   255B                               
3328   255B 3A 3D 25             ld a, (flag_ix)     ; flags
3329   255E CB 47                bit 0,a
3330   2560 28 0A                jr z,UnMKnoCapture
3331   2562                
3332   2562 3A 3D 25             ld a, (flag_ix)     ; flags
3333   2565 CB 6F                bit 5,a             ; ignore en-passant case
3334   2567 20 03                jr nz,UnMKnoCapture
3335   2569              
3336   2569 CD F6 25             call UnMKCapturedPiece
3337   256C             
3338   256C             UnMKnoCapture:
3339   256C                               
3340   256C 3A 01 13             ld a,(SQi)
3341   256F CD 31 22             call MM_hl
3342   2572 7A                   ld a,d
3343   2573 77                   ld (hl),a       ; just place our piece back
3344   2574             
3345   2574 C5                   push bc
3346   2575 48                   ld c,b          ; square-from
3347   2576 CD DD 22             call UpdateKingSQ
3348   2579 C1                   pop bc
3349   257A                      
3350   257A 3A 3D 25             ld a, (flag_ix)      ; flags
3351   257D CB 67                bit 4,a              ; castling      
3352   257F 28 03                jr z,UnMKNoCastle
3353   2581                      
3354   2581 CD 10 26             call  UnMKcastles          
3355   2584                                                   
3356   2584             UnMKNoCastle:
3357   2584 3A 3D 25             ld a, (flag_ix)     ; flags    
3358   2587 CB 4F                bit 1,a             ; possibly promotion
3359   2589 28 03                jr z, UnMKNoProm
3360   258B                      
3361   258B CD 6C 26             call UnMKPromotion  ; put pawn back on board         
3362   258E             UnMKNoProm:
3363   258E 3A 3D 25             ld a, (flag_ix)     ; flags
3364   2591 CB 6F                bit 5,a             ; en-passant         
3365   2593 28 03                jr z,UnMKNoEP
3366   2595                      
3367   2595 CD 82 26             call UnMKEnPass  ; en-passant capture
3368   2598             UnMKNoEP:                                     
3369   2598                      ; en-passant square is updated before
3370   2598             
3371   2598             UnMKEnd:
3372   2598             
3373   2598 FD E1                pop iy                           
3374   259A DD E1                pop ix
3375   259C E1                   pop hl
3376   259D D1                   pop de
3377   259E C1                   pop bc
3378   259F F1                   pop af
3379   25A0 C9                   ret
3380   25A1                      
3381   25A1             ; Get SQi,SQt, promoted piece from history
3382   25A1             UnMKrestoreFromHist:
3383   25A1 E5                   push hl
3384   25A2 C5                   push bc
3385   25A3 06 00                ld b,0
3386   25A5 3A 67 03             ld a,(MOVE_CNT)
3387   25A8 3D                   dec a
3388   25A9 4F                   ld c,a
3389   25AA 32 67 03             ld (MOVE_CNT),a
3390   25AD 21 68 03             ld hl, MOVE_HIST
3391   25B0                      
3392   25B0 FE 3C                cp 60
3393   25B2 38 07                jr c,slowBcAdd2
3394   25B4 CB 21                sla c
3395   25B6 CB 21                sla c      ; 4*c
3396   25B8                       ;1.byte = from sq
3397   25B8                       ;2.byte = to sq
3398   25B8                       ;3.byte = flags and promoted to
3399   25B8                       ;4.byte = en-passant square and castling info before
3400   25B8 09                   add hl,bc
3401   25B9 18 04                jr overBcAdd2         
3402   25BB             slowBcAdd2:         
3403   25BB 09                   add hl,bc
3404   25BC 09                   add hl,bc
3405   25BD 09                   add hl,bc
3406   25BE 09                   add hl,bc
3407   25BF             overBcAdd2:         
3408   25BF             
3409   25BF 7E                   ld a,(hl)
3410   25C0 32 01 13             ld (SQi),a
3411   25C3 23                   inc hl
3412   25C4 7E                   ld a,(hl)
3413   25C5 32 02 13             ld (SQt),a
3414   25C8 23                   inc hl
3415   25C9 7E                   ld a,(hl)
3416   25CA 32 3D 25             ld (flag_ix),a
3417   25CD 23                   inc hl
3418   25CE 7E                   ld a,(hl)
3419   25CF 47                   ld b,a
3420   25D0 E6 0F                and %00001111
3421   25D2 FE 00                cp 0
3422   25D4 28 0C                jr z,unmkEp0
3423   25D6 FE 09                cp 9
3424   25D8 30 04                jr nc,unmkBlackEp
3425   25DA C6 0F                add a,15            ; a3=16...
3426   25DC 18 06                jr unmkEpS
3427   25DE             unmkBlackEp:         
3428   25DE C6 1F                add a,31            ; a6=40...
3429   25E0 18 02                jr unmkEpS         
3430   25E2 3E FF       unmkEp0: ld a,$ff
3431   25E4 32 83 01    unmkEpS: ld (ENPSQ),a      ; restore ENPSQ
3432   25E7 78                   ld a,b
3433   25E8 CB 3F                srl a
3434   25EA CB 3F                srl a
3435   25EC CB 3F                srl a    ; 4 shifts
3436   25EE CB 3F                srl a
3437   25F0 32 82 01             ld (CASTLES),a    ; restore castling info    
3438   25F3 C1                   pop bc
3439   25F4 E1                   pop hl
3440   25F5 C9                   ret
3441   25F6             
3442   25F6             ; Get captured piece from list and put back
3443   25F6             UnMKCapturedPiece:                      
3444   25F6             
3445   25F6 D5                   push de
3446   25F7 11 35 24             ld de, UnMakeList
3447   25FA             UnMKloop1:        
3448   25FA 1A                   ld a,(de)
3449   25FB FE 20                cp ' '
3450   25FD 28 07                jr z,UnMKblankL1
3451   25FF FE 00                cp 0
3452   2601 28 03                jr z,UnMKblankL1
3453   2603 13                   inc de
3454   2604 18 F4                jr UnMKloop1
3455   2606             UnMKblankL1:
3456   2606 1B                   dec de
3457   2607 1A                   ld a,(de)       ; should be a previous MakeMove
3458   2608 F5                   push af
3459   2609 3E 20                ld a,' '
3460   260B 12                   ld (de),a       ; clear this
3461   260C F1                   pop af
3462   260D D1                   pop de
3463   260E 77                   ld (hl),a       ; place back captured piece   
3464   260F C9                   ret     
3465   2610                                                                   
3466   2610             ; castling moves, should move rook back too                 
3467   2610             UnMKcastles:
3468   2610 E5                   push hl
3469   2611 79                   ld a,c
3470   2612 FE 06                cp 6         ; g1?
3471   2614 20 12                jr nz,UnMKNoG1
3472   2616 3E 05                ld a, 5      ; rook on f1
3473   2618 CD 31 22             call MM_hl
3474   261B CD 3B 22             call MM_0    ; empty square now
3475   261E 3E 07                ld a, 7      ; h1
3476   2620 CD 31 22             call MM_hl
3477   2623 3E 52                ld a,'R'
3478   2625 77                   ld (hl),a
3479   2626 18 42                jr UnMKoverC         
3480   2628             UnMKNoG1:
3481   2628 FE 02                cp 2         ; c1?
3482   262A 20 12                jr nz,UnMKNoC1
3483   262C 3E 03                ld a, 3      ; rook on d1
3484   262E CD 31 22             call MM_hl
3485   2631 CD 3B 22             call MM_0    ; empty square now
3486   2634 3E 00                ld a, 0      ; a1
3487   2636 CD 31 22             call MM_hl
3488   2639 3E 52                ld a,'R'
3489   263B 77                   ld (hl),a
3490   263C 18 2C                jr UnMKoverC
3491   263E             UnMKNoC1:
3492   263E FE 3E                cp 62        ; g8?
3493   2640 20 12                jr nz,UnMKNoG8
3494   2642 3E 3D                ld a, 61     ; rook on f8
3495   2644 CD 31 22             call MM_hl
3496   2647 CD 3B 22             call MM_0    ; empty square now
3497   264A 3E 3F                ld a, 63     ; h8
3498   264C CD 31 22             call MM_hl
3499   264F 3E 72                ld a,'r'
3500   2651 77                   ld (hl),a
3501   2652 18 16                jr UnMKoverC
3502   2654             UnMKNoG8:
3503   2654 FE 3A                cp 58        ; c8?
3504   2656 20 12                jr nz,UnMKoverC
3505   2658 3E 3B                ld a, 59     ; rook on d8
3506   265A CD 31 22             call MM_hl
3507   265D CD 3B 22             call MM_0    ; empty square now
3508   2660 3E 38                ld a, 56     ; a8
3509   2662 CD 31 22             call MM_hl
3510   2665 3E 72                ld a,'r'
3511   2667 77                   ld (hl),a
3512   2668 18 00                jr UnMKoverC
3513   266A             UnMKoverC:
3514   266A E1                   pop hl
3515   266B C9                   ret
3516   266C             
3517   266C             ; promoted pieces
3518   266C             UnMKPromotion:
3519   266C E5                   push hl
3520   266D 3E 07                ld a,7
3521   266F B9                   cp c
3522   2670 38 04                jr c,UnMKwhitePw
3523   2672 3E 70                ld a,'p'
3524   2674 18 02                jr UnMKPw
3525   2676             UnMKwhitePw:
3526   2676 3E 50                ld a,'P'
3527   2678 57          UnMKPw:  ld d,a
3528   2679 3A 01 13             ld a,(SQi)
3529   267C CD 31 22             call MM_hl         
3530   267F 72                   ld (hl),d
3531   2680 E1                   pop hl
3532   2681 C9                   ret
3533   2682                       
3534   2682             ; en-passant capture         
3535   2682             UnMKEnPass:
3536   2682 E5                   push hl
3537   2683 7A                   ld a,d
3538   2684 FE 50                cp 'P'
3539   2686 20 0C                jr nz,UnMKPcBEnp         
3540   2688 3A 02 13             ld a,(SQt)
3541   268B D6 08                sub 8
3542   268D CD 31 22             call MM_hl
3543   2690 36 70                ld (hl),'p'
3544   2692 18 0A                jr UnMKEnp1
3545   2694             UnMKPcBEnp:
3546   2694 3A 02 13             ld a,(SQt)
3547   2697 C6 08                add a,8
3548   2699 CD 31 22             call MM_hl
3549   269C 36 50                ld (hl),'P'
3550   269E             UnMKEnp1:
3551   269E E1                   pop hl
3552   269F C9                   ret
3553   26A0                              
3554   26A0             ;END
3555   26A0                   
3556   26A0             
3557   26A0             ;BEGIN of ========== KING CHECKMATE DETECTION
3558   26A0             ;;
3559   26A0             ; It verifies check+ moves of the list for possible movement.
3560   26A0             ; Makes it slower, anyway correct for complete notation.
3561   26A0             ; Sets bit-7 for checkmate moves.
3562   26A0             ;
3563   26A0             LookForCheckmates:
3564   26A0             
3565   26A0 3A 03 13             ld a, (MateDetect)
3566   26A3 FE 00                cp 0
3567   26A5 20 6F                jr nz, CKMEnd
3568   26A7                              
3569   26A7 DD 21 86 01          ld ix, NEXT_MVCNT
3570   26AB DD 46 00             ld b,(ix)
3571   26AE DD 21 87 01          ld ix, NEXT_MOVES
3572   26B2 78                   ld a, b
3573   26B3 FE 00                cp 0
3574   26B5 28 5F                jr z,CKMEnd
3575   26B7                      
3576   26B7             CKMToLoop:
3577   26B7 DD 23                inc ix        ; piece
3578   26B9 DD 23                inc ix        ; from
3579   26BB DD 23                inc ix        ; to
3580   26BD DD 7E 00             ld a,(ix)     ; flags
3581   26C0 CB 77                bit 6,a
3582   26C2 28 4E                jr z, CKMnoCheck
3583   26C4 DD 2B                dec ix
3584   26C6 DD 2B                dec ix
3585   26C8 DD 7E 00             ld a,(ix)
3586   26CB 32 01 13             ld (SQi),a
3587   26CE DD 23                inc ix
3588   26D0 DD 7E 00             ld a,(ix)
3589   26D3 32 02 13             ld (SQt),a
3590   26D6 DD 23                inc ix
3591   26D8 DD 7E 00             ld a,(ix)     ; flags
3592   26DB CB 4F                bit 1,a       
3593   26DD 28 0C                jr z, CKMnoPromo
3594   26DF DD 7E 00             ld a,(ix)     ; flags again       
3595   26E2 CB 3F                srl a
3596   26E4 CB 3F                srl a
3597   26E6 E6 03                and 3
3598   26E8 3C                   inc a
3599   26E9 18 02                jr CKMpcProm
3600   26EB             CKMnoPromo:
3601   26EB 3E 00                ld a,0
3602   26ED             CKMpcProm:         
3603   26ED 32 04 19             ld (PromoPcId),a
3604   26F0 CD 67 21             call MakeMove  ; make this move again
3605   26F3                      
3606   26F3 3E 01                ld a,1
3607   26F5 32 03 13             ld (MateDetect),a            
3608   26F8 CD 04 13             call GenMoves  ; finds any legal move
3609   26FB                      
3610   26FB CD 3E 25             call UnMakeMove  ; unmake
3611   26FE                      
3612   26FE 3A 03 13             ld a,(MateDetect)
3613   2701 FE 02                cp 2           ; is there any?
3614   2703 28 08                jr z, CKMnoMate
3615   2705                      
3616   2705 DD 7E 00             ld a,(ix)     ; flags again
3617   2708 CB FF                set 7,a       ; bit 7 - checkmate
3618   270A DD 77 00             ld (ix),a     ; save flag   
3619   270D                      
3620   270D             CKMnoMate:
3621   270D 3E 00                ld a,0
3622   270F 32 03 13             ld (MateDetect),a
3623   2712                                                                                                                             
3624   2712             CKMnoCheck:
3625   2712 DD 23                inc ix
3626   2714 10 A1                djnz CKMToLoop
3627   2716             
3628   2716             CKMEnd:                           
3629   2716 C9                   ret
3630   2717                      
3631   2717             ;END 
3632   2717             
3633   2717             
3634   2717             
3635   2717                                
3636   2717             ;BEGIN of ========== COUNTER for large loop of 65536 maximum value
3637   2717             ;
3638   2717             ; just imitates 2byte integer in 8-bit registers
3639   2717             
3640   2717 00          Il:      .byte 0
3641   2718 00          Ih:      .byte 0
3642   2719             
3643   2719             
3644   2719 32 18 27    LD_Ix:   ld (Ih),a  ; sets a-reg x 256 value to counter
3645   271C 3E 00                ld a,0
3646   271E 32 17 27             ld (Il),a
3647   2721 C9                   ret
3648   2722             
3649   2722 C5          DEC_I:   push bc
3650   2723 3A 17 27             ld a,(Il)
3651   2726 4F                   ld c,a
3652   2727 3A 18 27             ld a,(Ih)
3653   272A 47                   ld b,a
3654   272B 0B                   dec bc
3655   272C 79                   ld a,c
3656   272D 32 17 27             ld (Il),a
3657   2730 78                   ld a,b
3658   2731 32 18 27             ld (Ih),a
3659   2734 3E 00                ld a,0
3660   2736 B8                   cp b
3661   2737 20 06                jr nz, IsNo0_I
3662   2739 B9                   cp c
3663   273A 20 03                jr nz, IsNo0_I
3664   273C 37                   scf       ; sets CF on empty counter
3665   273D 18 02                jr Is0ret
3666   273F 37          IsNo0_I: scf
3667   2740 3F                   ccf
3668   2741 C1          Is0ret:  pop bc
3669   2742 C9                   ret
3670   2743             ;END
3671   2743             
3672   2743             ;BEGIN of ========== DEBUG tool
3673   2743             
3674   2743             ; Put call DEBUGs in ASM to see that I got here
3675   2743                      
3676   2743 44 45 42 55 debugstr: .byte "DEBUG!$", 0  ; outputs this when reaches
3676   2747 47 21 24 00 
3677   274B             
3678   274B             DEBUGs:
3679   274B             
3680   274B D5                   push de
3681   274C 11 43 27             ld de, debugstr
3682   274F CD C6 38             call PrintString
3683   2752 D1                   pop de
3684   2753 C9                   ret            
3685   2754             
3686   2754 44 45 42 55         .byte "DEBUGZ",0    ; put in code to find via debugger
3686   2758 47 5A 00 
3687   275B             ;END
3688   275B             
3689   275B                   
3690   275B             ;        
3691   275B             ; INCLUDES        
3692   275B             ;        
3693   275B             
3694   275B                       #include "ChessUI.ASM"     ; USER interface and grahics
0001+  275B             ;=======================================
0002+  275B             ;
0003+  275B             ; Graphics part of chess program ChessY2K
0004+  275B             ;
0005+  275B             ;=======================================
0006+  275B             ;
0007+  275B             ; USER INTERFACE
0008+  275B             ; screen, vdp, keyboard controls
0009+  275B             ;
0010+  275B             ; Uses VRAM even too much for chess needs.
0011+  275B             ; Will be good for presentation recording.
0012+  275B             ;
0013+  275B             ;---------------------------------------
0014+  275B             
0015+  275B             ;
0016+  275B             ; Defines labels to access datas after loading.
0017+  275B             ; This was genereated by "export" operator of tasm
0018+  275B             ; in ChessPI.ASM
0019+  275B             ; REPLACE THESE AFTER EACH RECOMPILE OF CHESSPI
0020+  275B             
0021+  275B             dtBBB            .EQU  $8001
0022+  275B             dtBBW            .EQU  $8159
0023+  275B             dtBKB            .EQU  $82b1
0024+  275B             dtBKW            .EQU  $8409
0025+  275B             dtBNB            .EQU  $8561
0026+  275B             dtBNW            .EQU  $86b9
0027+  275B             dtBPB            .EQU  $8811
0028+  275B             dtBPW            .EQU  $8969
0029+  275B             dtBQB            .EQU  $8ac1
0030+  275B             dtBQW            .EQU  $8c19
0031+  275B             dtBRB            .EQU  $8d71
0032+  275B             dtBRW            .EQU  $8ec9
0033+  275B             dtWBB            .EQU  $9021
0034+  275B             dtWBW            .EQU  $9179
0035+  275B             dtWKB            .EQU  $92d1
0036+  275B             dtWKW            .EQU  $9429
0037+  275B             dtWNB            .EQU  $9581
0038+  275B             dtWNW            .EQU  $96d9
0039+  275B             dtWPB            .EQU  $9831
0040+  275B             dtWPW            .EQU  $9989
0041+  275B             dtWQB            .EQU  $9ae1
0042+  275B             dtWQW            .EQU  $9c39
0043+  275B             dtWRB            .EQU  $9d91
0044+  275B             dtWRW            .EQU  $9ee9
0045+  275B             dtSQB            .EQU  $a041
0046+  275B             dtSQW            .EQU  $a199
0047+  275B             dtFRDN           .EQU  $a2f1
0048+  275B             dtFRLF           .EQU  $a63f
0049+  275B             dtFRRT           .EQU  $a98d
0050+  275B             dtFRUP           .EQU  $acdb
0051+  275B             dtWhiteToMove    .EQU  $b029
0052+  275B             dtWhiteNotToMove .EQU  $b091
0053+  275B             dtBlackToMove    .EQU  $b0f9
0054+  275B             dtBlackNotToMove .EQU  $b161
0055+  275B             dtWP             .EQU  $b1c9
0056+  275B             dtBP             .EQU  $b321
0057+  275B             dtWN             .EQU  $b479
0058+  275B             dtBN             .EQU  $b5d1
0059+  275B             dtWB             .EQU  $b729
0060+  275B             dtBB             .EQU  $b881
0061+  275B             dtWR             .EQU  $b9d9
0062+  275B             dtBR             .EQU  $bb31
0063+  275B             dtWQ             .EQU  $bc89
0064+  275B             dtBQ             .EQU  $bde3
0065+  275B             dtWK             .EQU  $bf3b
0066+  275B             dtBK             .EQU  $c093
0067+  275B             dtMSXlogo        .EQU  $c1eb
0068+  275B             
0069+  275B             
0070+  275B 00          Stylo:    .byte 0   ; set as configuration flags:
0071+  275C                                 ; 0-bit to use cursor 
0072+  275C                                 ; 1-bit allow drag and move pieces
0073+  275C                                 ; 2-bit set up pieces mode
0074+  275C             
0075+  275C 0C          CursorSq: .byte 12         ; square of cursor, on init=E2
0076+  275D FF          DragSq:   .byte $ff        ; drag at square
0077+  275E 00          RplyMs:   .byte 0          ; position in MOVE_str for replayer
0078+  275F             
0079+  275F 00          Grph_Exit: .byte 0        ; 1 on ESC exit 
0080+  2760             
0081+  2760             PiecesIX:
0082+  2760 9F A1 47 A0         .word dtSQW+6, dtSQB+6
0083+  2764 8F 99 37 98         .word dtWPW+6, dtWPB+6, dtWNW+6, dtWNB+6, dtWBW+6, dtWBB+6
0083+  2768 DF 96 87 95 
0083+  276C 7F 91 27 90 
0084+  2770 EF 9E 97 9D         .word dtWRW+6, dtWRB+6, dtWQW+6, dtWQB+6, dtWKW+6, dtWKB+6
0084+  2774 3F 9C E7 9A 
0084+  2778 2F 94 D7 92 
0085+  277C 6F 89 17 88         .word dtBPW+6, dtBPB+6, dtBNW+6, dtBNB+6, dtBBW+6, dtBBB+6
0085+  2780 BF 86 67 85 
0085+  2784 5F 81 07 80 
0086+  2788 CF 8E 77 8D         .word dtBRW+6, dtBRB+6, dtBQW+6, dtBQB+6, dtBKW+6, dtBKB+6         
0086+  278C 1F 8C C7 8A 
0086+  2790 0F 84 B7 82 
0087+  2794             
0088+  2794             
0089+  2794             
0090+  2794             VRAMcopy:       ; for each piece, to know that was copied to VRAM
0091+  2794 00 00 00 00         .word 0,0,0,0,0,0,0,0,0,0,0,0,0
0091+  2798 00 00 00 00 
0091+  279C 00 00 00 00 
0091+  27A0 00 00 00 00 
0091+  27A4 00 00 00 00 
0091+  27A8 00 00 00 00 
0091+  27AC 00 00 
0092+  27AE             VRAMcpXY:       ; for each piece, holds HL (X,Y coord.)
0093+  27AE 00 00 00 00         .word 0,0,0,0,0,0,0,0,0,0,0,0,0 
0093+  27B2 00 00 00 00 
0093+  27B6 00 00 00 00 
0093+  27BA 00 00 00 00 
0093+  27BE 00 00 00 00 
0093+  27C2 00 00 00 00 
0093+  27C6 00 00 
0094+  27C8 00 00 00 00         .word 0,0,0,0,0,0,0,0,0,0,0,0,0
0094+  27CC 00 00 00 00 
0094+  27D0 00 00 00 00 
0094+  27D4 00 00 00 00 
0094+  27D8 00 00 00 00 
0094+  27DC 00 00 00 00 
0094+  27E0 00 00 
0095+  27E2             
0096+  27E2 00          VRAMcirc: .byte 0 ; to know that sign copied to VRAM
0097+  27E3             
0098+  27E3                             ; the same for masks of black and white pieces
0099+  27E3                             ; Masks are used when piece is moving.
0100+  27E3                             ; Simple square redraw is used after animation is over.
0101+  27E3             PiecesMskIX:
0102+  27E3 CF B1 7F B4         .word dtWP+6, dtWN+6, dtWB+6, dtWR+6, dtWQ+6, dtWK+6
0102+  27E7 2F B7 DF B9 
0102+  27EB 8F BC 41 BF 
0103+  27EF 27 B3 D7 B5         .word dtBP+6, dtBN+6, dtBB+6, dtBR+6, dtBQ+6, dtBK+6
0103+  27F3 87 B8 37 BB 
0103+  27F7 E9 BD 99 C0 
0104+  27FB 00 00 00 00 VRAMcpMsk:    .word 0,0,0,0,0,0
0104+  27FF 00 00 00 00 
0104+  2803 00 00 00 00 
0105+  2807 00 00 00 00 VRAMcpMskXY:  .word 0,0,0,0,0,0,0,0,0,0,0,0  
0105+  280B 00 00 00 00 
0105+  280F 00 00 00 00 
0105+  2813 00 00 00 00 
0105+  2817 00 00 00 00 
0105+  281B 00 00 00 00 
0106+  281F             
0107+  281F 2F B0 67 B1 CircIX: .word dtWhiteToMove+6, dtBlackNotToMove+6, dtWhiteNotToMove+6, dtBlackToMove+6
0107+  2823 97 B0 FF B0 
0108+  2827                                                                                                                                                                                                                    
0109+  2827             GraphicsS:
0110+  2827                      
0111+  2827                      ; loads datas of graphics in memory from file
0112+  2827 CD CD 35             call ChessY2K_GraphDatas_load
0113+  282A                         
0114+  282A 3E 0C                ld a,12
0115+  282C 32 5C 27             ld (CursorSq),a           ; cursor on E2
0116+  282F 3E FF                ld a,$ff
0117+  2831 32 5D 27             ld (DragSq),a             ; no drag
0118+  2834 3E 00                ld a,0
0119+  2836 32 5F 27             ld (Grph_Exit),a          ; starting...
0120+  2839 32 5E 27             ld (RplyMs),a            ; set replayer position to 0  
0121+  283C                      
0122+  283C CD AA 29             call ClearLastFEN         ; for setup position clear previous one
0123+  283F CD F7 37             call SetScreen5By30h      ; set Screen 5 by using BIOS
0124+  2842 CD FE 37             call DisableScreenBy30h   ; do not display
0125+  2845 CD 1D 39             call Copy_VdpRegs         ; save VDP regs
0126+  2848 CD 65 38             call VDPfaster            ; optimize VDP, sprites off
0127+  284B                      
0128+  284B 21 E9 35             ld hl, tbPalettes         ;
0129+  284E CD 31 38             call SetPaletteByTable    ; defines 16colors
0130+  2851 CD A7 28             call SetGraphics0         ; most graphics inits
0131+  2854 CD 1C 30             call PutMSXlogo           ; put MSX lable on screen
0132+  2857 CD 7C 31             call PutToMove            ; draws and saves rounded-sign which side to move
0133+  285A                                                ;  (and saves to VRAM too)
0134+  285A                         
0135+  285A                      ;1.draw just squares
0136+  285A CD 56 30             call PutFrame             ; puts frame for board
0137+  285D CD 75 29             call Draw0Board           ; just draw empty board without pieces
0138+  2860                      
0139+  2860                      ;2 create copy of pictures in VRAM      
0140+  2860 CD 65 29             call SetPMapFEN           ; sets special board for saving at XY in VRAM to know later
0141+  2863 CD D3 2C             call DrawBoard            ; draws complete board with pieces and saves bitmaps
0142+  2866 CD 75 29             call Draw0Board           ; just draw empty board to overwrite glitches
0143+  2869 CD 56 30             call PutFrame             ; redraw frame - with no defects
0144+  286C             
0145+  286C                      ;3 set chess position to play from
0146+  286C CD 96 29             call SetFENbyMode         ; set position according mode
0147+  286F CD D3 2C             call DrawBoard            ; now uses saved pieces
0148+  2872 CD 7C 31             call PutToMove            ; redraw using saved
0149+  2875                      
0150+  2875 3E 00                ld a,0
0151+  2877 CD 5E 39             call SetPage              ; Page to display
0152+  287A CD 03 38             call EnableScreenBy30h    ; display on
0153+  287D                      
0154+  287D CD 70 32             call DrawCursor           ; Draws a rectangle of cursor on square
0155+  2880 CD 04 13             call GenMoves             ; And generate first moves too.
0156+  2883                      
0157+  2883 CD 7B 38             call InkeyKeyBy30h      ; keypress detect
0158+  2886 32 E0 32             ld (PreKeyWas),a         ; saves last key
0159+  2889             
0160+  2889             LOOP_GRAPHICS:
0161+  2889 CD 7B 38             call InkeyKeyBy30h        ; keypress detect
0162+  288C FE 00                cp 0
0163+  288E 28 03                jr z, no_key_pressed
0164+  2890             
0165+  2890 CD E1 32             call Cursor_Key_Controls  ; keyboard, cursor by arrow-keys
0166+  2893             no_key_pressed:
0167+  2893                             
0168+  2893 CD 81 2B             call ANIMATION            ; process animations, if there should be
0169+  2896             
0170+  2896 3A 5F 27             ld a,(Grph_Exit)
0171+  2899 FE 00                cp 0                      ; Exit on ESC 
0172+  289B 28 EC                jr z,LOOP_GRAPHICS                                                                    
0173+  289D                                                         
0174+  289D CD 4C 3B             call RestoreColors
0175+  28A0 CD 34 39             call Rest_VdpRegs         ; restore VDP regs
0176+  28A3 CD 89 38             call SetScreen0By30h      ; set Screen 0
0177+  28A6                      
0178+  28A6 C9                   ret
0179+  28A7                      
0180+  28A7             ; set page 0, color 0, vdp for drawing
0181+  28A7             
0182+  28A7             SetGraphics0:
0183+  28A7 F5                   push af
0184+  28A8 E5                   push hl
0185+  28A9                      
0186+  28A9 3E 00                ld a,0
0187+  28AB CD 5C 38             call SetBackgrColor       ; sets color by number
0188+  28AE 3E 00                ld a,0
0189+  28B0 CD 5E 39             call SetPage              ; Page to display
0190+  28B3                               
0191+  28B3 3E 00                ld a,0
0192+  28B5 21 00 00             ld hl,0
0193+  28B8 CD 71 39             call Set_Vdp_Write        ; gona send to vdp
0194+  28BB                      
0195+  28BB E1                   pop hl
0196+  28BC F1                   pop af
0197+  28BD C9                   ret 
0198+  28BE             
0199+  28BE 38 2F 38 2F emptyFEN:    .byte "8/8/8/8/8/8/8/8 w - - 0 1",0
0199+  28C2 38 2F 38 2F 
0199+  28C6 38 2F 38 2F 
0199+  28CA 38 2F 38 20 
0199+  28CE 77 20 2D 20 
0199+  28D2 2D 20 30 20 
0199+  28D6 31 00 
0200+  28D8 38 2F 50 50 piecemapFEN: .byte "8/PPpp4/NNnn4/BBbb4/RRrr4/QQqq4/KKkk4/8 w - - 0 1",0
0200+  28DC 70 70 34 2F 
0200+  28E0 4E 4E 6E 6E 
0200+  28E4 34 2F 42 42 
0200+  28E8 62 62 34 2F 
0200+  28EC 52 52 72 72 
0200+  28F0 34 2F 51 51 
0200+  28F4 71 71 34 2F 
0200+  28F8 4B 4B 6B 6B 
0200+  28FC 34 2F 38 20 
0200+  2900 77 20 2D 20 
0200+  2904 2D 20 30 20 
0200+  2908 31 00 
0201+  290A 24          wasSetUpFEN: .byte "$"
0202+  290B                          .ds 90
0203+  2965             
0204+  2965             SetPMapFEN:                        ; set special FEN for piece bitmaps
0205+  2965 F5                   push af
0206+  2966 DD E5                push ix
0207+  2968 3E 01                ld a,1
0208+  296A DD 21 D8 28          ld ix, piecemapFEN
0209+  296E CD A4 1A             call SetFEN
0210+  2971 DD E1                pop ix
0211+  2973 F1                   pop af
0212+  2974 C9                   ret
0213+  2975                     
0214+  2975             Draw0Board:                        ; draws an empty board without pieces 
0215+  2975 F5                   push af
0216+  2976 DD E5                push ix               
0217+  2978 CD 8C 29             call SetEmptyFEN         ; set empty board      
0218+  297B 3E 01                ld a,1
0219+  297D 32 E9 2C             ld (DrItFl),a
0220+  2980 CD D3 2C             call DrawBoard            ; just draw empty board without pieces
0221+  2983 3E 00                ld a,0
0222+  2985 32 E9 2C             ld (DrItFl),a
0223+  2988 DD E1                pop ix
0224+  298A F1                   pop af 
0225+  298B C9                   ret
0226+  298C                      
0227+  298C             SetEmptyFEN:                 ; this sets an empty board position
0228+  298C 3E 01                ld a,1
0229+  298E DD 21 BE 28          ld ix, emptyFEN
0230+  2992 CD A4 1A             call SetFEN         
0231+  2995 C9                   ret
0232+  2996                      
0233+  2996             SetFENbyMode:                ; sets position by mode
0234+  2996 F5                   push af 
0235+  2997 3A 5B 27             ld a,(Stylo)    
0236+  299A                               
0237+  299A CB 57                bit 2,a
0238+  299C 28 05                jr z, SetStartFEN
0239+  299E             
0240+  299E CD 8C 29             call SetEmptyFEN    ; set empty board
0241+  29A1 18 05                jr SetFByMover
0242+  29A3             
0243+  29A3             SetStartFEN:         
0244+  29A3 3E 00                ld a,0              ; set default position
0245+  29A5 CD A4 1A             call SetFEN
0246+  29A8             SetFByMover:
0247+  29A8 F1                   pop af
0248+  29A9 C9                   ret
0249+  29AA                      
0250+  29AA             ClearLastFEN:
0251+  29AA F5                   push af
0252+  29AB D5                   push de
0253+  29AC 11 0A 29             ld de,wasSetUpFEN
0254+  29AF 3E 24                ld a,'$'
0255+  29B1 12                   ld (de),a
0256+  29B2 D1                   pop de
0257+  29B3 F1                   pop af
0258+  29B4 C9                   ret
0259+  29B5             
0260+  29B5                      
0261+  29B5             ;-----------------------------------------------------
0262+  29B5             ;
0263+  29B5             ; Chess move by cursor and space
0264+  29B5             ;
0265+  29B5             ; Validates move, moves piece on board and screen.
0266+  29B5             ; SQi - from square
0267+  29B5             ; SQt - to square
0268+  29B5             ; PromoPcId - id of piece to promote = 4-queen,3-rook,2-bishop,1-knight, 0-no promotion
0269+  29B5             
0270+  29B5             Chess_Move_Cursor:
0271+  29B5 F5                   push af
0272+  29B6 3A 1B 2B             ld a,(Move_sq_f)
0273+  29B9 32 01 13             ld (SQi),a
0274+  29BC 3A 1C 2B             ld a,(Move_sq_t)
0275+  29BF 32 02 13             ld (SQt),a
0276+  29C2 3E 00                ld a,0
0277+  29C4 32 04 19             ld (PromoPcId),a
0278+  29C7 3E 00                ld a,0
0279+  29C9 32 2E 2B             ld (AnimUnMk),a
0280+  29CC CD 2F 2B             call setAnimation        ; animate it and make move
0281+  29CF             NotValidChMv:         
0282+  29CF F1                   pop af
0283+  29D0 C9                   ret
0284+  29D1                      
0285+  29D1             Chess_Move_Real:
0286+  29D1 CD 67 21             call MakeMove            ; Goes when animation is over
0287+  29D4 CD 2F 2A             call AfterChessMovement
0288+  29D7 C9                   ret
0289+  29D8             
0290+  29D8             ;--------------------------------------------------------
0291+  29D8             ;
0292+  29D8             ; Undo chess animated chess move
0293+  29D8             ;
0294+  29D8             Chess_UnMake_Move_U:
0295+  29D8 F5                   push af
0296+  29D9 C5                   push bc
0297+  29DA D5                   push de
0298+  29DB E5                   push hl
0299+  29DC                                                                                                            
0300+  29DC 21 67 03             ld hl, MOVE_CNT
0301+  29DF 4E                   ld c,(hl)
0302+  29E0 21 68 03             ld hl, MOVE_HIST
0303+  29E3 79                   ld a, c
0304+  29E4 FE 00                cp 0
0305+  29E6 28 3B                jr z, Unmake_end_action
0306+  29E8 06 00                ld b,0
0307+  29EA             
0308+  29EA 0D                   dec c
0309+  29EB 09                   add hl,bc
0310+  29EC 09                   add hl,bc
0311+  29ED 09                   add hl,bc
0312+  29EE 09                   add hl,bc
0313+  29EF                      
0314+  29EF 7E                   ld a,(hl)        ; from
0315+  29F0 32 1C 2B             ld (Move_sq_t),a ; move backward animation
0316+  29F3 57                   ld d,a
0317+  29F4 23                   inc hl
0318+  29F5 7E                   ld a,(hl)        ; to    
0319+  29F6 32 1B 2B             ld (Move_sq_f),a
0320+  29F9 5F                   ld e,a
0321+  29FA 23                   inc hl
0322+  29FB 7E                   ld a,(hl)        ; flags
0323+  29FC                      
0324+  29FC 0E 00                ld c,0         
0325+  29FE CB 6F                bit 5,a      ; if en-passant capture
0326+  2A00 28 09                jr z,NoEnPassUnmakeMove
0327+  2A02                      
0328+  2A02 7B                   ld a,e
0329+  2A03 E6 07                and 7
0330+  2A05 4F                   ld c,a          ;X of en-passant square
0331+  2A06 7A                   ld a,d
0332+  2A07 E6 F8                and %11111000   ;Y of en-passant square
0333+  2A09 B1                   or c
0334+  2A0A 4F                   ld c,a
0335+  2A0B             NoEnPassUnmakeMove:
0336+  2A0B 79                   ld a,c
0337+  2A0C 32 29 2B             ld (Move_Enp),a ; save en-p.square for animation    
0338+  2A0F                                        
0339+  2A0F 7E                   ld a, (hl)   ; flags                
0340+  2A10 CB 67                bit 4,a      ; if castling
0341+  2A12 28 07                jr z,UnmakeNoCastling
0342+  2A14                      
0343+  2A14 0E 01                ld c,1
0344+  2A16 EB                   ex de,hl
0345+  2A17 CD D9 2A             call SetCastlesForLater
0346+  2A1A EB                   ex de,hl             
0347+  2A1B                               
0348+  2A1B             UnmakeNoCastling:
0349+  2A1B 3E 01                ld a,1
0350+  2A1D 32 2E 2B             ld (AnimUnMk),a
0351+  2A20 CD 2F 2B             call setAnimation        ; animate it and unmake move
0352+  2A23                      
0353+  2A23             Unmake_end_action:
0354+  2A23 E1                   pop hl
0355+  2A24 D1                   pop de
0356+  2A25 C1                   pop bc
0357+  2A26 F1                   pop af
0358+  2A27 C9                   ret
0359+  2A28             
0360+  2A28             ; Does actual unmake on chess board
0361+  2A28             Chess_Unmake_Move_Real:
0362+  2A28 CD 3E 25             call UnMakeMove            ; Goes when animation is over
0363+  2A2B CD 2F 2A             call AfterChessMovement
0364+  2A2E C9                   ret                                                                       
0365+  2A2F             
0366+  2A2F             ;
0367+  2A2F             ; Action right after chess make/unmake move
0368+  2A2F             ; Redraws 2 squares after movement
0369+  2A2F             ; Regenerates next moves
0370+  2A2F             ;
0371+  2A2F             AfterChessMovement:
0372+  2A2F F5                   push af
0373+  2A30 C5                   push bc
0374+  2A31 3A 1B 2B             ld a,(Move_sq_f)
0375+  2A34 4F                   ld c,a             
0376+  2A35 CD EA 2C             call DrawSquare
0377+  2A38 3A 1C 2B             ld a,(Move_sq_t)
0378+  2A3B 4F                   ld c,a             
0379+  2A3C CD EA 2C             call DrawSquare
0380+  2A3F CD 70 32             call DrawCursor
0381+  2A42 C1                   pop bc
0382+  2A43 F1                   pop af
0383+  2A44 CD 04 13             call GenMoves  ; And generate next moves too
0384+  2A47 CD 7C 31             call PutToMove ; redraws which side to move
0385+  2A4A C9                   ret
0386+  2A4B                      
0387+  2A4B             ;--------------------------------------------------------
0388+  2A4B             ;
0389+  2A4B             ; Drag and move validation
0390+  2A4B             ; Parameter: reg-a  0 - for drag, 1 - for move
0391+  2A4B             ;
0392+  2A4B             IsValidDragMove:
0393+  2A4B             
0394+  2A4B C5                   push bc
0395+  2A4C D5                   push de
0396+  2A4D E5                   push hl
0397+  2A4E DD E5                push ix
0398+  2A50                      
0399+  2A50 57                   ld d,a   ;save usage
0400+  2A51 1E 00                ld e,0   ; flag that found
0401+  2A53                                                                                   
0402+  2A53 DD 21 86 01          ld ix, NEXT_MVCNT
0403+  2A57 DD 46 00             ld b,(ix)
0404+  2A5A DD 21 87 01          ld ix, NEXT_MOVES
0405+  2A5E 78                   ld a, b
0406+  2A5F FE 00                cp 0
0407+  2A61 28 6F                jr z, ValidLookExit
0408+  2A63             
0409+  2A63 3A 5D 27             ld a,(DragSq)
0410+  2A66 67                   ld h,a
0411+  2A67 3A 5C 27             ld a,(CursorSq)
0412+  2A6A 6F                   ld l,a
0413+  2A6B             
0414+  2A6B             isValidLoop:
0415+  2A6B             
0416+  2A6B DD 7E 00             ld a, (ix)   ; notated piece
0417+  2A6E DD 23                inc ix
0418+  2A70 DD 7E 00             ld a, (ix)   ; from square
0419+  2A73 32 01 13             ld (SQi),a        
0420+  2A76 DD 23                inc ix               
0421+  2A78 DD 7E 00             ld a, (ix)   ; to square
0422+  2A7B 32 02 13             ld (SQt),a
0423+  2A7E DD 23                inc ix   
0424+  2A80 DD 7E 00             ld a, (ix)   ; flags and promoted piece
0425+  2A83 0E 00                ld c,0
0426+  2A85 CB 4F                bit 1,a      ; if promotion
0427+  2A87 28 02                jr z,ValidNoPromo
0428+  2A89 0E 04                ld c,4       ; then queen
0429+  2A8B             ValidNoPromo:
0430+  2A8B 79                   ld a,c
0431+  2A8C 32 04 19             ld (PromoPcId),a
0432+  2A8F                             
0433+  2A8F 7A                   ld a,d
0434+  2A90 FE 00                cp 0
0435+  2A92 28 30                jr z,isValidDrag
0436+  2A94                      
0437+  2A94 3A 01 13             ld a,(SQi)      ; verify movement
0438+  2A97 BC                   cp h
0439+  2A98 20 34                jr nz, ValidNotThisMove
0440+  2A9A                              
0441+  2A9A 3A 02 13             ld a,(SQt)
0442+  2A9D BD                   cp l
0443+  2A9E 20 2E                jr nz, ValidNotThisMove
0444+  2AA0             
0445+  2AA0 DD 7E 00             ld a, (ix)   ; flags                
0446+  2AA3 0E 00                ld c,0         
0447+  2AA5 CB 6F                bit 5,a      ; if en-passant capture
0448+  2AA7 28 09                jr z,ValidNoEnPassMove
0449+  2AA9                      
0450+  2AA9 7D                   ld a,l
0451+  2AAA E6 07                and 7
0452+  2AAC 4F                   ld c,a          ;X of en-passant square
0453+  2AAD 7C                   ld a,h
0454+  2AAE E6 F8                and %11111000   ;Y of en-passant square
0455+  2AB0 B1                   or c 
0456+  2AB1 4F                   ld c,a
0457+  2AB2             ValidNoEnPassMove:
0458+  2AB2 79                   ld a,c
0459+  2AB3 32 29 2B             ld (Move_Enp),a ; save en-p.square for animation    
0460+  2AB6                                        
0461+  2AB6 DD 7E 00             ld a, (ix)   ; flags                
0462+  2AB9 CB 67                bit 4,a      ; if castling
0463+  2ABB 28 05                jr z,ValidNoCastling
0464+  2ABD                      
0465+  2ABD 0E 00                ld c,0
0466+  2ABF CD D9 2A             call SetCastlesForLater
0467+  2AC2                               
0468+  2AC2             ValidNoCastling:
0469+  2AC2 18 06                jr ValidIsThis
0470+  2AC4                      
0471+  2AC4             isValidDrag:             ; verify drag
0472+  2AC4 3A 01 13             ld a,(SQi)
0473+  2AC7 BD                   cp l
0474+  2AC8 20 04                jr nz, ValidNotThisMove
0475+  2ACA                      
0476+  2ACA             ValidIsThis:       ; ok, this move        
0477+  2ACA 1E 01                ld e,1
0478+  2ACC 18 04                jr ValidLookExit
0479+  2ACE                      
0480+  2ACE             ValidNotThisMove:
0481+  2ACE DD 23                inc ix        
0482+  2AD0 10 99                djnz isValidLoop
0483+  2AD2                               
0484+  2AD2             ValidLookExit:
0485+  2AD2 7B                   ld a,e
0486+  2AD3 DD E1                pop ix
0487+  2AD5 E1                   pop hl
0488+  2AD6 D1                   pop de
0489+  2AD7 C1                   pop bc
0490+  2AD8 C9                   ret
0491+  2AD9             
0492+  2AD9             ; save castling rook info for animation later
0493+  2AD9             ; set before reg-c  = 0 for makemove, 1 for unmake move               
0494+  2AD9             SetCastlesForLater:
0495+  2AD9 7D                   ld a,l       ; square to
0496+  2ADA FE 06                cp 6
0497+  2ADC 28 0E                jr z,thisValidE1G1 ; e1g1
0498+  2ADE FE 02                cp 2
0499+  2AE0 28 0F                jr z,thisValidE1C1 ; e1c1
0500+  2AE2 FE 3E                cp 62
0501+  2AE4 28 10                jr z,thisValidE8G8 ; e8g8
0502+  2AE6 FE 3A                cp 58
0503+  2AE8 28 11                jr z,thisValidE8C8 ; e8c8
0504+  2AEA 18 2E                jr ValidCstlNot
0505+  2AEC             thisValidE1G1:
0506+  2AEC 21 07 05             ld hl,$0507      ; h1f1
0507+  2AEF 18 0D                jr ValidSetCastles         
0508+  2AF1             thisValidE1C1:
0509+  2AF1 21 00 03             ld hl,$0300      ; a1c1
0510+  2AF4 18 08                jr ValidSetCastles         
0511+  2AF6             thisValidE8G8:
0512+  2AF6 21 3F 3D             ld hl,$3D3F      ; h8f8
0513+  2AF9 18 03                jr ValidSetCastles         
0514+  2AFB             thisValidE8C8:
0515+  2AFB 21 38 3B             ld hl,$3B38      ; a8c8
0516+  2AFE             ValidSetCastles:
0517+  2AFE 79                   ld a,c
0518+  2AFF FE 00                cp 0
0519+  2B01 20 0A                jr nz, unMakeCastlesCase
0520+  2B03 7D                   ld a,l
0521+  2B04 32 2B 2B             ld (MvC_sq_f2),a
0522+  2B07 7C                   ld a,h
0523+  2B08 32 2C 2B             ld (MvC_sq_t2),a
0524+  2B0B 18 08                jr ValidSaveCstl
0525+  2B0D             unMakeCastlesCase:
0526+  2B0D 7C                   ld a,h
0527+  2B0E 32 2B 2B             ld (MvC_sq_f2),a
0528+  2B11 7D                   ld a,l
0529+  2B12 32 2C 2B             ld (MvC_sq_t2),a
0530+  2B15             ValidSaveCstl:         
0531+  2B15 3E 01                ld a,1
0532+  2B17 32 2A 2B             ld (Move_Cstl),a ; save for animation    
0533+  2B1A             ValidCstlNot:
0534+  2B1A C9                   ret
0535+  2B1B                      
0536+  2B1B             ;----------------------------------------------------|
0537+  2B1B             ;
0538+  2B1B             ;  This draws moving piece.
0539+  2B1B             ;  Should be on timer interrupt.
0540+  2B1B             ;  Anyway doesnt matter on emulators.  
0541+  2B1B             ;  Uses lots of VRAM (video memory), just because
0542+  2B1B             ;  it is best MSX has and can manage fast.
0543+  2B1B             ;
0544+  2B1B             
0545+  2B1B 00          Move_sq_f: .byte 0   ; from square
0546+  2B1C 00          Move_sq_t: .byte 0   ; to square
0547+  2B1D 00          Move_X_f:  .byte 0   ; from X on screen
0548+  2B1E 00          Move_Y_f:  .byte 0   ; Y
0549+  2B1F 00          Move_X_t:  .byte 0   ; to X
0550+  2B20 00          Move_Y_t:  .byte 0   ; to Y
0551+  2B21 00          Move_X:    .byte 0   ; current X 
0552+  2B22 00          Move_Y:    .byte 0   ; current Y
0553+  2B23 00          Move_DX:   .byte 0   ; dx in dots (kinda y=a*x+c in asm)
0554+  2B24 00          Move_DXn:  .byte 0   ; to 0-right, 1-left
0555+  2B25 00          Move_DY:   .byte 0   ; dy in dots
0556+  2B26 00          Move_DYn:  .byte 0   ; to 0-down, 1-up
0557+  2B27             
0558+  2B27 00          MovePc_f:  .byte 0   ; holds piece on square from (as we remove while animating)
0559+  2B28 00          MovePc_t:  .byte 0   ; holds piece on square to
0560+  2B29             
0561+  2B29 00          Move_Enp:  .byte 0   ; square if en-passant capturing
0562+  2B2A             
0563+  2B2A 00          Move_Cstl: .byte 0   ; 1 if castling king (to start for rook after)
0564+  2B2B 00          MvC_sq_f2: .byte 0   ; for rook movement squares from->to
0565+  2B2C 00          MvC_sq_t2: .byte 0   ;
0566+  2B2D 00          AnimI:     .byte 0   ; counter 0..25
0567+  2B2E 00          AnimUnMk:  .byte 0   ; 1 if UnMake case
0568+  2B2F             
0569+  2B2F             setAnimation:           ; provide square numbers
0570+  2B2F F5                       push af
0571+  2B30 C5                       push bc
0572+  2B31 D5                       push de
0573+  2B32 E5                       push hl
0574+  2B33                          
0575+  2B33 A8                       xor b    ; b=0
0576+  2B34 3A 1B 2B                 ld a,(Move_sq_f)            
0577+  2B37 CD FF 2B                 call ObtainHLboardBySq
0578+  2B3A 56                       ld d,(hl)
0579+  2B3B 70                       ld (hl),b
0580+  2B3C 4F                       ld c,a
0581+  2B3D CD EA 2C                 call DrawSquare          ; now empty while moving
0582+  2B40 CD 27 2F                 call GetHLbySquare       ; set X,Y
0583+  2B43 7A                       ld a,d
0584+  2B44 32 27 2B                 ld (MovePc_f),a
0585+  2B47 7C                       ld a,h
0586+  2B48 32 1D 2B                 ld (Move_X_f),a          ; from
0587+  2B4B 32 21 2B                 ld (Move_X),a            ; now X
0588+  2B4E 7D                       ld a,l
0589+  2B4F 32 1E 2B                 ld (Move_Y_f),a
0590+  2B52 32 22 2B                 ld (Move_Y),a            ; now Y
0591+  2B55                          
0592+  2B55 A8                       xor b
0593+  2B56 3A 1C 2B                 ld a,(Move_sq_t)
0594+  2B59 CD FF 2B                 call ObtainHLboardBySq
0595+  2B5C 56                       ld d,(hl)
0596+  2B5D 70                       ld (hl),b
0597+  2B5E 4F                       ld c,a
0598+  2B5F CD EA 2C                 call DrawSquare          ; now empty while moving                         
0599+  2B62 CD 27 2F                 call GetHLbySquare       ; set X,Y
0600+  2B65 7A                       ld a,d
0601+  2B66 32 28 2B                 ld (MovePc_t),a
0602+  2B69 7C                       ld a,h
0603+  2B6A 32 1F 2B                 ld (Move_X_t),a          ; to
0604+  2B6D 7D                       ld a,l
0605+  2B6E 32 20 2B                 ld (Move_Y_t),a
0606+  2B71                          
0607+  2B71 3E 19                    ld a,25                  ;25ticks
0608+  2B73 32 2D 2B                 ld (AnimI),a             ;counter
0609+  2B76                          
0610+  2B76 CD 0B 2C                 call AnimGetDXDY         ; calculate dx,dy
0611+  2B79                                      
0612+  2B79 CD 84 2D                 call Save26squaresVRAM   ; saving path of piece to draw without defects
0613+  2B7C                          
0614+  2B7C E1                       pop hl
0615+  2B7D D1                       pop de
0616+  2B7E C1                       pop bc
0617+  2B7F F1                       pop af
0618+  2B80 C9                       ret            
0619+  2B81             
0620+  2B81             ANIMATION:
0621+  2B81 F5                       push af
0622+  2B82 3A 2D 2B                 ld a,(AnimI)
0623+  2B85 FE 00                    cp 0
0624+  2B87 28 74                    jr z, AnimNONE ;if No animation
0625+  2B89                          
0626+  2B89 C5                       push bc
0627+  2B8A D5                       push de
0628+  2B8B E5                       push hl
0629+  2B8C                          
0630+  2B8C CD F2 2D                 call RestoreIsquareFromVRAM ;prepares and draws animation square
0631+  2B8F CD 9C 2C                 call GetNewAnimXY ; next X,Y
0632+  2B92                                       
0633+  2B92 3A 2D 2B                 ld a,(AnimI)
0634+  2B95 3D                       dec a
0635+  2B96 32 2D 2B                 ld (AnimI),a
0636+  2B99 FE 00                    cp 0
0637+  2B9B 20 5D                    jr nz, AnimTickOver  ;On counter=0 animation is over
0638+  2B9D                          
0639+  2B9D CD F2 2D                 call RestoreIsquareFromVRAM ;restore last
0640+  2BA0                          
0641+  2BA0 3A 27 2B                 ld a,(MovePc_f)
0642+  2BA3 4F                       ld c,a
0643+  2BA4 3A 1B 2B                 ld a,(Move_sq_f)
0644+  2BA7 CD FF 2B                 call ObtainHLboardBySq
0645+  2BAA 71                       ld (hl),c
0646+  2BAB                          
0647+  2BAB 3A 28 2B                 ld a,(MovePc_t)
0648+  2BAE 4F                       ld c,a
0649+  2BAF 3A 1C 2B                 ld a,(Move_sq_t)
0650+  2BB2 CD FF 2B                 call ObtainHLboardBySq
0651+  2BB5 71                       ld (hl),c
0652+  2BB6             
0653+  2BB6 3A 2A 2B                 ld a,(Move_Cstl)
0654+  2BB9                          
0655+  2BB9 FE 02                    cp 2
0656+  2BBB 28 0C                    jr z,wasCastleAnim
0657+  2BBD                                      
0658+  2BBD 3A 2E 2B                 ld a,(AnimUnMk)
0659+  2BC0 FE 00                    cp 0
0660+  2BC2 20 0C                    jr nz,AnimUnMakeCase
0661+  2BC4                                                                 
0662+  2BC4 CD D1 29                 call Chess_Move_Real          ; does actual chess movements
0663+  2BC7 18 0A                    jr Anim_enp_too
0664+  2BC9                          
0665+  2BC9             wasCastleAnim:
0666+  2BC9 3E 00                    ld a,0
0667+  2BCB 32 2A 2B                 ld (Move_Cstl),a              ; after castling rook has made its move
0668+  2BCE 18 2A                    jr AnimTickOver
0669+  2BD0             AnimUnMakeCase:
0670+  2BD0 CD 28 2A                 call Chess_Unmake_Move_Real   ; does actual chess undo movements
0671+  2BD3             Anim_enp_too:          
0672+  2BD3 3A 29 2B                 ld a,(Move_Enp)
0673+  2BD6 FE 00                    cp 0
0674+  2BD8 28 06                    jr z,AnimNoEnpRedraw
0675+  2BDA C5                       push bc
0676+  2BDB 4F                       ld c,a
0677+  2BDC CD EA 2C                 call DrawSquare      ; remove en-passant piece visually
0678+  2BDF C1                       pop bc             
0679+  2BE0             AnimNoEnpRedraw:
0680+  2BE0             
0681+  2BE0             setCastleAnim:
0682+  2BE0 3A 2A 2B                 ld a,(Move_Cstl)
0683+  2BE3 FE 00                    cp 0
0684+  2BE5 28 13                    jr z,AnimTickOver
0685+  2BE7 3C                       inc a            
0686+  2BE8 32 2A 2B                 ld (Move_Cstl),a
0687+  2BEB 3A 2B 2B                 ld a,(MvC_sq_f2)
0688+  2BEE 32 1B 2B                 ld (Move_sq_f),a
0689+  2BF1 3A 2C 2B                 ld a,(MvC_sq_t2)
0690+  2BF4 32 1C 2B                 ld (Move_sq_t),a
0691+  2BF7 CD 2F 2B                 call setAnimation  ; set new animation for rook now
0692+  2BFA                          
0693+  2BFA                     
0694+  2BFA             AnimTickOver:
0695+  2BFA E1                       pop hl             
0696+  2BFB D1                       pop de
0697+  2BFC C1                       pop bc
0698+  2BFD F1          AnimNONE:    pop af
0699+  2BFE C9                       ret                              
0700+  2BFF                          
0701+  2BFF             ;---------------------------------------------
0702+  2BFF             ;determine HL by square number in a-reg
0703+  2BFF             ObtainHLboardBySq:           
0704+  2BFF F5                       push af
0705+  2C00 C5                       push bc
0706+  2C01 21 40 01                 ld hl,BOARD
0707+  2C04 4F                       ld c,a
0708+  2C05 06 00                    ld b,0
0709+  2C07 09                       add hl,bc
0710+  2C08 C1                       pop bc
0711+  2C09 F1                       pop af
0712+  2C0A C9                       ret
0713+  2C0B                          
0714+  2C0B             ;---------------------------------------------
0715+  2C0B             ; determine DX,DY step for animated piece                                                                     
0716+  2C0B             AnimGetDXDY:
0717+  2C0B             
0718+  2C0B 3A 1D 2B                 ld a,(Move_X_f)
0719+  2C0E 47                       ld b,a             
0720+  2C0F 3A 1F 2B                 ld a,(Move_X_t)
0721+  2C12 B8                       cp b
0722+  2C13 28 2E                    jr z,AnimDX0
0723+  2C15 38 16                    jr c,decAnimDX ;if toX<fromX
0724+  2C17                                                                             
0725+  2C17 3A 1B 2B                 ld a,(Move_sq_f)
0726+  2C1A E6 07                    and 7
0727+  2C1C 4F                       ld c,a
0728+  2C1D 3A 1C 2B                 ld a,(Move_sq_t)
0729+  2C20 E6 07                    and 7
0730+  2C22 91                       sub c            ; a = dx
0731+  2C23 32 23 2B                 ld (Move_DX),a
0732+  2C26 3E 00                    ld a,0
0733+  2C28 32 24 2B                 ld (Move_DXn),a
0734+  2C2B 18 1E                    jr AnimGetDY
0735+  2C2D             decAnimDX:               
0736+  2C2D 3A 1C 2B                 ld a,(Move_sq_t)
0737+  2C30 E6 07                    and 7
0738+  2C32 4F                       ld c,a
0739+  2C33 3A 1B 2B                 ld a,(Move_sq_f)
0740+  2C36 E6 07                    and 7
0741+  2C38 91                       sub c            ; a = -dx
0742+  2C39 32 23 2B                 ld (Move_DX),a
0743+  2C3C 3E 01                    ld a,1
0744+  2C3E 32 24 2B                 ld (Move_DXn),a
0745+  2C41 18 08                    jr AnimGetDY           
0746+  2C43             AnimDX0:
0747+  2C43 3E 00                    ld a,0
0748+  2C45 32 23 2B                 ld (Move_DX),a
0749+  2C48 32 24 2B                 ld (Move_DXn),a
0750+  2C4B             AnimGetDY:             
0751+  2C4B 3A 1E 2B                 ld a,(Move_Y_f)
0752+  2C4E 47                       ld b,a             
0753+  2C4F 3A 20 2B                 ld a,(Move_Y_t)
0754+  2C52 B8                       cp b
0755+  2C53 28 3E                    jr z,AnimDY0
0756+  2C55 38 1E                    jr c,decAnimDY ;if toY<fromY
0757+  2C57                          
0758+  2C57 3A 1B 2B                 ld a,(Move_sq_f)
0759+  2C5A CB 3F                    srl a
0760+  2C5C CB 3F                    srl a
0761+  2C5E CB 3F                    srl a
0762+  2C60 4F                       ld c,a
0763+  2C61 3A 1C 2B                 ld a,(Move_sq_t)
0764+  2C64 CB 3F                    srl a
0765+  2C66 CB 3F                    srl a
0766+  2C68 CB 3F                    srl a
0767+  2C6A 91                       sub c            ; a = -dy
0768+  2C6B 32 25 2B                 ld (Move_DY),a
0769+  2C6E 3E 01                    ld a,1
0770+  2C70 32 26 2B                 ld (Move_DYn),a
0771+  2C73 18 26                    jr AnimGetDXover            
0772+  2C75                          
0773+  2C75             decAnimDY:
0774+  2C75 3A 1C 2B                 ld a,(Move_sq_t)
0775+  2C78 CB 3F                    srl a
0776+  2C7A CB 3F                    srl a
0777+  2C7C CB 3F                    srl a
0778+  2C7E 4F                       ld c,a
0779+  2C7F 3A 1B 2B                 ld a,(Move_sq_f)
0780+  2C82 CB 3F                    srl a
0781+  2C84 CB 3F                    srl a
0782+  2C86 CB 3F                    srl a
0783+  2C88 91                       sub c            ; a = dy
0784+  2C89 32 25 2B                 ld (Move_DY),a
0785+  2C8C 3E 00                    ld a,0
0786+  2C8E 32 26 2B                 ld (Move_DYn),a
0787+  2C91 18 08                    jr AnimGetDXover
0788+  2C93             AnimDY0:
0789+  2C93 3E 00                    ld a,0
0790+  2C95 32 25 2B                 ld (Move_DY),a
0791+  2C98 32 26 2B                 ld (Move_DYn),a
0792+  2C9B                          
0793+  2C9B             AnimGetDXover:
0794+  2C9B C9                       ret
0795+  2C9C             
0796+  2C9C             
0797+  2C9C             ;---------------------------------------------
0798+  2C9C             ;
0799+  2C9C             ; Sets new X,Y on animation tick
0800+  2C9C             ;
0801+  2C9C             GetNewAnimXY:
0802+  2C9C F5                       push af
0803+  2C9D C5                       push bc
0804+  2C9E D5                       push de
0805+  2C9F                          
0806+  2C9F 3A 21 2B                 ld a,(Move_X)
0807+  2CA2 57                       ld d,a
0808+  2CA3 3A 22 2B                 ld a,(Move_Y)
0809+  2CA6 5F                       ld e,a
0810+  2CA7                                           ; determine new X
0811+  2CA7 3A 23 2B                 ld a,(Move_DX)
0812+  2CAA 47                       ld b,a           ; save dx
0813+  2CAB 3A 24 2B                 ld a,(Move_DXn)
0814+  2CAE FE 01                    cp 1
0815+  2CB0 28 04                    jr z,decAnimXmv
0816+  2CB2 7A                       ld a,d
0817+  2CB3 80                       add a,b          ; new X=X+dx
0818+  2CB4 18 02                    jr newXforAnim
0819+  2CB6             decAnimXmv:               
0820+  2CB6 7A                       ld a,d
0821+  2CB7 90                       sub b            ; new X=X-dx            
0822+  2CB8             newXforAnim:             
0823+  2CB8 32 21 2B                 ld (Move_X),a
0824+  2CBB                                           ; determine new Y
0825+  2CBB                                           
0826+  2CBB 3A 25 2B                 ld a,(Move_DY)
0827+  2CBE 47                       ld b,a           ; save dy
0828+  2CBF 3A 26 2B                 ld a,(Move_DYn)
0829+  2CC2 FE 01                    cp 1
0830+  2CC4 28 04                    jr z,decAnimYmv
0831+  2CC6 7B                       ld a,e
0832+  2CC7 80                       add a,b          ; new Y=Y+dy
0833+  2CC8 18 02                    jr newYforAnim                              
0834+  2CCA             decAnimYmv:               
0835+  2CCA 7B                       ld a,e
0836+  2CCB 90                       sub b            ; new Y=Y-dy 
0837+  2CCC             newYforAnim:
0838+  2CCC 32 22 2B                 ld (Move_Y),a
0839+  2CCF D1                       pop de
0840+  2CD0 C1                       pop bc
0841+  2CD1 F1                       pop af
0842+  2CD2 C9                       ret
0843+  2CD3                         
0844+  2CD3             ;----------------------------------------------------|
0845+  2CD3             ;
0846+  2CD3             ;  Draws board on screen.
0847+  2CD3             ;  
0848+  2CD3             ;
0849+  2CD3             DrawBoard:
0850+  2CD3 F5                   push af
0851+  2CD4 C5                   push bc
0852+  2CD5 CD EB 1C             call SetSqScan          ; draw order A8,...,H8,A7...,A1,...,H1
0853+  2CD8 06 40                ld b,64
0854+  2CDA             DrawBoScan:
0855+  2CDA CD F4 1C             call ScanSqNxt
0856+  2CDD CD 1A 1D             call GetScanSQ
0857+  2CE0 4F                   ld c,a                  ; current square
0858+  2CE1 CD EA 2C             call DrawSquare
0859+  2CE4 10 F4                djnz DrawBoScan        ; scan all squares
0860+  2CE6 C1                   pop bc
0861+  2CE7 F1                   pop af
0862+  2CE8 C9                   ret
0863+  2CE9             
0864+  2CE9             ;
0865+  2CE9             ;  Draws piece or just empty square by 
0866+  2CE9             ;       square in C-reg [0..63]
0867+  2CE9             ;
0868+  2CE9 00          DrItFl: .byte 0     ;should draw anyway flag
0869+  2CEA             
0870+  2CEA             DrawSquare:
0871+  2CEA F5                   push af
0872+  2CEB C5                   push bc
0873+  2CEC D5                   push de
0874+  2CED E5                   push hl
0875+  2CEE DD E5                push ix
0876+  2CF0 06 00                ld b,0
0877+  2CF2 21 40 01             ld hl,BOARD
0878+  2CF5 09                   add hl,bc
0879+  2CF6 7E                   ld a,(hl)
0880+  2CF7 FE 00                cp 0
0881+  2CF9 20 02                jr nz, notE0_
0882+  2CFB 3E 20                ld a,' '
0883+  2CFD CD 27 2F    notE0_:  call GetHLbySquare       ; set X,Y
0884+  2D00 CD 54 2F             call GetWhiteSqFlagInE   ; and determine E flag     
0885+  2D03 CD 66 2F             call GetPieceIdx    ; convert to index from pn..QK
0886+  2D06 4F                   ld c,a              ; c=index
0887+  2D07 EB                   ex de,hl            ; de = hl
0888+  2D08                              
0889+  2D08 3A E9 2C             ld a,(DrItFl)
0890+  2D0B FE 01                cp 1
0891+  2D0D 28 0B                jr z,pc2VRAM1       ; should draw anyway     
0892+  2D0F                      
0893+  2D0F 21 94 27             ld hl,VRAMcopy
0894+  2D12 06 00                ld b,0
0895+  2D14 09                   add hl,bc         
0896+  2D15 7E                   ld a,(hl)       
0897+  2D16 FE 01                cp 1
0898+  2D18 28 28                jr z,pc2VRAM2       ; if saved before, just copy
0899+  2D1A                                          ; else create bitmap
0900+  2D1A             pc2VRAM1:                                       
0901+  2D1A                      ;DRAW and SAVE a copy                
0902+  2D1A 3E 01                ld a,1
0903+  2D1C 77                   ld (hl),a           ; bitmap saved flag
0904+  2D1D EB                   ex de,hl            ; hl = X,Y
0905+  2D1E 79                   ld a,c              ; index of piece or square
0906+  2D1F CD 8C 2F             call GetPieceIX     ; get ix-address
0907+  2D22 11 1A 1A             ld de,$1A1A         ;26x26
0908+  2D25 CD A7 39             call HMMC           ;copy RAM -> VRAM
0909+  2D28                      
0910+  2D28 CD C2 2F             call SaveMaskToo    ; save MASK on first init
0911+  2D2B                      
0912+  2D2B 3A E9 2C             ld a,(DrItFl)
0913+  2D2E FE 01                cp 1
0914+  2D30 28 4B                jr z,overDrawSqPc   ; if draws empty board 
0915+  2D32                      
0916+  2D32 EB                   ex de,hl            ; de = hl
0917+  2D33                      
0918+  2D33 21 AE 27             ld hl,VRAMcpXY      ; save X,Y for piece index
0919+  2D36 06 00                ld b,0
0920+  2D38 09                   add hl,bc
0921+  2D39 09                   add hl,bc         
0922+  2D3A 72                   ld (hl),d           ;save X
0923+  2D3B 23                   inc hl
0924+  2D3C 73                   ld (hl),e           ;save Y
0925+  2D3D                      
0926+  2D3D CD F5 2E             call COPY2VRAMoutside
0927+  2D40                       
0928+  2D40 18 3B                jr overDrawSqPc
0929+  2D42                          
0930+  2D42             pc2VRAM2:         
0931+  2D42                      ;COPY piece back to square
0932+  2D42                      
0933+  2D42 21 AE 27             ld hl,VRAMcpXY      ; get X,Y by piece index
0934+  2D45 06 00                ld b,0
0935+  2D47 09                   add hl,bc
0936+  2D48 09                   add hl,bc         
0937+  2D49 7E                   ld a,(hl)           ;saved X
0938+  2D4A 32 BC 3B             ld (HC_p+0),a       ;X
0939+  2D4D 23                   inc hl
0940+  2D4E 7E                   ld a,(hl)           ;saved Y
0941+  2D4F 32 BE 3B             ld (HC_p+2),a       ;Y
0942+  2D52             
0943+  2D52 7A                   ld a,d
0944+  2D53 32 C0 3B             ld (HC_p+4),a       ;to X   
0945+  2D56 7B                   ld a,e
0946+  2D57 32 C2 3B             ld (HC_p+6),a       ;to Y
0947+  2D5A 3E 19                ld a,$19
0948+  2D5C 32 C4 3B             ld (HC_p+8),a       ;25
0949+  2D5F 32 C6 3B             ld (HC_p+10),a      ;25
0950+  2D62 AF                   xor a
0951+  2D63 32 BD 3B             ld (HC_p+1),a        
0952+  2D66 32 C1 3B             ld (HC_p+5),a       ;X
0953+  2D69 32 C3 3B             ld (HC_p+7),a       ;Y
0954+  2D6C 32 C5 3B             ld (HC_p+9),a       ;dots
0955+  2D6F 32 C7 3B             ld (HC_p+11),a      ;dots
0956+  2D72 32 C8 3B             ld (HC_p+12),a      ;DIX/DIY
0957+  2D75 3E 01                ld a,%00000001
0958+  2D77 32 BF 3B             ld (HC_p+3),a       ;256+Y
0959+  2D7A CD C9 3B             call HMMMf          ;copy VRAM -> VRAM to visible area        
0960+  2D7D             
0961+  2D7D             overDrawSqPc:         
0962+  2D7D DD E1                pop ix
0963+  2D7F E1                   pop hl
0964+  2D80 D1                   pop de
0965+  2D81 C1                   pop bc
0966+  2D82 F1                   pop af
0967+  2D83 C9                   ret
0968+  2D84                      
0969+  2D84             ;-------------------------------------------------
0970+  2D84             ;
0971+  2D84             ;
0972+  2D84             ; Saving 26 squares in VRAM as background for
0973+  2D84             ;      moving piece all way long
0974+  2D84             ;
0975+  2D84             Save26squaresVRAM:
0976+  2D84 F5                   push af
0977+  2D85 C5                   push bc
0978+  2D86 D5                   push de
0979+  2D87                      
0980+  2D87 3A 21 2B             ld a,(Move_X)
0981+  2D8A 57                   ld d,a
0982+  2D8B 3A 22 2B             ld a,(Move_Y)
0983+  2D8E 5F                   ld e,a
0984+  2D8F D5                   push de             ; save X,Y                            
0985+  2D90                      
0986+  2D90 06 1A                ld b,26
0987+  2D92 11 00 00             ld de,0
0988+  2D95             Loop26squares:
0989+  2D95 F3                   di                 
0990+  2D96 3A 21 2B             ld a,(Move_X)       ;X
0991+  2D99 D6 04                sub 4               ;X-4   reserve
0992+  2D9B 32 BC 3B             ld (HC_p+0),a
0993+  2D9E 3A 22 2B             ld a,(Move_Y)       ;Y
0994+  2DA1 D6 04                sub 4               ;Y-4
0995+  2DA3 32 BE 3B             ld (HC_p+2),a
0996+  2DA6                      
0997+  2DA6 CD 9C 2C             call GetNewAnimXY   ; new X,Y
0998+  2DA9                               
0999+  2DA9 7A                   ld a,d
1000+  2DAA 32 C0 3B             ld (HC_p+4),a       ;to X
1001+  2DAD 7B                   ld a,e
1002+  2DAE 32 C2 3B             ld (HC_p+6),a       ;to Y (+next byte)   put in columns
1003+  2DB1 3E 20                ld a,$20
1004+  2DB3 32 C4 3B             ld (HC_p+8),a       ;32
1005+  2DB6 32 C6 3B             ld (HC_p+10),a      ;32
1006+  2DB9 AF                   xor a         
1007+  2DBA 32 BD 3B             ld (HC_p+1),a       ;X
1008+  2DBD 32 BF 3B             ld (HC_p+3),a       ;Y
1009+  2DC0 32 C1 3B             ld (HC_p+5),a       ;
1010+  2DC3 32 C5 3B             ld (HC_p+9),a       ;dots
1011+  2DC6 32 C7 3B             ld (HC_p+11),a      ;dots
1012+  2DC9 32 C8 3B             ld (HC_p+12),a      ;DIX/DIY
1013+  2DCC 3E 03                ld a,%00000011
1014+  2DCE 32 C3 3B             ld (HC_p+7),a       ; 512+Y down
1015+  2DD1 CD C9 3B             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1016+  2DD4                      
1017+  2DD4 3E 20                ld a,$20
1018+  2DD6 83                   add a,e
1019+  2DD7 5F                   ld e,a
1020+  2DD8 FE C0                cp $20*6
1021+  2DDA 20 07                jr nz,L26clmnNxt
1022+  2DDC 1E 00                ld e,0             ; next column
1023+  2DDE 3E 20                ld a,$20
1024+  2DE0 82                   add a,d
1025+  2DE1 57                   ld d,a
1026+  2DE2 FB                   ei
1027+  2DE3             L26clmnNxt:
1028+  2DE3 10 B0                djnz Loop26squares     
1029+  2DE5                      
1030+  2DE5 D1                   pop de             ; restore X,Y
1031+  2DE6 7A                   ld a,d
1032+  2DE7 32 21 2B             ld (Move_X),a
1033+  2DEA 7B                   ld a,e
1034+  2DEB 32 22 2B             ld (Move_Y),a
1035+  2DEE                     
1036+  2DEE D1                   pop de
1037+  2DEF C1                   pop bc
1038+  2DF0 F1                   pop af
1039+  2DF1 C9                   ret
1040+  2DF2             
1041+  2DF2             ;
1042+  2DF2             ; This: 1) copies background (1..26 saved before) to VRAM-holder
1043+  2DF2             ;       2) copies mask of piece logically to VRAM-holder
1044+  2DF2             ;       3) copies holder to board on display
1045+  2DF2             ;
1046+  2DF2             
1047+  2DF2             
1048+  2DF2             RestoreIsquareFromVRAM:
1049+  2DF2 F5                   push af
1050+  2DF3 C5                   push bc
1051+  2DF4 D5                   push de
1052+  2DF5                      
1053+  2DF5 3A 2D 2B             ld a,(AnimI)
1054+  2DF8 47                   ld b,a
1055+  2DF9 3E 19                ld a,25
1056+  2DFB 90                   sub b
1057+  2DFC                      
1058+  2DFC 47                   ld b,a              ; counter I = 0..25
1059+  2DFD 11 00 00             ld de,0  
1060+  2E00 FE 00                cp 0
1061+  2E02 28 10                jr z,L2_26theSq
1062+  2E04             Loop26SqToFindXY:
1063+  2E04             
1064+  2E04 3E 20                ld a,$20
1065+  2E06 83                   add a,e
1066+  2E07 5F                   ld e,a
1067+  2E08 FE C0                cp $20*6
1068+  2E0A 20 06                jr nz,L2_26clmnNxt
1069+  2E0C 1E 00                ld e,0             ; next column
1070+  2E0E 3E 20                ld a,$20
1071+  2E10 82                   add a,d
1072+  2E11 57                   ld d,a
1073+  2E12             L2_26clmnNxt:
1074+  2E12 10 F0                djnz Loop26SqToFindXY
1075+  2E14             L2_26theSq:                             
1076+  2E14 CD 21 2E             call Back2Holder     ; put backgroound in holder
1077+  2E17                      
1078+  2E17 CD 5B 2E             call DrawAnimPiece   ; draws animation piece to holder (mask with transp.)
1079+  2E1A                      
1080+  2E1A CD B5 2E             call Holder2Screen   ; put holder on board in right place
1081+  2E1D             
1082+  2E1D D1                   pop de
1083+  2E1E C1                   pop bc
1084+  2E1F F1                   pop af
1085+  2E20 C9                   ret
1086+  2E21             
1087+  2E21             ;----------------------------------
1088+  2E21             ; Puts background in holder
1089+  2E21             
1090+  2E21             Back2Holder:
1091+  2E21 F3                   di
1092+  2E22 7A                   ld a,d
1093+  2E23 32 BC 3B             ld (HC_p+0),a
1094+  2E26 7B                   ld a,e
1095+  2E27 32 BE 3B             ld (HC_p+2),a
1096+  2E2A 3E DF                ld a,255-$20
1097+  2E2C 32 C0 3B             ld (HC_p+4),a       ;to X
1098+  2E2F 3E B1                ld a,209-$20
1099+  2E31 32 C2 3B             ld (HC_p+6),a       ;to Y (+next byte) in column
1100+  2E34 3E 20                ld a,$20
1101+  2E36 32 C4 3B             ld (HC_p+8),a       ;32
1102+  2E39 32 C6 3B             ld (HC_p+10),a      ;32
1103+  2E3C AF                   xor a         
1104+  2E3D 32 BD 3B             ld (HC_p+1),a       ;X
1105+  2E40 32 C1 3B             ld (HC_p+5),a       ;
1106+  2E43 32 C5 3B             ld (HC_p+9),a       ;dots
1107+  2E46 32 C7 3B             ld (HC_p+11),a      ;dots
1108+  2E49 32 C8 3B             ld (HC_p+12),a      ;DIX/DIY
1109+  2E4C 3E 01                ld a,%00000001
1110+  2E4E 32 C3 3B             ld (HC_p+7),a       ; 256+Y down
1111+  2E51 3E 03                ld a,%00000011
1112+  2E53 32 BF 3B             ld (HC_p+3),a       ; 512+Y down
1113+  2E56 CD C9 3B             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1114+  2E59 FB                   ei
1115+  2E5A C9                   ret
1116+  2E5B                               
1117+  2E5B             ;------------------------------------------------------
1118+  2E5B             ;
1119+  2E5B             ; Prepares mask of piece in VRAM holder on background
1120+  2E5B             ;
1121+  2E5B             ;                  
1122+  2E5B             DrawAnimPiece:
1123+  2E5B                                       
1124+  2E5B                          ;COPY mask of piece (logical VRAM->VRAM)
1125+  2E5B F3                       di        
1126+  2E5C 3A 27 2B                 ld a,(MovePc_f)
1127+  2E5F FE 00                    cp 0
1128+  2E61 20 03                    jr nz,DrawAnimNormPiece
1129+  2E63 3A 28 2B                 ld a,(MovePc_t)        ;castling rook moving
1130+  2E66             DrawAnimNormPiece:             
1131+  2E66 1E 00                    ld e,0
1132+  2E68 CD 66 2F                 call GetPieceIdx       ;get index of piece
1133+  2E6B CB 3F                    srl a
1134+  2E6D 3D                       dec a
1135+  2E6E 4F                       ld c,a
1136+  2E6F 21 07 28                 ld hl,VRAMcpMskXY      ; get X,Y by piece index             
1137+  2E72 06 00                    ld b,0
1138+  2E74 09                       add hl,bc              ; offset
1139+  2E75 09                       add hl,bc
1140+  2E76                                                
1141+  2E76 7E                       ld a,(hl)           ;saved X
1142+  2E77 32 F4 3B                 ld (LM_p+0),a       ;X
1143+  2E7A 23                       inc hl
1144+  2E7B 7E                       ld a,(hl)           ;saved Y        
1145+  2E7C 32 F6 3B                 ld (LM_p+2),a       ;Y
1146+  2E7F             
1147+  2E7F                          ;ld a,(Move_X)
1148+  2E7F 3E E3                    ld a,255-$20+4
1149+  2E81 32 F8 3B                 ld (LM_p+4),a       ;to X   
1150+  2E84                          ;ld a,(Move_Y)
1151+  2E84 3E B5                    ld a,209-$20+4
1152+  2E86 32 FA 3B                 ld (LM_p+6),a       ;to Y
1153+  2E89 3E 19                    ld a,$19
1154+  2E8B 32 FC 3B                 ld (LM_p+8),a       ;25
1155+  2E8E 32 FE 3B                 ld (LM_p+10),a      ;25
1156+  2E91 AF                       xor a
1157+  2E92 32 F5 3B                 ld (LM_p+1),a
1158+  2E95                          ;ld (LM_p+7),a       
1159+  2E95 32 F9 3B                 ld (LM_p+5),a       ;Y
1160+  2E98 32 FD 3B                 ld (LM_p+9),a       ;dots
1161+  2E9B 32 FF 3B                 ld (LM_p+11),a      ;dots
1162+  2E9E 32 00 3C                 ld (LM_p+12),a      ;DIX/DIY
1163+  2EA1 3E 01                    ld a,%00000001
1164+  2EA3 32 F7 3B                 ld (LM_p+3),a       ;256+Y
1165+  2EA6 3E 01                    ld a,%00000001
1166+  2EA8 32 FB 3B                 ld (LM_p+7),a       ;256+Y
1167+  2EAB 3E 08                    ld a,%00001000      ;TIMP copy
1168+  2EAD 32 01 3C                 ld (LM_p+13),a      ;logical
1169+  2EB0 CD 02 3C                 call LMMMf          ;copy VRAM -> VRAM without transparent color
1170+  2EB3                                              ;to visible area
1171+  2EB3 FB                       ei                                 
1172+  2EB4 C9                       ret
1173+  2EB5             
1174+  2EB5             ;----------------------------------
1175+  2EB5             ; Puts holder on board
1176+  2EB5             
1177+  2EB5             Holder2Screen:                             ; draw holder to screen with piece
1178+  2EB5 F3                   di
1179+  2EB6 3E DF                ld a,255-$20                
1180+  2EB8 32 BC 3B             ld (HC_p+0),a
1181+  2EBB 3E B1                ld a,209-$20
1182+  2EBD 32 BE 3B             ld (HC_p+2),a
1183+  2EC0 3A 21 2B             ld a,(Move_X)
1184+  2EC3 D6 04                sub 4               ;X-4
1185+  2EC5 32 C0 3B             ld (HC_p+4),a       ;to X
1186+  2EC8 3A 22 2B             ld a,(Move_Y)
1187+  2ECB D6 04                sub 4               ;Y-4
1188+  2ECD 32 C2 3B             ld (HC_p+6),a       ;to Y (+next byte)
1189+  2ED0 3E 20                ld a,$20
1190+  2ED2 32 C4 3B             ld (HC_p+8),a       ;32
1191+  2ED5 32 C6 3B             ld (HC_p+10),a      ;32
1192+  2ED8 AF                   xor a         
1193+  2ED9 32 BD 3B             ld (HC_p+1),a       ;X
1194+  2EDC 32 C1 3B             ld (HC_p+5),a       ;
1195+  2EDF 32 C3 3B             ld (HC_p+7),a       ;         
1196+  2EE2 32 C5 3B             ld (HC_p+9),a       ;dots
1197+  2EE5 32 C7 3B             ld (HC_p+11),a      ;dots
1198+  2EE8 32 C8 3B             ld (HC_p+12),a      ;DIX/DIY
1199+  2EEB 3E 01                ld a,%00000001
1200+  2EED 32 BF 3B             ld (HC_p+3),a       ;from holder 256+Y down
1201+  2EF0 CD C9 3B             call HMMMf          ;copy VRAM -> VRAM
1202+  2EF3 FB                   ei
1203+  2EF4 C9                   ret
1204+  2EF5                                                
1205+  2EF5             ;-------------------------------------------------
1206+  2EF5             ;
1207+  2EF5             ;BOARD copying to third screen
1208+  2EF5             ; Fast but takes much VRAM.
1209+  2EF5             ; Not used but working. It is sick to use VRAM like this.
1210+  2EF5             ;-------------------------------------------------
1211+  2EF5             COPY2VRAMoutside:
1212+  2EF5 7A                   ld a,d              ;X
1213+  2EF6 32 BC 3B             ld (HC_p+0),a
1214+  2EF9 32 C0 3B             ld (HC_p+4),a       ;to X
1215+  2EFC 7B                   ld a,e              ;Y
1216+  2EFD 32 BE 3B             ld (HC_p+2),a
1217+  2F00 32 C2 3B             ld (HC_p+6),a       ;to Y (+next byte)
1218+  2F03 3E 19                ld a,$19
1219+  2F05 32 C4 3B             ld (HC_p+8),a       ;25
1220+  2F08 32 C6 3B             ld (HC_p+10),a      ;25
1221+  2F0B AF                   xor a         
1222+  2F0C 32 BD 3B             ld (HC_p+1),a       ;X
1223+  2F0F 32 BF 3B             ld (HC_p+3),a       ;Y
1224+  2F12 32 C1 3B             ld (HC_p+5),a       ;
1225+  2F15 32 C5 3B             ld (HC_p+9),a       ;dots
1226+  2F18 32 C7 3B             ld (HC_p+11),a      ;dots
1227+  2F1B 32 C8 3B             ld (HC_p+12),a      ;DIX/DIY
1228+  2F1E 3E 01                ld a,%00000001
1229+  2F20 32 C3 3B             ld (HC_p+7),a       ; 256+Y down
1230+  2F23 CD C9 3B             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1231+  2F26 C9                   ret
1232+  2F27                       
1233+  2F27             ; calculates HL screen coordinates X,Y by square number
1234+  2F27             ; provide square in c-reg
1235+  2F27             GetHLbySquare:
1236+  2F27 F5                   push af
1237+  2F28 C5                   push bc
1238+  2F29 D5                   push de
1239+  2F2A 21 B4 05             ld hl,$05D2-$0005-$0019
1240+  2F2D 79                   ld a,c
1241+  2F2E E6 07                and 7
1242+  2F30                           ; X- a..h of table
1243+  2F30                      ;cp 2
1244+  2F30                      ;jp c,GetHLx_
1245+  2F30                      ;push bc
1246+  2F30                      ;ld bc,$0100
1247+  2F30                      ;add hl,bc      ; one pixel visal correction to the right
1248+  2F30                      ;pop bc
1249+  2F30             GetHLx_:         
1250+  2F30 11 00 19             ld de,$1900
1251+  2F33             GetHLbySqX:
1252+  2F33 FE 00                cp 0
1253+  2F35 28 04                jr z,GetHLokSqX
1254+  2F37 19                   add hl,de
1255+  2F38 3D                   dec a
1256+  2F39 18 F8                jr GetHLbySqX        
1257+  2F3B             GetHLokSqX:
1258+  2F3B 79                   ld a,c
1259+  2F3C CB 3F                srl a
1260+  2F3E CB 3F                srl a
1261+  2F40 CB 3F                srl a
1262+  2F42                           ; Y- 1..8 of table
1263+  2F42 11 19 00             ld de,$0019
1264+  2F45             GetHLbySqY:
1265+  2F45 FE 00                cp 0
1266+  2F47 28 07                jr z,GetHLokSqY
1267+  2F49 37                   scf
1268+  2F4A 3F                   ccf
1269+  2F4B ED 52                sbc hl,de
1270+  2F4D 3D                   dec a
1271+  2F4E 18 F5                jr GetHLbySqY        
1272+  2F50             GetHLokSqY:
1273+  2F50 D1                   pop de
1274+  2F51 C1                   pop bc
1275+  2F52 F1                   pop af
1276+  2F53 C9                   ret
1277+  2F54                      
1278+  2F54             ; calculates white square in e-reg flag by square number (a-reg)
1279+  2F54             GetWhiteSqFlagInE:
1280+  2F54 F5                   push af
1281+  2F55 79                   ld a,c
1282+  2F56 E6 07                and 7
1283+  2F58 5F                   ld e,a    ; X- a..h of table
1284+  2F59                      
1285+  2F59 79                   ld a,c
1286+  2F5A CB 3F                srl a
1287+  2F5C CB 3F                srl a
1288+  2F5E CB 3F                srl a
1289+  2F60                                ; Y- 1..8 of table
1290+  2F60 83                   add a,e
1291+  2F61 E6 01                and 1     ;mod2
1292+  2F63 5F                   ld e,a    ; contains flag
1293+  2F64 F1                   pop af
1294+  2F65 C9                   ret
1295+  2F66                               
1296+  2F66             ;----------------------------------------------------|
1297+  2F66                      ; locates index in array of pieces datas
1298+  2F66                      ; a-piece char of p..K
1299+  2F66                      ; e - square is white flag
1300+  2F66                      ; on return a contains index
1301+  2F66                                             
1302+  2F66             GetPieceIdx:
1303+  2F66 C5                   push bc
1304+  2F67 D5                   push de
1305+  2F68 E5                   push hl
1306+  2F69 21 7F 2F             ld hl,pieceL
1307+  2F6C 06 0D                ld b,13
1308+  2F6E 16 00                ld d,0
1309+  2F70             GetPcIxLoop:
1310+  2F70 BE                   cp (hl)
1311+  2F71 28 04                jr z,GetPcIx1
1312+  2F73 23                   inc hl
1313+  2F74 14                   inc d
1314+  2F75 10 F9                djnz GetPcIxLoop               
1315+  2F77             GetPcIx1:
1316+  2F77 CB 22                sla d  ; x2
1317+  2F79 7B                   ld a,e ;black or white square?; 
1318+  2F7A 82                   add a,d
1319+  2F7B E1                   pop hl
1320+  2F7C D1                   pop de
1321+  2F7D C1                   pop bc
1322+  2F7E C9                   ret        
1323+  2F7F             
1324+  2F7F 20 50 4E 42 pieceL:  .byte " PNBRQKpnbrqk"
1324+  2F83 52 51 4B 70 
1324+  2F87 6E 62 72 71 
1324+  2F8B 6B 
1325+  2F8C             
1326+  2F8C                      ;and position IX after
1327+  2F8C             GetPieceIX:
1328+  2F8C C5                   push bc
1329+  2F8D E5                   push hl
1330+  2F8E 06 00                ld b,0
1331+  2F90 4F                   ld c,a
1332+  2F91 CB 21                sla c    ; offset
1333+  2F93 DD 21 60 27          ld ix, PiecesIX
1334+  2F97 DD 09                add ix,bc
1335+  2F99 DD 6E 00             ld l,(ix)
1336+  2F9C DD 23                inc ix
1337+  2F9E DD 66 00             ld h,(ix)
1338+  2FA1 E5                   push hl
1339+  2FA2 DD E1                pop ix   ;now IX contains address
1340+  2FA4 E1                   pop hl
1341+  2FA5 C1                   pop bc
1342+  2FA6 C9                   ret
1343+  2FA7             
1344+  2FA7                      ;to determine IX for mask
1345+  2FA7             GetPieceMskIX:
1346+  2FA7 C5                   push bc
1347+  2FA8 E5                   push hl
1348+  2FA9 06 00                ld b,0
1349+  2FAB 4F                   ld c,a
1350+  2FAC CB 21                sla c
1351+  2FAE DD 21 E3 27          ld ix, PiecesMskIX     ; offset of masks
1352+  2FB2 DD 09                add ix,bc
1353+  2FB4 DD 6E 00             ld l,(ix)
1354+  2FB7 DD 23                inc ix
1355+  2FB9 DD 66 00             ld h,(ix)
1356+  2FBC E5                   push hl
1357+  2FBD DD E1                pop ix   ;now IX contains address
1358+  2FBF E1                   pop hl
1359+  2FC0 C1                   pop bc
1360+  2FC1 C9                   ret
1361+  2FC2             
1362+  2FC2             ; This copie mask of piece to VRAM
1363+  2FC2             SaveMaskToo:
1364+  2FC2 F5                   push af         ; and save the mask of piece too - to see it moving after
1365+  2FC3 C5                   push bc
1366+  2FC4 D5                   push de
1367+  2FC5 E5                   push hl
1368+  2FC6 DD E5                push ix
1369+  2FC8 79                   ld a,c
1370+  2FC9 FE 02                cp 2
1371+  2FCB 38 47                jr c, pcMsk2VRAMno
1372+  2FCD CB 3F                srl a
1373+  2FCF 3D                   dec a           ; a = index PpNn....Kk      
1374+  2FD0 4F                   ld c,a
1375+  2FD1 06 00                ld b,0
1376+  2FD3 21 FB 27             ld hl,VRAMcpMsk
1377+  2FD6 09                   add hl,bc       ; hl contains flag if piece has been saved to VRAM
1378+  2FD7 7E                   ld a,(hl)
1379+  2FD8 FE 01                cp 1
1380+  2FDA 28 38                jr z,pcMsk2VRAMno
1381+  2FDC 3E 01                ld a,1
1382+  2FDE 77                   ld (hl),a       ; now will be saved
1383+  2FDF 79                   ld a,c
1384+  2FE0 CD A7 2F             call GetPieceMskIX  ; get ix-address for mask
1385+  2FE3 11 1A 1A             ld de,$1A1A         ;26x26
1386+  2FE6 26 7B                ld h,$10 + $19*3
1387+  2FE8 2E 10                ld l,$10
1388+  2FEA 79                   ld a,c
1389+  2FEB FE 06                cp 6                ;for PNBRQK 0..5
1390+  2FED 38 07                jr c,pcMskSetY
1391+  2FEF 7C                   ld a,h
1392+  2FF0 C6 19                add a,$19           ; set next column for black pieces
1393+  2FF2 67                   ld h,a
1394+  2FF3 79                   ld a,c
1395+  2FF4 D6 06                sub 6
1396+  2FF6             pcMskSetY:         
1397+  2FF6 FE 00                cp 0
1398+  2FF8 28 09                jr z,pcMskGoodY
1399+  2FFA 3D                   dec a
1400+  2FFB F5                   push af
1401+  2FFC 7D                   ld a,l
1402+  2FFD C6 19                add a,$19
1403+  2FFF 6F                   ld l,a
1404+  3000 F1                   pop af
1405+  3001 18 F3                jr pcMskSetY
1406+  3003             pcMskGoodY:
1407+  3003 CD A7 39             call HMMC           ;copy mask RAM -> VRAM                  
1408+  3006             
1409+  3006 EB                   ex de,hl            ; de = hl
1410+  3007 21 07 28             ld hl,VRAMcpMskXY   ; save X,Y for mask of piece index
1411+  300A 06 00                ld b,0
1412+  300C 09                   add hl,bc
1413+  300D 09                   add hl,bc         
1414+  300E 72                   ld (hl),d           ;save X
1415+  300F 23                   inc hl
1416+  3010 73                   ld (hl),e           ;save Y
1417+  3011                      
1418+  3011 CD F5 2E             call COPY2VRAMoutside
1419+  3014                      
1420+  3014             pcMsk2VRAMno:        
1421+  3014 DD E1                pop ix
1422+  3016 E1                   pop hl
1423+  3017 D1                   pop de
1424+  3018 C1                   pop bc
1425+  3019 F1                   pop af
1426+  301A C9                   ret
1427+  301B             
1428+  301B 00          VRAM_msx .byte 0  ; flag that VRAM contains it
1429+  301C             
1430+  301C             ; Puts MSX logo on screen
1431+  301C             PutMSXlogo:
1432+  301C F5                   push af
1433+  301D C5                   push bc
1434+  301E D5                   push de
1435+  301F E5                   push hl
1436+  3020 DD E5                push ix
1437+  3022                      
1438+  3022 3A 1B 30             ld a,(VRAM_msx)
1439+  3025 FE 00                cp 0
1440+  3027 20 1A                jr nz,PutMSXlog_Copy
1441+  3029                              
1442+  3029 26 DD                ld h,255-$22
1443+  302B 2E AF                ld l,209-$22
1444+  302D 11 0C 1E             ld de,$1E0C
1445+  3030 DD 21 F1 C1          ld ix, dtMSXlogo+6     ; top
1446+  3034 CD A7 39             call HMMC              ;copy RAM -> VRAM
1447+  3037 0E 00                ld c,0
1448+  3039 CD E6 30             call COPY_frames2VRAM_outside ;the same as for frame  
1449+  303C                      
1450+  303C 3E 01                ld a,1
1451+  303E 32 1B 30             ld (VRAM_msx),a
1452+  3041 18 0C                jr PutMSXex
1453+  3043                               
1454+  3043             PutMSXlog_Copy:
1455+  3043 26 DD                ld h,255-$22
1456+  3045 2E AF                ld l,209-$22
1457+  3047 11 0C 1E             ld de,$1E0C            ; copy from VRAM outside > VRAM on screen
1458+  304A 0E 00                ld c,0
1459+  304C CD 31 31             call COPY_frames_fromVRAM
1460+  304F                      
1461+  304F             PutMSXex:                                                                                                                                                        
1462+  304F DD E1                pop ix
1463+  3051 E1                   pop hl
1464+  3052 D1                   pop de
1465+  3053 C1                   pop bc        
1466+  3054 F1                   pop af
1467+  3055 C9                   ret                  
1468+  3056             
1469+  3056                      
1470+  3056             ; Puts frame for chess board
1471+  3056             PutFrame:
1472+  3056 F5                   push af
1473+  3057 C5                   push bc
1474+  3058 D5                   push de
1475+  3059 E5                   push hl
1476+  305A DD E5                push ix
1477+  305C 3A E5 30             ld a,(VRAM_frame)
1478+  305F FE 00                cp 0
1479+  3061 20 4F                jr nz,CopyFramesFromVRAM
1480+  3063                                ; DRAW and SAVE
1481+  3063 21 00 00             ld hl,0
1482+  3066 11 08 D2             ld de,$D208
1483+  3069 DD 21 E1 AC          ld ix, dtFRUP+6     ; top
1484+  306D CD A7 39             call HMMC           ;copy RAM -> VRAM
1485+  3070 0E 01                ld c,1
1486+  3072 CD E6 30             call COPY_frames2VRAM_outside
1487+  3075             
1488+  3075 21 00 00             ld hl,0
1489+  3078 11 D2 08             ld de,$08D2
1490+  307B DD 21 45 A6          ld ix, dtFRLF+6     ; left
1491+  307F CD A7 39             call HMMC           ;copy RAM -> VRAM
1492+  3082 0E 02                ld c,2
1493+  3084 CD E6 30             call COPY_frames2VRAM_outside
1494+  3087             
1495+  3087 21 00 CA             ld hl,$D200-$0800
1496+  308A 11 D2 08             ld de,$08D2
1497+  308D DD 21 93 A9          ld ix, dtFRRT+6     ; right
1498+  3091 CD A7 39             call HMMC           ;copy RAM -> VRAM
1499+  3094 0E 00                ld c,0
1500+  3096 CD E6 30             call COPY_frames2VRAM_outside
1501+  3099                      
1502+  3099 21 CA 00             ld hl,$00D2-$0008
1503+  309C 11 08 D2             ld de,$D208
1504+  309F DD 21 F7 A2          ld ix, dtFRDN+6     ; bottom
1505+  30A3 CD A7 39             call HMMC           ;copy RAM -> VRAM
1506+  30A6 0E 00                ld c,0
1507+  30A8 CD E6 30             call COPY_frames2VRAM_outside
1508+  30AB                      
1509+  30AB 3E 01                ld a,1
1510+  30AD 32 E5 30             ld (VRAM_frame),a
1511+  30B0                      
1512+  30B0 18 2C                jr PutFramesEx
1513+  30B2                      
1514+  30B2             CopyFramesFromVRAM:
1515+  30B2 21 00 00             ld hl,0
1516+  30B5 11 08 D2             ld de,$D208         ; top
1517+  30B8 0E 01                ld c,1         
1518+  30BA CD 31 31             call COPY_frames_fromVRAM
1519+  30BD             
1520+  30BD 21 00 00             ld hl,0
1521+  30C0 11 D2 08             ld de,$08D2         ; left 
1522+  30C3 0E 02                ld c,2           
1523+  30C5 CD 31 31             call COPY_frames_fromVRAM
1524+  30C8             
1525+  30C8 21 00 CA             ld hl,$D200-$0800
1526+  30CB 11 D2 08             ld de,$08D2         ; right
1527+  30CE 0E 00                ld c,0         
1528+  30D0 CD 31 31             call COPY_frames_fromVRAM
1529+  30D3                      
1530+  30D3 21 CA 00             ld hl,$00D2-$0008
1531+  30D6 11 08 D2             ld de,$D208         ; bottom
1532+  30D9 0E 00                ld c,0         
1533+  30DB CD 31 31             call COPY_frames_fromVRAM
1534+  30DE             
1535+  30DE             PutFramesEx:
1536+  30DE DD E1                pop ix
1537+  30E0 E1                   pop hl
1538+  30E1 D1                   pop de
1539+  30E2 C1                   pop bc
1540+  30E3 F1                   pop af
1541+  30E4 C9                   ret
1542+  30E5             
1543+  30E5 00          VRAM_frame:  .byte 0         ; 1 if frame saved to VRAM
1544+  30E6             
1545+  30E6             ; if c=0 then use XY of HL as it is
1546+  30E6             ; if c=1 then upper border of frame
1547+  30E6             ; if c=2 then left border of frame
1548+  30E6             COPY_frames2VRAM_outside:     ;SAVES FRAME
1549+  30E6 F5                   push af
1550+  30E7 E5                   push hl
1551+  30E8 7C                   ld a,h
1552+  30E9 32 BC 3B             ld (HC_p+0),a       ;X = H
1553+  30EC 7D                   ld a,l            
1554+  30ED 32 BE 3B             ld (HC_p+2),a       ;Y = L
1555+  30F0 7A                   ld a,d
1556+  30F1 32 C4 3B             ld (HC_p+8),a       ;D width
1557+  30F4 7B                   ld a,e
1558+  30F5 32 C6 3B             ld (HC_p+10),a      ;E height
1559+  30F8 AF                   xor a        
1560+  30F9 32 BD 3B             ld (HC_p+1),a       ;X
1561+  30FC 32 BF 3B             ld (HC_p+3),a       ;Y
1562+  30FF 32 C1 3B             ld (HC_p+5),a       ;
1563+  3102 32 C5 3B             ld (HC_p+9),a       ;dots
1564+  3105 32 C7 3B             ld (HC_p+11),a      ;dots
1565+  3108 32 C8 3B             ld (HC_p+12),a      ;DIX/DIY
1566+  310B 3E 03                ld a,%00000011
1567+  310D 32 C3 3B             ld (HC_p+7),a       ; 512+Y down
1568+  3110                      
1569+  3110 79                   ld a,c
1570+  3111 FE 01                cp 1
1571+  3113 28 06                jr z,CPYfrUP
1572+  3115 FE 02                cp 2
1573+  3117 28 07                jr z,CPYfrLF
1574+  3119 18 08                jr CPY_asItIs        
1575+  311B             CPYfrUP:
1576+  311B 21 D4 00             ld hl,$00D2+$0002
1577+  311E 18 03                jr CPY_asItIs
1578+  3120             CPYfrLF:
1579+  3120 21 00 D4             ld hl,$D200+$0200
1580+  3123             
1581+  3123             CPY_asItIs:
1582+  3123 7C                   ld a,h
1583+  3124 32 C0 3B             ld (HC_p+4),a       ;to X
1584+  3127 7D                   ld a,l
1585+  3128 32 C2 3B             ld (HC_p+6),a       ;to Y (+next 2 bits)
1586+  312B E1                   pop hl
1587+  312C CD C9 3B             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1588+  312F F1                   pop af
1589+  3130 C9                   ret
1590+  3131                      
1591+  3131             COPY_frames_fromVRAM:        ;Copies back FRAME from VRAM
1592+  3131 F5                   push af
1593+  3132 E5                   push hl
1594+  3133 7C                   ld a,h
1595+  3134 32 C0 3B             ld (HC_p+4),a       ;to X
1596+  3137 7D                   ld a,l            
1597+  3138 32 C2 3B             ld (HC_p+6),a       ;to Y (+next 2 bits)
1598+  313B 7A                   ld a,d
1599+  313C 32 C4 3B             ld (HC_p+8),a       ;D width
1600+  313F 7B                   ld a,e
1601+  3140 32 C6 3B             ld (HC_p+10),a      ;E height
1602+  3143 AF                   xor a        
1603+  3144 32 BD 3B             ld (HC_p+1),a       ;X
1604+  3147 32 C3 3B             ld (HC_p+7),a       ;to Y
1605+  314A 32 C1 3B             ld (HC_p+5),a       ;
1606+  314D 32 C5 3B             ld (HC_p+9),a       ;dots
1607+  3150 32 C7 3B             ld (HC_p+11),a      ;dots
1608+  3153 32 C8 3B             ld (HC_p+12),a      ;DIX/DIY
1609+  3156 3E 03                ld a,%00000011
1610+  3158 32 BF 3B             ld (HC_p+3),a       ; 512+Y down
1611+  315B                      
1612+  315B 79                   ld a,c
1613+  315C FE 01                cp 1
1614+  315E 28 06                jr z,BCPYfrUP
1615+  3160 FE 02                cp 2
1616+  3162 28 07                jr z,BCPYfrLF
1617+  3164 18 08                jr BCPY_asItIs        
1618+  3166             BCPYfrUP:
1619+  3166 21 D4 00             ld hl,$00D2+$0002
1620+  3169 18 03                jr BCPY_asItIs
1621+  316B             BCPYfrLF:
1622+  316B 21 00 D4             ld hl,$D200+$0200
1623+  316E             
1624+  316E             BCPY_asItIs:
1625+  316E 7C                   ld a,h
1626+  316F 32 BC 3B             ld (HC_p+0),a       ;X = H
1627+  3172 7D                   ld a,l
1628+  3173 32 BE 3B             ld (HC_p+2),a       ;Y = L
1629+  3176 E1                   pop hl
1630+  3177 CD C9 3B             call HMMMf          ;copy VRAM outside visible screen -> VRAM
1631+  317A F1                   pop af
1632+  317B C9                   ret
1633+  317C             
1634+  317C                             
1635+  317C                      
1636+  317C             ; Puts rounded identification about side to move
1637+  317C             
1638+  317C             PutToMove:
1639+  317C F5                   push af
1640+  317D C5                   push bc
1641+  317E D5                   push de
1642+  317F E5                   push hl
1643+  3180 DD E5                push ix
1644+  3182                      
1645+  3182 DD 21 1F 28          ld ix,CircIX
1646+  3186                               
1647+  3186 3A E2 27             ld a,(VRAMcirc)
1648+  3189 FE 00                cp 0
1649+  318B 20 30                jr nz,circ2VRAM2
1650+  318D                                                  
1651+  318D                      ;DRAW and SAVE a copy                
1652+  318D 3E 01                ld a,1
1653+  318F 32 E2 27             ld (VRAMcirc),a     ; bitmap saved flag
1654+  3192                      
1655+  3192 06 00                ld b,0       ; loop 4 bitmaps
1656+  3194 26 00                ld h,0       ; X
1657+  3196             Save2VRAMsgnLoop:
1658+  3196 C5                   push bc
1659+  3197                      
1660+  3197 DD E5                push ix            ; table of bitmaps
1661+  3199 CD F7 31             call GetIXfrom4tb  ; ix - address in VRAM for current bitmap
1662+  319C                      
1663+  319C 2E C3                ld l,209-$E    ; hl = X,Y
1664+  319E                      
1665+  319E EB                   ex de,hl       ; de = hl
1666+  319F CD F5 2E             call COPY2VRAMoutside  ; copy blank to put sign on it with transp.logical                 
1667+  31A2 EB                   ex de,hl                          
1668+  31A3                                                          
1669+  31A3 11 0E 0E             ld de,$0E0E    ; 14x14
1670+  31A6 CD A7 39             call HMMC      ;copy RAM -> VRAM
1671+  31A9                 
1672+  31A9 CD 05 32             call SgCopy2VRAMtrsp  ;copies 13x13 (w/o transparent)
1673+  31AC                      
1674+  31AC DD E1                pop ix
1675+  31AE DD 23                inc ix
1676+  31B0 DD 23                inc ix
1677+  31B2                      
1678+  31B2 7C                   ld a,h
1679+  31B3 C6 0E                add a,$E       ; X=X+14
1680+  31B5 67                   ld h,a
1681+  31B6                      
1682+  31B6 C1                   pop bc
1683+  31B7 04                   inc b
1684+  31B8 78                   ld a,b
1685+  31B9 FE 04                cp 4
1686+  31BB 20 D9                jr nz,Save2VRAMsgnLoop       
1687+  31BD                        
1688+  31BD             circ2VRAM2:         
1689+  31BD                      ;COPY sign from VRAM which side to move
1690+  31BD                      
1691+  31BD 26 00                ld h,0                  ;from X for case "white to move" (bitmaps are placed horizontally)
1692+  31BF 2E C3                ld l,209-$E             ;from Y
1693+  31C1                      
1694+  31C1 3A 81 01             ld a,(SIDE)
1695+  31C4 FE 00                cp 0
1696+  31C6 28 0A                jr z,SgWhite2Move
1697+  31C8 DD 23                inc ix
1698+  31CA DD 23                inc ix
1699+  31CC DD 23                inc ix
1700+  31CE DD 23                inc ix   ;will use two bitmaps at addr+4 
1701+  31D0 26 1C                ld h,$E+$E              ;from X for case "black to move"            
1702+  31D2             SgWhite2Move:
1703+  31D2                      
1704+  31D2 DD E5                push ix                 ; table of bitmaps
1705+  31D4 CD F7 31             call GetIXfrom4tb       ; ix - address in VRAM for current bitmap of white side
1706+  31D7                      
1707+  31D7 16 D2                ld d,204+6
1708+  31D9 1E C2                ld e,204-10
1709+  31DB                      
1710+  31DB CD 3C 32             call SgCopy2Board  ;white sign
1711+  31DE                      
1712+  31DE DD E1                pop ix ; restore table of bitmaps
1713+  31E0 DD 23                inc ix
1714+  31E2 DD 23                inc ix ; to next bitmap pointer
1715+  31E4             
1716+  31E4 CD F7 31             call GetIXfrom4tb  ; ix - address in VRAM for current bitmap of black side
1717+  31E7                      
1718+  31E7 7C                   ld a,h
1719+  31E8 C6 0E                add a,$E       ; X=X+14
1720+  31EA 67                   ld h,a
1721+  31EB                      
1722+  31EB 1E 08                ld e,8
1723+  31ED CD 3C 32             call SgCopy2Board  ;black sign
1724+  31F0                      
1725+  31F0 DD E1                pop ix
1726+  31F2 E1                   pop hl
1727+  31F3 D1                   pop de
1728+  31F4 C1                   pop bc
1729+  31F5 F1                   pop af
1730+  31F6 C9                   ret
1731+  31F7             
1732+  31F7             GetIXfrom4tb:
1733+  31F7 D5                   push de
1734+  31F8 DD 5E 00             ld e,(ix)
1735+  31FB DD 23                inc ix
1736+  31FD DD 56 00             ld d,(ix)
1737+  3200                               
1738+  3200 D5                   push de
1739+  3201 DD E1                pop ix         ; ix - address in VRAM
1740+  3203 D1                   pop de
1741+  3204 C9                   ret
1742+  3205             
1743+  3205             ;Copy with logical transparent
1744+  3205             SgCopy2VRAMtrsp: 
1745+  3205                      
1746+  3205 7C                   ld a,h              ;X
1747+  3206 32 F4 3B             ld (LM_p+0),a       ;
1748+  3209 32 F8 3B             ld (LM_p+4),a       ;to X          
1749+  320C 7D                   ld a,l              ;Y
1750+  320D 32 F6 3B             ld (LM_p+2),a       ;
1751+  3210 32 FA 3B             ld (LM_p+6),a       ;to Y         
1752+  3213 3E 0E                ld a,$E
1753+  3215 32 FC 3B             ld (LM_p+8),a       ;14
1754+  3218 32 FE 3B             ld (LM_p+10),a      ;14
1755+  321B AF                   xor a
1756+  321C 32 F5 3B             ld (LM_p+1),a
1757+  321F 32 F9 3B             ld (LM_p+5),a       ;
1758+  3222 32 F7 3B             ld (LM_p+3),a       ;            
1759+  3225 32 FD 3B             ld (LM_p+9),a       ;dots
1760+  3228 32 FF 3B             ld (LM_p+11),a      ;dots
1761+  322B 32 00 3C             ld (LM_p+12),a      ;DIX/DIY
1762+  322E 3E 01                ld a,%00000001
1763+  3230 32 FB 3B             ld (LM_p+7),a       ;256+Y
1764+  3233 3E 08                ld a,%00001000      ;TIMP copy
1765+  3235 32 01 3C             ld (LM_p+13),a      ;logical
1766+  3238 CD 02 3C             call LMMMf          ;copy VRAM -> VRAM without transparent color
1767+  323B C9                   ret                 ;to invisible area          
1768+  323C                      
1769+  323C             SgCopy2Board:
1770+  323C             
1771+  323C 7C                   ld a,h              ;saved X
1772+  323D 32 BC 3B             ld (HC_p+0),a       ;X
1773+  3240 7D                   ld a,l              ;saved Y                      
1774+  3241 32 BE 3B             ld (HC_p+2),a       ;Y
1775+  3244 7A                   ld a,d         
1776+  3245 32 C0 3B             ld (HC_p+4),a       ;to X
1777+  3248 7B                   ld a,e         
1778+  3249 32 C2 3B             ld (HC_p+6),a       ;to Y (+next 2 bits)
1779+  324C 3E 0E                ld a,$E
1780+  324E 32 C4 3B             ld (HC_p+8),a       ;14
1781+  3251 32 C6 3B             ld (HC_p+10),a      ;14
1782+  3254 AF                   xor a        
1783+  3255 32 BD 3B             ld (HC_p+1),a       ;X
1784+  3258 32 C3 3B             ld (HC_p+7),a       ;to Y
1785+  325B 32 C1 3B             ld (HC_p+5),a       ;
1786+  325E 32 C5 3B             ld (HC_p+9),a       ;dots
1787+  3261 32 C7 3B             ld (HC_p+11),a      ;dots
1788+  3264 32 C8 3B             ld (HC_p+12),a      ;DIX/DIY
1789+  3267 3E 01                ld a,%00000001
1790+  3269 32 BF 3B             ld (HC_p+3),a       ; 256+Y
1791+  326C CD C9 3B             call HMMMf          ;copy VRAM outside visible screen -> VRAM on board                         
1792+  326F C9                   ret
1793+  3270             
1794+  3270             
1795+  3270             ;----------------------------------------------------|
1796+  3270             DrawCursor:              ; Draws cursor (UserControl)
1797+  3270 F5                   push af
1798+  3271 3A 5B 27             ld a,(Stylo)
1799+  3274 CB 47                bit 0,a
1800+  3276 28 3C                jr z,noCursors
1801+  3278             
1802+  3278 C5                   push bc
1803+  3279 D5                   push de
1804+  327A E5                   push hl
1805+  327B                      
1806+  327B 3A 5D 27             ld a,(DragSq)
1807+  327E FE FF                cp $ff
1808+  3280 28 16                jr z,DrawCursorOnly
1809+  3282             
1810+  3282 4F                   ld c,a             ; Draw DragSquare too
1811+  3283 CD 27 2F             call GetHLbySquare ; Get X,Y
1812+  3286                           
1813+  3286 06 0E                ld b,$E            ; color
1814+  3288 0E 16                ld c,$16           ; length of lines
1815+  328A CD B6 32             call CursRectDraw  ; line
1816+  328D                      
1817+  328D 01 01 01             ld bc,$0101
1818+  3290 09                   add hl,bc          ; shift 1 dot right down
1819+  3291             
1820+  3291 06 0E                ld b,$E            ; color
1821+  3293 0E 14                ld c,$14           ; double-line
1822+  3295 CD B6 32             call CursRectDraw
1823+  3298                      
1824+  3298             DrawCursorOnly:         
1825+  3298 3A 5C 27             ld a,(CursorSq)
1826+  329B 4F                   ld c,a
1827+  329C CD 27 2F             call GetHLbySquare ; Get X,Y
1828+  329F                           
1829+  329F 06 0F                ld b,$F            ; color
1830+  32A1 0E 16                ld c,$16           ; length of lines
1831+  32A3 CD B6 32             call CursRectDraw  ; line
1832+  32A6                      
1833+  32A6 01 01 01             ld bc,$0101
1834+  32A9 09                   add hl,bc          ; shift 1 dot right down
1835+  32AA             
1836+  32AA 06 0F                ld b,$F            ; color
1837+  32AC 0E 14                ld c,$14           ; double-line
1838+  32AE CD B6 32             call CursRectDraw
1839+  32B1                      
1840+  32B1 E1                   pop hl         
1841+  32B2 D1                   pop de
1842+  32B3 C1                   pop bc
1843+  32B4             noCursors:         
1844+  32B4 F1                   pop af
1845+  32B5 C9                   ret
1846+  32B6             
1847+  32B6             CursRectDraw:               ; rectangle with length provided in c, color in b        
1848+  32B6 7C                   ld a,h
1849+  32B7 81                   add a,c
1850+  32B8 57                   ld d,a             ; X+25
1851+  32B9 5D                   ld e,l             ; Y
1852+  32BA 3E 00                ld a,0             ; just overwrite
1853+  32BC CD 55 3B             call LINE          ; Line 1
1854+  32BF 62                   ld h,d
1855+  32C0 7B                   ld a,e
1856+  32C1 81                   add a,c
1857+  32C2 3C                   inc a
1858+  32C3 3C                   inc a
1859+  32C4 5F                   ld e,a
1860+  32C5 3E 00                ld a,0             ; just overwrite
1861+  32C7 CD 55 3B             call LINE          ; Line 2
1862+  32CA 6B                   ld l,e
1863+  32CB 7A                   ld a,d
1864+  32CC 91                   sub c
1865+  32CD 57                   ld d,a
1866+  32CE 3E 00                ld a,0             ; just overwrite
1867+  32D0 CD 55 3B             call LINE          ; Line 3
1868+  32D3 62                   ld h,d
1869+  32D4 7B                   ld a,e
1870+  32D5 91                   sub c
1871+  32D6 3D                   dec a
1872+  32D7 3D                   dec a
1873+  32D8 5F                   ld e,a
1874+  32D9 3E 00                ld a,0             ; just overwrite
1875+  32DB CD 55 3B             call LINE          ; Line 4
1876+  32DE 6B                   ld l,e             ; hl now the same        
1877+  32DF C9                   ret
1878+  32E0             
1879+  32E0             ;------------------------------------------------------
1880+  32E0             ; KEY & CURSOR CONTROLLER
1881+  32E0             ;
1882+  32E0             ; a-reg contains ASCII code of last key pressed
1883+  32E0             ; Arrows controls for cursor.
1884+  32E0             ; Can't go outside board,
1885+  32E0             ; Can't go twice (avoid fast emulator speed)
1886+  32E0             ;
1887+  32E0             
1888+  32E0 00          PreKeyWas:  .byte 0
1889+  32E1             
1890+  32E1             Cursor_Key_Controls:
1891+  32E1             
1892+  32E1 F5                   push af
1893+  32E2 C5                   push bc
1894+  32E3                      
1895+  32E3 FE 7A                cp 'z'             ; If Z was pressed, double action
1896+  32E5 20 0C                jr nz, CkeyIf_z
1897+  32E7             CkeyZ:         
1898+  32E7                                         ; use the same key that was before
1899+  32E7 3A E0 32             ld a,(PreKeyWas)
1900+  32EA 4F                   ld c,a
1901+  32EB 3E 00                ld a,0
1902+  32ED 32 E0 32             ld (PreKeyWas),a
1903+  32F0 79                   ld a,c
1904+  32F1 18 1B                jr CkeyWhatKeyCode         
1905+  32F3             CkeyIf_z:
1906+  32F3 FE 5A                cp 'Z'
1907+  32F5 28 F0                jr z, CkeyZ
1908+  32F7 FE 2F                cp '/'
1909+  32F9 28 EC                jr z, CkeyZ
1910+  32FB FE 7E                cp '~'
1911+  32FD 28 E8                jr z, CkeyZ
1912+  32FF FE 7C                cp '|'
1913+  3301 28 E4                jr z, CkeyZ     ; bunch of the same keys
1914+  3303             CkeyNormal:
1915+  3303                 
1916+  3303 4F                   ld c,a
1917+  3304 3A E0 32             ld a,(PreKeyWas)
1918+  3307 B9                   cp c
1919+  3308 28 36                jr z,CkeyNo       ; the same, emulator may be too fast
1920+  330A 79                   ld a,c
1921+  330B 32 E0 32             ld (PreKeyWas),a  ; key now
1922+  330E                      
1923+  330E             CkeyWhatKeyCode:
1924+  330E FE 1B                cp 27
1925+  3310 20 07                jr nz, CkeyIf_space
1926+  3312                      
1927+  3312~            #ifdef PGN_COMPILE
1928+  3312~                    ; no exit because too heavy memory usage to continue after
1929+  3312             #else       
1930+  3312                      
1931+  3312 3E 01                ld a,1                     ; Exit on ESC
1932+  3314 32 5F 27             ld (Grph_Exit),a
1933+  3317             #endif         
1934+  3317 18 27                jr CkeyNo
1935+  3319                               
1936+  3319             CkeyIf_space:                  
1937+  3319 FE 20                cp 32
1938+  331B 20 05                jr nz, CkeyIfEnter
1939+  331D             CkeySpace:                         ; SPACE pressed
1940+  331D CD 43 33             call CKeySpacePressed
1941+  3320 18 1E                jr CkeyNo
1942+  3322                      
1943+  3322             CkeyIfEnter:
1944+  3322 FE 0D                cp 13
1945+  3324 28 F7                jr z, CkeySpace           ; the same as space
1946+  3326                       ;and process other key controls
1947+  3326                                               
1948+  3326 CD 9F 33             call IfCursorKeys       ; process if cursor key has been pressed
1949+  3329             
1950+  3329             CKeyPsetup:
1951+  3329             
1952+  3329~            #ifdef PGN_COMPILE
1953+  3329~            
1954+  3329~                     nop
1955+  3329~                     nop
1956+  3329~                     nop
1957+  3329             #else
1958+  3329                      
1959+  3329 CD 06 34             call IfPieceSetupKeys   ; process if setup of pieces key has been pressed
1960+  332C             #endif
1961+  332C              
1962+  332C FE 75                cp 'u'             ; If U was pressed, try undomove
1963+  332E 20 0C                jr nz, CkeyIf_u
1964+  3330             CkeyU:         
1965+  3330                                         ; use the same key that was before
1966+  3330             
1967+  3330~            #ifdef PGN_COMPILE
1968+  3330~            
1969+  3330~                     call DO_Replay_UnmakeMove   ; unmake last move in replay
1970+  3330             #else
1971+  3330 3A 5B 27             ld a,(Stylo)
1972+  3333 CB 47                bit 0,a
1973+  3335 28 09                jr z,CkeyNo        ; if cursor allowed
1974+  3337 CD D8 29             call Chess_UnMake_Move_U    ; unmake last move
1975+  333A             #endif
1976+  333A 18 04                jr CkeyNo
1977+  333C             CkeyIf_u:
1978+  333C FE 55                cp 'U'
1979+  333E 28 F0                jr z, CkeyU
1980+  3340                      
1981+  3340             CkeyIfNoU:
1982+  3340             
1983+  3340             CkeyNo:
1984+  3340 C1                   pop bc
1985+  3341 F1                   pop af
1986+  3342 C9                   ret 
1987+  3343             
1988+  3343                     
1989+  3343             ;-------------------- If space key pressed -the long one
1990+  3343             CKeySpacePressed:         
1991+  3343 F5                   push af
1992+  3344 3A 5B 27             ld a,(Stylo)
1993+  3347                      
1994+  3347~            #ifdef PGN_COMPILE 
1995+  3347~                     
1996+  3347~                     call DO_Replay_Move            ; if REPLAY mode
1997+  3347~            
1998+  3347             #else         
1999+  3347                      
2000+  3347 CB 47                bit 0,a                   ; if cursor is not allowed 
2001+  3349 28 4F                jr z,CSpcOver
2002+  334B                               
2003+  334B CB 57                bit 2,a                   ; if setup of pieces then empty square
2004+  334D 28 07                jr z,CSpcNPS
2005+  334F 3E 20                ld a,' '
2006+  3351 CD 06 34             call IfPieceSetupKeys     ; process if setup of pieces key has been pressed
2007+  3354 18 44                jr CSpcOver
2008+  3356             CSpcNPS:         
2009+  3356 CB 4F                bit 1,a                   ; if can not drag and move pieces 
2010+  3358 28 40                jr z,CSpcOver
2011+  335A             
2012+  335A 3A 2D 2B             ld a,(AnimI)
2013+  335D FE 00                cp 0
2014+  335F 20 39                jr nz,CSpcOver            ; animation process right now
2015+  3361 3A 5D 27             ld a,(DragSq)
2016+  3364 FE FF                cp $ff
2017+  3366 20 16                jr nz, CDragWas
2018+  3368             CSpcDragz:         
2019+  3368 3E 00                ld a,0
2020+  336A CD 4B 2A             call IsValidDragMove
2021+  336D FE 00                cp 0
2022+  336F 28 29                jr z, CSpcOver           ; if drag not valid
2023+  3371                               
2024+  3371 3A 5C 27             ld a,(CursorSq)
2025+  3374 32 5D 27             ld (DragSq),a
2026+  3377 18 21                jr CSpcOver
2027+  3379                      
2028+  3379             CSpcTryDrag:
2029+  3379 CD D3 2C             call DrawBoard       ; redraw all
2030+  337C 18 EA                jr CSpcDragz        
2031+  337E                      
2032+  337E             CDragWas:
2033+  337E 32 1B 2B             ld (Move_sq_f),a
2034+  3381 3E 01                ld a,1
2035+  3383 CD 4B 2A             call IsValidDragMove
2036+  3386 F5                   push af
2037+  3387 3E FF                ld a,$ff
2038+  3389 32 5D 27             ld (DragSq),a
2039+  338C F1                   pop af
2040+  338D FE 00                cp 0
2041+  338F 28 E8                jr z, CSpcTryDrag      ; if move not valid
2042+  3391             
2043+  3391 3A 5C 27             ld a,(CursorSq)
2044+  3394 32 1C 2B             ld (Move_sq_t),a
2045+  3397                      
2046+  3397 CD B5 29             call Chess_Move_Cursor          ; this will set animation and do the move
2047+  339A             CSpcOver:
2048+  339A CD 70 32             call DrawCursor
2049+  339D                      
2050+  339D             #endif         
2051+  339D F1                   pop af
2052+  339E C9                   ret         
2053+  339F                      
2054+  339F             ;---------------------------------
2055+  339F             ; If cursor arrow keys pressed
2056+  339F             ;
2057+  339F             IfCursorKeys:
2058+  339F             
2059+  339F F5                   push af     
2060+  33A0 FE 1D                cp 29
2061+  33A2 20 17                jr nz, CkeyIfCurs2
2062+  33A4                                                ; LEFT pressed                                 
2063+  33A4 3A 5C 27             ld a,(CursorSq)
2064+  33A7 4F                   ld c,a                                   
2065+  33A8 E6 07                and 7
2066+  33AA FE 00                cp 0
2067+  33AC 28 56                jr z,CkeyCKexit
2068+  33AE 79                   ld a,c
2069+  33AF CD EA 2C             call DrawSquare
2070+  33B2 3D                   dec a
2071+  33B3                      
2072+  33B3             CKeyCursMv:
2073+  33B3 32 5C 27             ld (CursorSq),a
2074+  33B6 CD 70 32             call DrawCursor
2075+  33B9 18 49                jr CkeyCKexit
2076+  33BB             
2077+  33BB             CkeyIfCurs2:  
2078+  33BB FE 1C                cp 28
2079+  33BD 20 11                jr nz, CkeyIfCurs3                                       
2080+  33BF                                                ; RIGHT pressed                                      
2081+  33BF 3A 5C 27             ld a,(CursorSq)
2082+  33C2 4F                   ld c,a         
2083+  33C3 E6 07                and 7
2084+  33C5 FE 07                cp 7
2085+  33C7 28 3B                jr z,CkeyCKexit
2086+  33C9 79                   ld a,c
2087+  33CA CD EA 2C             call DrawSquare
2088+  33CD 3C                   inc a         
2089+  33CE 18 E3                jr CKeyCursMv
2090+  33D0             
2091+  33D0                                                                                                                           
2092+  33D0             CkeyIfCurs3:
2093+  33D0 FE 1E                cp 30
2094+  33D2 20 16                jr nz, CkeyIfCurs4                                       
2095+  33D4                                                ; UP pressed                                   
2096+  33D4 3A 5C 27             ld a,(CursorSq)
2097+  33D7 4F                   ld c,a                                           
2098+  33D8 CB 3F                srl a
2099+  33DA CB 3F                srl a
2100+  33DC CB 3F                srl a
2101+  33DE FE 07                cp 7
2102+  33E0 28 22                jr z,CkeyCKexit
2103+  33E2 79                   ld a,c
2104+  33E3 CD EA 2C             call DrawSquare
2105+  33E6 C6 08                add a,8                 
2106+  33E8 18 C9                jr CKeyCursMv
2107+  33EA                                                 
2108+  33EA             CkeyIfCurs4:
2109+  33EA FE 1F                cp 31
2110+  33EC 20 16                jr nz, CkeyCKexit                                      
2111+  33EE                                                ; DOWN pressed                                   
2112+  33EE 3A 5C 27             ld a,(CursorSq)
2113+  33F1 4F                   ld c,a                                           
2114+  33F2 CB 3F                srl a
2115+  33F4 CB 3F                srl a
2116+  33F6 CB 3F                srl a
2117+  33F8 FE 00                cp 0
2118+  33FA 28 08                jr z,CkeyCKexit
2119+  33FC 79                   ld a,c
2120+  33FD CD EA 2C             call DrawSquare
2121+  3400 D6 08                sub 8        
2122+  3402 18 AF                jr CKeyCursMv
2123+  3404                      
2124+  3404             CkeyCKexit:
2125+  3404 F1                   pop af         
2126+  3405 C9                   ret
2127+  3406             
2128+  3406             ;---------------------------------
2129+  3406             ; If piece keys PNBRQK pressed
2130+  3406             ;
2131+  3406             IfPieceSetupKeys:
2132+  3406 F5                   push af
2133+  3407 C5                   push bc
2134+  3408 D5                   push de
2135+  3409 E5                   push hl
2136+  340A 47                   ld b,a   ;save code
2137+  340B FE 50                cp 'P'
2138+  340D 28 32                jr z,CsetupWP
2139+  340F FE 4E                cp 'N'
2140+  3411 28 3B                jr z,CsetupWN
2141+  3413 FE 42                cp 'B'
2142+  3415 28 37                jr z,CsetupWB
2143+  3417 FE 52                cp 'R'
2144+  3419 28 33                jr z,CsetupWR
2145+  341B FE 51                cp 'Q'
2146+  341D 28 2F                jr z,CsetupWQ
2147+  341F FE 4B                cp 'K'
2148+  3421 28 2D                jr z,CsetupWK
2149+  3423 FE 70                cp 'p'
2150+  3425 28 1A                jr z,CsetupBP
2151+  3427 FE 6E                cp 'n'
2152+  3429 28 23                jr z,CsetupBN
2153+  342B FE 62                cp 'b'
2154+  342D 28 1F                jr z,CsetupBB
2155+  342F FE 72                cp 'r'
2156+  3431 28 1B                jr z,CsetupBR
2157+  3433 FE 71                cp 'q'
2158+  3435 28 17                jr z,CsetupBQ
2159+  3437 FE 6B                cp 'k'
2160+  3439 28 21                jr z,CsetupBK
2161+  343B FE 20                cp ' '
2162+  343D 28 2B                jr z,CsetupBlank
2163+  343F 18 27                jr CsetupDoNothing
2164+  3441             CsetupWP:
2165+  3441             CsetupBP:
2166+  3441 3A 5C 27             ld a,(CursorSq)
2167+  3444 FE 08                cp 8
2168+  3446 38 7C                jr c,CsetupKexit
2169+  3448 FE 38                cp 56
2170+  344A 30 78                jr nc,CsetupKexit
2171+  344C 18 1E                jr Csetup2        
2172+  344E             CsetupWN:
2173+  344E             CsetupWB:
2174+  344E             CsetupWR:
2175+  344E             CsetupWQ:
2176+  344E             CsetupBN:
2177+  344E             CsetupBB:
2178+  344E             CsetupBR:
2179+  344E             CsetupBQ:
2180+  344E 18 1C                jr Csetup2
2181+  3450             CsetupWK:
2182+  3450 3A 84 01             ld a,(WKSQ)
2183+  3453 FE FF                cp $ff
2184+  3455 28 03                jr z,Csu2WK
2185+  3457 CD C9 34             call CsuKRmv    ; White king not here anymore
2186+  345A 18 10       Csu2WK:  jr Csetup2
2187+  345C             
2188+  345C             
2189+  345C             CsetupBK:
2190+  345C 3A 85 01             ld a,(BKSQ)
2191+  345F FE FF                cp $ff
2192+  3461 28 03                jr z,Csu2BK
2193+  3463 CD C9 34             call CsuKRmv    ; Black king not here anymore
2194+  3466 18 04       Csu2BK:  jr Csetup2
2195+  3468                      
2196+  3468             CsetupDoNothing:
2197+  3468 18 5A                jr CsetupKexit  ; exit
2198+  346A             
2199+  346A 06 00       CsetupBlank: ld b,0 ; will be empty square
2200+  346C             
2201+  346C             Csetup2:               ;puts new piece on board or clears square
2202+  346C 3A 5C 27             ld a,(CursorSq)
2203+  346F CD FF 2B             call ObtainHLboardBySq
2204+  3472 4F                   ld c,a
2205+  3473 3A 84 01             ld a,(WKSQ)
2206+  3476 B9                   cp c
2207+  3477 20 07                jr nz,CsuNoOverWK
2208+  3479 3E FF                ld a,$ff
2209+  347B 32 84 01             ld (WKSQ),a
2210+  347E 18 0B                jr CsuOverK       
2211+  3480             CsuNoOverWK:       
2212+  3480 3A 85 01             ld a,(BKSQ)
2213+  3483 B9                   cp c
2214+  3484 20 05                jr nz,CsuOverK
2215+  3486 3E FF                ld a,$ff
2216+  3488 32 85 01             ld (BKSQ),a
2217+  348B             
2218+  348B             CsuOverK:     
2219+  348B 78                   ld a,b
2220+  348C FE 4B                cp 'K'
2221+  348E 20 06                jr nz, CsuNoWKnwpos
2222+  3490 79                   ld a,c
2223+  3491 32 84 01             ld (WKSQ),a
2224+  3494 18 08                jr CsuOverK2
2225+  3496             CsuNoWKnwpos:
2226+  3496 FE 6B                cp 'k'
2227+  3498 20 04                jr nz, CsuOverK2
2228+  349A 79                   ld a,c
2229+  349B 32 85 01             ld (BKSQ),a
2230+  349E             CsuOverK2:
2231+  349E 78                   ld a,b
2232+  349F 70                   ld (hl),b          ; new piece or empty square here
2233+  34A0 FE 00                cp 0
2234+  34A2 28 0D                jr z,CsuNSd
2235+  34A4 FE 5A                cp 'Z'
2236+  34A6 30 04                jr nc,CsetupBlackPc
2237+  34A8 3E 00                ld a,0
2238+  34AA 18 02                jr CsuSDm
2239+  34AC             CsetupBlackPc:         
2240+  34AC 3E 01                ld a,1
2241+  34AE 32 81 01    CsuSDm:  ld (SIDE),a
2242+  34B1 CD 7C 31    CsuNSd:  call PutToMove
2243+  34B4 79                   ld a,c        
2244+  34B5 CD EA 2C             call DrawSquare
2245+  34B8 CD DB 34             call RecalcCastles ;what castlings are possible?
2246+  34BB CD 70 32             call DrawCursor
2247+  34BE 11 0A 29             ld de,wasSetUpFEN
2248+  34C1 CD 68 1B             call GetFEN        ;keeps actual FEN for position
2249+  34C4             CsetupKexit:
2250+  34C4 E1                   pop hl         
2251+  34C5 D1                   pop de
2252+  34C6 C1                   pop bc
2253+  34C7 F1                   pop af
2254+  34C8 C9                   ret
2255+  34C9             
2256+  34C9             ; this is used for kings to remove them from board
2257+  34C9 F5          CsuKRmv: push af
2258+  34CA C5                   push bc
2259+  34CB E5                   push hl
2260+  34CC 4F                   ld c,a
2261+  34CD CD FF 2B             call ObtainHLboardBySq
2262+  34D0 3E 00                ld a,0
2263+  34D2 77                   ld (hl),a
2264+  34D3 79                   ld a,c
2265+  34D4 CD EA 2C             call DrawSquare ; empty square now         
2266+  34D7 E1                   pop hl
2267+  34D8 C1                   pop bc
2268+  34D9 F1                   pop af
2269+  34DA C9                   ret
2270+  34DB             ;
2271+  34DB             ; this calculates maximum possible castling and sets flags
2272+  34DB             ; otherwise movements may not work normally
2273+  34DB             ; 
2274+  34DB             RecalcCastles:
2275+  34DB F5                   push af
2276+  34DC F5                   push af
2277+  34DD E5                   push hl
2278+  34DE 06 00                ld b,0         ; new flags for castlings
2279+  34E0 3A 84 01             ld a,(WKSQ)
2280+  34E3 FE 04                cp 4
2281+  34E5 20 18                jr nz,RclcBlack
2282+  34E7 3E 07                ld a,7
2283+  34E9 CD FF 2B             call ObtainHLboardBySq
2284+  34EC 7E                   ld a,(hl)
2285+  34ED FE 52                cp 'R'
2286+  34EF 20 02                jr nz,RclnWr1
2287+  34F1 CB C0                set 0,b
2288+  34F3 3E 00       RclnWr1: ld a,0
2289+  34F5 CD FF 2B             call ObtainHLboardBySq
2290+  34F8 7E                   ld a,(hl)
2291+  34F9 FE 52                cp 'R'
2292+  34FB 20 02                jr nz,RclcBlack
2293+  34FD CB C8                set 1,b
2294+  34FF             RclcBlack:
2295+  34FF 3A 85 01             ld a,(BKSQ)
2296+  3502 FE 3C                cp 60
2297+  3504 20 18                jr nz,RclcOver
2298+  3506 3E 3F                ld a,63
2299+  3508 CD FF 2B             call ObtainHLboardBySq
2300+  350B 7E                   ld a,(hl)
2301+  350C FE 72                cp 'r'
2302+  350E 20 02                jr nz,RclnBr1
2303+  3510 CB D0                set 2,b
2304+  3512 3E 38       RclnBr1: ld a,56
2305+  3514 CD FF 2B             call ObtainHLboardBySq
2306+  3517 7E                   ld a,(hl)
2307+  3518 FE 72                cp 'r'
2308+  351A 20 02                jr nz,RclcOver
2309+  351C CB D8                set 3,b
2310+  351E             RclcOver:
2311+  351E 78                   ld a,b
2312+  351F 32 82 01             ld (CASTLES),a
2313+  3522 E1                   pop hl
2314+  3523 C1                   pop bc
2315+  3524 F1                   pop af
2316+  3525 C9                   ret                                                                                                                                                      
2317+  3526             
2318+  3526             
2319+  3526             ;---------------------------------
2320+  3526             ; Redraw squares around.
2321+  3526             ; Intended for large cursor
2322+  3526             ; Not used, as DrawCursor does the same.
2323+  3526             ;---------------------------------
2324+  3526 2D 09 2D 08 _AsqDirc: .byte '-',9,'-',8,'-',7,'-',1,'=',0,'+',1,'+',7,'+',8,'+',9
2324+  352A 2D 07 2D 01 
2324+  352E 3D 00 2B 01 
2324+  3532 2B 07 2B 08 
2324+  3536 2B 09 
2325+  3538             
2326+  3538             RedrawSquaresAround:
2327+  3538             
2328+  3538 F5                   push af
2329+  3539 C5                   push bc
2330+  353A D5                   push de
2331+  353B E5                   push hl
2332+  353C 21 26 35             ld hl,_AsqDirc
2333+  353F 06 09                ld b,9
2334+  3541 4F                   ld c,a
2335+  3542             ArndSqScan
2336+  3542 7E                   ld a,(hl)
2337+  3543 23                   inc hl
2338+  3544 FE 2D                cp '-'
2339+  3546 28 08                jr z,ArndSqDec
2340+  3548 7E                   ld a,(hl)
2341+  3549 81                   add a,c
2342+  354A FE 3F                cp 63
2343+  354C 38 0A                jr c,ArndSqNo
2344+  354E 18 05                jr ArndSqYes                 
2345+  3550             ArndSqDec:         
2346+  3550 56                   ld d,(hl)
2347+  3551 79                   ld a,c
2348+  3552 92                   sub d
2349+  3553 38 03                jr c,ArndSqNo
2350+  3555             ArndSqYes:         
2351+  3555 CD EA 2C             call DrawSquare   ; if square on board then redraw
2352+  3558             ArndSqNo:
2353+  3558 79                   ld a,c
2354+  3559 23                   inc hl
2355+  355A 10 E6                djnz ArndSqScan
2356+  355C E1                   pop hl
2357+  355D D1                   pop de
2358+  355E C1                   pop bc
2359+  355F F1                   pop af
2360+  3560 C9                   ret
2361+  3561             
2362+  3561                      
2363+  3561             ;-----------------------------------------------------------
2364+  3561             ;
2365+  3561             ; Process replay of one move
2366+  3561             ;
2367+  3561             ;-----------------------------------------------------------
2368+  3561             DO_Replay_Move:
2369+  3561 F5                   push af
2370+  3562 C5                   push bc
2371+  3563 D5                   push de
2372+  3564 E5                   push hl
2373+  3565                               
2374+  3565 11 68 07             ld de, MOVE_str
2375+  3568 3A 5E 27             ld a,(RplyMs)
2376+  356B 47                   ld b,a
2377+  356C FE 00                cp 0
2378+  356E 28 1A                jr z,RplyTo0
2379+  3570             RplyLoopMv:
2380+  3570 13                   inc de
2381+  3571 13                   inc de
2382+  3572 13                   inc de
2383+  3573 13                   inc de
2384+  3574 1A                   ld a,(de)
2385+  3575 FE 20                cp 32
2386+  3577 28 01                jr z,RplyNskp1
2387+  3579 13                   inc de          ;skip promotion
2388+  357A             RplyNskp1:
2389+  357A 13                   inc de         
2390+  357B 1A                   ld a,(de)
2391+  357C FE 20                cp 32
2392+  357E 28 1D                jr z,RplyNoMv
2393+  3580 FE 00                cp 0
2394+  3582 28 19                jr z,RplyNoMv
2395+  3584 FE 24                cp '$'
2396+  3586 28 15                jr z,RplyNoMv
2397+  3588             
2398+  3588 10 E6                djnz RplyLoopMv
2399+  358A             RplyTo0:
2400+  358A CD A4 12             call MbyStrMove           ; move
2401+  358D CD D3 2C             call DrawBoard            ; no animation, sorry
2402+  3590 CD 7C 31             call PutToMove
2403+  3593 CD 04 13             call GenMoves             ; use GenMovesAndString to see
2404+  3596                      
2405+  3596 3A 5E 27             ld a,(RplyMs)
2406+  3599 3C                   inc a
2407+  359A 32 5E 27             ld (RplyMs),a
2408+  359D             RplyNoMv:
2409+  359D E1                   pop hl       
2410+  359E D1                   pop de
2411+  359F C1                   pop bc
2412+  35A0 F1                   pop af
2413+  35A1 C9                   ret
2414+  35A2             
2415+  35A2                     
2416+  35A2             DO_Replay_UnmakeMove:
2417+  35A2 F5                   push af
2418+  35A3 3A 5E 27             ld a,(RplyMs)
2419+  35A6 FE 00                cp 0
2420+  35A8 28 13                jr z,RplyUMKret
2421+  35AA CD 3E 25             call UnMakeMove
2422+  35AD CD D3 2C             call DrawBoard            ; no animation, sorry
2423+  35B0 CD 7C 31             call PutToMove
2424+  35B3 CD 04 13             call GenMoves
2425+  35B6 3A 5E 27             ld a,(RplyMs)
2426+  35B9 3D                   dec a
2427+  35BA 32 5E 27             ld (RplyMs),a
2428+  35BD             RplyUMKret:
2429+  35BD F1                   pop af
2430+  35BE C9                   ret
2431+  35BF                               
2432+  35BF             
2433+  35BF 00          Loaded2VRAM: .byte 0       ; pre-loading of datas from file just once,
2434+  35C0                                        ; after the VRAM memory could be used only.
2435+  35C0                                        
2436+  35C0             Chess_GraphDatas_address:   .equ $8000         ; address where to load module
2437+  35C0             
2438+  35C0             Chess_GraphDatas_filename:
2439+  35C0 00 43 48 45            .byte 0, "CHESSPI CO2",0            ; name of file
2439+  35C4 53 53 50 49 
2439+  35C8 20 43 4F 32 
2439+  35CC 00 
2440+  35CD             
2441+  35CD             ChessY2K_GraphDatas_load:
2442+  35CD F5                      push af
2443+  35CE 3A BF 35                ld a,(Loaded2VRAM)
2444+  35D1                         
2445+  35D1 FE 00                   cp 0
2446+  35D3 20 12                   jr nz,GraphDatas_ok
2447+  35D5             
2448+  35D5 E5                      push hl
2449+  35D6 D5                      push de
2450+  35D7 21 C0 35                ld hl,Chess_GraphDatas_filename
2451+  35DA 11 00 80                ld de,Chess_GraphDatas_address
2452+  35DD CD 2E 3C                call diskload                     ; loads datas
2453+  35E0 D1                      pop de
2454+  35E1 E1                      pop hl
2455+  35E2                         
2456+  35E2 3E 01                   ld a,1
2457+  35E4 32 BF 35                ld (Loaded2VRAM),a                ; VRAM ok
2458+  35E7             GraphDatas_ok:
2459+  35E7 F1                      pop af
2460+  35E8 C9                      ret
2461+  35E9             
2462+  35E9                         ;                                                                               
2463+  35E9                         ; Data files for pieces Colour of piece (B or W) 
2464+  35E9                         ;   + Name of piece ("KQRBNP" or empty square)
2465+  35E9                         ;   + colour of square under (read black bishop on black square)
2466+  35E9             
2467+  35E9             tbPalettes:
2468+  35E9                         ;table of colours Nr,R,G,B
2469+  35E9                         ;  thanks to bmp2msx software (http://www.imasy.or.jp/~hra/)
2470+  35E9 00 06 06 05         .byte $0,6,6,5
2471+  35ED 01 05 03 02         .byte $1,5,3,2
2472+  35F1 02 00 00 00         .byte $2,0,0,0
2473+  35F5 03 07 07 06         .byte $3,7,7,6
2474+  35F9 04 05 04 03         .byte $4,5,4,3
2475+  35FD 05 05 05 05         .byte $5,5,5,5
2476+  3601 06 06 06 06         .byte $6,6,6,6
2477+  3605 07 03 02 02         .byte $7,3,2,2
2478+  3609 08 03 03 03         .byte $8,3,3,3
2479+  360D 09 06 05 04         .byte $9,6,5,4
2480+  3611 0A 04 04 03         .byte $A,4,4,3
2481+  3615 0B 01 01 01         .byte $B,1,1,1
2482+  3619 0C 02 01 01         .byte $C,2,1,1
2483+  361D 0D 06 05 06         .byte $D,6,5,6
2484+  3621 0E 01 01 02         .byte $E,1,1,2
2485+  3625 0F 01 02 01         .byte $F,1,2,1
2486+  3629                     3695   3629                       #include "ChessMN.ASM"     ; MENU choices
0001+  3629             ;=======================================
0002+  3629             ;
0003+  3629             ; MAIN loop and MENU for ChessY2K
0004+  3629             ;
0005+  3629             ;=======================================
0006+  3629             
0007+  3629 00          _menuI:     .byte 0   ;Current menu item to choose
0008+  362A 00          _exitMn:    .byte 0   ;internal to know that exit 
0009+  362B             
0010+  362B             ChessMN:
0011+  362B                     
0012+  362B             MAINLOOP:
0013+  362B 3E 00                ld a,0
0014+  362D 32 29 36             ld (_menuI),a
0015+  3630 CD 75 36             call MainMenu
0016+  3633                               
0017+  3633 3A 29 36             ld a,(_menuI)
0018+  3636 FE 00                cp 0
0019+  3638 20 02                jr nz, ItemNo0
0020+  363A 18 38                jr EXIT_ALL        
0021+  363C             ItemNo0:
0022+  363C FE 01                cp 1
0023+  363E 20 09                jr nz, ItemNo1
0024+  3640                      
0025+  3640 3A 68 07             ld a,(MOVE_str)
0026+  3643 FE 00                cp 0
0027+  3645 28 28                jr z,LoopM
0028+  3647                      
0029+  3647~            #ifdef PGN_COMPILE 
0030+  3647~                    
0031+  3647~                     ld a,%00000000         ; no cursor,can't dragmove, just replaymoves
0032+  3647~                     ld (Stylo),a 
0033+  3647~            
0034+  3647~                     call GraphicsS         ; user interface for chess program
0035+  3647~                     
0036+  3647~                     ld a,0
0037+  3647~                     ld (Stylo),a
0038+  3647             #endif                   
0039+  3647 18 26                jr LoopM
0040+  3649             ItemNo1:      
0041+  3649 FE 02                cp 2
0042+  364B 20 0F                jr nz, ItemNo2
0043+  364D             
0044+  364D 3E 03                ld a,%00000011         ; cursor,can dragmove
0045+  364F 32 5B 27             ld (Stylo),a 
0046+  3652                      
0047+  3652 CD 27 28             call GraphicsS         ; user interface for chess program
0048+  3655                      
0049+  3655 3E 00                ld a,0
0050+  3657 32 5B 27             ld (Stylo),a 
0051+  365A             
0052+  365A 18 13                jr LoopM
0053+  365C             
0054+  365C             ItemNo2:
0055+  365C FE 03                cp 3
0056+  365E 20 0F                jr nz, ItemNo3
0057+  3660             
0058+  3660 3E 05                ld a,%00000101         ; cursor,can setup pieces
0059+  3662 32 5B 27             ld (Stylo),a 
0060+  3665                      
0061+  3665 CD 27 28             call GraphicsS         ; user interface for chess program
0062+  3668                      
0063+  3668 3E 00                ld a,0
0064+  366A 32 5B 27             ld (Stylo),a 
0065+  366D             
0066+  366D 18 00                jr LoopM
0067+  366F                     
0068+  366F             ItemNo3:         
0069+  366F             LoopM:   
0070+  366F             
0071+  366F CD F2 12             call UndoAllMoves   ; good refresh
0072+  3672                      
0073+  3672 18 B7                jr MAINLOOP
0074+  3674                           
0075+  3674                      
0076+  3674             EXIT_ALL:
0077+  3674             
0078+  3674 C9                   ret
0079+  3675                      
0080+  3675             
0081+  3675             MainMenu:
0082+  3675                         
0083+  3675 CD 95 38                call ClearScreenBy30h
0084+  3678 CD DC 37                call LastFENwasSet        ; to know FEN set up
0085+  367B 21 E9 35                ld hl, tbPalettes         ; in datas of ChessUI  
0086+  367E CD 31 38                call SetPaletteByTable    ; defines 16colors                 
0087+  3681                                                    
0088+  3681 3E 00                   ld a,0
0089+  3683 32 2A 36                ld (_exitMn),a
0090+  3686 3E 01                   ld a,1
0091+  3688                                                 
0092+  3688~            #ifdef PGN_COMPILE                       
0093+  3688             #else
0094+  3688 3C                      inc a                    ; can not access first choice
0095+  3689             #endif            
0096+  3689 32 29 36                ld (_menuI),a
0097+  368C                         
0098+  368C CD 7B 38                call InkeyKeyBy30h      ; keypress detect
0099+  368F 32 9C 37                ld (_keymnbf),a         ; saves last key
0100+  3692                                     
0101+  3692             MENULOOP:                           ; Loop till ESC pressed
0102+  3692 CD C0 36                call DrawChoices
0103+  3695 CD 7B 38                call InkeyKeyBy30h      ; keypress detect
0104+  3698                         
0105+  3698                         ;cp 27
0106+  3698                         ;jr z,EscEXIT
0107+  3698                         
0108+  3698 CD 9D 37                call MenuKeyPress       ; Selection or other item
0109+  369B 18 0A                   jr Menu2loop
0110+  369D             
0111+  369D             EscEXIT:
0112+  369D 3E 00                   ld a,0            
0113+  369F 32 29 36                ld (_menuI),a           ; nothing selected
0114+  36A2 3E 01                   ld a,1            
0115+  36A4 32 2A 36                ld (_exitMn),a
0116+  36A7             Menu2loop:            
0117+  36A7                                                 
0118+  36A7 3A 2A 36                ld a,(_exitMn)
0119+  36AA FE 00                   cp 0
0120+  36AC 28 E4                   jr z, MENULOOP
0121+  36AE                         
0122+  36AE 21 01 01                ld hl,$0101             ; locate left upper corner
0123+  36B1 CD B7 38                call LocatePosBy30h
0124+  36B4 3E 01                   ld a,1                  ; display cursor
0125+  36B6 32 A9 FC                ld (CSRSW),a
0126+  36B9 CD 95 38                call ClearScreenBy30h   ; and clear the screen
0127+  36BC CD 4C 3B                call RestoreColors      ; restores default MSX colors
0128+  36BF                                                  
0129+  36BF C9                      ret
0130+  36C0             
0131+  36C0             ;------------- draws menu items
0132+  36C0             DrawChoices:
0133+  36C0 F5                      push af
0134+  36C1 C5                      push bc
0135+  36C2 D5                      push de
0136+  36C3 E5                      push hl
0137+  36C4                         
0138+  36C4                         ;ld a,2
0139+  36C4                         ;ld (FORCLR),a           ; set color black
0140+  36C4                         ;call SetColorBy30h
0141+  36C4                     
0142+  36C4 21 05 04                ld hl,$0405
0143+  36C7 CD B7 38                call LocatePosBy30h
0144+  36CA             
0145+  36CA 11 12 37                ld de, MNheader
0146+  36CD                         
0147+  36CD 3E 00                   ld a,0                  ; do not display cursor
0148+  36CF 32 A9 FC                ld (CSRSW),a
0149+  36D2                          
0150+  36D2 CD C6 38                call PrintString
0151+  36D5                         
0152+  36D5 2E 07                   ld l,7 ; row
0153+  36D7 06 00                   ld b,0 ; 3 choices
0154+  36D9 11 32 37                ld de, MNchoices
0155+  36DC             MNchScan:   
0156+  36DC 04                      inc b          
0157+  36DD 2C                      inc l  ; next row
0158+  36DE 26 04                   ld h,4 ; col
0159+  36E0             
0160+  36E0 CD B7 38                call LocatePosBy30h
0161+  36E3                      
0162+  36E3 CD C6 38                call PrintString
0163+  36E6                   
0164+  36E6 E5                      push hl
0165+  36E7 EB                      ex de,hl    ; hl = de
0166+  36E8 C5                      push bc
0167+  36E9 01 20 00                ld bc,32
0168+  36EC 09                      add hl,bc
0169+  36ED C1                      pop bc
0170+  36EE EB                      ex de,hl    ; de = hl+32 now
0171+  36EF E1                      pop hl
0172+  36F0                         
0173+  36F0 D5                      push de
0174+  36F1 26 01                   ld h,1 ; col
0175+  36F3 CD B7 38                call LocatePosBy30h            
0176+  36F6 3A 29 36                ld a,(_menuI)
0177+  36F9 B8                      cp b
0178+  36FA 20 05                   jr nz,MNchNotI
0179+  36FC 11 92 37                ld de,MnSelector    ; selector char
0180+  36FF 18 03                   jr MNchSelI
0181+  3701 11 97 37    MNchNotI:   ld de,MnSpace        ;space
0182+  3704 CD C6 38    MNchSelI:   call PrintString
0183+  3707 D1                      pop de
0184+  3708                                                 
0185+  3708 3E 03                   ld a,MNitems
0186+  370A B8                      cp b           
0187+  370B 20 CF                   jr nz,MNchScan          
0188+  370D                         
0189+  370D E1                      pop hl
0190+  370E D1                      pop de
0191+  370F C1                      pop bc
0192+  3710 F1                      pop af
0193+  3711 C9                      ret
0194+  3712                         
0195+  3712             
0196+  3712 4D 53 58 20 MNheader:   .byte "MSX chessY2K project          $",0
0196+  3716 63 68 65 73 
0196+  371A 73 59 32 4B 
0196+  371E 20 70 72 6F 
0196+  3722 6A 65 63 74 
0196+  3726 20 20 20 20 
0196+  372A 20 20 20 20 
0196+  372E 20 20 24 00 
0197+  3732             
0198+  3732             
0199+  3732~            #ifdef PGN_COMPILE
0200+  3732~            
0201+  3732~            MNitems:    .equ 1
0202+  3732~            MNchoices:
0203+  3732~                        .byte "Replay chess game from PGN    $",0
0204+  3732~                        
0205+  3732             #else
0206+  3732             
0207+  3732             MNitems:    .equ 3
0208+  3732             MNchoices:
0209+  3732 52 65 70 6C             .byte "Replay PGN (other module)     $",0
0209+  3736 61 79 20 50 
0209+  373A 47 4E 20 28 
0209+  373E 6F 74 68 65 
0209+  3742 72 20 6D 6F 
0209+  3746 64 75 6C 65 
0209+  374A 29 20 20 20 
0209+  374E 20 20 24 00 
0210+  3752 4D 6F 76 65             .byte "Move pieces by using cursor   $",0
0210+  3756 20 70 69 65 
0210+  375A 63 65 73 20 
0210+  375E 62 79 20 75 
0210+  3762 73 69 6E 67 
0210+  3766 20 63 75 72 
0210+  376A 73 6F 72 20 
0210+  376E 20 20 24 00 
0211+  3772 53 65 74 20             .byte "Set positon for diagram       $",0
0211+  3776 70 6F 73 69 
0211+  377A 74 6F 6E 20 
0211+  377E 66 6F 72 20 
0211+  3782 64 69 61 67 
0211+  3786 72 61 6D 20 
0211+  378A 20 20 20 20 
0211+  378E 20 20 24 00 
0212+  3792             #endif
0213+  3792             
0214+  3792 2D 3E 20 24 MnSelector: .byte "-> $",0
0214+  3796 00 
0215+  3797 20 20 20 24 MnSpace:    .byte "   $",0
0215+  379B 00 
0216+  379C             
0217+  379C 00          _keymnbf:   .byte 0  ; key pressed before
0218+  379D             
0219+  379D             ; this checks which key as been pressed
0220+  379D             MenuKeyPress:
0221+  379D F5                      push af
0222+  379E C5                      push bc
0223+  379F                         
0224+  379F FE 00                   cp 0
0225+  37A1 28 36                   jr z,MNnoAct
0226+  37A3                         
0227+  37A3 47                      ld b,a
0228+  37A4 3A 9C 37                ld a,(_keymnbf)
0229+  37A7 B8                      cp b
0230+  37A8 28 2F                   jr z, MNnoAct
0231+  37AA 78                      ld a,b
0232+  37AB 32 9C 37                ld (_keymnbf),a
0233+  37AE                         
0234+  37AE FE 20                   cp 32
0235+  37B0 20 11                   jr nz,MNnoSpace
0236+  37B2             MNspaceKey:
0237+  37B2             
0238+  37B2 3A 29 36                ld a,(_menuI)
0239+  37B5 FE 01                   cp 1
0240+  37B7 20 03                   jr nz,noPGNsub
0241+  37B9             
0242+  37B9                         ; submenu of PGN files
0243+  37B9 CD F6 37                call ChessY2K_pgn_module
0244+  37BC                         
0245+  37BC                         ;jr MNnoAct
0246+  37BC             
0247+  37BC 3E 01       noPGNsub:   ld a,1
0248+  37BE 32 2A 36                ld (_exitMn),a     ; Item has been selected, exit menu and DO action
0249+  37C1 18 16                   jr MNnoAct             
0250+  37C3 FE 0D       MNnoSpace:  cp 13
0251+  37C5 20 02                   jr nz,MNnoEnter
0252+  37C7 18 E9                   jr MNspaceKey
0253+  37C9             MNnoEnter:
0254+  37C9 3A 29 36                ld a,(_menuI)
0255+  37CC FE 03                   cp MNitems
0256+  37CE 28 03                   jr z, MNitemNxt0
0257+  37D0 3C                      inc a ; next item                     
0258+  37D1 18 03                   jr MNitemNxt1            
0259+  37D3 3E 01       MNitemNxt0: ld a,1 
0260+  37D5             
0261+  37D5~            #ifdef PGN_COMPILE                       
0262+  37D5             #else
0263+  37D5 3C                      inc a                    ; can not access first choice
0264+  37D6                                                  ; (1st reserved for other module)
0265+  37D6             #endif
0266+  37D6             
0267+  37D6 32 29 36    MNitemNxt1: ld (_menuI),a
0268+  37D9                         
0269+  37D9             MNnoAct:            
0270+  37D9 C1                      pop bc
0271+  37DA F1                      pop af
0272+  37DB C9                      ret
0273+  37DC             
0274+  37DC             ;
0275+  37DC             ; This outputs FEN for last position set up
0276+  37DC             ;           
0277+  37DC             LastFENwasSet:
0278+  37DC 21 12 01                ld hl,$0112
0279+  37DF CD B7 38                call LocatePosBy30h
0280+  37E2 11 0A 29                ld de,wasSetUpFEN
0281+  37E5 CD C6 38                call PrintString   ; print out FEN
0282+  37E8 C9                      ret
0283+  37E9             
0284+  37E9             ;This module has been separated to avoid 
0285+  37E9             ; internal problems
0286+  37E9             ;              
0287+  37E9             Chess_PG_module_address:   .equ $8000         ; address where to load module
0288+  37E9             Chess_PG_module_filename:
0289+  37E9 00 43 48 45            .byte 0, "CHESSPG CO2",0           ; name of module file
0289+  37ED 53 53 50 47 
0289+  37F1 20 43 4F 32 
0289+  37F5 00 
0290+  37F6                   
0291+  37F6             ChessY2K_pgn_module:
0292+  37F6~            #ifdef PGN_COMPILE
0293+  37F6~                        push de
0294+  37F6~                        push hl
0295+  37F6~                        ld hl,Chess_PG_module_filename
0296+  37F6~                        ld de,Chess_PG_module_address
0297+  37F6~                        call diskload                     ; loads module
0298+  37F6~                        call Chess_PG_module_address      ; starts main sub-procedure
0299+  37F6~                        pop hl
0300+  37F6~                        pop de
0301+  37F6             #endif             
0302+  37F6 C9                      ret
0303+  37F7             
0304+  37F7                     3696   37F7             
3697   37F7                       #include "VDPs.ASM"        ; VDP video functions
0001+  37F7             ;=======================================
0002+  37F7             ;
0003+  37F7             ; VDP functions
0004+  37F7             ;
0005+  37F7             ;=======================================
0006+  37F7             
0007+  37F7             ; Provides:
0008+  37F7             ;----------------------------------------------------------------------
0009+  37F7             ; (1) Just working LAME part for Hello World of MSX VDP
0010+  37F7             ;         (put pixels on screen)
0011+  37F7             ;----------------------------------------------------------------------
0012+  37F7             ;
0013+  37F7             ; These functions provide MSX2 drawing from .COM module.
0014+  37F7             ; LAME part can put pixels and that's all.
0015+  37F7             ; Screen is 212 lines x 128 bytes per line of 2-pixels.
0016+  37F7             ;
0017+  37F7             ; In reality, prepare to spend days on MSX-hardcore:
0018+  37F7             ; manuals, forums, not-working samples, no-hello-worlds, etc. 
0019+  37F7             ; .BIN loaded from BASIC is not the same as .COM
0020+  37F7             ; 64kb-s is less then Bios+DOS+BASIC+programs+etc. require -
0021+  37F7             ; so it crashes silently by rewriting in the same memory addresses.
0022+  37F7             ; Lots of functions described by techies just crash the emulator. 
0023+  37F7             ; BASIC is for drawings!, not assembler.
0024+  37F7             ; And video memory should be used as much possible (page 0-3, not LAME!),
0025+  37F7             ; because MSX has lots of video memory compared to programmable RAM.
0026+  37F7             ;
0027+  37F7             ; Hello world .com that puts 2-pixels in left upper and right lower corner.
0028+  37F7             ; 
0029+  37F7             ;   org $100
0030+  37F7             ;   call SetScreen5By30h
0031+  37F7             ;   ld de,0
0032+  37F7             ;   call LocateHL_byXY_inDE
0033+  37F7             ;   ld a,$77
0034+  37F7             ;   call VDPdraw2pixels    
0035+  37F7             ;   ld d,127
0036+  37F7             ;   ld e,211
0037+  37F7             ;   call LocateHL_byXY_inDE
0038+  37F7             ;   ld a,$88
0039+  37F7             ;   call VDPdraw2pixels
0040+  37F7             ;   call PressKeyBy30h
0041+  37F7             ;   call SetScreen0By30h
0042+  37F7             ;   ret
0043+  37F7             ;         
0044+  37F7             
0045+  37F7             
0046+  37F7             SetScreen5By30h:
0047+  37F7 3E 05                ld    a,$05      ; Screen 5      
0048+  37F9 F7                   rst   30h
0049+  37FA 80                   .byte $80        ; BIOS slot (when nothing is loaded)  
0050+  37FB 5F 00                .word $005f      ; CHGMOD CALL 5Fh
0051+  37FD C9                   ret
0052+  37FE                      
0053+  37FE             DisableScreenBy30h:       ; Before...
0054+  37FE F7                   rst   30h
0055+  37FF 80                   .byte $80        
0056+  3800 41 00                .word $0041      ; Disables screen display      
0057+  3802 C9                   ret
0058+  3803                      
0059+  3803             EnableScreenBy30h:        ; When drawings are finished... 
0060+  3803 F7                   rst   30h
0061+  3804 80                   .byte $80               
0062+  3805 44 00                .word $0044      ; Enables screen display  
0063+  3807 C9                   ret
0064+  3808             
0065+  3808             LocateHL_byXY_inDE:       ; Procedure calculates hl offset and sets VDP for writing
0066+  3808 F3                   di
0067+  3809 F5                   push af
0068+  380A C5                   push bc
0069+  380B D5                   push de
0070+  380C E5                   push hl
0071+  380D DD E5                push ix
0072+  380F 6A                   ld l,d           ; regs d=x[0..127]
0073+  3810 7B                   ld a,e           ;      e=y[0..211]
0074+  3811 11 00 00             ld de,0
0075+  3814 CB 47                bit 0,a
0076+  3816 28 02                jr z,no2add128bits
0077+  3818 1E 80                ld e,$80
0078+  381A             no2add128bits:
0079+  381A 1F                   rra
0080+  381B 67                   ld h,a
0081+  381C 19                   add hl,de
0082+  381D AF                   xor a 
0083+  381E CD 29 38             call SetVDPwriteBy30h  ; now will write at this position
0084+  3821 DD E1                pop ix
0085+  3823 E1                   pop hl
0086+  3824 D1                   pop de
0087+  3825 C1                   pop bc
0088+  3826 F1                   pop af
0089+  3827 FB                   ei
0090+  3828 C9                   ret                                          
0091+  3829                                       ; This prepares for "pixeling"
0092+  3829             SetVDPwriteBy30h:         ; hl,contains initial address
0093+  3829 F7                   rst   30h
0094+  382A 80                   .byte $80 
0095+  382B 71 01                .word $0171      ; NSTWRT Sets up the VDP for writing wit full VRAM address
0096+  382D C9                   ret         
0097+  382E             
0098+  382E             VDPdraw2pixels:           ; Put 2 pixels by sending one byte with 2 colour Nr. (bits 0-3,4-7)
0099+  382E D3 98                out ($98),a      ; send this sequently
0100+  3830 C9                   ret
0101+  3831                      
0102+  3831                              
0103+  3831             SetPaletteByTable:        ; Sets colors by given RGB-table in HL-reg
0104+  3831 F5                   push af         
0105+  3832 C5                   push bc
0106+  3833 E5                   push hl
0107+  3834 06 10                ld b,$10             ; 16 colours
0108+  3836             SPcoLoop:
0109+  3836 F3                   di
0110+  3837 7E                   ld   a,(hl)
0111+  3838 23                   inc  hl
0112+  3839 D3 99                out  ($99),a          ; colour Nr.
0113+  383B 3E 90                ld   a, 128+16
0114+  383D D3 99                out  ($99),a         
0115+  383F 7E                   ld   a,(hl)            ; red
0116+  3840 23                   inc  hl
0117+  3841 23                   inc  hl
0118+  3842 CB 27                sla  a
0119+  3844 CB 27                sla  a
0120+  3846 CB 27                sla  a
0121+  3848 CB 27                sla  a                 ; bits 4-7
0122+  384A 4F                   ld   c,a
0123+  384B 7E                   ld   a,(hl)            ; blue bits 0-3
0124+  384C 2B                   dec  hl
0125+  384D B1                   or   c
0126+  384E D3 9A                out  ($9A),a 
0127+  3850 7E                   ld   a,(hl)            ; green bits 0-3
0128+  3851 23                   inc  hl
0129+  3852 23                   inc  hl
0130+  3853 D3 9A                out  ($9A),a
0131+  3855 FB                   ei 
0132+  3856 10 DE                djnz SPcoLoop
0133+  3858 E1                   pop  hl         
0134+  3859 C1                   pop  bc
0135+  385A F1                   pop  af 
0136+  385B C9                   ret
0137+  385C                      
0138+  385C             SetBackgrColor:               ; Sets background color by A=Nr.              
0139+  385C F3                   di
0140+  385D D3 99                out  ($99),a        ; a=[0..15]
0141+  385F 3E 87                ld   a,128+7
0142+  3861 D3 99                out  ($99),a        
0143+  3863 FB                   ei
0144+  3864 C9                   ret
0145+  3865             
0146+  3865             VDPfaster:                   ; working with memory only, no sprite collisions and other things slowing down VDP
0147+  3865 F5                   push af
0148+  3866 F3                   di
0149+  3867 3E 0A                ld   a, %00001010 ; sprites off (bit1), VRAM quantity (bit3)- Affects how VDP performs refresh on DRAM chips   
0150+  3869 D3 99                out  ($99),a
0151+  386B 3E 88                ld   a, 128+8     
0152+  386D D3 99                out  ($99),a
0153+  386F FB                   ei
0154+  3870 F1                   pop af
0155+  3871 C9                   ret
0156+  3872                                                                                                                      
0157+  3872             PressKeyBy30h:               ; wait for keypress
0158+  3872 F7                   rst   30h
0159+  3873 80                   .byte $80 
0160+  3874 9F 00                .word $009f
0161+  3876             ClearKeyBy30h:
0162+  3876 F7                   rst   30h
0163+  3877 80                   .byte $80 
0164+  3878 56 01                .word $0156         ; clear key buffer after             
0165+  387A C9                   ret
0166+  387B             
0167+  387B             InkeyKeyBy30h:               ; detects if there is a keypress
0168+  387B F7                   rst   30h
0169+  387C 80                   .byte $80 
0170+  387D 9C 00                .word $009c
0171+  387F 28 05                jr z,InkeyK_none
0172+  3881 CD 72 38             call PressKeyBy30h  ; if is then detects code
0173+  3884 18 02                jr InkeyK_ret
0174+  3886             InkeyK_none:
0175+  3886 3E 00                ld a,0
0176+  3888             InkeyK_ret:         
0177+  3888 C9                   ret
0178+  3889                                                 
0179+  3889             SetScreen0By30h:             ; set back screen0
0180+  3889 3E 00                ld    a,0      
0181+  388B F7                   rst   30h
0182+  388C 80                   .byte $80
0183+  388D 5F 00                .word $005f
0184+  388F C9                   ret
0185+  3890                      
0186+  3890             SetScreenABy30h:             ; set screen by A-reg
0187+  3890 F7                   rst   30h
0188+  3891 80                   .byte $80
0189+  3892 5F 00                .word $005f
0190+  3894 C9                   ret 
0191+  3895                      
0192+  3895             ClearScreenBy30h:            ; clears screen
0193+  3895 F5                   push af
0194+  3896 C5                   push bc
0195+  3897 D5                   push de
0196+  3898 AF                   xor a          
0197+  3899 F7                   rst   30h
0198+  389A 80                   .byte $80
0199+  389B C3 00                .word $00c3
0200+  389D D1                   pop de
0201+  389E C1                   pop bc
0202+  389F F1                   pop af
0203+  38A0 C9                   ret
0204+  38A1                      
0205+  38A1             LINL40: .equ $F3AE
0206+  38A1                             
0207+  38A1             SetMode80:
0208+  38A1 F5                  push af
0209+  38A2 3E 50               ld a,80
0210+  38A4 32 AE F3            ld (LINL40),a    ;width 80
0211+  38A7 CD 89 38            call SetScreen0By30h
0212+  38AA F1                  pop af
0213+  38AB C9                  ret
0214+  38AC             SetMode40:
0215+  38AC F5                  push af
0216+  38AD 3E 28               ld a,40
0217+  38AF 32 AE F3            ld (LINL40),a    ;width 40
0218+  38B2 CD 89 38            call SetScreen0By30h
0219+  38B5 F1                  pop af
0220+  38B6 C9                  ret 
0221+  38B7                              
0222+  38B7             LocatePosBy30h:              ; Locate at position H (column) L (row) on screen
0223+  38B7 F7                   rst   30h
0224+  38B8 80                   .byte $80
0225+  38B9 C6 00                .word $00c6
0226+  38BB C9                   ret
0227+  38BC             PutCharBy30h:                ; Put char reg-a = ascii code      
0228+  38BC F7                   rst   30h
0229+  38BD 80                   .byte $80
0230+  38BE A2 00                .word $00a2
0231+  38C0 C9                   ret
0232+  38C1             PrintLineBy30h:
0233+  38C1 F7                   rst   30h
0234+  38C2 80                   .byte $80
0235+  38C3 A2 00                .word $00a2
0236+  38C5 C9                   ret
0237+  38C6             
0238+  38C6             CALL_5:   .equ $F37D         ;output string to screen
0239+  38C6             ; prints string that ends with $
0240+  38C6             ; de-reg points to string in address
0241+  38C6             ; 
0242+  38C6             PrintString:
0243+  38C6 F5                   push af
0244+  38C7 C5                   push bc
0245+  38C8 D5                   push de
0246+  38C9 E5                   push hl
0247+  38CA DD E5                push ix
0248+  38CC FD E5                push iy
0249+  38CE 0E 09                ld c, 9       ; function for CALL 5
0250+  38D0 CD 7D F3             call CALL_5   ; MSX printing
0251+  38D3 FD E1                pop iy
0252+  38D5 DD E1                pop ix
0253+  38D7 E1                   pop hl
0254+  38D8 D1                   pop de
0255+  38D9 C1                   pop bc
0256+  38DA F1                   pop af
0257+  38DB C9                   ret
0258+  38DC                                      
0259+  38DC                      
0260+  38DC             FORCLR:  .equ  $F3E9         ; foreground color 
0261+  38DC             BAKCLR:  .equ  $F3EA         ; background color
0262+  38DC             BDRCLR:  .equ  $F3EB         ; bordercolor
0263+  38DC             SetColorBy30h:
0264+  38DC F7                   rst   30h           ; set color scheme by using FORCLR,BAKCLR,BDRCLR
0265+  38DD 80                   .byte $80
0266+  38DE 62 00                .word $0062
0267+  38E0 C9                   ret
0268+  38E1                      
0269+  38E1             CSRSW:   .equ $FCA9         ; to set cursor display switch (0-not to show)        
0270+  38E1             CSTYLE:  .equ $FCAA         ; to set cursor style (0-full,2-underline)
0271+  38E1                 
0272+  38E1                             
0273+  38E1                      
0274+  38E1             ;--------------------------------------
0275+  38E1             ; (2) ADVANCED functions, if You love VDP
0276+  38E1             ;
0277+  38E1             ; Use of pages,
0278+  38E1             ; buffered copy of RAM->VRAM, RAM->RAM
0279+  38E1             ;--------------------------------------
0280+  38E1             ;
0281+  38E1             ;
0282+  38E1             ; Check if a v9958 is available (if so, return nz)
0283+  38E1             ; Initialize address (v9958)
0284+  38E1             ; (MSX+,MSXturboR video chip)
0285+  38E1             ;
0286+  38E1 00          v9958:        .byte      0             ;>1 = v9958 present
0287+  38E2             
0288+  38E2 F3          v9958_Check:  di                       ;Test for v9958
0289+  38E3 3E 01                     ld    a,1                ;Set s$1
0290+  38E5 D3 99                     out   ($99),a
0291+  38E7 3E 8F                     ld    a,15+128
0292+  38E9 D3 99                     out   ($99),a
0293+  38EB 1A                        ld    a,(de)             ;Waste some time...
0294+  38EC DB 99                     in    a,($99)
0295+  38EE F5                        push  af
0296+  38EF 3E 00                     ld    a,0
0297+  38F1 D3 99                     out   ($99),a
0298+  38F3 3E 8F                     ld    a,15+128
0299+  38F5 D3 99                     out   ($99),a            ;Set s$0
0300+  38F7 FB                        ei
0301+  38F8 F1                        pop   af
0302+  38F9 E6 3C                     and   %00111100          ;v9938? RET with Z
0303+  38FB 32 E1 38                  ld    (v9958),a
0304+  38FE C9                        ret
0305+  38FF             
0306+  38FF             ;-----------------------------------------
0307+  38FF             ;         
0308+  38FF             ; These routines are the know-how scripts
0309+  38FF             ; by VDP profies. In fact, dont use without
0310+  38FF             ; knowing what is all about. Read manuals.
0311+  38FF             ;
0312+  38FF             ;-----------------------------------------
0313+  38FF             
0314+  38FF 00 00 00 00 VDP: .word  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0314+  3903 00 00 00 00 
0314+  3907 00 00 00 00 
0314+  390B 00 00 00 00 
0314+  390F 00 00 00 00 
0314+  3913 00 00 00 00 
0314+  3917 00 00 00 00 
0314+  391B 00 00 
0315+  391D             
0316+  391D             ;
0317+  391D             ;Copy the VDP-registers' settings to array VDP.
0318+  391D             ;Afterwards, read the VDP-registers with LD A,(VDP + r)
0319+  391D             ;(this should be placed at the start of a program)
0320+  391D             ;
0321+  391D 21 FF 38    Copy_VdpRegs: ld      hl,VDP+0
0322+  3920 11 FF 38                  ld      de,VDP+0
0323+  3923 01 08 00                  ld      bc,8
0324+  3926 ED B0                     ldir
0325+  3928 21 07 39                  ld      hl,VDP+8
0326+  392B 11 07 39                  ld      de,VDP+8
0327+  392E 01 11 00                  ld      bc,17
0328+  3931 ED B0                     ldir
0329+  3933 C9                        ret
0330+  3934             
0331+  3934             
0332+  3934             ;
0333+  3934             ;Restore the VDP-registers' settings.
0334+  3934             ;(this should be placed at the end of a program)
0335+  3934             ;
0336+  3934 01 00 08    Rest_VdpRegs: ld      bc,$0800
0337+  3937 21 FF 38                  ld      hl,VDP+0
0338+  393A CD 4C 39                  call    Rest_VdpSub
0339+  393D 01 08 10                  ld      bc,$1008
0340+  3940 21 07 39                  ld      hl,VDP+8
0341+  3943 CD 4C 39                  call    Rest_VdpSub
0342+  3946 01 19 03                  ld      bc,$0319
0343+  3949 21 5B 39                  ld      hl,Vdp3zero    ;a jp Restore_Vdp_Sub is implied
0344+  394C 7E          Rest_VdpSub:  ld      a,(hl)
0345+  394D 23                        inc     hl
0346+  394E F3                        di
0347+  394F D3 99                     out     ($99),a
0348+  3951 79                        ld      a,c
0349+  3952 F6 80                     or      128
0350+  3954 FB                        ei
0351+  3955 D3 99                     out     ($99),a
0352+  3957 0C                        inc     c
0353+  3958 10 F2                     djnz    Rest_VdpSub
0354+  395A C9                        ret
0355+  395B             
0356+  395B 00 00 00    Vdp3zero:    .byte      0,0,0
0357+  395E             
0358+  395E             
0359+  395E             ;
0360+  395E             ;Set page = A [0..3] in screen 5.
0361+  395E             ;
0362+  395E             SetPage:
0363+  395E 87                  add     a,a ;x32
0364+  395F 87                  add     a,a
0365+  3960 87                  add     a,a
0366+  3961 87                  add     a,a
0367+  3962 87                  add     a,a
0368+  3963 C6 1F               add     a,31
0369+  3965 32 01 39            ld      (VDP+2),a
0370+  3968 F3                  di
0371+  3969 D3 99               out     ($99),a
0372+  396B 3E 82               ld      a,2+128
0373+  396D FB                  ei
0374+  396E D3 99               out     ($99),a
0375+  3970 C9                  ret
0376+  3971                     
0377+  3971             ;
0378+  3971             ;Set VDP port $98 to start writing at address AHL (17-bit)
0379+  3971             ;
0380+  3971             ;
0381+  3971             ; Left upper corner of each pages:
0382+  3971             ;   0 -> A=0,HL=$0000
0383+  3971             ;   1 -> A=0,HL=$8000
0384+  3971             ;   2 -> A=1,HL=$0000
0385+  3971             ;   3 -> A=1,HL=$8000
0386+  3971             ;
0387+  3971             
0388+  3971             
0389+  3971             Set_Vdp_Write:           ; A(1bit),HL(16bits) input
0390+  3971                     
0391+  3971 CB 04               rlc   h
0392+  3973 17                  rla
0393+  3974 CB 04               rlc   h
0394+  3976 17                  rla
0395+  3977 CB 3C               srl   h
0396+  3979 CB 3C               srl   h
0397+  397B F3                  di
0398+  397C D3 99               out   ($99),a
0399+  397E 3E 8E               ld    a,14+128
0400+  3980 D3 99               out   ($99),a
0401+  3982 7D                  ld    a,l
0402+  3983 00                  nop
0403+  3984 D3 99               out   ($99),a
0404+  3986 7C                  ld    a,h
0405+  3987 F6 40               or    64
0406+  3989 FB                  ei
0407+  398A D3 99               out   ($99),a
0408+  398C C9                  ret
0409+  398D             
0410+  398D             ;
0411+  398D             ;Set VDP port $98 to start reading at address AHL (17-bit)
0412+  398D             ;
0413+  398D             SetVdp_Read:
0414+  398D CB 04               rlc     h
0415+  398F 17                  rla
0416+  3990 CB 04               rlc     h
0417+  3992 17                  rla
0418+  3993 CB 3C               srl     h
0419+  3995 CB 3C               srl     h
0420+  3997 F3                  di
0421+  3998 D3 99               out     ($99),a       ;set bits 15-17
0422+  399A 3E 8E               ld      a,128+14
0423+  399C D3 99               out     ($99),a
0424+  399E 7D                  ld      a,l           ;set bits 0-7
0425+  399F 00                  nop
0426+  39A0 D3 99               out     ($99),a
0427+  39A2 7C                  ld      a,h           ;set bits 8-14
0428+  39A3 FB                  ei                    ; + read access
0429+  39A4 D3 99               out     ($99),a
0430+  39A6 C9                  ret
0431+  39A7                     
0432+  39A7             ;****************************************************************
0433+  39A7             ; HMMC (High speed move CPU to VRAM)
0434+  39A7             ; Screen size 256x212 dots, each byte is color Nr. for 2-pixels 
0435+  39A7             ;
0436+  39A7             ; Copies data from memory to block in VRAM
0437+  39A7             ; The same as in basic COPY file.pic TO (x,y)-(x+D-1,y+E-1)
0438+  39A7             ;
0439+  39A7             ; RAM [IX] => VRAM (H,L)-(+D,+E)
0440+  39A7             ;
0441+  39A7             ; set ix = memory address of data to write to VRAM
0442+  39A7             ; set h,l,d,e for rectangle to put in
0443+  39A7             ; D,E mod 2 = 0 !
0444+  39A7             ;****************************************************************
0445+  39A7             
0446+  39A7             HMMC:  
0447+  39A7 F3                   di
0448+  39A8 F5                   push af
0449+  39A9 C5                   push bc
0450+  39AA E5                   push hl
0451+  39AB DD E5                push ix      
0452+  39AD 3E 00                ld a,0         
0453+  39AF CD 14 3A             call hmmc_wait_VDP
0454+  39B2 3E 24                ld a,36         ;command register R#36
0455+  39B4 D3 99                out ($99),a
0456+  39B6 3E 91                ld a,128+17     ;VDP(17)<=36
0457+  39B8 D3 99                out ($99),a
0458+  39BA AF                   xor a           ;ld a,0
0459+  39BB 0E 9B                ld c,$9b
0460+  39BD ED 61                out (c),h       ;X
0461+  39BF ED 79                out (c),a
0462+  39C1 ED 69                out (c),l       ;Y
0463+  39C3 ED 79                out (c),a
0464+  39C5 ED 51                out (c),d       ;DX in dots
0465+  39C7 ED 79                out (c),a       ;
0466+  39C9 ED 59                out (c),e       ;DY in dots
0467+  39CB ED 79                out (c),a       ;
0468+  39CD                         
0469+  39CD DD 66 00             ld h,(ix)       ;first byte of data
0470+  39D0 ED 61                out (c),h       
0471+  39D2             
0472+  39D2 ED 79                out (c),a       ;DIX and DIY = 0     
0473+  39D4 3E F0                ld a,%11110000
0474+  39D6 ED 79                out (c),a      ; command to do it
0475+  39D8 3E AC                ld a,128+44
0476+  39DA D3 99                out ($99),a
0477+  39DC 3E 91                ld a,128+17
0478+  39DE D3 99                out ($99),a    ; VDP(17)<=44                        
0479+  39E0             hmmc_Loop:
0480+  39E0 3E 02                ld a,2
0481+  39E2 CD 02 3A             call hmmc_Status
0482+  39E5 CB 7F                bit 7,a        ; TR? transferring?
0483+  39E7 28 F7                jr z, hmmc_Loop
0484+  39E9 CB 47                bit 0,a        ; CE? is over?
0485+  39EB 28 09                jr z, hmmc_exit                       
0486+  39ED DD 23                inc ix
0487+  39EF DD 7E 00             ld a,(ix)
0488+  39F2 D3 9B                out ($9b),a
0489+  39F4 18 EA                jr hmmc_Loop                                                      
0490+  39F6             hmmc_exit:
0491+  39F6 3E 00                ld a,0
0492+  39F8 CD 02 3A             call hmmc_Status
0493+  39FB DD E1                pop ix
0494+  39FD E1                   pop hl
0495+  39FE C1                   pop bc
0496+  39FF F1                   pop af
0497+  3A00 FB                   ei
0498+  3A01 C9                   ret                                                                                                                                                                                                                  
0499+  3A02                                                                                                                                                                                                                                                                                         
0500+  3A02             hmmc_Status:
0501+  3A02 D3 99                out ($99),a
0502+  3A04 3E 8F                ld a,$8f
0503+  3A06 D3 99                out ($99),a
0504+  3A08 DB 99                in a,($99)
0505+  3A0A F5                   push af
0506+  3A0B AF                   xor a
0507+  3A0C D3 99                out ($99),a
0508+  3A0E 3E 8F                ld a,$8f
0509+  3A10 D3 99                out ($99),a
0510+  3A12 F1                   pop af
0511+  3A13 C9                   ret
0512+  3A14             hmmc_wait_VDP:
0513+  3A14 3E 02                ld a,2
0514+  3A16 CD 02 3A             call hmmc_Status
0515+  3A19 E6 01                and 1
0516+  3A1B 20 F7                jr nz,hmmc_wait_VDP
0517+  3A1D AF                   xor a
0518+  3A1E CD 02 3A             call hmmc_Status
0519+  3A21 C9                   ret
0520+  3A22             
0521+  3A22             ;****************************************************************
0522+  3A22             ;  HMMM (High speed move VRAM to VRAM)
0523+  3A22             ;        to use, set H, L, D, E, B, C and go
0524+  3A22             ;        VRAM (H,L)-(+D,+E) ---> VRAM (B,C)
0525+  3A22             ; DE is difference -not absolute values
0526+  3A22             ; byte DIX,DIY=0, explained:
0527+  3A22             ; The 0 copies the block starting from the upper left, the 1 from right/bottom.
0528+  3A22             ; what's the difference? when copying overlapping source/destination
0529+  3A22             ; (a scroller for example)
0530+  3A22             ; when scrolling from right to left DIX/DIY can both be 0
0531+  3A22             ;  but copying from left to right DIX must be 1. just figure it out...
0532+  3A22             ; Then give coord.positive from right upper corner to left.
0533+  3A22             ;****************************************************************
0534+  3A22             
0535+  3A22             HMMM:
0536+  3A22 F3                   di
0537+  3A23 F5                   push af
0538+  3A24 C5                   push bc              
0539+  3A25 CD 5E 3A             call VDPready
0540+  3A28 3E 20                ld  a,32
0541+  3A2A D3 99                out ($99),a
0542+  3A2C 3E 91                ld  a,128+17
0543+  3A2E D3 99                out ($99),a     ;R#17 := 32
0544+  3A30 D5                   push de
0545+  3A31 C5                   push bc
0546+  3A32 AF                   xor a           ;ld a,0
0547+  3A33 D1                   pop de          ;de = bc now
0548+  3A34 0E 9B                ld c,$9b
0549+  3A36 ED 61                out (c),h       ;X from
0550+  3A38 ED 79                out (c),a
0551+  3A3A ED 69                out (c),l       ;Y from
0552+  3A3C ED 79                out (c),a
0553+  3A3E ED 51                out (c),d       ;X to
0554+  3A40 ED 79                out (c),a       ;
0555+  3A42 ED 59                out (c),e       ;Y to
0556+  3A44 ED 79                out (c),a
0557+  3A46 D1                   pop de          ;de = de now
0558+  3A47 ED 51                out (c),d       ;DX in dots
0559+  3A49 ED 79                out (c),a       ;
0560+  3A4B ED 59                out (c),e       ;DY in dots
0561+  3A4D ED 79                out (c),a       ;
0562+  3A4F ED 79                out (c),a       ;dummy
0563+  3A51 ED 79                out (c),a       ;DIX and DIY = 0
0564+  3A53 3E D0                ld  a,%11010000 ;HMMM command
0565+  3A55 ED 79                out (c),a       ;do it
0566+  3A57 CD 5E 3A             call VDPready
0567+  3A5A C1                   pop bc
0568+  3A5B F1                   pop af
0569+  3A5C FB                   ei
0570+  3A5D C9                   ret
0571+  3A5E                                             
0572+  3A5E             VDPready:
0573+  3A5E 3E 02               ld   a,2
0574+  3A60 F3                  di
0575+  3A61 D3 99               out  ($99),a          ;select status register 2
0576+  3A63 3E 8F               ld   a,128+15
0577+  3A65 D3 99               out  ($99),a
0578+  3A67 DB 99               in   a,($99)
0579+  3A69 1F                  rra
0580+  3A6A 3E 00               ld   a,0
0581+  3A6C D3 99               out  ($99),a
0582+  3A6E 3E 8F               ld   a,128+15
0583+  3A70 D3 99               out  ($99),a
0584+  3A72 FB                  ei
0585+  3A73 38 E9               jr   c,VDPready    ;wait till previous VDP execution is over (CE)
0586+  3A75 C9                  ret
0587+  3A76             
0588+  3A76             ;
0589+  3A76             ; Sets display mode to width 80
0590+  3A76             ; Use then SetScreen0By30h to set back width 40
0591+  3A76             ;
0592+  3A76             VDPsetMode80:        
0593+  3A76             
0594+  3A76 F3                  di
0595+  3A77 3E 04               ld   a,%00000100
0596+  3A79 D3 99               out  ($99),a
0597+  3A7B 3E 80               ld   a,128+0
0598+  3A7D D3 99               out  ($99),a
0599+  3A7F 3E 70               ld   a,%01110000
0600+  3A81 D3 99               out  ($99),a
0601+  3A83 3E 81               ld   a,128+1
0602+  3A85 D3 99               out  ($99),a
0603+  3A87 AF                  xor a
0604+  3A88 D3 99               out  ($99),a
0605+  3A8A 3E 88               ld   a,128+8
0606+  3A8C D3 99               out  ($99),a
0607+  3A8E AF                  xor a
0608+  3A8F D3 99               out  ($99),a
0609+  3A91 3E 89               ld   a,128+9
0610+  3A93 D3 99               out  ($99),a
0611+  3A95 FB                  ei
0612+  3A96 C9                  ret
0613+  3A97                                                     
0614+  3A97             ;        
0615+  3A97             ;Disable the screen.
0616+  3A97             ;
0617+  3A97             Disable_Scr:
0618+  3A97 3A 00 39            ld      a,(VDP+1)
0619+  3A9A E6 BF               and     %10111111
0620+  3A9C 32 00 39            ld      (VDP+1),a
0621+  3A9F F3                  di
0622+  3AA0 D3 99               out     ($99),a
0623+  3AA2 3E 81               ld      a,128+1
0624+  3AA4 FB                  ei
0625+  3AA5 D3 99               out     ($99),a
0626+  3AA7 C9                  ret
0627+  3AA8             
0628+  3AA8             ;
0629+  3AA8             ;Enable the screen.
0630+  3AA8             ;
0631+  3AA8             Enable_Scr:
0632+  3AA8 3A 00 39            ld      a,(VDP+1)
0633+  3AAB F6 40               or      %01000000
0634+  3AAD 32 00 39            ld      (VDP+1),a
0635+  3AB0 F3                  di
0636+  3AB1 D3 99               out     ($99),a
0637+  3AB3 3E 81               ld      a,128+1
0638+  3AB5 FB                  ei
0639+  3AB6 D3 99               out     ($99),a
0640+  3AB8 C9                  ret
0641+  3AB9             
0642+  3AB9             ;
0643+  3AB9             ;Enable the sprites.
0644+  3AB9             ;
0645+  3AB9 3A 07 39    Sprites_On:   ld      a,(VDP+8)
0646+  3ABC E6 FD                     and     %11111101
0647+  3ABE 32 07 39                  ld      (VDP+8),a
0648+  3AC1 F3                        di
0649+  3AC2 D3 99                     out     ($99),a
0650+  3AC4 3E 88                     ld      a,8+128
0651+  3AC6 FB                        ei
0652+  3AC7 D3 99                     out     ($99),a
0653+  3AC9 C9                        ret
0654+  3ACA             
0655+  3ACA             ;
0656+  3ACA             ;Disable the sprites.
0657+  3ACA             ;
0658+  3ACA 3A 07 39    Sprites_Off:  ld      a,(VDP+8)
0659+  3ACD F6 02                     or      %00000010
0660+  3ACF 32 07 39                  ld      (VDP+8),a
0661+  3AD2 F3                        di
0662+  3AD3 D3 99                     out     ($99),a
0663+  3AD5 3E 88                     ld      a,8+128
0664+  3AD7 FB                        ei
0665+  3AD8 D3 99                     out     ($99),a
0666+  3ADA C9                        ret
0667+  3ADB             ;
0668+  3ADB             ; set 16x16 sprites
0669+  3ADB             ;         
0670+  3ADB             VDPsprites16x16:
0671+  3ADB 3A 00 39                  ld      a,(VDP+1)
0672+  3ADE F6 02                     or      %00000010
0673+  3AE0 32 00 39                  ld      (VDP+1),a
0674+  3AE3 F3                        di
0675+  3AE4 D3 99                     out     ($99),a
0676+  3AE6 3E 81                     ld      a,1+128
0677+  3AE8 FB                        ei
0678+  3AE9 D3 99                     out     ($99),a
0679+  3AEB C9                        ret
0680+  3AEC             
0681+  3AEC 00 00 00 00 ColPal_:    .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 
0681+  3AF0 00 00 00 00 
0681+  3AF4 00 00 00 00 
0681+  3AF8 00 00 00 00 
0681+  3AFC 00 00 00 00 
0681+  3B00 00 00 00 00 
0681+  3B04 00 00 00 00 
0681+  3B08 00 00 00 00 
0682+  3B0C             
0683+  3B0C             Color16defaultPalettes:
0684+  3B0C                         ;table of colours Nr,R,G,B
0685+  3B0C 00 00 00 00         .byte $0,0,0,0
0686+  3B10 01 00 00 00         .byte $1,0,0,0
0687+  3B14 02 01 06 01         .byte $2,1,6,1
0688+  3B18 03 03 07 03         .byte $3,3,7,3
0689+  3B1C 04 01 01 07         .byte $4,1,1,7
0690+  3B20 05 02 03 07         .byte $5,2,3,7
0691+  3B24 06 05 01 01         .byte $6,5,1,1
0692+  3B28 07 02 06 07         .byte $7,2,6,7
0693+  3B2C 08 07 01 01         .byte $8,7,1,1
0694+  3B30 09 07 03 03         .byte $9,7,3,3
0695+  3B34 0A 06 06 01         .byte $A,6,6,1
0696+  3B38 0B 06 06 04         .byte $B,6,6,4
0697+  3B3C 0C 01 04 01         .byte $C,1,4,1
0698+  3B40 0D 06 02 05         .byte $D,6,2,5
0699+  3B44 0E 05 05 05         .byte $E,5,5,5
0700+  3B48 0F 07 07 07         .byte $F,7,7,7
0701+  3B4C                     
0702+  3B4C             ;Restores default MSX color palettes
0703+  3B4C             RestoreColors:
0704+  3B4C E5                       push hl
0705+  3B4D 21 0C 3B                 ld hl, Color16defaultPalettes 
0706+  3B50 CD 31 38                 call SetPaletteByTable    ; defines 16colors
0707+  3B53 E1                       pop hl
0708+  3B54 C9                       ret
0709+  3B55             
0710+  3B55             ;****************************************************************
0711+  3B55             ; draws LINE 
0712+  3B55             ;        to use, set H, L, D, E, B, A and go
0713+  3B55             ;        draw LINE (H,L)-(D,E) with color B, log-op A
0714+  3B55             ; H,L,D,E absolute values
0715+  3B55             ;****************************************************************
0716+  3B55             
0717+  3B55             LINE:
0718+  3B55 F3                   di
0719+  3B56 F5                   push af
0720+  3B57 C5                   push bc
0721+  3B58 D5                   push de
0722+  3B59 E5                   push hl
0723+  3B5A                      
0724+  3B5A F5                   push af          ;save LOGICAL OPERATION
0725+  3B5B C5                   push bc          ;save COLOR            
0726+  3B5C CD 5E 3A             call VDPready
0727+  3B5F 3E 24                ld  a,36
0728+  3B61 D3 99                out ($99),a
0729+  3B63 3E 91                ld  a,128+17
0730+  3B65 D3 99                out ($99),a     ;R#17 := 36
0731+  3B67 AF                   xor a           ;ld a,0
0732+  3B68 0E 9B                ld c,$9b
0733+  3B6A ED 61                out (c),h       ;X from
0734+  3B6C ED 79                out (c),a
0735+  3B6E ED 69                out (c),l       ;Y from
0736+  3B70 ED 79                out (c),a
0737+  3B72              
0738+  3B72 7C                   ld a,h          ;make DX and DIX
0739+  3B73 92                   sub d
0740+  3B74 16 04                ld  d,%00000100
0741+  3B76 30 04                jr nc,gLINE1
0742+  3B78 16 00                ld  d,%00000000
0743+  3B7A ED 44                neg
0744+  3B7C 67          gLINE1:  ld h,a          ;H := DX , D := DIX
0745+  3B7D 7D                   ld a,l          ;make DY and DIY
0746+  3B7E 93                   sub e
0747+  3B7F 1E 08                ld  e,%00001000
0748+  3B81 30 04                jr nc,gLINE2
0749+  3B83 1E 00                ld  e,%00000000
0750+  3B85 ED 44                neg
0751+  3B87 6F          gLINE2:  ld l,a          ;L := DY , E := DIY
0752+  3B88 BC                   cp h            ;make Maj and Min
0753+  3B89 38 0D                jr c,gLINE3
0754+  3B8B AF                   xor a
0755+  3B8C ED 69                out (c),l           ;long side
0756+  3B8E ED 79                out (c),a
0757+  3B90 ED 61                out (c),h           ;short side
0758+  3B92 ED 79                out (c),a
0759+  3B94 3E 01                ld  a,%00000001     ;MAJ := 1
0760+  3B96 18 0B                jr gLINE4
0761+  3B98             
0762+  3B98 AF          gLINE3:  xor a
0763+  3B99 ED 61                out (c),h           ;NX
0764+  3B9B ED 79                out (c),a
0765+  3B9D ED 69                out (c),l           ;NY
0766+  3B9F ED 79                out (c),a
0767+  3BA1 3E 00                ld  a,%00000000     ;MAJ := 0
0768+  3BA3             
0769+  3BA3 B2          gLINE4:  or d
0770+  3BA4 B3                   or e           ;A := DIX , DIY , MAJ
0771+  3BA5 E1                   pop hl         ;H := COLOR
0772+  3BA6 ED 61                out (c),h
0773+  3BA8 ED 79                out (c),a
0774+  3BAA F1                   pop af         ;A := LOGICAL OPERATION
0775+  3BAB F6 70                or  %01110000
0776+  3BAD ED 79                out (c),a
0777+  3BAF 3E 8F                ld  a,$8F
0778+  3BB1 ED 79                out (c),a
0779+  3BB3                      
0780+  3BB3 CD 5E 3A             call VDPready
0781+  3BB6 E1                   pop hl         
0782+  3BB7 D1                   pop de         
0783+  3BB8 C1                   pop bc
0784+  3BB9 F1                   pop af
0785+  3BBA FB                   ei
0786+  3BBB C9                   ret
0787+  3BBC              
0788+  3BBC             
0789+  3BBC             ;***************************************************************************
0790+  3BBC             ;  HMMM with 2byte addressing (far copy), for not simplest case
0791+  3BBC             ;  word size parameters for H, L, D, E, B, C, DIX/DIY byte
0792+  3BBC             ;***************************************************************************
0793+  3BBC             
0794+  3BBC 00 00 00 00 HC_p     .word 0,0,0,0,0,0
0794+  3BC0 00 00 00 00 
0794+  3BC4 00 00 00 00 
0795+  3BC8 00                   .byte 0    ;DIX,DIY, just =0
0796+  3BC9             
0797+  3BC9             HMMMf:
0798+  3BC9 F3                   di
0799+  3BCA F5                   push af
0800+  3BCB C5                   push bc
0801+  3BCC D5                   push de
0802+  3BCD E5                   push hl
0803+  3BCE                              
0804+  3BCE CD 5E 3A             call VDPready
0805+  3BD1 3E 20                ld  a,32
0806+  3BD3 D3 99                out ($99),a
0807+  3BD5 3E 91                ld  a,128+17
0808+  3BD7 D3 99                out ($99),a     ;R#17 := 32
0809+  3BD9 21 BC 3B             ld hl,HC_p
0810+  3BDC 0E 9B                ld c,$9b
0811+  3BDE 06 0C                ld b,12         ;6x2bytes
0812+  3BE0 ED B3                otir
0813+  3BE2 AF                   xor a     
0814+  3BE3 ED 79                out (c),a       ;dummy
0815+  3BE5 ED A3                outi            ;DIX and DIY
0816+  3BE7 3E D0                ld  a,%11010000 ;HMMM command
0817+  3BE9 ED 79                out (c),a       ;do it
0818+  3BEB CD 5E 3A             call VDPready
0819+  3BEE E1                   pop hl
0820+  3BEF D1                   pop de
0821+  3BF0 C1                   pop bc
0822+  3BF1 F1                   pop af
0823+  3BF2 FB                   ei
0824+  3BF3 C9                   ret
0825+  3BF4             
0826+  3BF4             ;***************************************************************************
0827+  3BF4             ;  LMMM with 2byte addressing (far copy), for not simplest case
0828+  3BF4             ;  VRAM (H,L)-(D,E) ---> VRAM (B,C)  with logical operation 
0829+  3BF4             ;  word size parameters for H, L, D, E, B, C, DIX/DIY byte, Logical_A byte
0830+  3BF4             ;***************************************************************************
0831+  3BF4             
0832+  3BF4 00 00 00 00 LM_p     .word 0,0,0,0,0,0
0832+  3BF8 00 00 00 00 
0832+  3BFC 00 00 00 00 
0833+  3C00 00                   .byte 0    ;DIX,DIY, just =0
0834+  3C01 00                   .byte 0    ;LOGICAL IMP=0 (just copy), TIMP bit3=1 copy no transparents
0835+  3C02             LMMMf:
0836+  3C02 F3                   di
0837+  3C03 F5                   push af
0838+  3C04 C5                   push bc
0839+  3C05 D5                   push de
0840+  3C06 E5                   push hl
0841+  3C07                              
0842+  3C07 CD 5E 3A             call VDPready
0843+  3C0A 3E 20                ld  a,32
0844+  3C0C D3 99                out ($99),a
0845+  3C0E 3E 91                ld  a,128+17
0846+  3C10 D3 99                out ($99),a     ;R#17 := 32
0847+  3C12 21 F4 3B             ld hl,LM_p
0848+  3C15 0E 9B                ld c,$9b
0849+  3C17 06 0C                ld b,12         ;6x2bytes
0850+  3C19 ED B3                otir
0851+  3C1B AF                   xor a     
0852+  3C1C ED 79                out (c),a       ;dummy
0853+  3C1E ED A3                outi            ;DIX and DIY
0854+  3C20 7E                   ld a,(hl)       ; +logical
0855+  3C21 F6 90                or %10010000    ;LMMM command
0856+  3C23 ED 79                out (c),a       ;do it
0857+  3C25 CD 5E 3A             call VDPready
0858+  3C28 E1                   pop hl
0859+  3C29 D1                   pop de
0860+  3C2A C1                   pop bc
0861+  3C2B F1                   pop af
0862+  3C2C FB                   ei
0863+  3C2D C9                   ret
3698   3C2E                       #include "DISKs.ASM"       ; disk function diskload
0001+  3C2E             ;=======================================
0002+  3C2E             ;
0003+  3C2E             ; Disk functions (working)
0004+  3C2E             ;
0005+  3C2E             ;     diskload - to load small file into memory knowing that it works
0006+  3C2E             ;     readFF - buffered reading of 255 bytes of file into memory
0007+  3C2E             ;                (safe diskload for larger file)
0008+  3C2E             ;     dirload - to load directory structure into memory as string
0009+  3C2E             
0010+  3C2E             ;=======================================
0011+  3C2E             ;
0012+  3C2E             ; Usage1:
0013+  3C2E             ;        ld hl,filename_
0014+  3C2E             ;        ld de,$2000
0015+  3C2E             ;        call diskload
0016+  3C2E             ;filename_:
0017+  3C2E             ;        .byte 0,"myfile  com",0  
0018+  3C2E             ;
0019+  3C2E             ; (use exact file name space!)
0020+  3C2E             ;
0021+  3C2E             ;
0022+  3C2E             ; Usage2:
0023+  3C2E             ;        ld hl,filename_
0024+  3C2E             ;scanfile_:
0025+  3C2E             ;        call readFF
0026+  3C2E             ;        cp 0
0027+  3C2E             ;        jr z,scanover_
0028+  3C2E             ;        ld b,a
0029+  3C2E             ;        push de
0030+  3C2E             ;scanrecord_:
0031+  3C2E             ;        ld a,(de)   ;byte is here
0032+  3C2E             ;        inc de
0033+  3C2E             ;        djnz scanrecord_
0034+  3C2E             ;        pop de
0035+  3C2E             ;        jr scanfile_
0036+  3C2E             ;scanover_: 
0037+  3C2E             ;
0038+  3C2E             ;
0039+  3C2E             ; Usage3:
0040+  3C2E             ;        ld hl,wildcard_
0041+  3C2E             ;        ld de,$2000
0042+  3C2E             ;        call dirload 
0043+  3C2E             ;wildcard_:
0044+  3C2E             ;        .byte 0,"??????? COM",0  ;
0045+  3C2E             ;     
0046+  3C2E             ;    
0047+  3C2E             f_setdma:     .equ     26
0048+  3C2E             f_read:       .equ     39
0049+  3C2E             f_open:       .equ     15
0050+  3C2E             f_close:      .equ     16
0051+  3C2E             
0052+  3C2E             f_search1     .equ     $11
0053+  3C2E             f_search2     .equ     $12
0054+  3C2E             
0055+  3C2E             f_bdos:       .equ     $F37D   ; Call $5
0056+  3C2E             
0057+  3C2E             
0058+  3C2E             ; load file in address de
0059+  3C2E             diskload:
0060+  3C2E F5                  push af
0061+  3C2F C5                  push bc
0062+  3C30 D5                  push de
0063+  3C31 E5                  push hl
0064+  3C32 DD E5               push ix
0065+  3C34 FD E5               push iy
0066+  3C36                     
0067+  3C36 3E 01               ld a,1
0068+  3C38 32 55 3C            ld (loadflag),a
0069+  3C3B                     
0070+  3C3B D5                  push de
0071+  3C3C CD 5F 3D            call f_setfcb
0072+  3C3F CD 76 3D            call f_openf
0073+  3C42 2A B8 3D            ld hl,(f_bleng)
0074+  3C45 D1                  pop de
0075+  3C46 CD 8C 3D            call f_loadf
0076+  3C49 CD 9F 3D            call f_closef
0077+  3C4C                     
0078+  3C4C FD E1               pop iy
0079+  3C4E DD E1               pop ix
0080+  3C50 E1                  pop hl
0081+  3C51 D1                  pop de
0082+  3C52 C1                  pop bc
0083+  3C53 F1                  pop af
0084+  3C54 C9                  ret
0085+  3C55                     
0086+  3C55 01          loadflag: .byte   1   ; should be 0 on return if loaded
0087+  3C56             
0088+  3C56 00          stop_rdFF .byte   0   ; set 1 to stop reading
0089+  3C57             ; scan file, buffer in address de
0090+  3C57             readFF:
0091+  3C57 C5                  push bc
0092+  3C58 D5                  push de
0093+  3C59 E5                  push hl
0094+  3C5A DD E5               push ix
0095+  3C5C FD E5               push iy
0096+  3C5E                     
0097+  3C5E 3A B2 3C            ld a,(rd_opn)
0098+  3C61 FE 00               cp 0
0099+  3C63 20 08               jr nz,rd_overOpnFile
0100+  3C65                     
0101+  3C65 D5                  push de
0102+  3C66 CD 5F 3D            call f_setfcb
0103+  3C69 CD 76 3D            call f_openf
0104+  3C6C D1                  pop de
0105+  3C6D                 
0106+  3C6D             rd_overOpnFile:
0107+  3C6D             
0108+  3C6D 3E 00               ld a,0
0109+  3C6F 32 B7 3D            ld (f_groot+1),a
0110+  3C72 67                  ld h,a
0111+  3C73 3E 01               ld a,$1   ; read 255 bytes only
0112+  3C75 32 B6 3D            ld (f_groot),a
0113+  3C78 2E FF               ld l,$ff
0114+  3C7A                     
0115+  3C7A 3A B2 3C            ld a,(rd_opn)
0116+  3C7D FE 00               cp 0
0117+  3C7F 20 08               jr nz,rd_over2
0118+  3C81 32 56 3C            ld (stop_rdFF),a                        
0119+  3C84 CD 8C 3D            call f_loadf
0120+  3C87 18 0D               jr rd_over3
0121+  3C89             rd_over2:
0122+  3C89 3A 56 3C            ld a,(stop_rdFF)
0123+  3C8C FE 00               cp 0
0124+  3C8E 20 10               jr nz,rd_StopRd
0125+  3C90 11 A8 3D            ld de,f_fcb
0126+  3C93 CD 96 3D            call f_rdit
0127+  3C96             rd_over3:
0128+  3C96 3E 01               ld a,1
0129+  3C98 32 B2 3C            ld (rd_opn),a
0130+  3C9B                     
0131+  3C9B 7D                  ld a,l
0132+  3C9C FE 00               cp 0
0133+  3C9E 20 0A               jr nz,rd_outExit
0134+  3CA0             rd_StopRd:
0135+  3CA0 CD 9F 3D            call f_closef
0136+  3CA3 3E 00               ld a,0
0137+  3CA5 32 B2 3C            ld (rd_opn),a
0138+  3CA8 FE 00               cp 0
0139+  3CAA                           
0140+  3CAA             rd_outExit:        
0141+  3CAA FD E1               pop iy
0142+  3CAC DD E1               pop ix
0143+  3CAE E1                  pop hl
0144+  3CAF D1                  pop de
0145+  3CB0 C1                  pop bc
0146+  3CB1 C9                  ret
0147+  3CB2             
0148+  3CB2 00          rd_opn: .byte 0
0149+  3CB3                  
0150+  3CB3             ;
0151+  3CB3             ; searches directory files
0152+  3CB3             ;   that match hl wildcard
0153+  3CB3             ;   and stores result in address de
0154+  3CB3             ;
0155+  3CB3             ; separator ","
0156+  3CB3             ; ends with "$"
0157+  3CB3             ;
0158+  3CB3             ;  So, print the directory structure after by simple:
0159+  3CB3             ;         ld c, 9
0160+  3CB3             ;         call 5
0161+  3CB3             ;
0162+  3CB3 00          f_found .byte 0   ; counter of files found
0163+  3CB4             
0164+  3CB4             dirload:
0165+  3CB4 F5                  push af
0166+  3CB5 C5                  push bc
0167+  3CB6 D5                  push de
0168+  3CB7 E5                  push hl
0169+  3CB8 DD E5               push ix
0170+  3CBA FD E5               push iy
0171+  3CBC                     
0172+  3CBC 3E 00               ld      a,0
0173+  3CBE 32 B3 3C            ld      (f_found),a
0174+  3CC1                     
0175+  3CC1 CD 47 3D            call    f_sv_save ; save de
0176+  3CC4                     
0177+  3CC4 CD 5F 3D            call    f_setfcb
0178+  3CC7 2A B8 3D            ld      hl,(f_bleng)
0179+  3CCA             
0180+  3CCA E5                  push    hl
0181+  3CCB 11 1F 3D            ld      de,f_dma                                                                                                                                                                                          
0182+  3CCE 0E 1A               ld      c,f_setdma
0183+  3CD0 CD 7D F3            call    f_bdos
0184+  3CD3 11 A8 3D            ld      de,f_fcb
0185+  3CD6 E1                  pop     hl                
0186+  3CD7                     
0187+  3CD7 0E 11               ld      c,f_search1  ; first search
0188+  3CD9 CD 7D F3            call    f_bdos
0189+  3CDC                     
0190+  3CDC             f_loopDirList:
0191+  3CDC             
0192+  3CDC FE 00               cp 0
0193+  3CDE 20 28               jr nz,  f_errDirList
0194+  3CE0                     
0195+  3CE0                     ;----- save in list --|
0196+  3CE0 F5                  push    af
0197+  3CE1 C5                  push    bc
0198+  3CE2 D5                  push    de
0199+  3CE3 E5                  push    hl
0200+  3CE4                     
0201+  3CE4 3A B3 3C            ld      a,(f_found)
0202+  3CE7 3C                  inc     a
0203+  3CE8 32 B3 3C            ld      (f_found),a
0204+  3CEB                             
0205+  3CEB CD 52 3D            call    f_sv_rest ; restore de
0206+  3CEE                             
0207+  3CEE FD E5               push    iy
0208+  3CF0 E1                  pop     hl   ; where file name is in DMA
0209+  3CF1 01 0B 00            ld      bc,11
0210+  3CF4 ED B0               ldir         ; write 11 chars of filename
0211+  3CF6                     
0212+  3CF6 3E 2C               ld      a,','    ; separator
0213+  3CF8 12                  ld      (de),a
0214+  3CF9 13                  inc     de
0215+  3CFA             
0216+  3CFA CD 47 3D            call    f_sv_save ; save new de
0217+  3CFD                     
0218+  3CFD E1                  pop     hl
0219+  3CFE D1                  pop     de
0220+  3CFF C1                  pop     bc
0221+  3D00 F1                  pop     af
0222+  3D01                     ;---------------------|
0223+  3D01                     
0224+  3D01 0E 12               ld      c,f_search2  ; continue searching
0225+  3D03 CD 7D F3            call    f_bdos
0226+  3D06                     
0227+  3D06 18 D4               jr      f_loopDirList
0228+  3D08                     
0229+  3D08             f_errDirList:
0230+  3D08             
0231+  3D08 CD 52 3D            call    f_sv_rest ; restore de
0232+  3D0B             
0233+  3D0B 3A B3 3C            ld      a,(f_found)
0234+  3D0E FE 00               cp      0
0235+  3D10 28 01               jr      z, f_fxqx
0236+  3D12 1B                  dec     de
0237+  3D13 3E 24       f_fxqx: ld      a,'$'     ; it's over, put $
0238+  3D15 12                  ld      (de),a
0239+  3D16                     
0240+  3D16 FD E1               pop iy
0241+  3D18 DD E1               pop ix
0242+  3D1A E1                  pop hl
0243+  3D1B D1                  pop de
0244+  3D1C C1                  pop bc
0245+  3D1D F1                  pop af
0246+  3D1E C9                  ret
0247+  3D1F             
0248+  3D1F             f_dma:  .ds 40      ; to store searching results (a copy of fcb)
0249+  3D47             
0250+  3D47             ; need this crap because it uses all registers
0251+  3D47             f_sv_save:
0252+  3D47 F5                  push af
0253+  3D48 7A                  ld a,d
0254+  3D49 32 5D 3D            ld (f_sv_w+0),a        
0255+  3D4C 7B                  ld a,e
0256+  3D4D 32 5E 3D            ld (f_sv_w+1),a
0257+  3D50 F1                  pop af
0258+  3D51 C9                  ret
0259+  3D52             f_sv_rest:
0260+  3D52 F5                  push af
0261+  3D53 3A 5D 3D            ld a,(f_sv_w+0)
0262+  3D56 57                  ld d,a        
0263+  3D57 3A 5E 3D            ld a,(f_sv_w+1)
0264+  3D5A 5F                  ld e,a        
0265+  3D5B F1                  pop af
0266+  3D5C C9                  ret
0267+  3D5D             
0268+  3D5D 00 00       f_sv_w: .word 0
0269+  3D5F                                
0270+  3D5F             f_setfcb:
0271+  3D5F E5                    push hl
0272+  3D60 21 A8 3D              ld hl,f_fcb+0
0273+  3D63 11 A9 3D              ld de,f_fcb+1
0274+  3D66 01 24 00              ld bc,36
0275+  3D69 70                    ld (hl),b
0276+  3D6A ED B0                 ldir
0277+  3D6C E1                    pop hl
0278+  3D6D 11 A8 3D              ld de,f_fcb
0279+  3D70 01 0C 00              ld bc,12
0280+  3D73 ED B0                 ldir
0281+  3D75 C9                    ret
0282+  3D76             
0283+  3D76 11 A8 3D    f_openf:  ld      de,f_fcb
0284+  3D79 0E 0F                 ld      c,f_open
0285+  3D7B CD 7D F3              call    f_bdos
0286+  3D7E 21 01 00              ld      hl,1
0287+  3D81 22 B6 3D              ld      (f_groot),hl
0288+  3D84 2B                    dec     hl
0289+  3D85 22 C9 3D              ld      (f_blok),hl
0290+  3D88 22 CB 3D              ld      (f_blok+2),hl
0291+  3D8B C9                    ret
0292+  3D8C                                 
0293+  3D8C E5          f_loadf:  push    hl
0294+  3D8D 0E 1A                 ld      c,f_setdma
0295+  3D8F CD 7D F3              call    f_bdos
0296+  3D92 11 A8 3D              ld      de,f_fcb
0297+  3D95 E1                    pop     hl
0298+  3D96 0E 27       f_rdit:   ld      c,f_read
0299+  3D98 CD 7D F3              call    f_bdos    
0300+  3D9B 32 55 3C              ld      (loadflag),a  ;sets 0 if ok, 1 if can not load
0301+  3D9E C9                    ret
0302+  3D9F 11 A8 3D    f_closef: ld      de,f_fcb
0303+  3DA2 0E 10                 ld      c,f_close
0304+  3DA4 CD 7D F3              call    f_bdos
0305+  3DA7 C9                    ret
0306+  3DA8             
0307+  3DA8             
0308+  3DA8             ; Good tutorial on MSX files at
0309+  3DA8             ; http://fms.komkon.org/MSX/Handbook/th-3.txt
0310+  3DA8             
0311+  3DA8 00          f_fcb:    .byte    0
0312+  3DA9 3F 3F 3F 3F           .byte    "???????????"   ;11 chars          
0312+  3DAD 3F 3F 3F 3F 
0312+  3DB1 3F 3F 3F 
0313+  3DB4 00 00                 .word    0
0314+  3DB6 00 00       f_groot:  .word    0
0315+  3DB8 00 00       f_bleng:  .word    0
0316+  3DBA 00 00 00 00           .byte    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0316+  3DBE 00 00 00 00 
0316+  3DC2 00 00 00 00 
0316+  3DC6 00 00 00 
0317+  3DC9 00 00       f_blok:   .word    0
0318+  3DCB 00 00                 .word    0
0319+  3DCD             
0320+  3DCD                                     3699   3DCD                       #include "String.ASM"      ; most common string functions
0001+  3DCD             ;-------------------------------------
0002+  3DCD             ;
0003+  3DCD             ; Most common String functions (MSX asm)
0004+  3DCD             ; String can be 256 characters long maximum
0005+  3DCD             ; 
0006+  3DCD             ;
0007+  3DCD             ; String ends with 0, 
0008+  3DCD             ;  should be reserved bytes if string becomes longer,
0009+  3DCD             ;   of course.
0010+  3DCD             ;
0011+  3DCD             ;-------------------------------------
0012+  3DCD             ; 
0013+  3DCD             
0014+  3DCD             ; returns length of DE string in A, also sets Z
0015+  3DCD             Str_Len:
0016+  3DCD C5                  push bc
0017+  3DCE D5                  push de
0018+  3DCF 0E 00               ld c,0
0019+  3DD1             Str_LnScn:        
0020+  3DD1 1A                  ld a,(de)
0021+  3DD2 FE 00               cp 0
0022+  3DD4 28 04               jr z,Str_LnEx
0023+  3DD6 13                  inc de
0024+  3DD7 0C                  inc c
0025+  3DD8 18 F7               jr Str_LnScn
0026+  3DDA             Str_LnEx:
0027+  3DDA 79                  ld a,c
0028+  3DDB D1                  pop de        
0029+  3DDC C1                  pop bc
0030+  3DDD FE 00               cp 0
0031+  3DDF C9                  ret
0032+  3DE0                     
0033+  3DE0             ; set empty string
0034+  3DE0             Str_Clear:
0035+  3DE0 F5                  push af
0036+  3DE1 3E 00               ld a,0
0037+  3DE3 12                  ld (de),a
0038+  3DE4 F1                  pop af
0039+  3DE5 C9                  ret
0040+  3DE6             
0041+  3DE6             
0042+  3DE6             
0043+  3DE6             ; Cuts string of DE at length=A [0..254]
0044+  3DE6             ;     (label+nn  is much faster)
0045+  3DE6             ;
0046+  3DE6             Str_Cut:
0047+  3DE6 F5                   push af
0048+  3DE7 C5                   push bc
0049+  3DE8 E5                   push hl
0050+  3DE9 06 00                ld b,0
0051+  3DEB 4F                   ld c,a
0052+  3DEC D5                   push de
0053+  3DED E1                   pop hl
0054+  3DEE 09                   add hl,bc
0055+  3DEF 3E 00                ld a,0
0056+  3DF1 77                   ld (hl),a
0057+  3DF2 E1                   pop hl
0058+  3DF3 C1                   pop bc
0059+  3DF4 F1                   pop af
0060+  3DF5 C9                   ret
0061+  3DF6                      
0062+  3DF6             ; compares string of DE with string of IX
0063+  3DF6             ; Returns: A=0 - strings are equal
0064+  3DF6             ;          A=1 - IX string starts with DE str.
0065+  3DF6             ;          A=2 - not equal
0066+  3DF6             ; 
0067+  3DF6             Str_Compare:
0068+  3DF6 C5                   push bc
0069+  3DF7 D5                   push de
0070+  3DF8 DD E5                push ix
0071+  3DFA             Str_compScn:         
0072+  3DFA DD 7E 00             ld a,(ix)
0073+  3DFD FE 00                cp 0
0074+  3DFF 28 0E                jr z,Str_compL0   
0075+  3E01 47                   ld b,a
0076+  3E02 1A                   ld a,(de)
0077+  3E03 FE 00                cp 0
0078+  3E05 28 17                jr z,Str_compN1
0079+  3E07 B8                   cp b
0080+  3E08 20 10                jr nz,Str_compNEq
0081+  3E0A 13                   inc de
0082+  3E0B DD 23                inc ix
0083+  3E0D 18 EB                jr Str_compScn
0084+  3E0F             Str_compL0:
0085+  3E0F 1A                   ld a,(de)
0086+  3E10 FE 00                cp 0
0087+  3E12 28 02                jr z,Str_compEq
0088+  3E14 18 04                jr Str_compNEq
0089+  3E16             Str_compEq:
0090+  3E16 3E 00                ld a,0
0091+  3E18 18 06                jr Str_compEx
0092+  3E1A             Str_compNEq:
0093+  3E1A 3E 02                ld a,2
0094+  3E1C 18 02                jr Str_compEx         
0095+  3E1E             Str_compN1:
0096+  3E1E 3E 01                ld a,1
0097+  3E20             Str_compEx:
0098+  3E20 DD E1                pop ix
0099+  3E22 D1                   pop de
0100+  3E23 C1                   pop bc
0101+  3E24 C9                   ret
0102+  3E25             
0103+  3E25             ; Copies string DE to IX
0104+  3E25             Str_Copy:
0105+  3E25 F5                   push af
0106+  3E26 D5                   push de
0107+  3E27 DD E5                push ix
0108+  3E29             Str_CpyScn:
0109+  3E29 1A                   ld a,(de)
0110+  3E2A DD 77 00             ld (ix),a
0111+  3E2D FE 00                cp 0
0112+  3E2F 28 05                jr z,StrCpyEx
0113+  3E31 13                   inc de
0114+  3E32 DD 23                inc ix
0115+  3E34 18 F3                jr Str_CpyScn
0116+  3E36             StrCpyEx:                  
0117+  3E36 DD E1                pop ix
0118+  3E38 D1                   pop de
0119+  3E39 F1                   pop af
0120+  3E3A C9                   ret
0121+  3E3B             
0122+  3E3B             ; Converts string DE to UpperCase
0123+  3E3B             Str_Upper:
0124+  3E3B F5                   push af
0125+  3E3C D5                   push de
0126+  3E3D             Str_UppScn:
0127+  3E3D 1A                   ld a,(de)
0128+  3E3E FE 00                cp 0
0129+  3E40 28 0E                jr z,Str_UppEx
0130+  3E42 FE 61                cp 'a'
0131+  3E44 38 07                jr c,Str_UppNCnv
0132+  3E46 FE 7A                cp 'z'
0133+  3E48 30 03                jr nc,Str_UppNCnv
0134+  3E4A D6 20                sub 32
0135+  3E4C 12                   ld (de),a
0136+  3E4D             Str_UppNCnv:
0137+  3E4D 13                   inc de         
0138+  3E4E 18 ED                jr Str_UppScn
0139+  3E50             Str_UppEx:         
0140+  3E50 D1                   pop de
0141+  3E51 F1                   pop af
0142+  3E52 C9                   ret
0143+  3E53             
0144+  3E53             ; Converts string DE to LowerCase
0145+  3E53             Str_Lower:
0146+  3E53 F5                   push af
0147+  3E54 D5                   push de
0148+  3E55             Str_LwrScn:
0149+  3E55 1A                   ld a,(de)
0150+  3E56 FE 00                cp 0
0151+  3E58 28 0E                jr z,Str_LwrEx
0152+  3E5A FE 41                cp 'A'
0153+  3E5C 38 07                jr c,Str_LwrNCnv
0154+  3E5E FE 5A                cp 'Z'
0155+  3E60 30 03                jr nc,Str_LwrNCnv
0156+  3E62 C6 20                add a,32
0157+  3E64 12                   ld (de),a
0158+  3E65             Str_LwrNCnv:
0159+  3E65 13                   inc de         
0160+  3E66 18 ED                jr Str_LwrScn
0161+  3E68             Str_LwrEx:         
0162+  3E68 D1                   pop de
0163+  3E69 F1                   pop af
0164+  3E6A C9                   ret
0165+  3E6B             
0166+  3E6B             ; Finds string DE in string IX first 254 bytes
0167+  3E6B             ; On return: A=position, starting from 0
0168+  3E6B             ; If not found then A=$ff                 
0169+  3E6B             Str_IndexOf:
0170+  3E6B C5                   push bc
0171+  3E6C D5                   push de
0172+  3E6D DD E5                push ix
0173+  3E6F             
0174+  3E6F 06 00                ld b,0
0175+  3E71             Str_InxScn:
0176+  3E71 DD 7E 00             ld a,(ix)
0177+  3E74 FE 00                cp 0
0178+  3E76 20 04                jr nz,Str_InxCompr
0179+  3E78 3E FF                ld a,$ff
0180+  3E7A 18 12                jr Str_InxEx
0181+  3E7C             Str_InxCompr:
0182+  3E7C CD F6 3D             call Str_Compare
0183+  3E7F FE 02                cp 2
0184+  3E81 20 0A                jr nz,Str_InxFound
0185+  3E83 04                   inc b
0186+  3E84 3E FF                ld a,$ff
0187+  3E86 B8                   cp b
0188+  3E87 28 05                jr z,Str_InxEx
0189+  3E89 DD 23                inc ix
0190+  3E8B 18 E4                jr Str_InxScn
0191+  3E8D             Str_InxFound:
0192+  3E8D 78                   ld a,b 
0193+  3E8E             Str_InxEx:                  
0194+  3E8E DD E1                pop ix
0195+  3E90 D1                   pop de
0196+  3E91 C1                   pop bc
0197+  3E92 C9                   ret
0198+  3E93             
0199+  3E93             ;returns a=0 and Z flag set if string IX contains substring DE
0200+  3E93             ; (length not limited)
0201+  3E93             Str_Contains:
0202+  3E93 DD E5                push ix
0203+  3E95             Str_Contai_Scn:
0204+  3E95 DD 7E 00             ld a,(ix)
0205+  3E98 FE 00                cp 0
0206+  3E9A 20 04                jr nz,Str_Contai_Cont
0207+  3E9C 3E 02                ld a,2
0208+  3E9E 18 0D                jr Str_Contai_ex
0209+  3EA0             Str_Contai_Cont:      
0210+  3EA0 CD F6 3D             call Str_Compare
0211+  3EA3 FE 02                cp 2
0212+  3EA5 20 04                jr nz,Str_Contai_found
0213+  3EA7 DD 23                inc ix
0214+  3EA9 18 EA                jr Str_Contai_Scn
0215+  3EAB             Str_Contai_found:
0216+  3EAB 3E 00                ld a,0
0217+  3EAD             Str_Contai_ex:          
0218+  3EAD DD E1                pop ix
0219+  3EAF FE 00                cp 0
0220+  3EB1 C9                   ret
0221+  3EB2             
0222+  3EB2             ;
0223+  3EB2             ; Places substring of IX into DE
0224+  3EB2             ; c=starting char in IX, b-length in chars
0225+  3EB2             ;
0226+  3EB2             Str_Substr:
0227+  3EB2 F5                   push af
0228+  3EB3 C5                   push bc
0229+  3EB4 D5                   push de
0230+  3EB5 E5                   push hl       
0231+  3EB6             
0232+  3EB6 DD E5                push ix
0233+  3EB8 E1                   pop hl
0234+  3EB9 79                   ld a,c
0235+  3EBA FE 00                cp 0
0236+  3EBC 28 05                jr z,Str_SubAt0
0237+  3EBE C5                   push bc
0238+  3EBF 06 00                ld b,0
0239+  3EC1 09                   add hl,bc   ; offset
0240+  3EC2 C1                   pop bc
0241+  3EC3             Str_SubAt0:         
0242+  3EC3 48                   ld c,b
0243+  3EC4 06 00                ld b,0
0244+  3EC6 ED B0                ldir        ; copy bc bytes from HL to DE addrs.
0245+  3EC8 3E 00                ld a,0
0246+  3ECA 12                   ld (de),a
0247+  3ECB                      
0248+  3ECB E1                   pop hl
0249+  3ECC D1                   pop de
0250+  3ECD C1                   pop bc
0251+  3ECE F1                   pop af
0252+  3ECF C9                   ret
0253+  3ED0             
0254+  3ED0             ;
0255+  3ED0             ; Removes left spaces for string in DE
0256+  3ED0             ;
0257+  3ED0             Str_Ltrim:
0258+  3ED0 F5                   push af
0259+  3ED1 C5                   push bc
0260+  3ED2 D5                   push de
0261+  3ED3 DD E5                push ix
0262+  3ED5                      
0263+  3ED5 D5                   push de
0264+  3ED6 DD E1                pop ix
0265+  3ED8 0E 00                ld c,0
0266+  3EDA             Str_LtrScn:         
0267+  3EDA 1A                   ld a,(de)
0268+  3EDB FE 20                cp 32
0269+  3EDD 20 05                jr nz,Str_LtrNS
0270+  3EDF 13                   inc de
0271+  3EE0 0E 01                ld c,1
0272+  3EE2 18 F6                jr Str_LtrScn
0273+  3EE4             Str_LtrNS:
0274+  3EE4 79                   ld a,c
0275+  3EE5 FE 00                cp 0
0276+  3EE7 28 03                jr z,Str_LtrEx
0277+  3EE9 CD 25 3E             call Str_Copy
0278+  3EEC             Str_LtrEx:
0279+  3EEC DD E1                pop ix
0280+  3EEE D1                   pop de
0281+  3EEF C1                   pop bc
0282+  3EF0 F1                   pop af
0283+  3EF1 C9                   ret
0284+  3EF2                      
0285+  3EF2             ;
0286+  3EF2             ; Removes right spaces for string in DE
0287+  3EF2             ;
0288+  3EF2             Str_Rtrim:
0289+  3EF2 F5                   push af
0290+  3EF3 D5                   push de         
0291+  3EF4 1A                   ld a,(de)
0292+  3EF5 FE 00                cp 0
0293+  3EF7 28 12                jr z,Str_RtrEx
0294+  3EF9             Str_RtrRscn:
0295+  3EF9 13                   inc de        
0296+  3EFA 1A                   ld a,(de)
0297+  3EFB FE 00                cp 0
0298+  3EFD 28 02                jr z,Str_Rtr1
0299+  3EFF 18 F8                jr Str_RtrRscn
0300+  3F01             Str_Rtr1:
0301+  3F01 1B                   dec de
0302+  3F02 FE 20                cp 32
0303+  3F04 20 05                jr nz,Str_RtrEx
0304+  3F06 3E 00                ld a,0
0305+  3F08 12                   ld (de),a
0306+  3F09 18 F6                jr Str_Rtr1
0307+  3F0B             Str_RtrEx:
0308+  3F0B D1                   pop de
0309+  3F0C F1                   pop af
0310+  3F0D C9                   ret
0311+  3F0E             
0312+  3F0E             ; both trims
0313+  3F0E             Str_Alltrim:
0314+  3F0E CD F2 3E             call Str_Rtrim
0315+  3F11 CD D0 3E             call Str_Ltrim
0316+  3F14 C9                   ret
0317+  3F15             
0318+  3F15             ;
0319+  3F15             ; Adds DE string at the end of IX string
0320+  3F15             ;
0321+  3F15             Str_Append:
0322+  3F15 F5                   push af
0323+  3F16 DD E5                push ix         
0324+  3F18 DD 7E 00             ld a,(ix)
0325+  3F1B FE 00                cp 0
0326+  3F1D 28 0B                jr z,Str_App1
0327+  3F1F             Str_AppRscn:
0328+  3F1F DD 23                inc ix        
0329+  3F21 DD 7E 00             ld a,(ix)
0330+  3F24 FE 00                cp 0
0331+  3F26 28 02                jr z,Str_App1
0332+  3F28 18 F5                jr Str_AppRscn
0333+  3F2A             Str_App1:
0334+  3F2A CD 25 3E             call Str_Copy
0335+  3F2D DD E1                pop ix
0336+  3F2F F1                   pop af
0337+  3F30 C9                   ret
0338+  3F31             
0339+  3F31             ;
0340+  3F31             ; Replaces all DE substrings in IX string with HL string
0341+  3F31             ;
0342+  3F31             Str_Replace:
0343+  3F31 F5                   push af
0344+  3F32 C5                   push bc
0345+  3F33 E5                   push hl
0346+  3F34 DD E5                push ix
0347+  3F36                      
0348+  3F36 CD CD 3D             call Str_Len
0349+  3F39 4F                   ld c,a           ;c=Len(de-string)
0350+  3F3A FE 00                cp 0
0351+  3F3C 28 47                jr z,Str_ReplNo
0352+  3F3E             Str_ReplLoop:        
0353+  3F3E CD 6B 3E             call Str_IndexOf
0354+  3F41 FE FF                cp $ff
0355+  3F43 28 40                jr z,Str_ReplNo
0356+  3F45                      
0357+  3F45 D5                   push de
0358+  3F46 47                   ld b,a
0359+  3F47 11 8B 3F             ld de,Str_buf_
0360+  3F4A                      
0361+  3F4A DD E5                push ix
0362+  3F4C             Str_ReplIy0:                   ; copy till substr...
0363+  3F4C DD 7E 00             ld a,(ix)
0364+  3F4F 12                   ld (de),a
0365+  3F50 78                   ld a,b
0366+  3F51 FE 00                cp 0
0367+  3F53 28 06                jr z,Str_ReplIx0
0368+  3F55 DD 23                inc ix
0369+  3F57 13                   inc de
0370+  3F58 05                   dec b
0371+  3F59 18 F1                jr Str_ReplIy0
0372+  3F5B             Str_ReplIx0:
0373+  3F5B             
0374+  3F5B E5                   push hl
0375+  3F5C             Str_ReplIy1:                   ; copy new substring...         
0376+  3F5C 7E                   ld a,(hl)
0377+  3F5D 12                   ld (de),a
0378+  3F5E FE 00                cp 0
0379+  3F60 28 04                jr z,Str_ReplHl0
0380+  3F62 23                   inc hl
0381+  3F63 13                   inc de
0382+  3F64 18 F6                jr Str_ReplIy1
0383+  3F66             Str_ReplHl0:
0384+  3F66 E1                   pop hl
0385+  3F67                      
0386+  3F67 79                   ld a,c
0387+  3F68             Str_ReplSkp1:         
0388+  3F68 DD 23                inc ix                 ; skip substr
0389+  3F6A 3D                   dec a
0390+  3F6B 20 FB                jr nz,Str_ReplSkp1
0391+  3F6D             Str_ReplIy3:                    ; copy all string after...
0392+  3F6D DD 7E 00             ld a,(ix)
0393+  3F70 12                   ld (de),a
0394+  3F71 FE 00                cp 0
0395+  3F73 28 05                jr z,Str_ReplIx3
0396+  3F75 DD 23                inc ix
0397+  3F77 13                   inc de
0398+  3F78 18 F3                jr Str_ReplIy3
0399+  3F7A             Str_ReplIx3:
0400+  3F7A DD E1                pop ix
0401+  3F7C                      
0402+  3F7C 11 8B 3F             ld de,Str_buf_
0403+  3F7F CD 25 3E             call Str_Copy        ; copy new string to IX 
0404+  3F82             
0405+  3F82 D1                   pop de
0406+  3F83 18 B9                jr Str_ReplLoop        ; to replace all occurrances
0407+  3F85             Str_ReplNo:         
0408+  3F85 DD E1                pop ix
0409+  3F87 E1                   pop hl
0410+  3F88 C1                   pop bc
0411+  3F89 F1                   pop af
0412+  3F8A C9                   ret
0413+  3F8B                      
0414+  3F8B             Str_buf_ .ds $100
0415+  408B 00                   .byte 0
0416+  408C             
0417+  408C             
0418+  408C             ;
0419+  408C             ; This truncates DE string where new line (ascii 10 or 13)
0420+  408C             ; If string is longer 254 chars then truncates at space char.
0421+  408C             ; Sets IX as pointer to next line starting character
0422+  408C             ; This supposed to get safe-as-much-possible string opeations.
0423+  408C             
0424+  408C             Str_Line:
0425+  408C F5                   push af
0426+  408D C5                   push bc
0427+  408E D5                   push de
0428+  408F             
0429+  408F 01 00 00             ld bc,0
0430+  4092             Str_Ln_Scn:
0431+  4092 1A                   ld a,(de)       ; find end of line
0432+  4093 FE 00                cp 0
0433+  4095 28 28                jr z,Str_Ln_q1
0434+  4097 FE 0D                cp 13
0435+  4099 28 24                jr z,Str_Ln_q1
0436+  409B FE 0A                cp 10
0437+  409D 28 20                jr z,Str_Ln_q1
0438+  409F 13                   inc de
0439+  40A0 0C                   inc c
0440+  40A1 3E FF                ld a,$ff         ; reached 255?         
0441+  40A3 B9                   cp c
0442+  40A4 20 EC                jr nz, Str_Ln_Scn
0443+  40A6                      
0444+  40A6             Str_Ln_fSpc:         
0445+  40A6                                        
0446+  40A6 1A                   ld a,(de)         ; if string too long then finds space near 254th position
0447+  40A7 FE 20                cp ' '
0448+  40A9 28 14                jr z,Str_Ln_q1    ; use this position and truncate string
0449+  40AB 1B                   dec de
0450+  40AC 0D                   dec c
0451+  40AD 20 F7                jr nz,Str_Ln_fSpc
0452+  40AF                                 
0453+  40AF             Str_Ln_cL:
0454+  40AF 1A                   ld a,(de)          ; if cant find space then just searches for line end
0455+  40B0 FE 00                cp 0               ; to obtain new IX anyway
0456+  40B2 28 0B                jr z,Str_Ln_q1
0457+  40B4 FE 0D                cp 13
0458+  40B6 28 07                jr z,Str_Ln_q1
0459+  40B8 FE 0A                cp 10
0460+  40BA 28 03                jr z,Str_Ln_q1
0461+  40BC 13                   inc de
0462+  40BD 18 F0                jr Str_Ln_cL
0463+  40BF                      
0464+  40BF             Str_Ln_q1:
0465+  40BF 3E 00                ld a,0          ; set to 0 till next line
0466+  40C1 12                   ld (de),a
0467+  40C2 13                   inc de
0468+  40C3 1A                   ld a,(de)
0469+  40C4 FE 00                cp 0          
0470+  40C6 28 F7                jr z,Str_Ln_q1
0471+  40C8 FE 0D                cp 13
0472+  40CA 28 F3                jr z,Str_Ln_q1
0473+  40CC FE 0A                cp 10
0474+  40CE 28 EF                jr z,Str_Ln_q1
0475+  40D0                      
0476+  40D0 D5                   push de
0477+  40D1 DD E1                pop ix
0478+  40D3                     
0479+  40D3 D1                   pop de
0480+  40D4 C1                   pop bc
0481+  40D5 F1                   pop af
0482+  40D6 C9                   ret
0483+  40D7             
0484+  40D7             ;
0485+  40D7             ; This removes all non-character symbols and sets TABs as 3 spaces
0486+  40D7             ; of string in DE.  Use after Str_Line not to lose line feeds.
0487+  40D7             ;                  
0488+  40D7             Str_CharsOnly:
0489+  40D7             
0490+  40D7 F5                   push af
0491+  40D8 D5                   push de
0492+  40D9 DD E5                push ix
0493+  40DB D5                   push de
0494+  40DC D5                   push de
0495+  40DD DD E1                pop ix
0496+  40DF 11 8B 3F             ld de,Str_buf_
0497+  40E2             Str_CharsO_loop:
0498+  40E2 DD 7E 00             ld a,(ix)
0499+  40E5 FE 00                cp 0
0500+  40E7 28 1A                jr z, Str_CharsO_Ex
0501+  40E9 FE 09                cp 9
0502+  40EB 20 0C                jr nz, Str_CharsO_nTb
0503+  40ED 3E 20                ld a,' '
0504+  40EF 12                   ld (de),a
0505+  40F0 13                   inc de
0506+  40F1 12                   ld (de),a
0507+  40F2 13                   inc de
0508+  40F3             Str_CharsO_cpy:         
0509+  40F3 12                   ld (de),a
0510+  40F4 13                   inc de
0511+  40F5 DD 23                inc ix
0512+  40F7 18 E9                jr Str_CharsO_loop
0513+  40F9             Str_CharsO_nTb:
0514+  40F9 FE 20                cp ' '
0515+  40FB 38 E5                jr c,Str_CharsO_loop
0516+  40FD FE FF                cp $ff
0517+  40FF 28 E1                jr z,Str_CharsO_loop
0518+  4101 18 F0                jr Str_CharsO_cpy
0519+  4103             Str_CharsO_Ex:
0520+  4103 12                   ld (de),a
0521+  4104 11 8B 3F             ld de,Str_buf_
0522+  4107 DD E1                pop ix
0523+  4109 CD 25 3E             call Str_Copy        ; copy new string to IX 
0524+  410C DD E1                pop ix
0525+  410E D1                   pop de
0526+  410F F1                   pop af
0527+  4110 C9                   ret
0528+  4111             
0529+  4111             ;
0530+  4111             ; places value of integer in reg-a into DE string
0531+  4111             ;
0532+  4111             Str_itoa:
0533+  4111 F5                   push af
0534+  4112 C5                   push bc
0535+  4113 D5                   push de
0536+  4114 FE 00                cp 0
0537+  4116 28 3E                jr z,Str_i2_0
0538+  4118 FE C8                cp 200
0539+  411A 30 26                jr nc,Str_i2a200
0540+  411C FE 64                cp 100
0541+  411E 30 2C                jr nc,Str_i2a100
0542+  4120 FE 0A                cp 10
0543+  4122 30 03                jr nc,Str_i2a10
0544+  4124 4F                   ld c,a
0545+  4125 18 11                jr Str_i2q
0546+  4127             Str_i2a10:
0547+  4127 06 00                ld b,0
0548+  4129             Str_i2a_l_10:         
0549+  4129 FE 0A                cp 10
0550+  412B 38 05                jr c,Str_i2a1
0551+  412D D6 0A                sub 10
0552+  412F 04                   inc b
0553+  4130 18 F7                jr Str_i2a_l_10
0554+  4132             Str_i2a1:
0555+  4132 4F                   ld c,a
0556+  4133 3E 30                ld a,'0'
0557+  4135 80                   add a,b
0558+  4136 12                   ld (de),a
0559+  4137 13                   inc de
0560+  4138 3E 30       Str_i2q: ld a,'0'
0561+  413A 81                   add a,c
0562+  413B 12                   ld (de),a
0563+  413C 13                   inc de
0564+  413D 3E 00                ld a,0
0565+  413F 12                   ld (de),a
0566+  4140 18 18                jr Str_i2ex                  
0567+  4142             Str_i2a200:
0568+  4142 D6 C8                sub 200
0569+  4144 4F                   ld c,a                 
0570+  4145 3E 32                ld a,'2'
0571+  4147 12                   ld (de),a
0572+  4148 13                   inc de
0573+  4149 79                   ld a,c         
0574+  414A 18 DB                jr Str_i2a10
0575+  414C             Str_i2a100:
0576+  414C D6 64                sub 100
0577+  414E 4F                   ld c,a         
0578+  414F 3E 31                ld a,'1'
0579+  4151 12                   ld (de),a
0580+  4152 13                   inc de
0581+  4153 79                   ld a,c
0582+  4154 18 D1                jr Str_i2a10
0583+  4156             Str_i2_0:
0584+  4156 0E 00                ld c,0
0585+  4158 18 DE                jr Str_i2q        
0586+  415A             Str_i2ex:
0587+  415A D1                   pop de
0588+  415B C1                   pop bc
0589+  415C F1                   pop af
0590+  415D C9                   ret
0591+  415E                      
0592+  415E             ;
0593+  415E             ; places integer value of DE string into reg-a
0594+  415E             ;
0595+  415E             Str_atoi:
0596+  415E C5                   push bc
0597+  415F D5                   push de
0598+  4160 E5                   push hl
0599+  4161                      
0600+  4161 EB                   ex de,hl ;hl=de
0601+  4162 11 00 00             ld de,0
0602+  4165 01 00 00             ld bc,0
0603+  4168             Str_a2iLoop:         
0604+  4168 7E                   ld a,(hl)
0605+  4169 23                   inc hl
0606+  416A FE 00                cp 0
0607+  416C 28 1A                jr z, Str_a2ex
0608+  416E FE 30                cp '0'
0609+  4170 38 16                jr c, Str_a2ex
0610+  4172 FE 3A                cp '9'+1
0611+  4174 30 12                jr nc, Str_a2ex
0612+  4176 18 00                jr Str_a2digit
0613+  4178             Str_a2digit:
0614+  4178 D6 30                sub '0'
0615+  417A 4F                   ld c,a
0616+  417B 78                   ld a,b
0617+  417C FE 00                cp 0
0618+  417E 28 0D                jr z,Str_a2ph1
0619+  4180 FE 01                cp 1
0620+  4182 28 0E                jr z,Str_a2ph2
0621+  4184 FE 02                cp 2
0622+  4186 28 0A                jr z,Str_a2ph2   ; the same method  *10+a
0623+  4188             Str_a2ex:               
0624+  4188 7A                   ld a,d          ; store to A
0625+  4189 18 17                jr Str_a2iEx         
0626+  418B             Str_a2Lp:
0627+  418B 18 DB                jr Str_a2iLoop
0628+  418D                      
0629+  418D             Str_a2ph1:
0630+  418D 51                   ld d,c  ; ones, save
0631+  418E 06 01                ld b,1
0632+  4190 18 F9                jr Str_a2Lp
0633+  4192             
0634+  4192             Str_a2ph2:
0635+  4192 7A                   ld a,d           ;d*10 = (d*8)+(d*2)
0636+  4193 CB 27                sla a   ; *2
0637+  4195                         
0638+  4195 CB 22                sla d
0639+  4197 CB 22                sla d
0640+  4199 CB 22                sla d   ;*8
0641+  419B 82                   add a,d  ;+ = become tens
0642+  419C 81                   add a,c  ; +ones
0643+  419D 57                   ld d,a   ;save
0644+  419E 06 02                ld b,2         
0645+  41A0 18 E9                jr Str_a2Lp
0646+  41A2                      
0647+  41A2             Str_a2iEx:
0648+  41A2 E1                   pop hl         
0649+  41A3 D1                   pop de
0650+  41A4 C1                   pop bc
0651+  41A5 C9                   ret
0652+  41A6             
0653+  41A6             ; finds tags in string IX and copies substring between them to DE address
0654+  41A6             ; tags are strings addressed by hl (as left tag) and iy (as right tag)
0655+  41A6             ; for example: <div>substring between</div>
0656+  41A6             ; Separators should be at least 1char.
0657+  41A6             ; If can't find left tag till 254th position then returns empty string.
0658+  41A6             ; If can't find right tag then truncates substring at 255th position anyway. 
0659+  41A6             ;
0660+  41A6             Str_TagSubstr:
0661+  41A6 F5                   push af
0662+  41A7 C5                   push bc
0663+  41A8 D5                   push de
0664+  41A9 E5                   push hl
0665+  41AA DD E5                push ix
0666+  41AC                      
0667+  41AC D5                   push de
0668+  41AD EB                   ex de,hl   ; de=hl (left tag)
0669+  41AE 0E 00                ld c,0
0670+  41B0             Str_TagScn:
0671+  41B0 0C                   inc c
0672+  41B1 3E FF                ld a,$ff
0673+  41B3 B9                   cp c              ; if 255th reached
0674+  41B4 28 15                jr z,Str_LTagNotFound
0675+  41B6 CD F6 3D             call Str_Compare
0676+  41B9 DD 23                inc ix
0677+  41BB FE 02                cp 2
0678+  41BD 28 F1                jr z,Str_TagScn
0679+  41BF CD CD 3D             call Str_Len ;calculates length of left tag
0680+  41C2             Str_TagSkp1:
0681+  41C2 FE 01                cp 1
0682+  41C4 28 08                jr z,Str_TagBr1
0683+  41C6 DD 23                inc ix
0684+  41C8 3D                   dec a
0685+  41C9 18 F7                jr Str_TagSkp1
0686+  41CB                      
0687+  41CB             Str_LTagNotFound:
0688+  41CB E1                   pop hl   ; hl = de where to store substring 
0689+  41CC 18 1A                jr Str_TagBr2
0690+  41CE                      
0691+  41CE             Str_TagBr1:                  
0692+  41CE                      
0693+  41CE FD E5                push iy
0694+  41D0 D1                   pop de   ; de now = iy (right tag)
0695+  41D1 E1                   pop hl   ; hl = de where to store substring
0696+  41D2                      
0697+  41D2 0E 00                ld c,0
0698+  41D4             Str_TagSc2:
0699+  41D4 CD F6 3D             call Str_Compare
0700+  41D7 FE 02                cp 2
0701+  41D9 20 0D                jr nz,Str_TagBr2
0702+  41DB                       
0703+  41DB DD 7E 00             ld a,(ix)
0704+  41DE 77                   ld (hl),a
0705+  41DF 23                   inc hl
0706+  41E0 DD 23                inc ix
0707+  41E2 0C                   inc c
0708+  41E3 3E FF                ld a,$ff
0709+  41E5 B9                   cp c              ; if 255th reached
0710+  41E6 20 EC                jr nz,Str_TagSc2
0711+  41E8             Str_TagBr2:
0712+  41E8 3E 00                ld a,0
0713+  41EA 77                   ld (hl),a   ; end of new string
0714+  41EB DD E1                pop ix
0715+  41ED E1                   pop hl
0716+  41EE D1                   pop de
0717+  41EF C1                   pop bc
0718+  41F0 F1                   pop af         
0719+  41F1 C9                   ret
0720+  41F2                                 
0721+  41F2             
0722+  41F2             ;
0723+  41F2             ; Faster copy from IX to DE length of A
0724+  41F2             ;  (ignores 0)
0725+  41F2             ;
0726+  41F2             
0727+  41F2             Block_Copy_:
0728+  41F2 FE 00                cp 0
0729+  41F4 28 10                jr z,Block_CpyExit
0730+  41F6 F5                   push af
0731+  41F7 C5                   push bc
0732+  41F8 D5                   push de
0733+  41F9 E5                   push hl       
0734+  41FA             
0735+  41FA DD E5                push ix
0736+  41FC E1                   pop hl
0737+  41FD                      
0738+  41FD 4F                   ld c,a
0739+  41FE 06 00                ld b,0
0740+  4200 ED B0                ldir        ; copy bc bytes from HL to DE addrs.
0741+  4202                      
0742+  4202 E1                   pop hl
0743+  4203 D1                   pop de
0744+  4204 C1                   pop bc
0745+  4205 F1                   pop af
0746+  4206             Block_CpyExit:         
0747+  4206 C9                   ret
0748+  4207                      
0749+  4207             ; sets to 0 block in DE length of A
0750+  4207             Block_Clear_:
0751+  4207 FE 00                cp 0
0752+  4209 28 15                jr z,Block_ClrExit
0753+  420B F5                   push af
0754+  420C C5                   push bc
0755+  420D D5                   push de
0756+  420E E5                   push hl       
0757+  420F             
0758+  420F 4F                   ld c,a
0759+  4210 0D                   dec c
0760+  4211                      
0761+  4211 D5                   push de
0762+  4212 E1                   pop hl
0763+  4213                      
0764+  4213 3A 21 42             ld a,(Block_ch0)
0765+  4216 77                   ld (hl),a
0766+  4217 13                   inc de
0767+  4218                      
0768+  4218 06 00                ld b,0
0769+  421A ED B0                ldir        ; copy repeating 0 from HL to DE addrs.
0770+  421C                              
0771+  421C E1                   pop hl
0772+  421D D1                   pop de
0773+  421E C1                   pop bc
0774+  421F F1                   pop af
0775+  4220             Block_ClrExit:         
0776+  4220 C9                   ret
0777+  4221             
0778+  4221 00          Block_ch0: .byte 0   ;uses this byte to set 0
0779+  4222                                  ; (can set spaces or other)
0780+  4222             
3700   4222             
3701   4222             JMP_0000: .equ $F3EF         ;good exit to DOS prompt for sure 
3702   4222                                 
3703   4222             ; Exporting addresses to include them in other modules 
3704   4222             ;      (recognises as labels)
3705   4222                       
3706   4222                      .export startFEN
3707   4222                      .export MOVE_str
3708   4222                      .export BOARD
3709   4222                      .export SIDE
3710   4222                      .export CASTLES
3711   4222                      .export ENPSQ
3712   4222                      .export WKSQ
3713   4222                      .export BKSQ
3714   4222                      .export NEXT_MVSTR
3715   4222                      .export NEXT_MVCNT
3716   4222                      .export NEXT_MOVES
3717   4222                      .export MOVE_CNT
3718   4222                      .export MOVE_HIST
3719   4222                      .export GenMovesAndString
3720   4222                      .export MOVE_byString
3721   4222                      .export MbyStrMove
3722   4222                      .export UndoAllMoves
3723   4222                      .export SQi
3724   4222                      .export SQt
3725   4222                      .export GenMoves
3726   4222                      .export IsEmpty      
3727   4222                      .export IsOccupied
3728   4222                      .export IsWhite
3729   4222                      .export IsBlack
3730   4222                      .export CaptPiece
3731   4222                      .export PromoPcId
3732   4222                      .export CastlMove
3733   4222                      .export MovesToStr
3734   4222                      .export MovesOut
3735   4222                      .export SetFEN
3736   4222                      .export GetFEN
3737   4222                      .export BoardOut
3738   4222                      .export printBOARD        
3739   4222                      .export ScanSqC
3740   4222                      .export SetSqScan
3741   4222                      .export ScanSqNxt
3742   4222                      .export IsCheck  
3743   4222                      .export MakeMove
3744   4222                      .export Swap_Sides
3745   4222                      .export UnMakeMove
3746   4222                      .export DEBUGs
3747   4222                      .export LD_Ix
3748   4222                      .export DEC_I
3749   4222                      
3750   4222             endProgram:
3751   4222             .end
3752   4222             
3753   4222             
tasm: Number of errors = 0
