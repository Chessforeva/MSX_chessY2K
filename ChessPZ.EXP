0001   0000             .title ChessY2K
0002   0000             
0003   0000             ;
0004   0000             ; Chess assembler ASM code for MSX
0005   0000             ;
0006   0000             ;  MSDOS:
0007   0000             ;     TASM -80 -b ChessY2K.ASM ChessY2K.com
0008   0000             ;     TASM -80 -b ChessPG.ASM ChessPG.co2
0009   0000             ;     TASM -80 -b ChessPI.ASM ChessPI.co2
0010   0000             ;  Then run ChessY2K.com on MSX-DOS1
0011   0000             ;
0012   0000             ; Date: sep.,oct. 2012
0013   0000             ;
0014   0000             ;Performance testing: 256 movement generations per minute on MSX machine -
0015   0000             ;                        not enaugh for chess but ok for pgn-viewer project.
0016   0000             
0017   0000             ;
0018   0000             ; Define PGN_COMPILE to compile separate module for pgn viewer replays
0019   0000             ; It can not be done in one .COM unfortunately - causes too much memory usage.
0020   0000             ; ChessPZ.COM is a compilation with no PGN version.
0021   0000             ; 
0022   0000             ;#define   PGN_COMPILE 1
0023   0000             
0024   0100                      .org $100      
0025   0100                                   
0026   0100             startProgram:
0027   0100 CD CB 2D             call ChessMN     ; process menu
0028   0103                                       ; chess logic is in this file
0029   0103                     
0030   0103 C3 EF F3             jp  JMP_0000     ; return to DOS
0031   0106 C9                   ret
0032   0107                             
0033   0107             startFEN:       
0034   0107 72 6E 62 71         .byte "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",0                       
0034   010B 6B 62 6E 72 
0034   010F 2F 70 70 70 
0034   0113 70 70 70 70 
0034   0117 70 2F 38 2F 
0034   011B 38 2F 38 2F 
0034   011F 38 2F 50 50 
0034   0123 50 50 50 50 
0034   0127 50 50 2F 52 
0034   012B 4E 42 51 4B 
0034   012F 42 4E 52 20 
0034   0133 77 20 4B 51 
0034   0137 6B 71 20 2D 
0034   013B 20 30 20 31 
0034   013F 00 
0035   0140             
0036   0140             
0037   0140             ; STATUSES OF CURRENT CHESS GAME 
0038   0140             
0039   0140             ; Current chess position
0040   0140             
0041   0140 61 31 20 20 BOARD:  .byte "a1    h1"        ;64 bytes of board
0041   0144 20 20 68 31 
0042   0148 61 32 20 20         .byte "a2    h2"
0042   014C 20 20 68 32 
0043   0150 20 20 20 20         .byte "        "
0043   0154 20 20 20 20 
0044   0158 20 20 20 20         .byte "        "
0044   015C 20 20 20 20 
0045   0160 20 20 20 20         .byte "        "
0045   0164 20 20 20 20 
0046   0168 20 20 20 20         .byte "        "
0046   016C 20 20 20 20 
0047   0170 20 20 20 20         .byte "        "
0047   0174 20 20 20 20 
0048   0178 61 38 20 20         .byte "a8    h8"
0048   017C 20 20 68 38 
0049   0180 00                  .byte 0
0050   0181                     
0051   0181 00          SIDE:     .byte 0       ; side to move 0-white, 1-black   
0052   0182 00          CASTLES:  .byte 0       ; castling allowance flags
0053   0183                                     ; if bits are set: 0 wK, 1 wQ, 2 bK, 3 bQ sides
0054   0183 FF          ENPSQ:    .byte $ff     ; en-passant square none
0055   0184 00          WKSQ:     .byte 0       ; square of white king
0056   0185 00          BKSQ:     .byte 0       ; square of black king
0057   0186             
0058   0186             ;
0059   0186             ; variables and arrays for next movement generation
0060   0186             ; (for printing and displaying)          
0061   0186 20 20 20 20 NEXT_MVSTR: .byte "                                                    "
0061   018A 20 20 20 20 
0061   018E 20 20 20 20 
0061   0192 20 20 20 20 
0061   0196 20 20 20 20 
0061   019A 20 20 20 20 
0061   019E 20 20 20 20 
0061   01A2 20 20 20 20 
0061   01A6 20 20 20 20 
0061   01AA 20 20 20 20 
0061   01AE 20 20 20 20 
0061   01B2 20 20 20 20 
0061   01B6 20 20 20 20 
0062   01BA 20 20 20 20             .byte "                                                    "
0062   01BE 20 20 20 20 
0062   01C2 20 20 20 20 
0062   01C6 20 20 20 20 
0062   01CA 20 20 20 20 
0062   01CE 20 20 20 20 
0062   01D2 20 20 20 20 
0062   01D6 20 20 20 20 
0062   01DA 20 20 20 20 
0062   01DE 20 20 20 20 
0062   01E2 20 20 20 20 
0062   01E6 20 20 20 20 
0062   01EA 20 20 20 20 
0063   01EE 20 20 20 20             .byte "                                                    "
0063   01F2 20 20 20 20 
0063   01F6 20 20 20 20 
0063   01FA 20 20 20 20 
0063   01FE 20 20 20 20 
0063   0202 20 20 20 20 
0063   0206 20 20 20 20 
0063   020A 20 20 20 20 
0063   020E 20 20 20 20 
0063   0212 20 20 20 20 
0063   0216 20 20 20 20 
0063   021A 20 20 20 20 
0063   021E 20 20 20 20 
0064   0222 20 20 20 20             .byte "                                                    "
0064   0226 20 20 20 20 
0064   022A 20 20 20 20 
0064   022E 20 20 20 20 
0064   0232 20 20 20 20 
0064   0236 20 20 20 20 
0064   023A 20 20 20 20 
0064   023E 20 20 20 20 
0064   0242 20 20 20 20 
0064   0246 20 20 20 20 
0064   024A 20 20 20 20 
0064   024E 20 20 20 20 
0064   0252 20 20 20 20 
0065   0256 20 20 20 20             .byte "                                                    "                      
0065   025A 20 20 20 20 
0065   025E 20 20 20 20 
0065   0262 20 20 20 20 
0065   0266 20 20 20 20 
0065   026A 20 20 20 20 
0065   026E 20 20 20 20 
0065   0272 20 20 20 20 
0065   0276 20 20 20 20 
0065   027A 20 20 20 20 
0065   027E 20 20 20 20 
0065   0282 20 20 20 20 
0065   0286 20 20 20 20 
0066   028A 20 20 20 20             .byte "                                                    "
0066   028E 20 20 20 20 
0066   0292 20 20 20 20 
0066   0296 20 20 20 20 
0066   029A 20 20 20 20 
0066   029E 20 20 20 20 
0066   02A2 20 20 20 20 
0066   02A6 20 20 20 20 
0066   02AA 20 20 20 20 
0066   02AE 20 20 20 20 
0066   02B2 20 20 20 20 
0066   02B6 20 20 20 20 
0066   02BA 20 20 20 20 
0067   02BE 20 20 20 20             .byte "                                                    "
0067   02C2 20 20 20 20 
0067   02C6 20 20 20 20 
0067   02CA 20 20 20 20 
0067   02CE 20 20 20 20 
0067   02D2 20 20 20 20 
0067   02D6 20 20 20 20 
0067   02DA 20 20 20 20 
0067   02DE 20 20 20 20 
0067   02E2 20 20 20 20 
0067   02E6 20 20 20 20 
0067   02EA 20 20 20 20 
0067   02EE 20 20 20 20 
0068   02F2 20 20 20 20             .byte "                                                    "
0068   02F6 20 20 20 20 
0068   02FA 20 20 20 20 
0068   02FE 20 20 20 20 
0068   0302 20 20 20 20 
0068   0306 20 20 20 20 
0068   030A 20 20 20 20 
0068   030E 20 20 20 20 
0068   0312 20 20 20 20 
0068   0316 20 20 20 20 
0068   031A 20 20 20 20 
0068   031E 20 20 20 20 
0068   0322 20 20 20 20 
0069   0326 20 20 20 20             .byte "                                                    "
0069   032A 20 20 20 20 
0069   032E 20 20 20 20 
0069   0332 20 20 20 20 
0069   0336 20 20 20 20 
0069   033A 20 20 20 20 
0069   033E 20 20 20 20 
0069   0342 20 20 20 20 
0069   0346 20 20 20 20 
0069   034A 20 20 20 20 
0069   034E 20 20 20 20 
0069   0352 20 20 20 20 
0069   0356 20 20 20 20 
0070   035A 20 20 20 20             .byte "                                                    "
0070   035E 20 20 20 20 
0070   0362 20 20 20 20 
0070   0366 20 20 20 20 
0070   036A 20 20 20 20 
0070   036E 20 20 20 20 
0070   0372 20 20 20 20 
0070   0376 20 20 20 20 
0070   037A 20 20 20 20 
0070   037E 20 20 20 20 
0070   0382 20 20 20 20 
0070   0386 20 20 20 20 
0070   038A 20 20 20 20 
0071   038E 20 20 20 20             .byte "                                                    "                      
0071   0392 20 20 20 20 
0071   0396 20 20 20 20 
0071   039A 20 20 20 20 
0071   039E 20 20 20 20 
0071   03A2 20 20 20 20 
0071   03A6 20 20 20 20 
0071   03AA 20 20 20 20 
0071   03AE 20 20 20 20 
0071   03B2 20 20 20 20 
0071   03B6 20 20 20 20 
0071   03BA 20 20 20 20 
0071   03BE 20 20 20 20 
0072   03C2 20 20 20 20             .byte "                                                    "
0072   03C6 20 20 20 20 
0072   03CA 20 20 20 20 
0072   03CE 20 20 20 20 
0072   03D2 20 20 20 20 
0072   03D6 20 20 20 20 
0072   03DA 20 20 20 20 
0072   03DE 20 20 20 20 
0072   03E2 20 20 20 20 
0072   03E6 20 20 20 20 
0072   03EA 20 20 20 20 
0072   03EE 20 20 20 20 
0072   03F2 20 20 20 20 
0073   03F6 20 20 20 20             .byte "                                                    "
0073   03FA 20 20 20 20 
0073   03FE 20 20 20 20 
0073   0402 20 20 20 20 
0073   0406 20 20 20 20 
0073   040A 20 20 20 20 
0073   040E 20 20 20 20 
0073   0412 20 20 20 20 
0073   0416 20 20 20 20 
0073   041A 20 20 20 20 
0073   041E 20 20 20 20 
0073   0422 20 20 20 20 
0073   0426 20 20 20 20 
0074   042A 20 20 20 20             .byte "                                                    "
0074   042E 20 20 20 20 
0074   0432 20 20 20 20 
0074   0436 20 20 20 20 
0074   043A 20 20 20 20 
0074   043E 20 20 20 20 
0074   0442 20 20 20 20 
0074   0446 20 20 20 20 
0074   044A 20 20 20 20 
0074   044E 20 20 20 20 
0074   0452 20 20 20 20 
0074   0456 20 20 20 20 
0074   045A 20 20 20 20 
0075   045E 20 20 20 20             .byte "                                                    "
0075   0462 20 20 20 20 
0075   0466 20 20 20 20 
0075   046A 20 20 20 20 
0075   046E 20 20 20 20 
0075   0472 20 20 20 20 
0075   0476 20 20 20 20 
0075   047A 20 20 20 20 
0075   047E 20 20 20 20 
0075   0482 20 20 20 20 
0075   0486 20 20 20 20 
0075   048A 20 20 20 20 
0075   048E 20 20 20 20 
0076   0492                         
0077   0492 00          NEXT_MVCNT: .byte 0      ;count, values, and string to output          
0078   0493 00 00 00 00 NEXT_MOVES: .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0078   0497 00 00 00 00 
0078   049B 00 00 00 00 
0078   049F 00 00 00 00 
0078   04A3 00 00 00 00 
0078   04A7 00 00 00 00 
0078   04AB 00 00 00 00 
0078   04AF 00 00 00 00 
0078   04B3 00 00 00 00 
0078   04B7 00 00 00 00 
0079   04BB 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0079   04BF 00 00 00 00 
0079   04C3 00 00 00 00 
0079   04C7 00 00 00 00 
0079   04CB 00 00 00 00 
0079   04CF 00 00 00 00 
0079   04D3 00 00 00 00 
0079   04D7 00 00 00 00 
0079   04DB 00 00 00 00 
0079   04DF 00 00 00 00 
0080   04E3 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0080   04E7 00 00 00 00 
0080   04EB 00 00 00 00 
0080   04EF 00 00 00 00 
0080   04F3 00 00 00 00 
0080   04F7 00 00 00 00 
0080   04FB 00 00 00 00 
0080   04FF 00 00 00 00 
0080   0503 00 00 00 00 
0080   0507 00 00 00 00 
0081   050B 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0081   050F 00 00 00 00 
0081   0513 00 00 00 00 
0081   0517 00 00 00 00 
0081   051B 00 00 00 00 
0081   051F 00 00 00 00 
0081   0523 00 00 00 00 
0081   0527 00 00 00 00 
0081   052B 00 00 00 00 
0081   052F 00 00 00 00 
0082   0533 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0082   0537 00 00 00 00 
0082   053B 00 00 00 00 
0082   053F 00 00 00 00 
0082   0543 00 00 00 00 
0082   0547 00 00 00 00 
0082   054B 00 00 00 00 
0082   054F 00 00 00 00 
0082   0553 00 00 00 00 
0082   0557 00 00 00 00 
0083   055B 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0083   055F 00 00 00 00 
0083   0563 00 00 00 00 
0083   0567 00 00 00 00 
0083   056B 00 00 00 00 
0083   056F 00 00 00 00 
0083   0573 00 00 00 00 
0083   0577 00 00 00 00 
0083   057B 00 00 00 00 
0083   057F 00 00 00 00 
0084   0583 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0084   0587 00 00 00 00 
0084   058B 00 00 00 00 
0084   058F 00 00 00 00 
0084   0593 00 00 00 00 
0084   0597 00 00 00 00 
0084   059B 00 00 00 00 
0084   059F 00 00 00 00 
0084   05A3 00 00 00 00 
0084   05A7 00 00 00 00 
0085   05AB 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0085   05AF 00 00 00 00 
0085   05B3 00 00 00 00 
0085   05B7 00 00 00 00 
0085   05BB 00 00 00 00 
0085   05BF 00 00 00 00 
0085   05C3 00 00 00 00 
0085   05C7 00 00 00 00 
0085   05CB 00 00 00 00 
0085   05CF 00 00 00 00 
0086   05D3 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0086   05D7 00 00 00 00 
0086   05DB 00 00 00 00 
0086   05DF 00 00 00 00 
0086   05E3 00 00 00 00 
0086   05E7 00 00 00 00 
0086   05EB 00 00 00 00 
0086   05EF 00 00 00 00 
0086   05F3 00 00 00 00 
0086   05F7 00 00 00 00 
0087   05FB 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0087   05FF 00 00 00 00 
0087   0603 00 00 00 00 
0087   0607 00 00 00 00 
0087   060B 00 00 00 00 
0087   060F 00 00 00 00 
0087   0613 00 00 00 00 
0087   0617 00 00 00 00 
0087   061B 00 00 00 00 
0087   061F 00 00 00 00 
0088   0623 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0088   0627 00 00 00 00 
0088   062B 00 00 00 00 
0088   062F 00 00 00 00 
0088   0633 00 00 00 00 
0088   0637 00 00 00 00 
0088   063B 00 00 00 00 
0088   063F 00 00 00 00 
0088   0643 00 00 00 00 
0088   0647 00 00 00 00 
0089   064B 00 00 00 00             .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0089   064F 00 00 00 00 
0089   0653 00 00 00 00 
0089   0657 00 00 00 00 
0089   065B 00 00 00 00 
0089   065F 00 00 00 00 
0089   0663 00 00 00 00 
0089   0667 00 00 00 00 
0089   066B 00 00 00 00 
0089   066F 00 00 00 00 
0090   0673                         
0091   0673             ; list of moves from the root
0092   0673             ; bytes:
0093   0673             ;  square from,
0094   0673             ;  square to,
0095   0673             ;  promoted piece with flags
0096   0673             ;  en-passant square move before
0097   0673             
0098   0673 00          MOVE_CNT   .byte 0   ; count of moves (below 127 chess both-side-moves) 
0099   0674             
0100   0674             MOVE_HIST  .ds 4*2*128; 2Kb for history of chess moves 
0101   0A74             
0102   0A74             
0103   0A74             ; We use own memory of .COM file till now
0104   0A74             ;  without damaging MSX resources with malloc-style
0105   0A74             ;  
0106   0A74             ;  So, we are able to generate next chess moves, detect check and checkmate in 1.
0107   0A74             ;  And print it out. No reasonable chess evaluation searches possible here!
0108   0A74             
0109   0A74             GenMovesAndString:
0110   0A74 CD F8 0A                call GenMoves            
0111   0A77 CD AE 11                call MovesToStr    ; to print after 
0112   0A7A C9                      ret
0113   0A7B                                                 
0114   0A7B             ;BEGIN of ========== MAKE MOVES BY UCI-MOVE-STRING          
0115   0A7B             ; use UndoAllMoves before or setFEN
0116   0A7B             ;
0117   0A7B                                                     
0118   0A7B             MOVE_byString:
0119   0A7B F5                  push af
0120   0A7C C5                  push bc
0121   0A7D D5                  push de
0122   0A7E             
0123   0A7E 11 C2 39            ld de, MOVE_str 
0124   0A81                     
0125   0A81             MbyStrLoop:
0126   0A81 CD F8 0A            call GenMoves 
0127   0A84                                                  
0128   0A84 1A                  ld a,(de)          ; find separator
0129   0A85 FE 20               cp ' '
0130   0A87 28 0B               jr z,MbySover
0131   0A89 FE 00               cp 0
0132   0A8B 28 07               jr z,MbySover
0133   0A8D                     
0134   0A8D CD 98 0A            call MbyStrMove    ; single move
0135   0A90                     
0136   0A90 13                  inc de
0137   0A91 13                  inc de             ; skip promoted and blank too
0138   0A92 18 ED               jr MbyStrLoop      ; and process next move   
0139   0A94             MbySover:        
0140   0A94 D1                  pop de
0141   0A95 C1                  pop bc
0142   0A96 F1                  pop af
0143   0A97 C9                  ret
0144   0A98             
0145   0A98             ; "move by string" in DE register
0146   0A98             ; restore registers after
0147   0A98             MbyStrMove:
0148   0A98 CD D5 0A            call MbySgetSQ
0149   0A9B 32 F5 0A            ld (SQi),a
0150   0A9E CD D5 0A            call MbySgetSQ
0151   0AA1 32 F6 0A            ld (SQt),a
0152   0AA4 1A                  ld a,(de)
0153   0AA5 FE 20               cp ' '
0154   0AA7 20 03               jr nz,MbyPromPiece
0155   0AA9 1B                  dec de
0156   0AAA 18 20               jr MbyNoN        
0157   0AAC             MbyPromPiece:
0158   0AAC FE 71               cp 'q'
0159   0AAE 20 04               jr nz,MbyNoQ
0160   0AB0 3E 04               ld a,4
0161   0AB2 18 1A               jr MbyProm
0162   0AB4 FE 72       MbyNoQ: cp 'r'       
0163   0AB6 20 04               jr nz,MbyNoR
0164   0AB8 3E 03               ld a,3
0165   0ABA 18 12               jr MbyProm
0166   0ABC FE 62       MbyNoR: cp 'b'       
0167   0ABE 20 04               jr nz,MbyNoB
0168   0AC0 3E 02               ld a,2
0169   0AC2 18 0A               jr MbyProm
0170   0AC4 FE 6E       MbyNoB: cp 'n'       
0171   0AC6 20 04               jr nz,MbyNoN
0172   0AC8 3E 01               ld a,1
0173   0ACA 18 02               jr MbyProm
0174   0ACC 3E 00       MbyNoN: ld a,0             ; not promoted       
0175   0ACE             MbyProm:
0176   0ACE 32 F8 10            ld (PromoPcId),a
0177   0AD1 CD 07 19            call MakeMove
0178   0AD4 C9                  ret
0179   0AD5             
0180   0AD5             MbySgetSQ:
0181   0AD5 1A                  ld a,(de)
0182   0AD6 13                  inc de
0183   0AD7 D6 61               sub 'a'
0184   0AD9 47                  ld b,a
0185   0ADA 1A                  ld a,(de)
0186   0ADB 13                  inc de
0187   0ADC D6 31               sub '1'
0188   0ADE CB 27               sla a
0189   0AE0 CB 27               sla a
0190   0AE2 CB 27               sla a
0191   0AE4 B0                  or b
0192   0AE5 C9                  ret                ; a-reg contains square on return
0193   0AE6             
0194   0AE6             ;END
0195   0AE6             
0196   0AE6             
0197   0AE6             ;BEGIN of ========== SIMPLY UNDO ALL MOVES
0198   0AE6             
0199   0AE6             UndoAllMoves:
0200   0AE6 F5                   push af
0201   0AE7             UndoAllLoop:
0202   0AE7 3A 73 06             ld a,(MOVE_CNT)
0203   0AEA FE 00                cp 0
0204   0AEC 28 05                jr z,UndoAllBrk
0205   0AEE CD DE 1C             call UnMakeMove
0206   0AF1 18 F4                jr UndoAllLoop
0207   0AF3             UndoAllBrk:         
0208   0AF3 F1                   pop af
0209   0AF4 C9                   ret
0210   0AF5             ;END
0211   0AF5                   
0212   0AF5                                                               
0213   0AF5             ;BEGIN of ========== MOVE GEN - movement generation routine
0214   0AF5             ; Very proper - according to chess rules.
0215   0AF5             ; Scanning all board squares 0..63, trying to move pieces by type, then by directions.
0216   0AF5             ; If move seems good then adds to the list with verification on own king attacks after movement
0217   0AF5             ; to avoid illegal cases.
0218   0AF5             
0219   0AF5 00          SQi:         .byte 0    ;current square
0220   0AF6 00          SQt:         .byte 0    ;square to move to
0221   0AF7             
0222   0AF7 00          MateDetect:  .byte 0    ; if 1 then just find the first legal move and return
0223   0AF8             
0224   0AF8             GenMoves:
0225   0AF8 F5                   push af
0226   0AF9 C5                   push bc
0227   0AFA D5                   push de
0228   0AFB E5                   push hl
0229   0AFC DD E5                push ix
0230   0AFE FD E5                push iy
0231   0B00                               
0232   0B00 3E 00                ld a,0    
0233   0B02 32 F9 10             ld (CastlMove),a
0234   0B05 32 F8 10             ld (PromoPcId),a
0235   0B08 32 F7 10             ld (CaptPiece),a 
0236   0B0B                      
0237   0B0B 3A F7 0A             ld a, (MateDetect)
0238   0B0E FE 01                cp 1
0239   0B10 28 08                jr z,GenMvNoClr    ; if we are not gona save
0240   0B12                               
0241   0B12 DD 21 92 04          ld ix, NEXT_MVCNT
0242   0B16 DD 36 00 00          ld (ix), 0
0243   0B1A                      
0244   0B1A             GenMvNoClr:         
0245   0B1A 3E 00                ld a, 0            ; square counter 0..63
0246   0B1C 32 F5 0A             ld (SQi), a
0247   0B1F 21 40 01             ld hl, BOARD
0248   0B22             GenMvSqScan:
0249   0B22 7E                   ld a, (hl)          ; piece
0250   0B23                      
0251   0B23 E5                   push hl
0252   0B24 FD E1                pop iy    ; set to remember square-from
0253   0B26                      
0254   0B26 7E                   ld a, (hl)          ; get piece standing there
0255   0B27 FE 00                cp 0
0256   0B29 28 5F                jr z, OverMGSq      ; empty square
0257   0B2B                      
0258   0B2B FE 61                cp 'a'              ; pieces
0259   0B2D 30 0A                jr nc, BlackPiece
0260   0B2F             
0261   0B2F             WhitePiece:                  ; A-Z                    
0262   0B2F 3A 81 01             ld a,(SIDE)
0263   0B32 FE 00                cp 0        
0264   0B34 20 54                jr nz, OverMGSq     ; not turn
0265   0B36 7E                   ld a, (hl)
0266   0B37 18 0A                jr WhichPiece        
0267   0B39             BlackPiece:       
0268   0B39 3A 81 01             ld a,(SIDE)
0269   0B3C FE 01                cp 1 
0270   0B3E 20 4A                jr nz, OverMGSq     ; not turn
0271   0B40 7E                   ld a, (hl)
0272   0B41 D6 20                sub 32            ; to uppercase
0273   0B43             WhichPiece: 
0274   0B43 FE 50                cp 'P'
0275   0B45 28 16                jr z, Pmoves
0276   0B47 FE 4E                cp 'N'
0277   0B49 28 23                jr z, Knmoves       
0278   0B4B FE 42                cp 'B'
0279   0B4D 28 24                jr z, Bsmoves
0280   0B4F FE 52                cp 'R'
0281   0B51 28 25                jr z, Rkmoves
0282   0B53 FE 51                cp 'Q'
0283   0B55 28 26                jr z, Qnmoves
0284   0B57 FE 4B                cp 'K'
0285   0B59 28 2A                jr z, Kgmoves                                          
0286   0B5B 18 2D                jr OverMGSq                
0287   0B5D             Pmoves:
0288   0B5D 3A 81 01             ld a,(SIDE)
0289   0B60 FE 01                cp 1
0290   0B62 28 05                jr z, blackPmoves
0291   0B64 CD E5 0B             call MoveGenWPawn
0292   0B67 18 21                jr OverMGSq
0293   0B69             blackPmoves:
0294   0B69 CD 86 0C             call MoveGenBPawn
0295   0B6C 18 1C                jr OverMGSq
0296   0B6E             Knmoves:
0297   0B6E CD BE 0E             call MoveGenKnight
0298   0B71 18 17                jr OverMGSq
0299   0B73             Bsmoves:
0300   0B73 CD FD 0D             call MoveGenBishop
0301   0B76 18 12                jr OverMGSq
0302   0B78             Rkmoves:
0303   0B78 CD 44 0D             call MoveGenRook
0304   0B7B 18 0D                jr OverMGSq                                                           
0305   0B7D             Qnmoves:
0306   0B7D CD FD 0D             call MoveGenBishop   ; simply
0307   0B80 CD 44 0D             call MoveGenRook     ; the same
0308   0B83 18 05                jr OverMGSq
0309   0B85             Kgmoves:
0310   0B85 CD 81 0F             call MoveGenKing
0311   0B88 18 00                jr OverMGSq
0312   0B8A                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
0313   0B8A             OverMGSq:
0314   0B8A 23                   inc hl
0315   0B8B                      
0316   0B8B 3A F7 0A             ld a, (MateDetect)
0317   0B8E FE 02                cp 2
0318   0B90 20 02                jr nz, GenMVscn
0319   0B92 18 0B                jr GenMVexit
0320   0B94             GenMVscn:         
0321   0B94 3A F5 0A             ld a, (SQi)       
0322   0B97 3C                   inc a
0323   0B98 32 F5 0A             ld (SQi),a
0324   0B9B D6 40                sub 64   ; Loop 0-63
0325   0B9D 20 83                jr nz, GenMvSqScan
0326   0B9F             GenMVexit:
0327   0B9F             
0328   0B9F CD 58 1E             call LookForCheckmates   ; verifies checkmates
0329   0BA2                                                  
0330   0BA2 FD E1                pop iy
0331   0BA4 DD E1                pop ix
0332   0BA6 E1                   pop hl
0333   0BA7 D1                   pop de
0334   0BA8 C1                   pop bc
0335   0BA9 F1                   pop af
0336   0BAA C9                   ret
0337   0BAB             
0338   0BAB                               
0339   0BAB             ; helping procedure to obtain current X,Y on board and store to d,e regs.
0340   0BAB             StoreXYtoDE:
0341   0BAB 3A F5 0A             ld a, (SQi)
0342   0BAE E6 07                and 7
0343   0BB0 57                   ld d,a      ; X- a..h
0344   0BB1 3A F5 0A             ld a, (SQi)
0345   0BB4 CB 3F                srl a
0346   0BB6 CB 3F                srl a
0347   0BB8 CB 3F                srl a
0348   0BBA 5F                   ld e,a      ; Y- 1..8
0349   0BBB C9                   ret
0350   0BBC             
0351   0BBC             ; sets new SQt to move and calculates new hl position          
0352   0BBC             StoreSqToMove:                 
0353   0BBC 7B                   ld a,e
0354   0BBD CB 27                sla a
0355   0BBF CB 27                sla a
0356   0BC1 CB 27                sla a
0357   0BC3 B2                   or d
0358   0BC4 32 F6 0A             ld (SQt),a              ;a-reg. contains the new square to jump
0359   0BC7                      
0360   0BC7 06 00                ld b,0
0361   0BC9 3A F5 0A             ld a,(SQi)
0362   0BCC 4F                   ld c,a
0363   0BCD 3A F6 0A             ld a,(SQt)
0364   0BD0 91                   sub c
0365   0BD1 38 04                jr c, StDistNeg
0366   0BD3 4F                   ld c,a
0367   0BD4 09                   add hl,bc              ;new hl position sq-forward
0368   0BD5 18 0D                jr StNSqOver
0369   0BD7             StDistNeg:
0370   0BD7 3A F6 0A             ld a,(SQt)
0371   0BDA 4F                   ld c,a
0372   0BDB 3A F5 0A             ld a,(SQi)         
0373   0BDE 91                   sub c
0374   0BDF 4F                   ld c,a                         
0375   0BE0 37                   scf
0376   0BE1 3F                   ccf
0377   0BE2 ED 42                sbc hl,bc              ;new hl position sq-backward
0378   0BE4             StNSqOver:         
0379   0BE4 C9                   ret
0380   0BE5             ;END
0381   0BE5             
0382   0BE5             
0383   0BE5             ;BEGIN of ========== MOVE GEN for WHITE PAWN goes up
0384   0BE5             
0385   0BE5             MoveGenWPawn:
0386   0BE5             
0387   0BE5 F5                   push af
0388   0BE6 D5                   push de
0389   0BE7                      
0390   0BE7 3E 00                ld a,0
0391   0BE9 32 F7 10             ld (CaptPiece),a
0392   0BEC             
0393   0BEC 3A 83 01             ld a, (ENPSQ)
0394   0BEF 57                   ld d,a         
0395   0BF0                               
0396   0BF0 3A F5 0A             ld a,(SQi)                  
0397   0BF3 C6 08                add a, 8
0398   0BF5 32 F6 0A             ld (SQt),a
0399   0BF8 01 08 00             ld bc,8         ;1-7 vert. try next sq forward        
0400   0BFB 09                   add hl, bc      ;new square-to
0401   0BFC                      
0402   0BFC CD A3 10             call IsEmpty
0403   0BFF 30 1B                jr nc, wpNoFWmoves
0404   0C01 CD FA 10             call AddMovPromo
0405   0C04                      
0406   0C04 3A F5 0A             ld a, (SQi)
0407   0C07 FE 10                cp 16          ;below row 3
0408   0C09 30 11                jr nc, wpNoFWmoves
0409   0C0B C6 10                add a, 8+8
0410   0C0D 32 F6 0A             ld (SQt),a 
0411   0C10 01 08 00             ld bc, 8        ;another (double) move
0412   0C13 09                   add hl, bc      ;new square-to
0413   0C14                      
0414   0C14 CD A3 10             call IsEmpty
0415   0C17 30 03                jr nc, wpNoFWmoves
0416   0C19 CD FF 10             call AddMove
0417   0C1C             
0418   0C1C             wpNoFWmoves:         
0419   0C1C FD E5                push iy
0420   0C1E E1                   pop hl    ; restore 
0421   0C1F                      
0422   0C1F 3E 01                ld a,1
0423   0C21 32 F7 10             ld (CaptPiece),a
0424   0C24                      
0425   0C24 3A F5 0A             ld a, (SQi)
0426   0C27 E6 07                and 7
0427   0C29 FE 00                cp 0
0428   0C2B 28 21                jr z, wpTryCaptRight
0429   0C2D             
0430   0C2D 3A F5 0A             ld a, (SQi)                  
0431   0C30 C6 07                add a, 8-1 ; try capture left
0432   0C32 32 F6 0A             ld (SQt),a
0433   0C35 01 07 00             ld bc, 8-1
0434   0C38 09                   add hl, bc
0435   0C39             
0436   0C39 CD D8 10             call IsBlack
0437   0C3C 30 05                jr nc, wpTryLeftEnPs
0438   0C3E                      
0439   0C3E CD FA 10             call AddMovPromo
0440   0C41 18 0B                jr wpTryCaptRight
0441   0C43                      
0442   0C43             wpTryLeftEnPs:              
0443   0C43 3A F6 0A             ld a,(SQt)
0444   0C46 BA                   cp d
0445   0C47 20 05                jr nz, wpTryCaptRight
0446   0C49                                             
0447   0C49 CD FA 10             call AddMovPromo
0448   0C4C 18 00                jr wpTryCaptRight
0449   0C4E                                                                                            
0450   0C4E             wpTryCaptRight:
0451   0C4E FD E5                push iy
0452   0C50 E1                   pop hl    ; restore 
0453   0C51                      
0454   0C51 3A F5 0A             ld a, (SQi)
0455   0C54 E6 07                and 7
0456   0C56 FE 07                cp 7
0457   0C58 28 21                jr z, wpMGend
0458   0C5A                               
0459   0C5A 3A F5 0A             ld a, (SQi)
0460   0C5D C6 09                add a, 8+1 ; try capture right
0461   0C5F 32 F6 0A             ld (SQt),a
0462   0C62 01 09 00             ld bc, 8+1
0463   0C65 09                   add hl, bc
0464   0C66             
0465   0C66 CD D8 10             call IsBlack
0466   0C69 30 05                jr nc, wpTryRightEnPs
0467   0C6B                      
0468   0C6B CD FA 10             call AddMovPromo
0469   0C6E 18 0B                jr wpMGend
0470   0C70                      
0471   0C70             wpTryRightEnPs:              
0472   0C70 3A F6 0A             ld a,(SQt)
0473   0C73 BA                   cp d
0474   0C74 20 05                jr nz, wpMGend
0475   0C76                                  
0476   0C76 CD FA 10             call AddMovPromo
0477   0C79 18 00                jr wpMGend
0478   0C7B                                                                                                                                                            
0479   0C7B             wpMGend:
0480   0C7B FD E5                push iy
0481   0C7D E1                   pop hl    ; restore 
0482   0C7E             
0483   0C7E 3E 00                ld a,0
0484   0C80 32 F8 10             ld (PromoPcId),a
0485   0C83                      
0486   0C83 D1                   pop de
0487   0C84 F1                   pop af
0488   0C85 C9                   ret
0489   0C86                  
0490   0C86             ;END
0491   0C86             
0492   0C86             ;BEGIN of ========== MOVE GEN for BLACK PAWN goes down
0493   0C86             
0494   0C86             MoveGenBPawn:
0495   0C86             
0496   0C86 F5                   push af
0497   0C87 D5                   push de
0498   0C88                      
0499   0C88 3E 00                ld a,0
0500   0C8A 32 F7 10             ld (CaptPiece),a
0501   0C8D             
0502   0C8D 3A 83 01             ld a, (ENPSQ)
0503   0C90 57                   ld d,a         
0504   0C91                               
0505   0C91 3A F5 0A             ld a,(SQi)                  
0506   0C94 D6 08                sub 8
0507   0C96 32 F6 0A             ld (SQt),a
0508   0C99 37                   scf
0509   0C9A 3F                   ccf
0510   0C9B 01 08 00             ld bc,8         ;1-7 vert. try next sq forward        
0511   0C9E ED 42                sbc hl, bc      ;new square-to
0512   0CA0                      
0513   0CA0 CD A3 10             call IsEmpty
0514   0CA3 30 1E                jr nc, bpNoFWmoves
0515   0CA5 CD FA 10             call AddMovPromo
0516   0CA8                      
0517   0CA8 3A F5 0A             ld a, (SQi)
0518   0CAB FE 30                cp 48           ;above row 6
0519   0CAD 38 14                jr c, bpNoFWmoves
0520   0CAF D6 10                sub 8+8
0521   0CB1 32 F6 0A             ld (SQt),a
0522   0CB4 37                   scf
0523   0CB5 3F                   ccf 
0524   0CB6 01 08 00             ld bc, 8        ;another (double) move
0525   0CB9 ED 42                sbc hl, bc      ;new square-to
0526   0CBB                      
0527   0CBB CD A3 10             call IsEmpty
0528   0CBE 30 03                jr nc, bpNoFWmoves
0529   0CC0 CD FF 10             call AddMove
0530   0CC3             
0531   0CC3             bpNoFWmoves:         
0532   0CC3 FD E5                push iy
0533   0CC5 E1                   pop hl    ; restore 
0534   0CC6                      
0535   0CC6 3E 01                ld a,1
0536   0CC8 32 F7 10             ld (CaptPiece),a
0537   0CCB                      
0538   0CCB 3A F5 0A             ld a, (SQi)
0539   0CCE E6 07                and 7
0540   0CD0 FE 07                cp 7
0541   0CD2 28 24                jr z, bpTryCaptRight
0542   0CD4             
0543   0CD4 3A F5 0A             ld a, (SQi)                  
0544   0CD7 D6 07                sub 8-1 ; try capture left
0545   0CD9 32 F6 0A             ld (SQt),a
0546   0CDC 37                   scf
0547   0CDD 3F                   ccf
0548   0CDE 01 07 00             ld bc, 8-1
0549   0CE1 ED 42                sbc hl, bc
0550   0CE3             
0551   0CE3 CD B9 10             call IsWhite
0552   0CE6 30 05                jr nc, bpTryLeftEnPs
0553   0CE8                      
0554   0CE8 CD FA 10             call AddMovPromo
0555   0CEB 18 0B                jr bpTryCaptRight
0556   0CED                      
0557   0CED             bpTryLeftEnPs:              
0558   0CED 3A F6 0A             ld a,(SQt)
0559   0CF0 BA                   cp d
0560   0CF1 20 05                jr nz, bpTryCaptRight
0561   0CF3                                             
0562   0CF3 CD FA 10             call AddMovPromo
0563   0CF6 18 00                jr bpTryCaptRight
0564   0CF8                                                                                            
0565   0CF8             bpTryCaptRight:
0566   0CF8 FD E5                push iy
0567   0CFA E1                   pop hl    ; restore 
0568   0CFB                      
0569   0CFB 3A F5 0A             ld a, (SQi)
0570   0CFE E6 07                and 7
0571   0D00 FE 00                cp 0
0572   0D02 28 24                jr z, bpMGend
0573   0D04                               
0574   0D04 3A F5 0A             ld a, (SQi)
0575   0D07 D6 09                sub 8+1 ; try capture right
0576   0D09 32 F6 0A             ld (SQt),a
0577   0D0C 37                   scf
0578   0D0D 3F                   ccf
0579   0D0E 01 09 00             ld bc, 8+1
0580   0D11 ED 42                sbc hl, bc
0581   0D13             
0582   0D13 CD B9 10             call IsWhite
0583   0D16 30 05                jr nc, bpTryRightEnPs
0584   0D18                      
0585   0D18 CD FA 10             call AddMovPromo      
0586   0D1B 18 0B                jr bpMGend
0587   0D1D                      
0588   0D1D             bpTryRightEnPs:              
0589   0D1D 3A F6 0A             ld a,(SQt)
0590   0D20 BA                   cp d
0591   0D21 20 05                jr nz, bpMGend
0592   0D23                                             
0593   0D23 CD FA 10             call AddMovPromo
0594   0D26 18 00                jr bpMGend
0595   0D28                                                                                                                                                            
0596   0D28             bpMGend:
0597   0D28 FD E5                push iy
0598   0D2A E1                   pop hl    ; restore 
0599   0D2B             
0600   0D2B 3E 00                ld a,0
0601   0D2D 32 F8 10             ld (PromoPcId),a
0602   0D30                      
0603   0D30 D1                   pop de
0604   0D31 F1                   pop af
0605   0D32 C9                   ret
0606   0D33                  
0607   0D33             ;END
0608   0D33             
0609   0D33             
0610   0D33             ;BEGIN of ========== MOVE GEN for ROOKS
0611   0D33             
0612   0D33 2B 01 3D 00 rookMoves: .byte '+',1,'=',0 ,'-',1,'=',0 ,'=',0,'+',1 ,'=',0,'-',1 ,
0612   0D37 2D 01 3D 00 
0612   0D3B 3D 00 2B 01 
0612   0D3F 3D 00 2D 01 
0613   0D43 00                     .byte 0
0614   0D44                                       
0615   0D44             MoveGenRook:
0616   0D44             
0617   0D44 F5                   push af
0618   0D45 C5                   push bc
0619   0D46 DD E5                push ix
0620   0D48                      
0621   0D48 CD AB 0B             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
0622   0D4B                      
0623   0D4B DD 21 33 0D          ld ix,rookMoves
0624   0D4F 06 04                ld b, 4
0625   0D51                      
0626   0D51             RookScan4directions:
0627   0D51             
0628   0D51 D5                   push de
0629   0D52             RookLoop:
0630   0D52 CD 69 0D             call RookTryMove
0631   0D55 FE 00                cp 0
0632   0D57 28 F9                jr z,RookLoop
0633   0D59 D1                   pop de
0634   0D5A                              
0635   0D5A DD 23                inc ix
0636   0D5C DD 23                inc ix
0637   0D5E DD 23                inc ix
0638   0D60 DD 23                inc ix
0639   0D62                      
0640   0D62 10 ED                djnz RookScan4directions
0641   0D64                    
0642   0D64 DD E1                pop ix
0643   0D66 C1                   pop bc
0644   0D67 F1                   pop af
0645   0D68 C9                   ret
0646   0D69                      
0647   0D69             ; try move to that direction
0648   0D69             RookTryMove:
0649   0D69             
0650   0D69 C5                   push bc
0651   0D6A DD E5                push ix
0652   0D6C                      
0653   0D6C 3E 00                ld a,0
0654   0D6E 32 F7 10             ld (CaptPiece),a
0655   0D71                               
0656   0D71 DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,=0
0657   0D74 DD 23                inc ix
0658   0D76 FE 3D                cp '='
0659   0D78 28 16                jr z, RkZero1
0660   0D7A FE 2D                cp '-'
0661   0D7C 28 08                jr z, RkNegX      
0662   0D7E 7A                   ld a,d
0663   0D7F 3C                   inc a           ;a=direction +1 of X 
0664   0D80 FE 08                cp 8
0665   0D82 30 5F                jr nc, RkNo
0666   0D84 18 09                jr RkCanOk1  
0667   0D86             RkNegX:
0668   0D86 3E 00                ld a,0          ;a=direction -1 of X
0669   0D88 BA                   cp d
0670   0D89 38 02                jr c, RkCanSubtrX
0671   0D8B 18 56                jr RkNo
0672   0D8D             RkCanSubtrX:         
0673   0D8D 7A                   ld a,d
0674   0D8E 3D                   dec a 
0675   0D8F             RkCanOk1:
0676   0D8F 57                   ld d,a         
0677   0D90 DD 23       RkZero1: inc ix
0678   0D92                      
0679   0D92 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,=0
0680   0D95 DD 23                inc ix
0681   0D97 FE 3D                cp '='
0682   0D99 28 16                jr z, RkZero2        
0683   0D9B FE 2D                cp '-'
0684   0D9D 28 08                jr z, RkNegY
0685   0D9F 7B                   ld a,e
0686   0DA0 3C                   inc a          ;a=direction +1 of Y  
0687   0DA1 FE 08                cp 8
0688   0DA3 30 3E                jr nc, RkNo
0689   0DA5 18 09                jr RkCanOk2   
0690   0DA7             RkNegY:
0691   0DA7 3E 00                ld a,0         ;a=direction -1 of Y
0692   0DA9 BB                   cp e
0693   0DAA 38 02                jr c, RkCanSubtrY
0694   0DAC 18 35                jr RkNo
0695   0DAE             RkCanSubtrY:         
0696   0DAE 7B                   ld a, e
0697   0DAF 3D                   dec a
0698   0DB0             RkCanOk2:
0699   0DB0 5F                   ld e,a
0700   0DB1 DD 23       RkZero2: inc ix         
0701   0DB3                      
0702   0DB3 CD BC 0B             call StoreSqToMove    ;new SQt,hl        
0703   0DB6             
0704   0DB6 3A 81 01             ld a, (SIDE)
0705   0DB9 FE 01                cp 1
0706   0DBB 28 0E                jr z,RkThisBlack
0707   0DBD CD D8 10             call IsBlack           ; enemy?
0708   0DC0 38 17                jr c,RkCaptMove
0709   0DC2 CD B9 10             call IsWhite           ; our?
0710   0DC5 38 1C                jr c,RkNo
0711   0DC7 3E 00                ld a,0                 ; continue after to this direction
0712   0DC9 18 13                jr RkAdd        
0713   0DCB             RkThisBlack:         
0714   0DCB CD B9 10             call IsWhite           ; enemy?
0715   0DCE 38 09                jr c,RkCaptMove
0716   0DD0 CD D8 10             call IsBlack           ; our?                        
0717   0DD3 38 0E                jr c,RkNo
0718   0DD5 3E 00                ld a,0                 ; continue after to this direction
0719   0DD7 18 05                jr RkAdd
0720   0DD9             RkCaptMove:
0721   0DD9 3E 01                ld a,1
0722   0DDB 32 F7 10             ld (CaptPiece),a       ; and stop to this direction  
0723   0DDE             RkAdd:
0724   0DDE CD FF 10             call AddMove
0725   0DE1 18 02                jr RkOver        
0726   0DE3             
0727   0DE3 3E 01       RkNo:    ld a,1                 ; stop to this direction
0728   0DE5             
0729   0DE5             RkOver:
0730   0DE5 FD E5                push iy
0731   0DE7 E1                   pop hl
0732   0DE8                      
0733   0DE8 DD E1                pop ix
0734   0DEA C1                   pop bc
0735   0DEB C9                   ret 
0736   0DEC             
0737   0DEC             ;END
0738   0DEC             
0739   0DEC             
0740   0DEC             
0741   0DEC             ;BEGIN of ========== MOVE GEN for BISHOPS
0742   0DEC             
0743   0DEC 2B 01 2B 01 bishopMoves: .byte '+',1,'+',1 ,'+',1,'-',1 ,'-',1,'+',1 ,'-',1,'-',1 ,
0743   0DF0 2B 01 2D 01 
0743   0DF4 2D 01 2B 01 
0743   0DF8 2D 01 2D 01 
0744   0DFC 00                       .byte 0
0745   0DFD                                       
0746   0DFD             MoveGenBishop:
0747   0DFD             
0748   0DFD F5                   push af
0749   0DFE C5                   push bc
0750   0DFF DD E5                push ix
0751   0E01                      
0752   0E01 CD AB 0B             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
0753   0E04                      
0754   0E04 DD 21 EC 0D          ld ix,bishopMoves
0755   0E08 06 04                ld b, 4
0756   0E0A                      
0757   0E0A             BishopScan4directions:
0758   0E0A             
0759   0E0A D5                   push de
0760   0E0B             BishopLoop:
0761   0E0B CD 22 0E             call BishopTryMove
0762   0E0E FE 00                cp 0
0763   0E10 28 F9                jr z,BishopLoop
0764   0E12 D1                   pop de
0765   0E13                              
0766   0E13 DD 23                inc ix
0767   0E15 DD 23                inc ix
0768   0E17 DD 23                inc ix
0769   0E19 DD 23                inc ix
0770   0E1B                      
0771   0E1B 10 ED                djnz BishopScan4directions
0772   0E1D                    
0773   0E1D DD E1                pop ix
0774   0E1F C1                   pop bc
0775   0E20 F1                   pop af
0776   0E21 C9                   ret
0777   0E22                      
0778   0E22             ; try move to that direction
0779   0E22             BishopTryMove:
0780   0E22             
0781   0E22 C5                   push bc
0782   0E23 DD E5                push ix
0783   0E25                               
0784   0E25 3E 00                ld a,0
0785   0E27 32 F7 10             ld (CaptPiece),a
0786   0E2A                      
0787   0E2A DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1
0788   0E2D DD 23                inc ix
0789   0E2F FE 2D                cp '-'
0790   0E31 28 08                jr z, BsNegX      
0791   0E33 7A                   ld a,d
0792   0E34 3C                   inc a           ;a=direction +1 of X 
0793   0E35 FE 08                cp 8
0794   0E37 30 5B                jr nc, BsNo
0795   0E39 18 09                jr BsCanOk1  
0796   0E3B             BsNegX:
0797   0E3B 3E 00                ld a,0          ;a=direction -1 of X
0798   0E3D BA                   cp d
0799   0E3E 38 02                jr c, BsCanSubtrX
0800   0E40 18 52                jr BsNo
0801   0E42             BsCanSubtrX:         
0802   0E42 7A                   ld a,d
0803   0E43 3D                   dec a 
0804   0E44             BsCanOk1:
0805   0E44 57                   ld d,a         
0806   0E45 DD 23                inc ix
0807   0E47                      
0808   0E47 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1
0809   0E4A DD 23                inc ix
0810   0E4C FE 2D                cp '-'
0811   0E4E 28 08                jr z, BsNegY
0812   0E50 7B                   ld a,e
0813   0E51 3C                   inc a          ;a=direction +1 of Y  
0814   0E52 FE 08                cp 8
0815   0E54 30 3E                jr nc, BsNo
0816   0E56 18 09                jr BsCanOk2   
0817   0E58             BsNegY:
0818   0E58 3E 00                ld a,0         ;a=direction -1 of Y
0819   0E5A BB                   cp e
0820   0E5B 38 02                jr c, BsCanSubtrY
0821   0E5D 18 35                jr BsNo
0822   0E5F             BsCanSubtrY:         
0823   0E5F 7B                   ld a, e
0824   0E60 3D                   dec a
0825   0E61             BsCanOk2:
0826   0E61 5F                   ld e,a
0827   0E62 DD 23                inc ix         
0828   0E64                      
0829   0E64 CD BC 0B             call StoreSqToMove    ;new SQt,hl        
0830   0E67             
0831   0E67 3A 81 01             ld a, (SIDE)
0832   0E6A FE 01                cp 1
0833   0E6C 28 0E                jr z,BsThisBlack
0834   0E6E CD D8 10             call IsBlack           ; enemy?
0835   0E71 38 17                jr c,BsCaptMove
0836   0E73 CD B9 10             call IsWhite           ; our?
0837   0E76 38 1C                jr c,BsNo
0838   0E78 3E 00                ld a,0                 ; continue after to this direction
0839   0E7A 18 13                jr BsAdd        
0840   0E7C             BsThisBlack:         
0841   0E7C CD B9 10             call IsWhite           ; enemy?
0842   0E7F 38 09                jr c,BsCaptMove
0843   0E81 CD D8 10             call IsBlack           ; our?                        
0844   0E84 38 0E                jr c,BsNo
0845   0E86 3E 00                ld a,0                 ; continue after to this direction
0846   0E88 18 05                jr BsAdd
0847   0E8A             BsCaptMove:
0848   0E8A 3E 01                ld a,1
0849   0E8C 32 F7 10             ld (CaptPiece),a       ; and stop to this direction  
0850   0E8F             BsAdd:
0851   0E8F CD FF 10             call AddMove
0852   0E92 18 02                jr BsOver        
0853   0E94             
0854   0E94 3E 01       BsNo:    ld a,1                 ; stop to this direction
0855   0E96             
0856   0E96             BsOver:
0857   0E96 FD E5                push iy
0858   0E98 E1                   pop hl
0859   0E99                      
0860   0E99 DD E1                pop ix
0861   0E9B C1                   pop bc
0862   0E9C C9                   ret 
0863   0E9D             
0864   0E9D             ;END
0865   0E9D             
0866   0E9D             
0867   0E9D             
0868   0E9D             
0869   0E9D             ;BEGIN of ========== MOVE GEN for KNIGHTS
0870   0E9D             
0871   0E9D 2B 01 2B 02 knightMoves: .byte '+',1,'+',2 ,'+',2,'+',1 ,'+',2,'-',1 ,'+',1,'-',2 ,
0871   0EA1 2B 02 2B 01 
0871   0EA5 2B 02 2D 01 
0871   0EA9 2B 01 2D 02 
0872   0EAD 2D 01 2D 02              .byte '-',1,'-',2 ,'-',2,'-',1 ,'-',2,'+',1 ,'-',1,'+',2 , 
0872   0EB1 2D 02 2D 01 
0872   0EB5 2D 02 2B 01 
0872   0EB9 2D 01 2B 02 
0873   0EBD 00                       .byte 0
0874   0EBE                          
0875   0EBE             
0876   0EBE             MoveGenKnight:
0877   0EBE             
0878   0EBE F5                   push af
0879   0EBF C5                   push bc
0880   0EC0 D5                   push de
0881   0EC1 DD E5                push ix
0882   0EC3                      
0883   0EC3 CD AB 0B             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
0884   0EC6                      
0885   0EC6 DD 21 9D 0E          ld ix, knightMoves
0886   0ECA 06 08                ld b, 8
0887   0ECC             KnightScan8moves:
0888   0ECC CD DF 0E             call KnightTryMove
0889   0ECF DD 23                inc ix
0890   0ED1 DD 23                inc ix
0891   0ED3 DD 23                inc ix
0892   0ED5 DD 23                inc ix
0893   0ED7 10 F3                djnz KnightScan8moves
0894   0ED9                    
0895   0ED9 DD E1                pop ix
0896   0EDB D1                   pop de
0897   0EDC C1                   pop bc
0898   0EDD F1                   pop af
0899   0EDE C9                   ret
0900   0EDF             
0901   0EDF             ; try move to that square
0902   0EDF             KnightTryMove:
0903   0EDF C5                   push bc
0904   0EE0 D5                   push de
0905   0EE1 DD E5                push ix
0906   0EE3                      
0907   0EE3 3E 00                ld a,0
0908   0EE5 32 F7 10             ld (CaptPiece),a
0909   0EE8                      
0910   0EE8 DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,-2,+2
0911   0EEB DD 23                inc ix
0912   0EED FE 2D                cp '-'
0913   0EEF 28 0A                jr z, KnNegX
0914   0EF1 DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of X      
0915   0EF4 82                   add a,d
0916   0EF5 FE 08                cp 8
0917   0EF7 30 5F                jr nc, KnNo
0918   0EF9 18 0D                jr KnCanOk1  
0919   0EFB             KnNegX:
0920   0EFB DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of X
0921   0EFE 3D                   dec a
0922   0EFF BA                   cp d
0923   0F00 38 02                jr c, KnCanSubtrX
0924   0F02 18 54                jr KnNo
0925   0F04             KnCanSubtrX:         
0926   0F04 7A                   ld a, d
0927   0F05 DD 96 00             sub (ix)    
0928   0F08             KnCanOk1:
0929   0F08 57                   ld d,a         
0930   0F09 DD 23                inc ix
0931   0F0B                      
0932   0F0B DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,-2,+2
0933   0F0E DD 23                inc ix
0934   0F10 FE 2D                cp '-'
0935   0F12 28 0A                jr z, KnNegY
0936   0F14 DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of Y  
0937   0F17 83                   add a,e
0938   0F18 FE 08                cp 8
0939   0F1A 30 3C                jr nc, KnNo
0940   0F1C 18 0D                jr KnCanOk2   
0941   0F1E             KnNegY:
0942   0F1E DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of Y
0943   0F21 3D                   dec a 
0944   0F22 BB                   cp e
0945   0F23 38 02                jr c, KnCanSubtrY
0946   0F25 18 31                jr KnNo
0947   0F27             KnCanSubtrY:         
0948   0F27 7B                   ld a, e
0949   0F28 DD 96 00             sub (ix)
0950   0F2B             KnCanOk2:
0951   0F2B 5F                   ld e, a
0952   0F2C DD 23                inc ix         
0953   0F2E                      
0954   0F2E CD BC 0B             call StoreSqToMove    ;new SQt,hl        
0955   0F31             
0956   0F31 3A 81 01             ld a, (SIDE)
0957   0F34 FE 01                cp 1
0958   0F36 28 0C                jr z, KnThisBlack
0959   0F38 CD D8 10             call IsBlack           ; enemy?
0960   0F3B 38 13                jr c,KnCaptMove
0961   0F3D CD B9 10             call IsWhite           ; our?
0962   0F40 38 16                jr c,KnNo
0963   0F42 18 11                jr KnAdd        
0964   0F44             KnThisBlack:         
0965   0F44 CD B9 10             call IsWhite           ; enemy?
0966   0F47 38 07                jr c,KnCaptMove
0967   0F49 CD D8 10             call IsBlack           ; our?                        
0968   0F4C 38 0A                jr c,KnNo
0969   0F4E 18 05                jr KnAdd
0970   0F50             KnCaptMove:
0971   0F50 3E 01                ld a,1
0972   0F52 32 F7 10             ld (CaptPiece),a           
0973   0F55             KnAdd:
0974   0F55 CD FF 10             call AddMove         
0975   0F58             
0976   0F58             KnNo:
0977   0F58 FD E5                push iy
0978   0F5A E1                   pop hl
0979   0F5B                      
0980   0F5B DD E1                pop ix
0981   0F5D D1                   pop de
0982   0F5E C1                   pop bc
0983   0F5F C9                   ret 
0984   0F60             
0985   0F60             ;END
0986   0F60             
0987   0F60             ;BEGIN of ========== MOVE GEN for KINGS
0988   0F60             
0989   0F60 2D 01 3D 00 kingMoves: .byte '-',1,'=',0 ,'-',1,'+',1 ,'=',0,'+',1 ,'+',1,'+',1 ,
0989   0F64 2D 01 2B 01 
0989   0F68 3D 00 2B 01 
0989   0F6C 2B 01 2B 01 
0990   0F70 2B 01 3D 00            .byte '+',1,'=',0 ,'+',1,'-',1 ,'=',0,'-',1 ,'-',1,'-',1 ,
0990   0F74 2B 01 2D 01 
0990   0F78 3D 00 2D 01 
0990   0F7C 2D 01 2D 01 
0991   0F80 00                     .byte 0
0992   0F81                                       
0993   0F81             MoveGenKing:
0994   0F81             
0995   0F81 F5                   push af
0996   0F82 C5                   push bc
0997   0F83 DD E5                push ix
0998   0F85                      
0999   0F85 CD AB 0B             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]
1000   0F88                      
1001   0F88 3E 04                ld a,4       ; on E?
1002   0F8A BA                   cp d
1003   0F8B 20 03                jr nz, CastleCantBe
1004   0F8D CD 25 10             call CastleMOVES   ; add castling moves without check-verification
1005   0F90                      
1006   0F90             CastleCantBe:
1007   0F90                      
1008   0F90 DD 21 60 0F          ld ix,kingMoves
1009   0F94 06 08                ld b, 8
1010   0F96                      
1011   0F96             KingScan8moves:
1012   0F96 CD A8 0F             call KingTryMove
1013   0F99 DD 23                inc ix
1014   0F9B DD 23                inc ix
1015   0F9D DD 23                inc ix
1016   0F9F DD 23                inc ix
1017   0FA1 10 F3                djnz KingScan8moves
1018   0FA3                                    
1019   0FA3 DD E1                pop ix
1020   0FA5 C1                   pop bc
1021   0FA6 F1                   pop af
1022   0FA7 C9                   ret
1023   0FA8                      
1024   0FA8             ; try move to that square
1025   0FA8             KingTryMove:
1026   0FA8 C5                   push bc
1027   0FA9 D5                   push de
1028   0FAA DD E5                push ix
1029   0FAC                      
1030   0FAC 3E 00                ld a,0
1031   0FAE 32 F7 10             ld (CaptPiece),a
1032   0FB1                               
1033   0FB1 DD 7E 00             ld a, (ix)      ;given directions for a..h  -1,+1,=0
1034   0FB4 DD 23                inc ix
1035   0FB6 FE 3D                cp '='
1036   0FB8 28 16                jr z, KgZero1
1037   0FBA FE 2D                cp '-'
1038   0FBC 28 08                jr z, KgNegX      
1039   0FBE 7A                   ld a,d
1040   0FBF 3C                   inc a           ;a=direction +1 of X 
1041   0FC0 FE 08                cp 8
1042   0FC2 30 59                jr nc, KgOver
1043   0FC4 18 09                jr KgCanOk1  
1044   0FC6             KgNegX:
1045   0FC6 3E 00                ld a,0          ;a=direction -1 of X
1046   0FC8 BA                   cp d
1047   0FC9 38 02                jr c, KgCanSubtrX
1048   0FCB 18 50                jr KgOver
1049   0FCD             KgCanSubtrX:         
1050   0FCD 7A                   ld a,d
1051   0FCE 3D                   dec a 
1052   0FCF             KgCanOk1:
1053   0FCF 57                   ld d,a         
1054   0FD0 DD 23       KgZero1: inc ix
1055   0FD2                      
1056   0FD2 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,=0
1057   0FD5 DD 23                inc ix
1058   0FD7 FE 3D                cp '='
1059   0FD9 28 16                jr z, KgZero2        
1060   0FDB FE 2D                cp '-'
1061   0FDD 28 08                jr z, KgNegY
1062   0FDF 7B                   ld a,e
1063   0FE0 3C                   inc a          ;a=direction +1 of Y  
1064   0FE1 FE 08                cp 8
1065   0FE3 30 38                jr nc, KgOver
1066   0FE5 18 09                jr KgCanOk2   
1067   0FE7             KgNegY:
1068   0FE7 3E 00                ld a,0         ;a=direction -1 of Y
1069   0FE9 BB                   cp e
1070   0FEA 38 02                jr c, KgCanSubtrY
1071   0FEC 18 2F                jr KgOver
1072   0FEE             KgCanSubtrY:         
1073   0FEE 7B                   ld a, e
1074   0FEF 3D                   dec a
1075   0FF0             KgCanOk2:
1076   0FF0 5F                   ld e,a
1077   0FF1 DD 23       KgZero2: inc ix         
1078   0FF3                      
1079   0FF3 CD BC 0B             call StoreSqToMove    ;new SQt,hl        
1080   0FF6             
1081   0FF6 3A 81 01             ld a, (SIDE)
1082   0FF9 FE 01                cp 1
1083   0FFB 28 0C                jr z,KgThisBlack
1084   0FFD CD D8 10             call IsBlack           ; enemy?
1085   1000 38 13                jr c,KgCaptMove
1086   1002 CD B9 10             call IsWhite           ; our?
1087   1005 38 16                jr c,KgOver
1088   1007 18 11                jr KgAdd        
1089   1009             KgThisBlack:         
1090   1009 CD B9 10             call IsWhite           ; enemy?
1091   100C 38 07                jr c,KgCaptMove
1092   100E CD D8 10             call IsBlack           ; our?                        
1093   1011 38 0A                jr c,KgOver
1094   1013 18 05                jr KgAdd
1095   1015             KgCaptMove:
1096   1015 3E 01                ld a,1
1097   1017 32 F7 10             ld (CaptPiece),a
1098   101A             KgAdd:
1099   101A CD FF 10             call AddMove
1100   101D             KgOver:
1101   101D FD E5                push iy
1102   101F E1                   pop hl
1103   1020                      
1104   1020 DD E1                pop ix
1105   1022 D1                   pop de
1106   1023 C1                   pop bc
1107   1024 C9                   ret 
1108   1025             
1109   1025             ; Add castling moves to list
1110   1025             CastleMOVES:
1111   1025                                              
1112   1025 3E 00                ld a,0
1113   1027 32 F7 10             ld (CaptPiece),a      
1114   102A 3E 01                ld a,1
1115   102C 32 F9 10             ld (CastlMove),a
1116   102F                      
1117   102F 0E 01                ld c,1       ; directions 0-King side, 1-Queen side
1118   1031             CastleDirScan:       
1119   1031 3A 82 01             ld a, (CASTLES)
1120   1034 47                   ld b,a       ; b contains castlings flags
1121   1035 7B                   ld a,e
1122   1036 FE 07                cp 7         ; detect king
1123   1038 20 06                jr nz, CstlWhite
1124   103A CB 38                srl b        ; simply roll castling flags for black
1125   103C CB 38                srl b
1126   103E 18 04                jr CstlBegin
1127   1040             CstlWhite:
1128   1040 FE 00                cp 0
1129   1042 20 56                jr nz, CastleBrk    
1130   1044             CstlBegin:
1131   1044 D5                   push de
1132   1045 3E 00                ld a,0
1133   1047 B9                   cp c
1134   1048 28 22                jr z, CstlQside       
1135   104A 78                   ld a,b
1136   104B CB 47                bit 0,a
1137   104D 28 3F                jr z,CstlLoop
1138   104F             CstEmpty1:
1139   104F 14                   inc d
1140   1050 23                   inc hl
1141   1051 7A                   ld a,d
1142   1052 FE 07                cp 7
1143   1054 28 07                jr z, CstlGood1
1144   1056 CD A3 10             call IsEmpty
1145   1059 30 33                jr nc, CstlLoop
1146   105B 18 F2                jr CstEmpty1
1147   105D             CstlGood1:
1148   105D 15                   dec d              ; back h1->g1  or h8->g8
1149   105E 2B                   dec hl
1150   105F 3A F5 0A             ld a,(SQi)
1151   1062 3C                   inc a
1152   1063 3C                   inc a
1153   1064 32 F6 0A             ld (SQt),a
1154   1067 CD FF 10             call AddMove
1155   106A 18 22                jr CstlLoop
1156   106C             CstlQside:
1157   106C 78                   ld a,b
1158   106D CB 48                bit 1,b
1159   106F 28 1D                jr z,CstlLoop
1160   1071             CstEmpty2:          
1161   1071 15                   dec d
1162   1072 2B                   dec hl
1163   1073 7A                   ld a,d
1164   1074 FE 00                cp 0
1165   1076 28 07                jr z, CstlGood2
1166   1078 CD A3 10             call IsEmpty
1167   107B 30 11                jr nc, CstlLoop
1168   107D 18 F2                jr CstEmpty2
1169   107F             CstlGood2:
1170   107F 14                   inc d
1171   1080 14                   inc d              ; back a1->c1  or a8->c8
1172   1081 23                   inc hl
1173   1082 23                   inc hl
1174   1083 3A F5 0A             ld a,(SQi)
1175   1086 3D                   dec a
1176   1087 3D                   dec a
1177   1088 32 F6 0A             ld (SQt),a
1178   108B CD FF 10             call AddMove         
1179   108E             CstlLoop:
1180   108E D1                   pop de
1181   108F 3E 00                ld a,0
1182   1091 B9                   cp c
1183   1092 28 06                jr z,CastleBrk
1184   1094 0D                   dec c
1185   1095                      
1186   1095 FD E5                push iy
1187   1097 E1                   pop hl   ; restore hl
1188   1098                      
1189   1098 18 97                jr CastleDirScan    ;Next direction
1190   109A                      
1191   109A             CastleBrk:         
1192   109A FD E5                push iy
1193   109C E1                   pop hl   ; restore hl
1194   109D                      
1195   109D 3E 00                ld a,0
1196   109F 32 F9 10             ld (CastlMove),a                    
1197   10A2             
1198   10A2 C9                   ret
1199   10A3             
1200   10A3             ;END
1201   10A3             
1202   10A3             ;BEGIN of ========== Is empty square?
1203   10A3             
1204   10A3             IsEmpty:
1205   10A3 7E                   ld a, (hl)
1206   10A4 FE 00                cp 0
1207   10A6 28 04                jr z, EmptySqIs
1208   10A8 37                   scf
1209   10A9 3F                   ccf
1210   10AA 18 01                jr EmptySqOver
1211   10AC             EmptySqIs:
1212   10AC 37                   scf
1213   10AD             EmptySqOver:
1214   10AD C9                   ret           
1215   10AE             ;END
1216   10AE             
1217   10AE             ;BEGIN of ========== Is square occupied?
1218   10AE             
1219   10AE             IsOccupied:
1220   10AE 7E                   ld a, (hl)
1221   10AF FE 00                cp 0
1222   10B1 28 04                jr z, OccupiedSqIs
1223   10B3 37                   scf
1224   10B4 3F                   ccf
1225   10B5 18 01                jr OccupiedSqOver
1226   10B7             OccupiedSqIs:
1227   10B7 37                   scf
1228   10B8             OccupiedSqOver:
1229   10B8 C9                   ret           
1230   10B9             ;END
1231   10B9             
1232   10B9             
1233   10B9             ;BEGIN of ========== Is piece white?
1234   10B9             
1235   10B9             IsWhite:
1236   10B9 7E                   ld a, (hl)
1237   10BA FE 50                cp 'P'
1238   10BC 28 18                jr z, WhitePcIs
1239   10BE FE 4E                cp 'N'
1240   10C0 28 14                jr z, WhitePcIs
1241   10C2 FE 42                cp 'B'
1242   10C4 28 10                jr z, WhitePcIs
1243   10C6 FE 52                cp 'R'
1244   10C8 28 0C                jr z, WhitePcIs
1245   10CA FE 51                cp 'Q'
1246   10CC 28 08                jr z, WhitePcIs
1247   10CE FE 4B                cp 'K'
1248   10D0 28 04                jr z, WhitePcIs
1249   10D2 37                   scf
1250   10D3 3F                   ccf
1251   10D4 18 01                jr WhitePcOver
1252   10D6             WhitePcIs:
1253   10D6 37                   scf
1254   10D7             WhitePcOver:
1255   10D7 C9                   ret    
1256   10D8             
1257   10D8             ;END
1258   10D8             
1259   10D8             ;BEGIN of ========== Is piece black?
1260   10D8             
1261   10D8             IsBlack:
1262   10D8 7E                   ld a, (hl)
1263   10D9 FE 70                cp 'p'
1264   10DB 28 18                jr z, BlackPcIs
1265   10DD FE 6E                cp 'n'
1266   10DF 28 14                jr z, BlackPcIs
1267   10E1 FE 62                cp 'b'
1268   10E3 28 10                jr z, BlackPcIs
1269   10E5 FE 72                cp 'r'
1270   10E7 28 0C                jr z, BlackPcIs
1271   10E9 FE 71                cp 'q'
1272   10EB 28 08                jr z, BlackPcIs
1273   10ED FE 6B                cp 'k'
1274   10EF 28 04                jr z, BlackPcIs
1275   10F1 37                   scf
1276   10F2 3F                   ccf
1277   10F3 18 01                jr BlackPcOver
1278   10F5             BlackPcIs:
1279   10F5 37                   scf
1280   10F6             BlackPcOver:
1281   10F6 C9                   ret    
1282   10F7             
1283   10F7             ;END
1284   10F7             
1285   10F7             ;BEGIN of ========== ADD NEW MOVE to the list with verification
1286   10F7             
1287   10F7             ;various flags
1288   10F7 00          CaptPiece:  .byte 0
1289   10F8 00          PromoPcId:  .byte 0
1290   10F9 00          CastlMove:  .byte 0
1291   10FA             
1292   10FA             AddMovPromo:
1293   10FA 3E 04                ld a,4
1294   10FC 32 F8 10             ld (PromoPcId),a        ; pawns may promote, so this counter is like promoted-piece-id of Q,R.B.N
1295   10FF             AddMove:
1296   10FF F5                   push af
1297   1100                      
1298   1100 CD 95 15             call ValidateKingCheck  ; this verifies if king is attacked after movement, or can not castle
1299   1103 FE 00                cp 0
1300   1105 28 02                jr z,AddMLegal          ; if valid move
1301   1107                      
1302   1107 18 59                jr fAddMVover
1303   1109                      
1304   1109             AddMLegal:
1305   1109 3A F7 0A             ld a, (MateDetect)
1306   110C FE 00                cp 0
1307   110E 28 07                jr z, AddMNormalCase
1308   1110                     
1309   1110 3E 02                ld a,2                  ; we found a legal move, so not checkmate
1310   1112 32 F7 0A             ld (MateDetect),a
1311   1115 18 4B                jr fAddMVover   
1312   1117                      
1313   1117             AddMNormalCase:         
1314   1117                               
1315   1117 C5                   push bc
1316   1118 DD E5                push ix
1317   111A DD 21 92 04          ld ix, NEXT_MVCNT
1318   111E DD 4E 00             ld c, (ix)     ;n
1319   1121 06 00                ld b, 0
1320   1123 DD 34 00             inc (ix)       ;n=n+1
1321   1126 DD 21 93 04          ld ix, NEXT_MOVES
1322   112A CB 21                sla c
1323   112C CB 21                sla c
1324   112E DD 09                add ix, bc     ;n*(piece,from,to,flags)
1325   1130 FD 7E 00             ld a, (iy)     ;piece
1326   1133 FE 61                cp 'a'
1327   1135 38 02                jr c, addMVupperAlready
1328   1137 D6 20                sub 32         ;to uppercase
1329   1139                      
1330   1139             addMVupperAlready:         
1331   1139 DD 77 00             ld (ix), a
1332   113C DD 23                inc ix
1333   113E                              
1334   113E 3A F5 0A             ld a, (SQi)    ;from square
1335   1141 DD 77 00             ld (ix), a
1336   1144 DD 23                inc ix
1337   1146                              
1338   1146 3A F6 0A             ld a, (SQt)    ;to square
1339   1149 DD 77 00             ld (ix), a
1340   114C DD 23                inc ix
1341   114E                      
1342   114E                      ; and add one byte for flags
1343   114E                      
1344   114E 3A F7 10             ld a, (CaptPiece)
1345   1151 47                   ld b, a                ; bit 0 - captured a piece
1346   1152             
1347   1152 3A F8 10             ld a, (PromoPcId)
1348   1155 FE 00                cp 0
1349   1157 28 25                jr z, addMVnoprom
1350   1159                               
1351   1159 3A F6 0A             ld a, (SQt)    ;to
1352   115C FE 38                cp 64-8        ;row 8?
1353   115E 38 04                jr c, addMVq
1354   1160 18 06                jr addMVpromos
1355   1162                      
1356   1162             fAddMVover:
1357   1162 18 48                jr AddMVover 
1358   1164                      
1359   1164             addMVq:
1360   1164 FE 08                cp 8           ;row 1?
1361   1166 30 16                jr nc, addMVnoprom
1362   1168             
1363   1168             addMVpromos:         
1364   1168 CB C8                set 1,b                ; bit 1 - promotion, bits 2,3 - promoted piece Nr. Q=3,R=2,B=1,N=0   
1365   116A 3A F8 10             ld a, (PromoPcId)
1366   116D 3D                   dec a
1367   116E 32 F8 10             ld (PromoPcId),a
1368   1171 FE 00                cp 0
1369   1173 28 03                jr z, addMVp2
1370   1175                      
1371   1175 CD FF 10             call AddMove          ; promotion move for all other pieces, check detection lags here     
1372   1178                      
1373   1178             addMVp2:        
1374   1178 CB 27                sla a
1375   117A CB 27                sla a
1376   117C B0                   or b
1377   117D 47                   ld b,a       
1378   117E                
1379   117E             addMVnoprom:
1380   117E 3A F9 10             ld a, (CastlMove)
1381   1181 FE 00                cp 0
1382   1183 28 02                jr z, addMVnoCastle
1383   1185 CB E0                set 4,b                ; bit 4 - castling indicator
1384   1187             addMVnoCastle:
1385   1187             
1386   1187 3A F7 10             ld a, (CaptPiece)
1387   118A FE 00                cp 0
1388   118C 28 10                jr z,addMVnoEP
1389   118E 3A 83 01             ld a, (ENPSQ)
1390   1191 FE FF                cp $ff
1391   1193 28 09                jr z,addMVnoEP 
1392   1195 4F                   ld c,a
1393   1196 3A F6 0A             ld a, (SQt)
1394   1199 B9                   cp c
1395   119A 20 02                jr nz,addMVnoEP
1396   119C CB E8                set 5,b                ; bit 5 - en-passant capture
1397   119E                                             ; bit 6 - later for check+ detection
1398   119E                                             ; bit 7 - later for checkmate detection
1399   119E             addMVnoEP:
1400   119E                                                 
1401   119E DD 70 00             ld (ix), b
1402   11A1 DD 23                inc ix
1403   11A3                      
1404   11A3 DD E1                pop ix
1405   11A5 C1                   pop bc        
1406   11A6                                                                                         
1407   11A6 CD 07 19             call MakeMove         ; check+ detection action, with checkmate detection later
1408   11A9 CD DE 1C             call UnMakeMove
1409   11AC                                      
1410   11AC             AddMVover:
1411   11AC F1                   pop af         
1412   11AD C9                   ret
1413   11AE             
1414   11AE             ;END
1415   11AE             
1416   11AE             
1417   11AE             ;BEGIN of ========== Composes notation string for output for current list of generated moves
1418   11AE             ;                   (last by MOVE GENs) 
1419   11AE             
1420   11AE             MovesToStr:
1421   11AE F5                   push af
1422   11AF C5                   push bc
1423   11B0 D5                   push de
1424   11B1 DD E5                push ix
1425   11B3                      
1426   11B3 11 86 01             ld de, NEXT_MVSTR
1427   11B6 DD 21 92 04          ld ix, NEXT_MVCNT
1428   11BA             
1429   11BA DD 46 00             ld b,(ix)
1430   11BD DD 21 93 04          ld ix, NEXT_MOVES
1431   11C1 78                   ld a, b
1432   11C2 FE 00                cp 0
1433   11C4 28 5B                jr z, MV2sEndSymb 
1434   11C6                      
1435   11C6             MV2sToLoop:
1436   11C6             
1437   11C6 DD 7E 00             ld a, (ix)   ; piece
1438   11C9 FE 50                cp 'P'
1439   11CB 28 02                jr z, MV2sNoPieceNotate
1440   11CD 12                   ld (de),a
1441   11CE 13                   inc de
1442   11CF             MV2sNoPieceNotate:
1443   11CF DD 23                inc ix
1444   11D1                             
1445   11D1 CD 77 12             call MC2getSQ   ; from square
1446   11D4 13                   inc de    
1447   11D5 13                   inc de
1448   11D6 CD 77 12             call MC2getSQ   ; to square
1449   11D9 1B                   dec de    
1450   11DA 1B                   dec de
1451   11DB                                        
1452   11DB DD 7E 00             ld a, (ix)    ; flags
1453   11DE CB 67                bit 4,a
1454   11E0 28 05                jr z,MV2sNoCastle
1455   11E2 CD 58 12             call MC2sCASTLEs   ; redraws castling 0-0 or 0-0-0      
1456   11E5 18 1B                jr MV2sNoProm    
1457   11E7             MV2sNoCastle:
1458   11E7 DD 7E 00             ld a, (ix)    ; flags again
1459   11EA CB 47                bit 0,a
1460   11EC 28 04                jr z, MV2sNoCapt
1461   11EE 3E 78                ld a, 'x'
1462   11F0 18 02                jr MV2xTo
1463   11F2             MV2sNoCapt:
1464   11F2 3E 2D                ld a, '-'
1465   11F4             MV2xTo:         
1466   11F4 12                   ld (de),a
1467   11F5 13                   inc de        
1468   11F6 13                   inc de
1469   11F7 13                   inc de
1470   11F8                             
1471   11F8 DD 7E 00             ld a, (ix)    ; possibly promotion
1472   11FB CB 4F                bit 1,a
1473   11FD 28 03                jr z, MV2sNoProm
1474   11FF                      
1475   11FF CD 2E 12             call MV2sPromotion ; add piece promotion text =Q..N 
1476   1202             
1477   1202             MV2sNoProm:
1478   1202 DD 7E 00             ld a, (ix)    ; possibly check+
1479   1205 CB 77                bit 6,a
1480   1207 28 0F                jr z, MV2sNoCheck
1481   1209                      
1482   1209 DD 7E 00             ld a, (ix)    ; possibly checkmate
1483   120C CB 7F                bit 7,a
1484   120E 28 04                jr z, MV2sJustCheck
1485   1210             
1486   1210 3E 23                ld a, '#'
1487   1212 18 02                jr MV2sCk1
1488   1214                      
1489   1214             MV2sJustCheck:         
1490   1214 3E 2B                ld a, '+'
1491   1216 12          MV2sCk1: ld (de),a        
1492   1217 13                   inc de         
1493   1218                      
1494   1218             MV2sNoCheck:                     
1495   1218 DD 23                inc ix
1496   121A                              
1497   121A 3E 2C                ld a, ','
1498   121C 12                   ld (de),a        
1499   121D 13                   inc de
1500   121E                      
1501   121E 10 A6                djnz MV2sToLoop
1502   1220 1B                   dec de
1503   1221                      
1504   1221             MV2sEndSymb:         
1505   1221 3E 24                ld a, '$'
1506   1223 12                   ld (de),a         
1507   1224 13                   inc de
1508   1225 3E 00                ld a, 0
1509   1227 12                   ld (de),a 
1510   1228                              
1511   1228 DD E1                pop ix
1512   122A D1                   pop de
1513   122B C1                   pop bc
1514   122C F1                   pop af
1515   122D C9                   ret
1516   122E             
1517   122E             MV2sPromotion:
1518   122E             
1519   122E 3E 3D                ld a, '='
1520   1230 12                   ld (de),a
1521   1231 13                   inc de
1522   1232                               
1523   1232 DD 7E 00             ld a, (ix)    ; which piece?
1524   1235 CB 3F                srl a
1525   1237 CB 3F                srl a
1526   1239 E6 03                and 3         ; 0..3 piece Id
1527   123B FE 03                cp 3          ; Queen?
1528   123D 20 04                jr nz, MC2sNoQ
1529   123F 3E 51                ld a, 'Q'
1530   1241 18 12                jr MC2sPrId         
1531   1243 FE 02       MC2sNoQ: cp 2          ; Rook?
1532   1245 20 04                jr nz, MC2sNoR
1533   1247 3E 52                ld a, 'R'
1534   1249 18 0A                jr MC2sPrId        
1535   124B FE 01       MC2sNoR: cp 1          ; Bishop?
1536   124D 20 04                jr nz, MC2sNoB
1537   124F 3E 42                ld a, 'B'
1538   1251 18 02                jr MC2sPrId
1539   1253 3E 4E       MC2sNoB: ld a, 'N'     ; Knight
1540   1255             MC2sPrId:
1541   1255 12                   ld (de),a
1542   1256 13                   inc de
1543   1257 C9                   ret
1544   1258                       
1545   1258             MC2sCASTLEs:           ; simply rewrites characters in buffer 
1546   1258             
1547   1258 13                   inc de
1548   1259 1A                   ld a,(de)
1549   125A 1B                   dec de
1550   125B 1B                   dec de
1551   125C 1B                   dec de
1552   125D 1B                   dec de
1553   125E FE 63                cp 'c'
1554   1260 20 08                jr nz,MC2sShort       
1555   1262 3E 30                ld a, '0'     ; 0-0-0
1556   1264 12                   ld (de),a
1557   1265 13                   inc de
1558   1266 3E 2D                ld a, '-'
1559   1268 12                   ld (de),a
1560   1269 13                   inc de
1561   126A             MC2sShort:
1562   126A 3E 30                ld a, '0'     ; just 0-0 part
1563   126C 12                   ld (de),a
1564   126D 13                   inc de
1565   126E 3E 2D                ld a, '-'
1566   1270 12                   ld (de),a
1567   1271 13                   inc de
1568   1272 3E 30                ld a, '0'
1569   1274 12                   ld (de),a
1570   1275 13                   inc de                           
1571   1276             
1572   1276 C9                   ret
1573   1277             ; get square and store to text string
1574   1277             MC2getSQ:
1575   1277 DD 7E 00             ld a, (ix)
1576   127A E6 07                and 7
1577   127C C6 61                add a, 'a'
1578   127E 12                   ld (de),a        
1579   127F 13                   inc de
1580   1280 DD 7E 00             ld a, (ix)
1581   1283 CB 3F                srl a
1582   1285 CB 3F                srl a
1583   1287 CB 3F                srl a
1584   1289 C6 31                add a, '1'
1585   128B 12                   ld (de),a
1586   128C DD 23                inc ix
1587   128E C9                   ret
1588   128F             
1589   128F             ; printing of current legal moves to output
1590   128F             MovesOut:
1591   128F D5                   push de
1592   1290 11 86 01             ld de, NEXT_MVSTR
1593   1293 CD 66 30             call PrintString
1594   1296 D1                   pop de
1595   1297 C9                   ret
1596   1298             
1597   1298             ;END        
1598   1298             
1599   1298             ;BEGIN of ========== SET FEN position on BOARD and variables
1600   1298             ;
1601   1298             ; parameter: a-reg
1602   1298             ;  0 - set by using startFEN
1603   1298             ;  1 - set fen provided in IX register
1604   1298             ;
1605   1298             SetFEN:
1606   1298 F5                   push af
1607   1299 C5                   push bc
1608   129A D5                   push de
1609   129B E5                   push hl
1610   129C             
1611   129C FE 00                cp 0
1612   129E 28 05                jr z, SetFENstartpos
1613   12A0 DD E5                push ix
1614   12A2 D1                   pop de   ;de contains FEN address now
1615   12A3 18 03                jr SetFENp
1616   12A5             SetFENstartpos:         
1617   12A5 11 07 01             ld de, startFEN
1618   12A8 3E FF       SetFENp: ld a,$ff
1619   12AA 32 84 01             ld (WKSQ),a
1620   12AD 32 85 01             ld (BKSQ),a
1621   12B0 CD DF 14             call SetSqScan
1622   12B3 CD E8 14             call ScanSqNxt
1623   12B6 06 40                ld b, 64
1624   12B8             setBoardSquare:
1625   12B8 1A                   ld a, (de)
1626   12B9 13                   inc de
1627   12BA FE 2F                cp '/'
1628   12BC 28 FA                jr z, setBoardSquare
1629   12BE 4F                   ld c, a
1630   12BF FE 31                cp '1'
1631   12C1 38 16                jr c, notFenDigit  ;ifA<'1' then jump
1632   12C3 FE 39                cp '9'
1633   12C5 30 12                jr nc, notFenDigit ;ifA>='9' then jump
1634   12C7 D6 30                sub '0'
1635   12C9 4F                   ld c,a
1636   12CA             setFenEmptyPiece:
1637   12CA 36 00                ld (hl), 0
1638   12CC CD E8 14             call ScanSqNxt
1639   12CF 0D                   dec c
1640   12D0 05                   dec b
1641   12D1 79                   ld a,c
1642   12D2 FE 00                cp 0
1643   12D4 20 F4                jr nz, setFenEmptyPiece
1644   12D6 04                   inc b
1645   12D7 18 1A                jr nextFenPiece
1646   12D9             notFenDigit:
1647   12D9 77                   ld (hl),a
1648   12DA FE 4B                cp 'K'
1649   12DC 20 07                jr nz, setFenNoWK
1650   12DE CD 0E 15             call GetScanSQ
1651   12E1 32 84 01             ld (WKSQ),a
1652   12E4 7E                   ld a,(hl)
1653   12E5             setFenNoWK:
1654   12E5 FE 6B                cp 'k'
1655   12E7 20 07                jr nz, setFenNoBK
1656   12E9 CD 0E 15             call GetScanSQ
1657   12EC 32 85 01             ld (BKSQ),a
1658   12EF 7E                   ld a,(hl)
1659   12F0             setFenNoBK:         
1660   12F0 CD E8 14             call ScanSqNxt
1661   12F3             nextFenPiece:
1662   12F3 10 C3                djnz setBoardSquare
1663   12F5                      
1664   12F5 13                   inc de                 ; detects which side to move
1665   12F6 1A                   ld a, (de)
1666   12F7 FE 77                cp 'w'
1667   12F9 20 04                jr nz,setFenBlackMv
1668   12FB 3E 00                ld a,0
1669   12FD 18 02                jr setFenCol2Mv
1670   12FF             setFenBlackMv:
1671   12FF 3E 01                ld a,1
1672   1301             setFenCol2Mv:
1673   1301 32 81 01             ld (SIDE),a
1674   1304 13                   inc de
1675   1305 13                   inc de
1676   1306             
1677   1306 06 00                ld b,0           
1678   1308             setFenCastlings:
1679   1308 1A                   ld a, (de)
1680   1309 13                   inc de
1681   130A FE 20                cp ' '
1682   130C 28 24                jr z,setFenCsOver ; break loop
1683   130E              
1684   130E FE 2D                cp '-'
1685   1310 28 1E                jr z,setFenCs     ; just skip
1686   1312             
1687   1312 FE 4B                cp 'K'
1688   1314 20 04                jr nz,setFenC2
1689   1316 CB C0                set 0,b
1690   1318 18 16                jr setFenCs
1691   131A             setFenC2:
1692   131A FE 51                cp 'Q'
1693   131C 20 04                jr nz,setFenC3
1694   131E CB C8                set 1,b
1695   1320 18 0E                jr setFenCs
1696   1322             setFenC3:
1697   1322 FE 6B                cp 'k'
1698   1324 20 04                jr nz,setFenC4
1699   1326 CB D0                set 2,b
1700   1328 18 06                jr setFenCs
1701   132A             setFenC4:
1702   132A FE 71                cp 'q'
1703   132C 20 02                jr nz,setFenCs
1704   132E CB D8                set 3,b     
1705   1330             setFenCs:
1706   1330 18 D6                jr setFenCastlings ;just go next      
1707   1332             setFenCsOver:
1708   1332 78                   ld a,b
1709   1333 32 82 01             ld (CASTLES),a
1710   1336                      
1711   1336 1A                   ld a, (de)           ; is en-passant square provided?
1712   1337 13                   inc de
1713   1338 FE 2D                cp '-'
1714   133A 28 10                jr z,setFenNoEnp     ; just skip
1715   133C D6 61                sub 'a'
1716   133E 47                   ld b,a         
1717   133F 1A                   ld a, (de)
1718   1340 13                   inc de
1719   1341 D6 31                sub '1'
1720   1343 CB 27                sla a
1721   1345 CB 27                sla a
1722   1347 CB 27                sla a       
1723   1349 B0                   or b                 ; reg-a = given en-passant square
1724   134A 18 02                jr setFenENPsq     
1725   134C             setFenNoEnp:
1726   134C 3E FF                ld a,$ff
1727   134E             setFenENPsq:
1728   134E 32 83 01             ld (ENPSQ),a         ; save en-passant square
1729   1351             
1730   1351 13                   inc de
1731   1352 3E 00                ld a,0
1732   1354 32 73 06             ld (MOVE_CNT),a
1733   1357                                                                                                                                                                                                                
1734   1357 E1                   pop hl
1735   1358 D1                   pop de
1736   1359 C1                   pop bc
1737   135A F1                   pop af
1738   135B C9                   ret
1739   135C             
1740   135C             ;END
1741   135C             
1742   135C             ;BEGIN of ========== GET FEN position from BOARD and variables
1743   135C             ;
1744   135C             ; parameter:  address in DE register for resulting string,
1745   135C             ;   ends with $, can be printed right after
1746   135C             ;
1747   135C             GetFEN:
1748   135C F5                   push af
1749   135D C5                   push bc
1750   135E D5                   push de
1751   135F E5                   push hl
1752   1360 DD E5                push ix
1753   1362                      
1754   1362 D5                   push de
1755   1363 DD E1                pop ix        ; ix = de
1756   1365                   
1757   1365 CD DF 14             call SetSqScan
1758   1368 06 40                ld b,64
1759   136A 16 00                ld d,0        ; current column
1760   136C             getBoardSquare:
1761   136C                               
1762   136C 7A                   ld a,d
1763   136D FE 08                cp 8           ; if slash for new line
1764   136F 20 09                jr nz,getBoNsl
1765   1371                      
1766   1371 3E 2F                ld a,'/'
1767   1373 DD 77 00             ld (ix),a
1768   1376 DD 23                inc ix
1769   1378 16 00                ld d,0
1770   137A             getBoNsl:
1771   137A CD E8 14             call ScanSqNxt
1772   137D 7E                   ld a, (hl)
1773   137E             
1774   137E FE 00                cp 0
1775   1380 28 06                jr z,getBo0
1776   1382 FE 20                cp ' '
1777   1384 28 02                jr z,getBo0  ; if empty square or space
1778   1386 18 1E                jr getBoNo0
1779   1388             getBo0:         
1780   1388 7A                   ld a,d
1781   1389 FE 00                cp 0
1782   138B 20 04                jr nz,getBoC2
1783   138D 3E 31       getBo1:  ld a,'1'          ; first space
1784   138F 18 15                jr getBoNo0
1785   1391             getBoC2:
1786   1391 DD 2B                dec ix         
1787   1393 DD 7E 00             ld a,(ix)
1788   1396 DD 23                inc ix
1789   1398 D6 31                sub '1'
1790   139A 38 F1                jr c,getBo1         
1791   139C FE 08                cp 8
1792   139E 30 ED                jr nc,getBo1
1793   13A0 DD 2B                dec ix         
1794   13A2 DD 7E 00             ld a,(ix)
1795   13A5 3C                   inc a            ; char+1 counter of empty squares
1796   13A6             getBoNo0:
1797   13A6 DD 77 00             ld (ix),a
1798   13A9 DD 23                inc ix
1799   13AB                      
1800   13AB 14                   inc d
1801   13AC 10 BE                djnz getBoardSquare  ; scan all 64 squares    
1802   13AE                      
1803   13AE CD 4D 14             call getBo_      ; space
1804   13B1                      
1805   13B1 3A 81 01             ld a,(SIDE)      ; side to move
1806   13B4 FE 00                cp 0
1807   13B6 20 04                jr nz,getBoB
1808   13B8 3E 77                ld a,'w'
1809   13BA 18 02                jr getBoSd
1810   13BC 3E 62       getBoB:  ld a,'b'
1811   13BE DD 77 00    getBoSd: ld (ix),a
1812   13C1 DD 23                inc ix
1813   13C3                               
1814   13C3 CD 4D 14             call getBo_
1815   13C6             
1816   13C6 3A 82 01             ld a,(CASTLES)
1817   13C9 47                   ld b,a
1818   13CA E6 0F                and %00001111
1819   13CC FE 00                cp 0
1820   13CE 28 2E                jr z,getBoNoCst
1821   13D0 CB 40                bit 0,b
1822   13D2 28 07                jr z,getBnWK
1823   13D4 3E 4B                ld a,'K'
1824   13D6 DD 77 00             ld (ix),a
1825   13D9 DD 23                inc ix
1826   13DB             getBnWK:  
1827   13DB CB 48                bit 1,b
1828   13DD 28 07                jr z,getBnWQ
1829   13DF 3E 51                ld a,'Q'
1830   13E1 DD 77 00             ld (ix),a
1831   13E4 DD 23                inc ix
1832   13E6             getBnWQ:  
1833   13E6 CB 50                bit 2,b
1834   13E8 28 07                jr z,getBnBK
1835   13EA 3E 6B                ld a,'k'
1836   13EC DD 77 00             ld (ix),a
1837   13EF DD 23                inc ix
1838   13F1             getBnBK:  
1839   13F1 CB 58                bit 3,b
1840   13F3 28 0C                jr z,getBoCsOver
1841   13F5 3E 71                ld a,'q'
1842   13F7 DD 77 00             ld (ix),a
1843   13FA DD 23                inc ix         
1844   13FC 18 03                jr getBoCsOver
1845   13FE                               
1846   13FE             getBoNoCst:
1847   13FE CD 55 14             call getBoM    ; sign - 
1848   1401             getBoCsOver:
1849   1401             
1850   1401 CD 4D 14             call getBo_
1851   1404             
1852   1404 3A 83 01             ld a,(ENPSQ)   ; add en-passant info
1853   1407 FE FF                cp $ff
1854   1409 28 1A                jr z,getBoNoEp
1855   140B 47                   ld b,a
1856   140C E6 07                and 7
1857   140E C6 61                add a,'a'
1858   1410 DD 77 00             ld (ix),a
1859   1413 DD 23                inc ix
1860   1415 78                   ld a,b
1861   1416 CB 3F                srl a
1862   1418 CB 3F                srl a
1863   141A CB 3F                srl a
1864   141C C6 31                add a,'1'
1865   141E DD 77 00             ld (ix),a
1866   1421 DD 23                inc ix
1867   1423 18 03                jr getBoEpOver
1868   1425             getBoNoEp:
1869   1425 CD 55 14             call getBoM    ; sign - 
1870   1428             getBoEpOver:
1871   1428 CD 4D 14             call getBo_
1872   142B             
1873   142B 3E 30                ld a,'0'       ; ignore halfmoves
1874   142D DD 77 00             ld (ix),a
1875   1430 DD 23                inc ix
1876   1432                      
1877   1432 CD 4D 14             call getBo_
1878   1435                      
1879   1435 3A 73 06             ld a,(MOVE_CNT)
1880   1438 CB 3F                srl a          ; =1+int(/2)
1881   143A C6 31                add a,'1'
1882   143C DD 77 00             ld (ix),a
1883   143F DD 23                inc ix
1884   1441                      
1885   1441 3E 24                ld a,'$'
1886   1443 DD 77 00             ld (ix),a
1887   1446                      
1888   1446 DD E1                pop ix                                                                                                                                                                                           
1889   1448 E1                   pop hl
1890   1449 D1                   pop de
1891   144A C1                   pop bc
1892   144B F1                   pop af
1893   144C C9                   ret
1894   144D                      
1895   144D 3E 20       getBo_:  ld a,' '
1896   144F DD 77 00             ld (ix),a
1897   1452 DD 23                inc ix
1898   1454 C9                   ret         
1899   1455 3E 2D       getBoM:  ld a,'-'
1900   1457 DD 77 00             ld (ix),a
1901   145A DD 23                inc ix
1902   145C C9                   ret         
1903   145D                      
1904   145D             
1905   145D             ;END
1906   145D             
1907   145D             ;BEGIN of ========== BOARD printing out
1908   145D             
1909   145D             BoardOut:
1910   145D 2E 2E 2E 2E         .byte "........", 13, 10   ;output string
1910   1461 2E 2E 2E 2E 
1910   1465 0D 0A 
1911   1467 2E 2E 2E 2E         .byte "........", 13, 10
1911   146B 2E 2E 2E 2E 
1911   146F 0D 0A 
1912   1471 2E 2E 2E 2E         .byte "........", 13, 10
1912   1475 2E 2E 2E 2E 
1912   1479 0D 0A 
1913   147B 2E 2E 2E 2E         .byte "........", 13, 10
1913   147F 2E 2E 2E 2E 
1913   1483 0D 0A 
1914   1485 2E 2E 2E 2E         .byte "........", 13, 10
1914   1489 2E 2E 2E 2E 
1914   148D 0D 0A 
1915   148F 2E 2E 2E 2E         .byte "........", 13, 10
1915   1493 2E 2E 2E 2E 
1915   1497 0D 0A 
1916   1499 2E 2E 2E 2E         .byte "........", 13, 10
1916   149D 2E 2E 2E 2E 
1916   14A1 0D 0A 
1917   14A3 2E 2E 2E 2E         .byte "........", 13, 10
1917   14A7 2E 2E 2E 2E 
1917   14AB 0D 0A 
1918   14AD 24 00               .byte "$", 0   
1919   14AF                     
1920   14AF             printBOARD:
1921   14AF F5                   push af
1922   14B0 C5                   push bc
1923   14B1 D5                   push de
1924   14B2 E5                   push hl
1925   14B3 06 08                ld b, 8
1926   14B5 CD DF 14             call SetSqScan
1927   14B8 11 5D 14             ld de, BoardOut
1928   14BB             printBoardLine:
1929   14BB 0E 08                ld c, 8
1930   14BD             printCharsInLine:         
1931   14BD CD E8 14             call ScanSqNxt
1932   14C0 7E                   ld a, (hl)
1933   14C1 FE 00                cp 0
1934   14C3 20 02                jr nz, printCh1
1935   14C5 3E 20                ld a, ' '            ; Empty square     
1936   14C7             printCh1:
1937   14C7 12                   ld (de), a
1938   14C8 13                   inc de
1939   14C9 0D                   dec c
1940   14CA 79                   ld a,c
1941   14CB FE 00                cp 0
1942   14CD 20 EE                jr nz, printCharsInLine   ; 8x8
1943   14CF 13                   inc de                    ; chr(13)+chr(10)
1944   14D0 13                   inc de
1945   14D1 10 E8                djnz printBoardLine
1946   14D3             
1947   14D3 11 5D 14             ld de, BoardOut
1948   14D6 CD 66 30             call PrintString
1949   14D9             
1950   14D9 E1                   pop hl
1951   14DA D1                   pop de
1952   14DB C1                   pop bc
1953   14DC F1                   pop af
1954   14DD C9                   ret
1955   14DE             ;END
1956   14DE             
1957   14DE             
1958   14DE             ;BEGIN of ========== BOARD scanning A1,B1,...,H1,A2,B2...,H8
1959   14DE             
1960   14DE             ; board order on screen or FEN notation is A8,B8,...,H8,A7,B7.... H1
1961   14DE             ; so we go to square 57 then scan to 63, then jump to 49 ... till last square is 7 
1962   14DE             
1963   14DE 00          ScanSqC:  .byte 0   ;counter 1..8, reg HL contains pointer to BOARD square 
1964   14DF             
1965   14DF             SetSqScan:
1966   14DF 21 DE 14             ld hl, ScanSqC
1967   14E2 36 00                ld (hl),0              ; +1 for first loop 
1968   14E4 21 77 01             ld hl, BOARD+64-8-1
1969   14E7 C9                   ret
1970   14E8             ScanSqNxt:
1971   14E8 F5                   push af         
1972   14E9 C5                   push bc
1973   14EA DD E5                push ix
1974   14EC DD 21 DE 14          ld ix, ScanSqC
1975   14F0 DD 34 00             inc (ix)
1976   14F3 DD 7E 00             ld a,(ix)
1977   14F6 FE 09                cp 8+1
1978   14F8 28 06                jr z, ScanSqNxtRow
1979   14FA 23                   inc hl                 ;just next square
1980   14FB             retSqScan:         
1981   14FB DD E1                pop ix
1982   14FD C1                   pop bc
1983   14FE F1                   pop af
1984   14FF C9                   ret
1985   1500             ScanSqNxtRow:
1986   1500 3E 01                ld a,1
1987   1502 DD 77 00             ld (ix),a
1988   1505 01 0F 00             ld bc, 8+7           ;square of previous row, -7
1989   1508 37                   scf
1990   1509 3F                   ccf
1991   150A ED 42                sbc hl, bc           ;there is no sub oper., so we use sbc                          
1992   150C 18 ED                jr retSqScan
1993   150E             GetScanSQ:                   ; returns current square I
1994   150E C5                   push bc
1995   150F E5                   push hl
1996   1510 01 40 01             ld bc, BOARD
1997   1513 37                   scf
1998   1514 3F                   ccf
1999   1515 ED 42                sbc hl, bc          ; difference BOARD - hl-reg
2000   1517                       
2001   1517 E5                   push hl
2002   1518 C1                   pop bc
2003   1519 79                   ld a,c              ; will contain square Nr.
2004   151A E1                   pop hl
2005   151B C1                   pop bc
2006   151C C9                   ret
2007   151D             
2008   151D             ;END
2009   151D             
2010   151D             
2011   151D             ;BEGIN of ========== KING CHECK+ DETECTION
2012   151D             ;
2013   151D             ; on return a-reg 1-is check, 0-not check
2014   151D             ;
2015   151D 00          SQ_ck_i:      .byte 0   ; storing to restore later  
2016   151E 00          SQ_ck_t:      .byte 0
2017   151F 00          CastlMove_ck: .byte 0
2018   1520 00          PromoPcId_ck: .byte 0
2019   1521 00          CaptPiece_ck: .byte 0
2020   1522             
2021   1522             IsCheck:
2022   1522 FD E5               push iy
2023   1524 E5                  push hl
2024   1525                     
2025   1525 3A F9 10            ld a,(CastlMove)
2026   1528 32 1F 15            ld (CastlMove_ck),a
2027   152B 3A F8 10            ld a,(PromoPcId)
2028   152E 32 20 15            ld (PromoPcId_ck),a
2029   1531 3A F7 10            ld a,(CaptPiece)
2030   1534 32 21 15            ld (CaptPiece_ck),a
2031   1537                             
2032   1537 3E 00               ld a,0    
2033   1539 32 F9 10            ld (CastlMove),a
2034   153C 32 F8 10            ld (PromoPcId),a
2035   153F 32 F7 10            ld (CaptPiece),a 
2036   1542                                   
2037   1542 3A F5 0A            ld a, (SQi)      ; save
2038   1545 32 1D 15            ld (SQ_ck_i),a
2039   1548 3A F6 0A            ld a, (SQt)
2040   154B 32 1E 15            ld (SQ_ck_t),a
2041   154E 3A 81 01            ld a, (SIDE)
2042   1551 FE 00               cp 0
2043   1553 20 05               jr nz,IsCkBlack
2044   1555 3A 84 01            ld a,(WKSQ)
2045   1558 18 03               jr IsChSt
2046   155A             IsCkBlack:
2047   155A 3A 85 01            ld a,(BKSQ)        
2048   155D             IsChSt: 
2049   155D 32 F6 0A            ld (SQt),a      
2050   1560 32 F5 0A            ld (SQi),a
2051   1563 CD D1 19            call MM_hl        ; position hl to the square of king
2052   1566                                     
2053   1566 E5                  push hl
2054   1567 FD E1               pop iy            ; contains square of king
2055   1569                     
2056   1569 CD 95 15            call ValidateKingCheck
2057   156C F5                  push af
2058   156D                     
2059   156D 3A 1D 15            ld a, (SQ_ck_i)  ;restore
2060   1570 32 F5 0A            ld (SQi),a
2061   1573 3A 1E 15            ld a, (SQ_ck_t)
2062   1576 32 F6 0A            ld (SQt),a
2063   1579                     
2064   1579 3A 1F 15            ld a,(CastlMove_ck)
2065   157C 32 F9 10            ld (CastlMove),a
2066   157F 3A 20 15            ld a,(PromoPcId_ck)
2067   1582 32 F8 10            ld (PromoPcId),a
2068   1585 3A 21 15            ld a,(CaptPiece_ck)
2069   1588 32 F7 10            ld (CaptPiece),a
2070   158B                     
2071   158B F1                  pop af
2072   158C                     
2073   158C E1                  pop hl
2074   158D FD E1               pop iy
2075   158F C9                  ret        
2076   1590                     
2077   1590             ;END
2078   1590             
2079   1590             
2080   1590             ;BEGIN of ========== VALIDATE KING CHECK
2081   1590             ;
2082   1590             ; Usually king validation is done by opposit movement generation with king capture detection.
2083   1590             ; As it takes long to try all moves, we better verify square-attackers.
2084   1590             ; This gives advantage that only really legal moves are in the list without further iterations.
2085   1590             ;
2086   1590             ; on return a=0 on valid move, 1-not valid
2087   1590             
2088   1590 00          SQ_i:     .byte 0   
2089   1591 00          SQ_t:     .byte 0
2090   1592 00          SQ1:      .byte 0   ;contains flag that this square is nearby (+-1 sq)
2091   1593 00          SQk:      .byte 0   ;king square after movement
2092   1594 00          SQc:      .byte 0   ;square for castle checking
2093   1595             
2094   1595                       
2095   1595             ValidateKingCheck:
2096   1595                                   
2097   1595 C5                   push bc
2098   1596 D5                   push de
2099   1597 E5                   push hl
2100   1598 DD E5                push ix
2101   159A                      
2102   159A FD E5                push iy
2103   159C E1                   pop hl              ;set back pointer to square of piece
2104   159D                      
2105   159D 3A F6 0A             ld a,(SQt)          ;save values
2106   15A0 32 91 15             ld (SQ_t),a
2107   15A3 3A F5 0A             ld a,(SQi)
2108   15A6 32 90 15             ld (SQ_i),a
2109   15A9                      
2110   15A9 3A F5 0A             ld a,(SQi)
2111   15AC 47                   ld b,a
2112   15AD 3A 84 01             ld a,(WKSQ)
2113   15B0 B8                   cp b
2114   15B1 20 05                jr nz,V_notWKing
2115   15B3 32 93 15             ld (SQk),a                                  
2116   15B6 18 2B                jr V_ifCastl       ; castling of white king?
2117   15B8             V_notWKing:
2118   15B8 3A 85 01             ld a,(BKSQ)
2119   15BB B8                   cp b
2120   15BC 20 05                jr nz,V_notKing
2121   15BE 32 93 15             ld (SQk),a
2122   15C1 18 20                jr V_ifCastl       ; castling of black king?
2123   15C3             V_notKing:
2124   15C3 3A 81 01             ld a,(SIDE)
2125   15C6 FE 00                cp 0
2126   15C8 20 08                jr nz, V_blackPc
2127   15CA 3A 84 01             ld a,(WKSQ)
2128   15CD 32 93 15             ld (SQk),a 
2129   15D0 18 06                jr V_Pc1
2130   15D2             V_blackPc:
2131   15D2 3A 85 01             ld a,(BKSQ)
2132   15D5 32 93 15             ld (SQk),a
2133   15D8 47          V_Pc1:   ld b,a
2134   15D9 CD 5B 16             call V_hl_setpos   ; new position of hl at square of king
2135   15DC CD 7F 16             call ValidateKSq   ; if check after movement to?        
2136   15DF 30 64                jr nc,KgNotValid  
2137   15E1 18 5E                jr KgIsValid                  
2138   15E3             V_ifCastl:                         
2139   15E3 3A F9 10             ld a, (CastlMove)
2140   15E6 FE 00                cp 0
2141   15E8 28 4B                jr z, V_noCastl
2142   15EA                      
2143   15EA 78                   ld a,b
2144   15EB 32 94 15             ld (SQc),a
2145   15EE                                        ; castling, b-reg contains king position already
2146   15EE CD 7F 16             call ValidateKSq  ; if check?
2147   15F1 30 52                jr nc,KgNotValid
2148   15F3             
2149   15F3 3A 94 15             ld a,(SQc)
2150   15F6 47                   ld b,a                
2151   15F7 3A 91 15             ld a,(SQ_t)
2152   15FA B8                   cp b
2153   15FB 38 1C                jr c, V_decWCstl
2154   15FD                                        
2155   15FD CD 0F 16             call V_CstlInc
2156   1600 CD 7F 16             call ValidateKSq  ; f1,f8 under check?
2157   1603 30 40                jr nc,KgNotValid
2158   1605                      
2159   1605 CD 0F 16             call V_CstlInc
2160   1608 CD 7F 16             call ValidateKSq  ; g1,g8 under check?
2161   160B 30 38                jr nc,KgNotValid
2162   160D                      
2163   160D 18 32                jr KgIsValid
2164   160F                      
2165   160F             V_CstlInc:
2166   160F 3A 94 15             ld a,(SQc)
2167   1612 3C                   inc a
2168   1613 32 94 15             ld (SQc),a
2169   1616 47                   ld b,a
2170   1617 23                   inc hl
2171   1618 C9                   ret   
2172   1619                               
2173   1619             V_decWCstl:
2174   1619 CD 2B 16             call V_CstlDec
2175   161C CD 7F 16             call ValidateKSq  ; d1,d8 under check?
2176   161F 30 24                jr nc,KgNotValid
2177   1621                      
2178   1621 CD 2B 16             call V_CstlDec
2179   1624 CD 7F 16             call ValidateKSq  ; c1,c8 under check?
2180   1627 30 1C                jr nc,KgNotValid
2181   1629                      
2182   1629 18 16                jr KgIsValid
2183   162B             
2184   162B             V_CstlDec:
2185   162B 3A 94 15             ld a,(SQc)
2186   162E 3D                   dec a
2187   162F 32 94 15             ld (SQc),a
2188   1632 47                   ld b,a
2189   1633 2B                   dec hl
2190   1634 C9                   ret 
2191   1635                               
2192   1635             V_noCastl:
2193   1635 3A F6 0A             ld a,(SQt)        ; move to under check?
2194   1638 47                   ld b,a
2195   1639 CD 5B 16             call V_hl_setpos  ; new position of hl at square of king         
2196   163C CD 7F 16             call ValidateKSq
2197   163F 30 04                jr nc,KgNotValid                          
2198   1641             
2199   1641             KgIsValid:         
2200   1641 3E 00                ld a,0
2201   1643 18 02                jr KgVret         
2202   1645             KgNotValid:
2203   1645 3E 01                ld a,1
2204   1647             KgVret:
2205   1647             
2206   1647 F5                   push af
2207   1648 3A 91 15             ld a,(SQ_t)          ;restore values
2208   164B 32 F6 0A             ld (SQt),a
2209   164E 3A 90 15             ld a,(SQ_i)
2210   1651 32 F5 0A             ld (SQi),a
2211   1654 F1                   pop af
2212   1655                      
2213   1655 DD E1                pop ix
2214   1657 E1                   pop hl
2215   1658 D1                   pop de
2216   1659 C1                   pop bc
2217   165A C9                   ret
2218   165B                                                                                                                                              
2219   165B             ; reposition of hl pointer to square, by calculation
2220   165B             V_hl_setpos:
2221   165B C5                   push bc
2222   165C 78                   ld a,b
2223   165D 32 F5 0A             ld (SQi),a
2224   1660                      
2225   1660 06 00                ld b,0
2226   1662 3A 90 15             ld a,(SQ_i)
2227   1665 4F                   ld c,a
2228   1666 3A F5 0A             ld a,(SQi)
2229   1669 91                   sub c
2230   166A 38 04                jr c, V_StDistNeg
2231   166C 4F                   ld c,a
2232   166D 09                   add hl,bc              ;new hl position sq-forward
2233   166E 18 0D                jr V_hl_rdy1
2234   1670             V_StDistNeg:
2235   1670 3A F5 0A             ld a,(SQi)
2236   1673 4F                   ld c,a
2237   1674 3A 90 15             ld a,(SQ_i)         
2238   1677 91                   sub c
2239   1678 4F                   ld c,a                         
2240   1679 37                   scf
2241   167A 3F                   ccf
2242   167B ED 42                sbc hl,bc              ;new hl position sq-backward
2243   167D             V_hl_rdy1:
2244   167D C1                   pop bc
2245   167E C9                   ret
2246   167F             
2247   167F             ; detect if given square (in b) is under attack of opponent
2248   167F               
2249   167F             ValidateKSq:
2250   167F                                               
2251   167F 78                   ld a,b
2252   1680 32 F5 0A             ld (SQi),a
2253   1683             
2254   1683 CD AB 0B             call StoreXYtoDE   ; d= X [a..h]   e= Y [1..8]  
2255   1686                                                                
2256   1686                      ; try to attack this square in SQi (threat comes from SQt)
2257   1686             
2258   1686                      ; diognals
2259   1686 DD 21 EC 0D          ld ix,bishopMoves
2260   168A 06 04                ld b, 4
2261   168C                      
2262   168C             DiognalScan4directions:
2263   168C             
2264   168C D5                   push de
2265   168D 3E 01                ld a,1
2266   168F 32 92 15             ld (SQ1),a
2267   1692             DiognalLoop:
2268   1692 CD E7 16             call DiognalAttacks
2269   1695 FE 00                cp 0
2270   1697 28 F9                jr z,DiognalLoop
2271   1699 D1                   pop de
2272   169A FE 02                cp 2
2273   169C 28 46                jr z,NotValidKgSq
2274   169E                                       
2275   169E DD 23                inc ix
2276   16A0 DD 23                inc ix
2277   16A2 DD 23                inc ix
2278   16A4 DD 23                inc ix
2279   16A6                      
2280   16A6 10 E4                djnz DiognalScan4directions        
2281   16A8                      
2282   16A8                      ; horizontals and verticals       
2283   16A8 DD 21 33 0D          ld ix,rookMoves
2284   16AC 06 04                ld b, 4
2285   16AE                      
2286   16AE             HorzVertScan4directions:
2287   16AE             
2288   16AE D5                   push de
2289   16AF 3E 01                ld a,1
2290   16B1 32 92 15             ld (SQ1),a
2291   16B4             HorzVertLoop:
2292   16B4 CD C1 17             call HorzVertAttacks
2293   16B7 FE 00                cp 0
2294   16B9 28 F9                jr z,HorzVertLoop
2295   16BB D1                   pop de
2296   16BC FE 02                cp 2
2297   16BE 28 24                jr z,NotValidKgSq
2298   16C0                           
2299   16C0 DD 23                inc ix
2300   16C2 DD 23                inc ix
2301   16C4 DD 23                inc ix
2302   16C6 DD 23                inc ix
2303   16C8                      
2304   16C8 10 E4                djnz HorzVertScan4directions
2305   16CA             
2306   16CA                      ; knights       
2307   16CA DD 21 9D 0E          ld ix, knightMoves
2308   16CE 06 08                ld b, 8
2309   16D0             VKnightScan8moves:
2310   16D0 CD 87 18             call KnightAttacks
2311   16D3 FE 02                cp 2
2312   16D5 28 0D                jr z,NotValidKgSq
2313   16D7 DD 23                inc ix
2314   16D9 DD 23                inc ix
2315   16DB DD 23                inc ix
2316   16DD DD 23                inc ix
2317   16DF 10 EF                djnz VKnightScan8moves
2318   16E1                      
2319   16E1             ValidKgSq:
2320   16E1 37                   scf
2321   16E2 18 02                jr ValidKgSqRet
2322   16E4             NotValidKgSq:
2323   16E4 37                   scf
2324   16E5 3F                   ccf
2325   16E6             ValidKgSqRet:
2326   16E6 C9                   ret
2327   16E7             
2328   16E7             
2329   16E7             ; look for diognal-attacks to that direction
2330   16E7             DiognalAttacks:
2331   16E7             
2332   16E7 C5                   push bc
2333   16E8 E5                   push hl
2334   16E9 DD E5                push ix
2335   16EB                                       
2336   16EB DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1
2337   16EE DD 23                inc ix
2338   16F0 FE 2D                cp '-'
2339   16F2 28 08                jr z, V_BsNegX      
2340   16F4 7A                   ld a,d
2341   16F5 3C                   inc a           ;a=direction +1 of X 
2342   16F6 FE 08                cp 8
2343   16F8 30 66                jr nc, V_BsSt
2344   16FA 18 09                jr V_BsCanOk1  
2345   16FC             V_BsNegX:
2346   16FC 3E 00                ld a,0          ;a=direction -1 of X
2347   16FE BA                   cp d
2348   16FF 38 02                jr c, V_BsCanSubtrX
2349   1701 18 5D                jr V_BsSt
2350   1703             V_BsCanSubtrX:         
2351   1703 7A                   ld a,d
2352   1704 3D                   dec a 
2353   1705             V_BsCanOk1:
2354   1705 57                   ld d,a         
2355   1706 DD 23                inc ix
2356   1708                      
2357   1708 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1
2358   170B DD 23                inc ix
2359   170D FE 2D                cp '-'
2360   170F 28 08                jr z, V_BsNegY
2361   1711 7B                   ld a,e
2362   1712 3C                   inc a          ;a=direction +1 of Y  
2363   1713 FE 08                cp 8
2364   1715 30 49                jr nc, V_BsSt
2365   1717 18 09                jr V_BsCanOk2   
2366   1719             V_BsNegY:
2367   1719 3E 00                ld a,0         ;a=direction -1 of Y
2368   171B BB                   cp e
2369   171C 38 02                jr c, V_BsCanSubtrY
2370   171E 18 40                jr V_BsSt
2371   1720             V_BsCanSubtrY:         
2372   1720 7B                   ld a, e
2373   1721 3D                   dec a
2374   1722             V_BsCanOk2:
2375   1722 5F                   ld e,a
2376   1723 DD 23                inc ix         
2377   1725                      
2378   1725 CD BC 0B             call StoreSqToMove    ;new SQt,hl        
2379   1728                      
2380   1728 3A F6 0A             ld a, (SQt)
2381   172B 47                   ld b,a
2382   172C 3A 90 15             ld a, (SQ_i)
2383   172F B8                   cp b
2384   1730 28 5C                jr z,V_cont           ; if piece is on that square then will be empty
2385   1732 3A 91 15             ld a, (SQ_t)
2386   1735 B8                   cp b
2387   1736 28 1E                jr z,V_IsThisK       ; if piece goes to that square
2388   1738                                           ; then if piece is not king then
2389   1738                                           ; our king is protected                             
2390   1738 CD A3 10             call IsEmpty
2391   173B 38 51                jr c,V_cont       
2392   173D                      
2393   173D 3A 81 01             ld a, (SIDE)
2394   1740 FE 01                cp 1
2395   1742 28 4E                jr z,V_BsThisBlack
2396   1744                      
2397   1744             V_BsThisWhite:         
2398   1744 CD D8 10             call IsBlack           ; enemy?
2399   1747 30 37                jr nc,V_NoBlack
2400   1749                      
2401   1749 FE 6B                cp 'k'
2402   174B 20 17                jr nz, V_NoBK
2403   174D                      
2404   174D 3A 92 15    V_Sq1:   ld a, (SQ1)            ; nearby square
2405   1750 FE 01                cp 1
2406   1752 20 0C                jr nz,V_BsSt
2407   1754 18 26                jr V_dont              ; king or pawn beats 
2408   1756                      
2409   1756             V_IsThisK:                      ; king can not protect self
2410   1756 3A 93 15             ld a,(SQk)
2411   1759 47                   ld b,a
2412   175A 3A 90 15             ld a,(SQ_i)
2413   175D B8                   cp b
2414   175E 28 2E                jr z, V_cont           ; our king goes to this direction, continue
2415   1760                                             ; stop, our piece protects anyway
2416   1760             
2417   1760 3E 01       V_BsSt:  ld a,1                 ; stop to this direction, our piece protects king
2418   1762 18 51                jr V_BsOver
2419   1764                       
2420   1764             V_NoBK:    
2421   1764 FE 62                cp 'b'
2422   1766 28 14                jr z, V_dont           ; bishop beats
2423   1768 FE 71                cp 'q'
2424   176A 28 10                jr z, V_dont           ; queen beats
2425   176C FE 70                cp 'p'
2426   176E 20 F0                jr nz, V_BsSt          ; otherwise knight and cant beat
2427   1770                      
2428   1770 3A F5 0A             ld a,(SQi)             ; pawn direction verif. black pawn is above
2429   1773 47                   ld b,a
2430   1774 3A F6 0A             ld a,(SQt)           
2431   1777 B8                   cp b
2432   1778 30 D3                jr nc,V_Sq1
2433   177A 18 E4                jr V_BsSt
2434   177C             
2435   177C 3E 02       V_dont:  ld a,2                 ; stop and not valid move, king in check+
2436   177E 18 35                jr V_BsOver 
2437   1780             V_NoBlack:
2438   1780 CD B9 10             call IsWhite           ; our?
2439   1783 38 DB                jr c,V_BsSt
2440   1785 18 07                jr V_cont
2441   1787             V_NoWhite:
2442   1787 CD D8 10             call IsBlack           ; our?
2443   178A 38 D4                jr c,V_BsSt
2444   178C 18 00                jr V_cont
2445   178E             V_cont:         
2446   178E 3E 00                ld a,0                 ; continue after to this direction
2447   1790 18 23                jr V_BsOver
2448   1792                              
2449   1792             V_BsThisBlack:         
2450   1792 CD B9 10             call IsWhite           ; enemy?
2451   1795 30 F0                jr nc, V_NoWhite
2452   1797             
2453   1797 FE 4B                cp 'K'
2454   1799 20 02                jr nz, V_NoWK
2455   179B 18 B0                jr V_Sq1
2456   179D             V_NoWK:    
2457   179D FE 42                cp 'B'
2458   179F 28 DB                jr z, V_dont           ; bishop beats
2459   17A1 FE 51                cp 'Q'
2460   17A3 28 D7                jr z, V_dont           ; queen beats
2461   17A5 FE 50                cp 'P'
2462   17A7 20 B7                jr nz, V_BsSt          ; otherwise knight and cant beat
2463   17A9                      
2464   17A9 3A F5 0A             ld a,(SQi)             ; pawn direction verif. white pawn is below
2465   17AC 47                   ld b,a
2466   17AD 3A F6 0A             ld a,(SQt)           
2467   17B0 B8                   cp b
2468   17B1 38 9A                jr c,V_Sq1
2469   17B3 18 AB                jr V_BsSt
2470   17B5                    
2471   17B5             V_BsOver:
2472   17B5             
2473   17B5 F5                   push af
2474   17B6 3E 00                ld a,0
2475   17B8 32 92 15             ld (SQ1),a      ;next square will be not nearby in that direction anyway
2476   17BB F1                   pop af
2477   17BC                      
2478   17BC DD E1                pop ix
2479   17BE E1                   pop hl
2480   17BF C1                   pop bc
2481   17C0 C9                   ret 
2482   17C1             
2483   17C1             ; look for horizontal-vertical-attacks to that direction
2484   17C1             HorzVertAttacks:
2485   17C1             
2486   17C1 C5                   push bc
2487   17C2 E5                   push hl
2488   17C3 DD E5                push ix
2489   17C5                               
2490   17C5 DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,=0
2491   17C8 DD 23                inc ix
2492   17CA FE 3D                cp '='
2493   17CC 28 16                jr z, V_RkZero1
2494   17CE FE 2D                cp '-'
2495   17D0 28 08                jr z, V_RkNegX      
2496   17D2 7A                   ld a,d
2497   17D3 3C                   inc a           ;a=direction +1 of X 
2498   17D4 FE 08                cp 8
2499   17D6 30 66                jr nc, V_RkSt
2500   17D8 18 09                jr V_RkCanOk1  
2501   17DA             V_RkNegX:
2502   17DA 3E 00                ld a,0          ;a=direction -1 of X
2503   17DC BA                   cp d
2504   17DD 38 02                jr c, V_RkCanSubtrX
2505   17DF 18 5D                jr V_RkSt
2506   17E1             V_RkCanSubtrX:         
2507   17E1 7A                   ld a,d
2508   17E2 3D                   dec a 
2509   17E3             V_RkCanOk1:
2510   17E3 57                   ld d,a         
2511   17E4             V_RkZero1:
2512   17E4 DD 23                inc ix 
2513   17E6 DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,=0
2514   17E9 DD 23                inc ix
2515   17EB FE 3D                cp '='
2516   17ED 28 16                jr z, V_RkZero2        
2517   17EF FE 2D                cp '-'
2518   17F1 28 08                jr z, V_RkNegY
2519   17F3 7B                   ld a,e
2520   17F4 3C                   inc a          ;a=direction +1 of Y  
2521   17F5 FE 08                cp 8
2522   17F7 30 45                jr nc, V_RkSt
2523   17F9 18 09                jr V_RkCanOk2   
2524   17FB             V_RkNegY:
2525   17FB 3E 00                ld a,0         ;a=direction -1 of Y
2526   17FD BB                   cp e
2527   17FE 38 02                jr c, V_RkCanSubtrY
2528   1800 18 3C                jr V_RkSt
2529   1802             V_RkCanSubtrY:         
2530   1802 7B                   ld a, e
2531   1803 3D                   dec a
2532   1804             V_RkCanOk2:
2533   1804 5F                   ld e,a
2534   1805             V_RkZero2:
2535   1805 DD 23                inc ix         
2536   1807                      
2537   1807 CD BC 0B             call StoreSqToMove    ;new SQt,hl
2538   180A                             
2539   180A 3A F6 0A             ld a, (SQt)
2540   180D 47                   ld b,a
2541   180E 3A 90 15             ld a, (SQ_i)
2542   1811 B8                   cp b
2543   1812 28 26                jr z,V_Rkcont           ; if piece is on that square then will be empty
2544   1814 3A 91 15             ld a, (SQ_t)
2545   1817 B8                   cp b
2546   1818 28 28                jr z,V_RkIsThisK       ; if piece goes to that square
2547   181A                                             ; then if piece is not king then
2548   181A                                             ; our king is protected
2549   181A CD A3 10             call IsEmpty
2550   181D 38 1B                jr c,V_Rkcont
2551   181F                      
2552   181F 3A 81 01             ld a, (SIDE)
2553   1822 FE 01                cp 1
2554   1824 28 40                jr z,V_RkThisBlack
2555   1826                      
2556   1826             V_RkThisWhite:         
2557   1826 CD D8 10             call IsBlack           ; enemy?
2558   1829 30 2D                jr nc,V_RkNoBlack
2559   182B                      
2560   182B FE 6B                cp 'k'
2561   182D 20 1F                jr nz, V_RkNoBK
2562   182F                      
2563   182F 3A 92 15    V_RkSq1: ld a, (SQ1)            ; nearby square
2564   1832 FE 01                cp 1
2565   1834 20 08                jr nz,V_RkSt
2566   1836                      ;otherwise king beats our king
2567   1836                      
2568   1836             V_Rkdont:
2569   1836 3E 02                ld a,2                 ; stop and not valid move, king in check+
2570   1838 18 41                jr V_RkOver
2571   183A             V_Rkcont:         
2572   183A 3E 00                ld a,0                 ; continue after to this direction
2573   183C 18 3D                jr V_RkOver
2574   183E                      
2575   183E 3E 01       V_RkSt:  ld a,1                 ; stop to this direction, our piece protects king
2576   1840 18 39                jr V_RkOver
2577   1842                                
2578   1842             V_RkIsThisK:                    ; king can not protect itself
2579   1842 3A 93 15             ld a,(SQk)
2580   1845 47                   ld b,a
2581   1846 3A 90 15             ld a,(SQ_i)
2582   1849 B8                   cp b
2583   184A 28 EE                jr z, V_Rkcont         ; our king goes to this direction, continue
2584   184C                                             ; stop, our piece protects anyway
2585   184C 18 F0                jr V_RkSt                       
2586   184E                       
2587   184E             V_RkNoBK:    
2588   184E FE 72                cp 'r'
2589   1850 28 E4                jr z, V_Rkdont           ; rook beats
2590   1852 FE 71                cp 'q'
2591   1854 28 E0                jr z, V_Rkdont           ; queen beats
2592   1856 18 E6                jr V_RkSt                ; otherwise can not beat
2593   1858             V_RkNoBlack:
2594   1858 CD B9 10             call IsWhite           ; our?
2595   185B 38 E1                jr c,V_RkSt
2596   185D 18 DB                jr V_Rkcont
2597   185F             V_RkNoWhite:
2598   185F CD D8 10             call IsBlack           ; our?
2599   1862 38 DA                jr c,V_RkSt
2600   1864 18 D4                jr V_Rkcont                 
2601   1866             V_RkThisBlack:         
2602   1866 CD B9 10             call IsWhite           ; enemy?
2603   1869 30 F4                jr nc,V_RkNoWhite
2604   186B             
2605   186B FE 4B                cp 'K'
2606   186D 20 02                jr nz, V_RkNoWK
2607   186F 18 BE                jr V_RkSq1
2608   1871             V_RkNoWK:    
2609   1871 FE 52                cp 'R'
2610   1873 28 C1                jr z, V_Rkdont           ; rook beats
2611   1875 FE 51                cp 'Q'
2612   1877 28 BD                jr z, V_Rkdont           ; queen beats
2613   1879 18 C3                jr V_RkSt                ; otherwise can not beat  
2614   187B             
2615   187B             V_RkOver:
2616   187B F5                   push af
2617   187C 3E 00                ld a,0
2618   187E 32 92 15             ld (SQ1),a      ;next square will be not nearby in that direction anyway
2619   1881 F1                   pop af
2620   1882                      
2621   1882 DD E1                pop ix
2622   1884 E1                   pop hl
2623   1885 C1                   pop bc
2624   1886 C9                   ret 
2625   1887             
2626   1887             ; look for knight-attack
2627   1887             KnightAttacks:
2628   1887 C5                   push bc
2629   1888 D5                   push de
2630   1889 E5                   push hl
2631   188A DD E5                push ix
2632   188C                              
2633   188C DD 7E 00             ld a, (ix)     ;given directions for a..h  -1,+1,-2,+2
2634   188F DD 23                inc ix
2635   1891 FE 2D                cp '-'
2636   1893 28 0A                jr z, V_KnNegX
2637   1895 DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of X      
2638   1898 82                   add a,d
2639   1899 FE 08                cp 8
2640   189B 30 62                jr nc, V_KnNo
2641   189D 18 0D                jr V_KnCanOk1  
2642   189F             V_KnNegX:
2643   189F DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of X
2644   18A2 3D                   dec a
2645   18A3 BA                   cp d
2646   18A4 38 02                jr c, V_KnCanSubtrX
2647   18A6 18 57                jr V_KnNo
2648   18A8             V_KnCanSubtrX:         
2649   18A8 7A                   ld a, d
2650   18A9 DD 96 00             sub (ix)    
2651   18AC             V_KnCanOk1:
2652   18AC 57                   ld d,a         
2653   18AD DD 23                inc ix
2654   18AF                      
2655   18AF DD 7E 00             ld a, (ix)     ;given directions for 1..8  -1,+1,-2,+2
2656   18B2 DD 23                inc ix
2657   18B4 FE 2D                cp '-'
2658   18B6 28 0A                jr z, V_KnNegY
2659   18B8 DD 7E 00             ld a, (ix)     ; a=direction +1 or +2 of Y  
2660   18BB 83                   add a,e
2661   18BC FE 08                cp 8
2662   18BE 30 3F                jr nc, V_KnNo
2663   18C0 18 0D                jr V_KnCanOk2   
2664   18C2             V_KnNegY:
2665   18C2 DD 7E 00             ld a, (ix)     ; a=direction -1 or -2 of Y
2666   18C5 3D                   dec a 
2667   18C6 BB                   cp e
2668   18C7 38 02                jr c, V_KnCanSubtrY
2669   18C9 18 34                jr V_KnNo
2670   18CB             V_KnCanSubtrY:         
2671   18CB 7B                   ld a, e
2672   18CC DD 96 00             sub (ix)
2673   18CF             V_KnCanOk2:
2674   18CF 5F                   ld e, a
2675   18D0 DD 23                inc ix         
2676   18D2                      
2677   18D2 CD BC 0B             call StoreSqToMove    ;new SQt,hl
2678   18D5                             
2679   18D5 CD A3 10             call IsEmpty
2680   18D8 38 25                jr c,V_KnNo
2681   18DA                      
2682   18DA 3A F6 0A             ld a, (SQt)
2683   18DD 47                   ld b,a
2684   18DE 3A 91 15             ld a, (SQ_t)
2685   18E1 B8                   cp b
2686   18E2 20 02                jr nz, V_KnIsKn
2687   18E4 18 19                jr V_KnNo              ; we beat this piece
2688   18E6             
2689   18E6             V_KnIsKn:         
2690   18E6 3A 81 01             ld a, (SIDE)
2691   18E9 FE 01                cp 1
2692   18EB 28 07                jr z, V_KnThisKingBlack
2693   18ED             V_KnThisKingWhite:         
2694   18ED 7E                   ld a,(hl)
2695   18EE FE 6E                cp 'n'                 ; knight?
2696   18F0 28 09                jr z,V_Kndont
2697   18F2 18 0B                jr V_KnNo              ; otherwise our
2698   18F4             V_KnThisKingBlack:         
2699   18F4 7E                   ld a,(hl)
2700   18F5 FE 4E                cp 'N'                 ; knight?
2701   18F7 28 02                jr z,V_Kndont
2702   18F9 18 04                jr V_KnNo              ; otherwise our    
2703   18FB             V_Kndont:
2704   18FB 3E 02                ld a,2                 ; not valid move, king in check+
2705   18FD 18 02                jr V_KnOver
2706   18FF             V_KnNo:         
2707   18FF 3E 00                ld a,0                 ; not attacked
2708   1901             V_KnOver:
2709   1901 DD E1                pop ix
2710   1903 E1                   pop hl
2711   1904 D1                   pop de
2712   1905 C1                   pop bc
2713   1906 C9                   ret 
2714   1907             ;END
2715   1907             
2716   1907             
2717   1907             ;BEGIN of ========== MAKE MOVE
2718   1907             ;
2719   1907             ; Make move on BOARD
2720   1907             ; SQi - from square
2721   1907             ; SQt - to square
2722   1907             ; PromoPcId - id of piece to promote = 4-queen,3-rook,2-bishop,1-knight, 0-no promotion
2723   1907             ;
2724   1907             
2725   1907             MakeMove:
2726   1907             
2727   1907 F5                   push af
2728   1908 C5                   push bc
2729   1909 D5                   push de
2730   190A E5                   push hl
2731   190B DD E5                push ix
2732   190D FD E5                push iy
2733   190F                      
2734   190F DD 21 92 04          ld ix, NEXT_MVCNT
2735   1913 DD 46 00             ld b,(ix)
2736   1916 DD 21 93 04          ld ix, NEXT_MOVES
2737   191A 78                   ld a, b
2738   191B FE 00                cp 0
2739   191D 20 02                jr nz, MKMthereAre
2740   191F             
2741   191F 18 75                jr fMKMEnd
2742   1921                      
2743   1921             MKMthereAre: 
2744   1921 1E 00                ld e,0       ; flag that found
2745   1923             
2746   1923             MKMToLoop:
2747   1923 C5                   push bc
2748   1924 DD E5                push ix
2749   1926             
2750   1926 DD 7E 00             ld a, (ix)   ; notated piece
2751   1929 57                   ld d,a
2752   192A DD 23                inc ix
2753   192C             
2754   192C 3A F5 0A             ld a, (SQi)
2755   192F 47                   ld b,a
2756   1930 DD 7E 00             ld a, (ix)   ; from square
2757   1933 B8                   cp b
2758   1934 20 7B                jr nz, MKMnotMV
2759   1936                      
2760   1936 DD 23                inc ix            
2761   1938 3A F6 0A             ld a, (SQt)
2762   193B 4F                   ld c,a
2763   193C DD 7E 00             ld a, (ix)   ; to square
2764   193F B9                   cp c
2765   1940 20 6F                jr nz, MKMnotMV
2766   1942                      
2767   1942 CD DF 19             call MKifPromoTheSame ; verifies if promoted piece the same in list
2768   1945 FE 01                cp 1                  ; actually we can ignore it, because undo just places
2769   1947 20 68                jr nz, MKMnotMV      ; back a pawn
2770   1949                      
2771   1949                      ; ok, this move. Let's do it
2772   1949                      
2773   1949 CD 07 1A             call MKMcastlesDO   ; saves castling flags and verifies rooks
2774   194C                                                  
2775   194C CD F0 1A             call MKMsaveEPSQ
2776   194F                      
2777   194F DD 2B                dec ix         
2778   1951 DD 7E 00             ld a, (ix)   ; from square
2779   1954 CD D1 19             call MM_hl
2780   1957 7E                   ld a,(hl)
2781   1958 57                   ld d,a       ; save piece
2782   1959                      
2783   1959 CD 7D 1A             call UpdateKingSQ   ; and castling flags too
2784   195C                               
2785   195C CD DB 19             call MM_0    ; empty square now
2786   195F                      
2787   195F DD 23                inc ix
2788   1961 DD 7E 00             ld a, (ix)   ; to square
2789   1964 CD D1 19             call MM_hl
2790   1967                      
2791   1967 D5                   push de
2792   1968 56                   ld d,(hl)    ; save captured piece
2793   1969                      
2794   1969 7E                   ld a,(hl)
2795   196A FE 00                cp 0
2796   196C 28 03                jr z, MM_noCapture  ;en-passant is not in list
2797   196E                      
2798   196E CD 1A 1B             call MM_capt2list   ;should save last captured piece in list   
2799   1971                      
2800   1971             MM_noCapture:         
2801   1971                      
2802   1971 D1                   pop de       ; restore our piece
2803   1972                      
2804   1972 7A                   ld a,d
2805   1973 77                   ld (hl),a    ; just place our piece here
2806   1974                               
2807   1974 DD 23                inc ix
2808   1976 DD 7E 00             ld a, (ix)     ; flags
2809   1979 CB 67                bit 4,a        ; castling
2810   197B 28 03                jr z,MMNoCastle
2811   197D                      
2812   197D CD 2E 1B             call  MMcastles          
2813   1980                                         
2814   1980             MMNoCastle:
2815   1980 DD 7E 00             ld a, (ix)     ; flags    
2816   1983 CB 4F                bit 1,a        ; possibly promotion
2817   1985 28 03                jr z, MMNoProm
2818   1987                      
2819   1987 CD 8A 1B             call MMPromotion ; put new piece on board         
2820   198A             MMNoProm:
2821   198A DD 7E 00             ld a, (ix)     ; flags
2822   198D CB 6F                bit 5,a        ; en-passant 
2823   198F 28 09                jr z,MMNoEP
2824   1991             
2825   1991 CD BB 1B             call MMEnPass  ; en-passant capture
2826   1994 18 04                jr MMNoEP                                          
2827   1996             
2828   1996 18 2B       fMKMEnd: jr MKMEnd
2829   1998             
2830   1998 18 89       fMKMToLoop: jr MKMToLoop      ; jump far                                            
2831   199A                                                                                                                                                    
2832   199A             MMNoEP:                                         
2833   199A 1E 01                ld e,1         ; we found already
2834   199C                              
2835   199C CD 6A 1A             call Swap_Sides   ; Swap
2836   199F CD 22 15             call IsCheck
2837   19A2 FE 00                cp 0
2838   19A4 28 08                jr z, MKMnoCheck
2839   19A6                      
2840   19A6 DD 7E 00             ld a, (ix)     ; flags
2841   19A9 CB F7                set 6,a        ; bit 6 - check
2842   19AB DD 77 00             ld (ix),a      ; save to flags
2843   19AE             MKMnoCheck:         
2844   19AE                      
2845   19AE CD 17 1A             call MKMsave2Hist ; Save history
2846   19B1             MKMnotMV:
2847   19B1 DD E1                pop ix
2848   19B3                      
2849   19B3 DD 23                inc ix        ; piece
2850   19B5 DD 23                inc ix        ; from
2851   19B7 DD 23                inc ix        ; to
2852   19B9 DD 23                inc ix        ; flags
2853   19BB             
2854   19BB C1                   pop bc
2855   19BC                      
2856   19BC 7B                   ld a,e
2857   19BD FE 01                cp 1
2858   19BF 28 02                jr z, MKMEnd
2859   19C1 10 D5                djnz fMKMToLoop
2860   19C3             
2861   19C3             MKMEnd:
2862   19C3             
2863   19C3 7B                   ld a,e
2864   19C4 FE 00                cp 0
2865   19C6 20 00                jr nz, MKMfoundmove
2866   19C8             MKMfoundmove:
2867   19C8 FD E1                pop iy                                                                                                   
2868   19CA DD E1                pop ix
2869   19CC E1                   pop hl
2870   19CD D1                   pop de
2871   19CE C1                   pop bc
2872   19CF F1                   pop af
2873   19D0 C9                   ret
2874   19D1                      
2875   19D1             MM_hl:                        ; reposition of hl to square provided in a-reg
2876   19D1 C5                   push bc
2877   19D2 06 00                ld b,0
2878   19D4 4F                   ld c,a
2879   19D5 21 40 01             ld hl, BOARD
2880   19D8 09                   add hl,bc            ; points to piece to move
2881   19D9 C1                   pop bc
2882   19DA C9                   ret
2883   19DB             
2884   19DB 3E 00       MM_0:    ld a,0               ; empty square now 
2885   19DD 77                   ld (hl),a 
2886   19DE C9                   ret
2887   19DF             
2888   19DF             ; verifies promoted piece
2889   19DF             MKifPromoTheSame:
2890   19DF C5                   push bc
2891   19E0 3A F8 10             ld a, (PromoPcId)
2892   19E3 FE 00                cp 0
2893   19E5 28 1C                jr z, MKsamePromo
2894   19E7 3D                   dec a
2895   19E8 47                   ld b,a
2896   19E9 DD 23                inc ix
2897   19EB DD 7E 00             ld a, (ix)       ; flags
2898   19EE 4F                   ld c,a
2899   19EF DD 2B                dec ix
2900   19F1 CB 4F                bit 1,a
2901   19F3 28 0E                jr z, MKsamePromo
2902   19F5 79                   ld a,c
2903   19F6 CB 3F                srl a
2904   19F8 CB 3F                srl a
2905   19FA E6 03                and 3
2906   19FC B8                   cp b
2907   19FD 28 04                jr z, MKsamePromo
2908   19FF 3E 00                ld a,0
2909   1A01 18 02                jr MKsamePover                           
2910   1A03             MKsamePromo:
2911   1A03 3E 01                ld a,1
2912   1A05             MKsamePover:
2913   1A05 C1                   pop bc
2914   1A06 C9                   ret
2915   1A07             
2916   1A07             ; works on castling flags          
2917   1A07             MKMcastlesDO:
2918   1A07 F5                   push af
2919   1A08 3A 82 01             ld a,(CASTLES)
2920   1A0B 32 19 1B             ld (Cstl2hist),a   ; save for history
2921   1A0E FE 00                cp 0
2922   1A10 28 03                jr z,MKMNoRvf
2923   1A12 CD AF 1A             call MKMUpdateRookMvCapt
2924   1A15             MKMNoRvf:
2925   1A15 F1                   pop af         
2926   1A16 C9                   ret
2927   1A17             
2928   1A17             ; Saves move into history of moves made
2929   1A17             MKMsave2Hist:
2930   1A17 E5                   push hl
2931   1A18 C5                   push bc
2932   1A19 06 00                ld b,0
2933   1A1B 3A 73 06             ld a,(MOVE_CNT)
2934   1A1E 4F                   ld c,a
2935   1A1F 3C                   inc a
2936   1A20 32 73 06             ld (MOVE_CNT),a
2937   1A23 21 74 06             ld hl, MOVE_HIST
2938   1A26                      
2939   1A26 FE 3C                cp 60
2940   1A28 38 07                jr c,slowBcAdd1     
2941   1A2A CB 21                sla c
2942   1A2C CB 21                sla c      ; 4*c
2943   1A2E                       ;1.byte = from sq
2944   1A2E                       ;2.byte = to sq
2945   1A2E                       ;3.byte = flags and promoted to
2946   1A2E                       ;4.byte = castling flags, en-passant square before
2947   1A2E 09                   add hl,bc
2948   1A2F 18 04                jr overBcAdd1         
2949   1A31             slowBcAdd1:         
2950   1A31 09                   add hl,bc
2951   1A32 09                   add hl,bc
2952   1A33 09                   add hl,bc
2953   1A34 09                   add hl,bc
2954   1A35             overBcAdd1:         
2955   1A35                      
2956   1A35                               
2957   1A35 3A F5 0A             ld a,(SQi)
2958   1A38 77                   ld (hl),a  ; from
2959   1A39 23                   inc hl
2960   1A3A 3A F6 0A             ld a,(SQt) ; to
2961   1A3D 77                   ld (hl),a
2962   1A3E 23                   inc hl
2963   1A3F DD 7E 00             ld a, (ix) ; flags with piece promoted
2964   1A42 77                   ld (hl),a  ;
2965   1A43 23                   inc hl
2966   1A44 3A 18 1B             ld a,(EnPs2hist)
2967   1A47 FE FF                cp $ff
2968   1A49 28 0C                jr z,EnP0hs
2969   1A4B FE 20                cp 32
2970   1A4D 30 04                jr nc,EnPBlackHs
2971   1A4F D6 0F                sub 15    ;a3=1...h3=8
2972   1A51 18 06                jr EnPSvhs 
2973   1A53             EnPBlackHs:
2974   1A53 D6 1F                sub 31    ;a6=9...h6=16
2975   1A55 18 02                jr EnPSvhs
2976   1A57 3E 00       EnP0hs:  ld a,0
2977   1A59 47          EnPSvhs: ld b,a
2978   1A5A 3A 19 1B             ld a,(Cstl2hist)
2979   1A5D CB 27                sla a           ; 4 shifts
2980   1A5F CB 27                sla a
2981   1A61 CB 27                sla a
2982   1A63 CB 27                sla a
2983   1A65 B0                   or b
2984   1A66 77                   ld (hl),a  ; save en-passant square and castling info that was before
2985   1A67 C1                   pop bc
2986   1A68 E1                   pop hl
2987   1A69 C9                   ret
2988   1A6A             
2989   1A6A             ; Just swap both sides
2990   1A6A             Swap_Sides:
2991   1A6A F5                   push af
2992   1A6B 3A 81 01             ld a,(SIDE)       ; swap sides
2993   1A6E FE 00                cp 0
2994   1A70 28 04                jr z,SwSdBl
2995   1A72 3E 00                ld a,0
2996   1A74 18 02                jr SwSdSt
2997   1A76 3E 01       SwSdBl:  ld a,1
2998   1A78 32 81 01    SwSdSt:  ld (SIDE),a
2999   1A7B F1                   pop af
3000   1A7C C9                   ret
3001   1A7D                      
3002   1A7D             ; save king square         
3003   1A7D             UpdateKingSQ:
3004   1A7D 7A                   ld a,d
3005   1A7E FE 4B                cp 'K'
3006   1A80 20 16                jr nz,MKMnoWK1
3007   1A82 79                   ld a,c
3008   1A83 32 84 01             ld (WKSQ),a
3009   1A86 FE 04                cp 4
3010   1A88 28 0C                jr z,KingStillE1
3011   1A8A F5                   push af
3012   1A8B 3A 82 01             ld a,(CASTLES)
3013   1A8E E6 FC                and %11111100
3014   1A90 32 82 01             ld (CASTLES),a
3015   1A93 F1                   pop af         
3016   1A94 18 18                jr MKMkingOut         
3017   1A96             KingStillE1:         
3018   1A96 18 16                jr MKMkingOut         
3019   1A98             MKMnoWK1:          
3020   1A98 FE 6B                cp 'k'
3021   1A9A 20 12                jr nz,MKMkingOut
3022   1A9C 79                   ld a,c
3023   1A9D 32 85 01             ld (BKSQ),a
3024   1AA0 FE 3C                cp 60
3025   1AA2 28 0A                jr z,KingStillE8
3026   1AA4 F5                   push af
3027   1AA5 3A 82 01             ld a,(CASTLES)
3028   1AA8 E6 F3                and %11110011
3029   1AAA 32 82 01             ld (CASTLES),a         
3030   1AAD F1                   pop af
3031   1AAE             KingStillE8:         
3032   1AAE                      
3033   1AAE             MKMkingOut:
3034   1AAE C9                   ret
3035   1AAF             
3036   1AAF             ; if rook has moved or has been captured, clear and save castling flags
3037   1AAF             MKMUpdateRookMvCapt:
3038   1AAF D5                   push de
3039   1AB0 3A 82 01             ld a,(CASTLES)
3040   1AB3 57                   ld d,a
3041   1AB4 78                   ld a,b        ;from
3042   1AB5 CD D4 1A             call MKMiWKK
3043   1AB8 CD DB 1A             call MKMiWKQ
3044   1ABB CD E2 1A             call MKMiBKK
3045   1ABE CD E9 1A             call MKMiBKQ
3046   1AC1 79                   ld a,c        ;to
3047   1AC2 CD D4 1A             call MKMiWKK
3048   1AC5 CD DB 1A             call MKMiWKQ
3049   1AC8 CD E2 1A             call MKMiBKK
3050   1ACB CD E9 1A             call MKMiBKQ
3051   1ACE 7A                   ld a,d
3052   1ACF 32 82 01             ld (CASTLES),a
3053   1AD2 D1                   pop de
3054   1AD3 C9                   ret
3055   1AD4                      
3056   1AD4 FE 07       MKMiWKK: cp 7          ; is H1?
3057   1AD6 20 02                jr nz,MKMoWKK
3058   1AD8 CB 82                res 0,d       
3059   1ADA C9          MKMoWKK: ret
3060   1ADB FE 00       MKMiWKQ: cp 0          ; is A1?
3061   1ADD 20 02                jr nz,MKMoWKQ
3062   1ADF CB 8A                res 1,d       
3063   1AE1 C9          MKMoWKQ: ret
3064   1AE2 FE 3F       MKMiBKK: cp 63         ; is H8?
3065   1AE4 20 02                jr nz,MKMoBKK
3066   1AE6 CB 92                res 2,d       
3067   1AE8 C9          MKMoBKK: ret
3068   1AE9 FE 38       MKMiBKQ: cp 56         ; is A8?
3069   1AEB 20 02                jr nz,MKMoBKQ
3070   1AED CB 9A                res 3,d       
3071   1AEF C9          MKMoBKQ: ret
3072   1AF0             
3073   1AF0                       
3074   1AF0             
3075   1AF0                               
3076   1AF0             ; save new en-passant square
3077   1AF0             MKMsaveEPSQ:
3078   1AF0 3A 83 01             ld a,(ENPSQ)
3079   1AF3 32 18 1B             ld (EnPs2hist),a   ; save for history
3080   1AF6 3E FF                ld a,$ff
3081   1AF8 32 83 01             ld (ENPSQ),a
3082   1AFB 7A                   ld a,d
3083   1AFC FE 50                cp 'P'
3084   1AFE 20 17                jr nz, MKMnoeps
3085   1B00 79                   ld a,c
3086   1B01 D6 10                sub 16           ; are there 16 squares inbetween
3087   1B03 B8                   cp b
3088   1B04 28 08                jr z, MKMwEp     ; double move of white pawn
3089   1B06                      ; try for black pawn
3090   1B06 79                   ld a,c
3091   1B07 C6 10                add a,16
3092   1B09 B8                   cp b
3093   1B0A 28 06                jr z, MKMbEp      ; double move of black pawn 
3094   1B0C 18 09                jr MKMnoeps
3095   1B0E C6 08       MKMwEp:  add a,8
3096   1B10 18 02                jr MKMsaveNewEp
3097   1B12 D6 08       MKMbEp:  sub 8
3098   1B14             MKMsaveNewEp:
3099   1B14 32 83 01             ld (ENPSQ),a
3100   1B17             MKMnoeps:
3101   1B17 C9                   ret                                    
3102   1B18             
3103   1B18 00          EnPs2hist: .byte 0        ; to save en-passant square for history later
3104   1B19             
3105   1B19 00          Cstl2hist: .byte 0        ; to save castling flags for history later
3106   1B1A                                                                             
3107   1B1A             ; saves captured piece in list         
3108   1B1A             MM_capt2list:                      
3109   1B1A E5                   push hl
3110   1B1B 21 D5 1B             ld hl, UnMakeList
3111   1B1E             MKMloop1:         
3112   1B1E 7E                   ld a,(hl)
3113   1B1F FE 20                cp ' '
3114   1B21 28 07                jr z,MKMblankL1
3115   1B23 FE 00                cp 0
3116   1B25 28 03                jr z,MKMblankL1
3117   1B27 23                   inc hl
3118   1B28 18 F4                jr MKMloop1
3119   1B2A             MKMblankL1:
3120   1B2A 7A                   ld a,d
3121   1B2B 77                   ld (hl),a       ; should save for next UnMakeMove      
3122   1B2C E1                   pop hl
3123   1B2D C9                   ret
3124   1B2E                      
3125   1B2E             ; castling moves, should move rook too                 
3126   1B2E             MMcastles:
3127   1B2E E5                   push hl
3128   1B2F 79                   ld a,c
3129   1B30 FE 06                cp 6         ; g1?
3130   1B32 20 12                jr nz,MMNoG1
3131   1B34 3E 07                ld a, 7      ; rook on h1
3132   1B36 CD D1 19             call MM_hl
3133   1B39 CD DB 19             call MM_0    ; empty square now
3134   1B3C 3E 05                ld a, 5      ; f1
3135   1B3E CD D1 19             call MM_hl
3136   1B41 3E 52                ld a,'R'
3137   1B43 77                   ld (hl),a
3138   1B44 18 42                jr MMoverC         
3139   1B46             MMNoG1:
3140   1B46 FE 02                cp 2         ; c1?
3141   1B48 20 12                jr nz,MMNoC1
3142   1B4A 3E 00                ld a, 0      ; rook on a1
3143   1B4C CD D1 19             call MM_hl
3144   1B4F CD DB 19             call MM_0    ; empty square now
3145   1B52 3E 03                ld a, 3      ; d1
3146   1B54 CD D1 19             call MM_hl
3147   1B57 3E 52                ld a,'R'
3148   1B59 77                   ld (hl),a
3149   1B5A 18 2C                jr MMoverC
3150   1B5C             MMNoC1:
3151   1B5C FE 3E                cp 62        ; g8?
3152   1B5E 20 12                jr nz,MMNoG8
3153   1B60 3E 3F                ld a, 63     ; rook on h8
3154   1B62 CD D1 19             call MM_hl
3155   1B65 CD DB 19             call MM_0    ; empty square now
3156   1B68 3E 3D                ld a, 61     ; f8
3157   1B6A CD D1 19             call MM_hl
3158   1B6D 3E 72                ld a,'r'
3159   1B6F 77                   ld (hl),a
3160   1B70 18 16                jr MMoverC
3161   1B72             MMNoG8:
3162   1B72 FE 3A                cp 58        ; c8?
3163   1B74 20 12                jr nz,MMoverC
3164   1B76 3E 38                ld a, 56     ; rook on a8
3165   1B78 CD D1 19             call MM_hl
3166   1B7B CD DB 19             call MM_0    ; empty square now
3167   1B7E 3E 3B                ld a, 59     ; d8
3168   1B80 CD D1 19             call MM_hl
3169   1B83 3E 72                ld a,'r'
3170   1B85 77                   ld (hl),a
3171   1B86 18 00                jr MMoverC
3172   1B88 E1          MMoverC: pop hl
3173   1B89 C9                   ret
3174   1B8A             
3175   1B8A             ; promoted pieces
3176   1B8A             MMPromotion:
3177   1B8A                      ; which piece?
3178   1B8A 3A F8 10             ld a, (PromoPcId)
3179   1B8D FE 04                cp 4          ; Queen?
3180   1B8F 20 04                jr nz, MMNoQ
3181   1B91 3E 51                ld a, 'Q'
3182   1B93 18 1A                jr MMPcPut        
3183   1B95 FE 03       MMNoQ:   cp 3          ; Rook?
3184   1B97 20 04                jr nz, MMNoR
3185   1B99 3E 52                ld a, 'R'
3186   1B9B 18 12                jr MMPcPut        
3187   1B9D FE 02       MMNoR:   cp 2          ; Bishop?
3188   1B9F 20 04                jr nz, MMNoB
3189   1BA1 3E 42                ld a, 'B'
3190   1BA3 18 0A                jr MMPcPut
3191   1BA5 FE 01       MMNoB:   cp 1          ; Knight?  
3192   1BA7 20 04                jr nz, MMNoN
3193   1BA9 3E 4E                ld a, 'N'
3194   1BAB 18 02                jr MMPcPut
3195   1BAD 3E 51       MMNoN:   ld a, 'Q'     ; actually, should provide 3
3196   1BAF             
3197   1BAF             MMPcPut:
3198   1BAF 4F                   ld c,a        ; save
3199   1BB0 7A                   ld a,d
3200   1BB1 FE 50                cp 'P'
3201   1BB3 28 04                jr z,MMPcWProm
3202   1BB5 3E 20                ld a,32
3203   1BB7 81                   add a,c
3204   1BB8 4F                   ld c,a        ; to lowercase
3205   1BB9             MMPcWProm:
3206   1BB9 71                   ld (hl),c
3207   1BBA C9                   ret
3208   1BBB                      
3209   1BBB             ; en-passant capture         
3210   1BBB             MMEnPass:
3211   1BBB E5                   push hl
3212   1BBC 7A                   ld a,d
3213   1BBD FE 50                cp 'P'
3214   1BBF 20 07                jr nz,MMPcBEnp         
3215   1BC1 3A F6 0A             ld a,(SQt)
3216   1BC4 D6 08                sub 8
3217   1BC6 18 05                jr MMEnp1
3218   1BC8             MMPcBEnp:
3219   1BC8 3A F6 0A             ld a,(SQt)
3220   1BCB C6 08                add a,8
3221   1BCD CD D1 19    MMEnp1:  call MM_hl
3222   1BD0 CD DB 19             call MM_0    ; empty square now
3223   1BD3 E1                   pop hl
3224   1BD4 C9                   ret
3225   1BD5             ;END
3226   1BD5             
3227   1BD5             ;BEGIN of ========== UNMAKE MOVE
3228   1BD5             ;
3229   1BD5             ; UnMake move on BOARD (undo)
3230   1BD5             ; uses own history recordings in MOVE_HIST
3231   1BD5             ; which sets
3232   1BD5             ;  SQi - from square
3233   1BD5             ;  SQt - to square
3234   1BD5             ;   +also uses flags from history
3235   1BD5             
3236   1BD5                          ; we keep list of captured pieces to unmake later as stack
3237   1BD5             UnMakeList:
3238   1BD5 20 20 20 20          .byte "                                                                  "
3238   1BD9 20 20 20 20 
3238   1BDD 20 20 20 20 
3238   1BE1 20 20 20 20 
3238   1BE5 20 20 20 20 
3238   1BE9 20 20 20 20 
3238   1BED 20 20 20 20 
3238   1BF1 20 20 20 20 
3238   1BF5 20 20 20 20 
3238   1BF9 20 20 20 20 
3238   1BFD 20 20 20 20 
3238   1C01 20 20 20 20 
3238   1C05 20 20 20 20 
3238   1C09 20 20 20 20 
3238   1C0D 20 20 20 20 
3238   1C11 20 20 20 20 
3238   1C15 20 20 
3239   1C17 20 20 20 20          .byte "                                                                  "
3239   1C1B 20 20 20 20 
3239   1C1F 20 20 20 20 
3239   1C23 20 20 20 20 
3239   1C27 20 20 20 20 
3239   1C2B 20 20 20 20 
3239   1C2F 20 20 20 20 
3239   1C33 20 20 20 20 
3239   1C37 20 20 20 20 
3239   1C3B 20 20 20 20 
3239   1C3F 20 20 20 20 
3239   1C43 20 20 20 20 
3239   1C47 20 20 20 20 
3239   1C4B 20 20 20 20 
3239   1C4F 20 20 20 20 
3239   1C53 20 20 20 20 
3239   1C57 20 20 
3240   1C59 20 20 20 20          .byte "                                                                  "
3240   1C5D 20 20 20 20 
3240   1C61 20 20 20 20 
3240   1C65 20 20 20 20 
3240   1C69 20 20 20 20 
3240   1C6D 20 20 20 20 
3240   1C71 20 20 20 20 
3240   1C75 20 20 20 20 
3240   1C79 20 20 20 20 
3240   1C7D 20 20 20 20 
3240   1C81 20 20 20 20 
3240   1C85 20 20 20 20 
3240   1C89 20 20 20 20 
3240   1C8D 20 20 20 20 
3240   1C91 20 20 20 20 
3240   1C95 20 20 20 20 
3240   1C99 20 20 
3241   1C9B 20 20 20 20          .byte "                                                                  "
3241   1C9F 20 20 20 20 
3241   1CA3 20 20 20 20 
3241   1CA7 20 20 20 20 
3241   1CAB 20 20 20 20 
3241   1CAF 20 20 20 20 
3241   1CB3 20 20 20 20 
3241   1CB7 20 20 20 20 
3241   1CBB 20 20 20 20 
3241   1CBF 20 20 20 20 
3241   1CC3 20 20 20 20 
3241   1CC7 20 20 20 20 
3241   1CCB 20 20 20 20 
3241   1CCF 20 20 20 20 
3241   1CD3 20 20 20 20 
3241   1CD7 20 20 20 20 
3241   1CDB 20 20 
3242   1CDD 00          flag_ix:       .byte 0      ; temporary flag of move made
3243   1CDE                     
3244   1CDE             UnMakeMove:
3245   1CDE F5                   push af
3246   1CDF C5                   push bc
3247   1CE0 D5                   push de
3248   1CE1 E5                   push hl
3249   1CE2 DD E5                push ix
3250   1CE4 FD E5                push iy
3251   1CE6                      
3252   1CE6 CD 41 1D             call UnMKrestoreFromHist       ; Restores from history
3253   1CE9                            
3254   1CE9 3A F5 0A             ld a, (SQi)   ; from square
3255   1CEC 47                   ld b,a
3256   1CED                                
3257   1CED 3A F6 0A             ld a, (SQt)   ; to square
3258   1CF0 4F                   ld c,a
3259   1CF1                              
3260   1CF1                      ; Let's undo it
3261   1CF1 CD 6A 1A             call Swap_Sides   ; Swap sides
3262   1CF4                      
3263   1CF4 CD D1 19             call MM_hl
3264   1CF7 56                   ld d,(hl)
3265   1CF8 CD DB 19             call MM_0      ; empty square now
3266   1CFB                               
3267   1CFB 3A DD 1C             ld a, (flag_ix)     ; flags
3268   1CFE CB 47                bit 0,a
3269   1D00 28 0A                jr z,UnMKnoCapture
3270   1D02                
3271   1D02 3A DD 1C             ld a, (flag_ix)     ; flags
3272   1D05 CB 6F                bit 5,a             ; ignore en-passant case
3273   1D07 20 03                jr nz,UnMKnoCapture
3274   1D09              
3275   1D09 CD 96 1D             call UnMKCapturedPiece
3276   1D0C             
3277   1D0C             UnMKnoCapture:
3278   1D0C                               
3279   1D0C 3A F5 0A             ld a,(SQi)
3280   1D0F CD D1 19             call MM_hl
3281   1D12 7A                   ld a,d
3282   1D13 77                   ld (hl),a       ; just place our piece back
3283   1D14             
3284   1D14 C5                   push bc
3285   1D15 48                   ld c,b          ; square-from
3286   1D16 CD 7D 1A             call UpdateKingSQ
3287   1D19 C1                   pop bc
3288   1D1A                      
3289   1D1A 3A DD 1C             ld a, (flag_ix)      ; flags
3290   1D1D CB 67                bit 4,a              ; castling      
3291   1D1F 28 03                jr z,UnMKNoCastle
3292   1D21                      
3293   1D21 CD B0 1D             call  UnMKcastles          
3294   1D24                                                   
3295   1D24             UnMKNoCastle:
3296   1D24 3A DD 1C             ld a, (flag_ix)     ; flags    
3297   1D27 CB 4F                bit 1,a             ; possibly promotion
3298   1D29 28 03                jr z, UnMKNoProm
3299   1D2B                      
3300   1D2B CD 0C 1E             call UnMKPromotion  ; put pawn back on board         
3301   1D2E             UnMKNoProm:
3302   1D2E 3A DD 1C             ld a, (flag_ix)     ; flags
3303   1D31 CB 6F                bit 5,a             ; en-passant         
3304   1D33 28 03                jr z,UnMKNoEP
3305   1D35                      
3306   1D35 CD 22 1E             call UnMKEnPass  ; en-passant capture
3307   1D38             UnMKNoEP:                                     
3308   1D38                      ; en-passant square is updated before
3309   1D38             
3310   1D38             UnMKEnd:
3311   1D38             
3312   1D38 FD E1                pop iy                           
3313   1D3A DD E1                pop ix
3314   1D3C E1                   pop hl
3315   1D3D D1                   pop de
3316   1D3E C1                   pop bc
3317   1D3F F1                   pop af
3318   1D40 C9                   ret
3319   1D41                      
3320   1D41             ; Get SQi,SQt, promoted piece from history
3321   1D41             UnMKrestoreFromHist:
3322   1D41 E5                   push hl
3323   1D42 C5                   push bc
3324   1D43 06 00                ld b,0
3325   1D45 3A 73 06             ld a,(MOVE_CNT)
3326   1D48 3D                   dec a
3327   1D49 4F                   ld c,a
3328   1D4A 32 73 06             ld (MOVE_CNT),a
3329   1D4D 21 74 06             ld hl, MOVE_HIST
3330   1D50                      
3331   1D50 FE 3C                cp 60
3332   1D52 38 07                jr c,slowBcAdd2
3333   1D54 CB 21                sla c
3334   1D56 CB 21                sla c      ; 4*c
3335   1D58                       ;1.byte = from sq
3336   1D58                       ;2.byte = to sq
3337   1D58                       ;3.byte = flags and promoted to
3338   1D58                       ;4.byte = en-passant square and castling info before
3339   1D58 09                   add hl,bc
3340   1D59 18 04                jr overBcAdd2         
3341   1D5B             slowBcAdd2:         
3342   1D5B 09                   add hl,bc
3343   1D5C 09                   add hl,bc
3344   1D5D 09                   add hl,bc
3345   1D5E 09                   add hl,bc
3346   1D5F             overBcAdd2:         
3347   1D5F             
3348   1D5F 7E                   ld a,(hl)
3349   1D60 32 F5 0A             ld (SQi),a
3350   1D63 23                   inc hl
3351   1D64 7E                   ld a,(hl)
3352   1D65 32 F6 0A             ld (SQt),a
3353   1D68 23                   inc hl
3354   1D69 7E                   ld a,(hl)
3355   1D6A 32 DD 1C             ld (flag_ix),a
3356   1D6D 23                   inc hl
3357   1D6E 7E                   ld a,(hl)
3358   1D6F 47                   ld b,a
3359   1D70 E6 0F                and %00001111
3360   1D72 FE 00                cp 0
3361   1D74 28 0C                jr z,unmkEp0
3362   1D76 FE 09                cp 9
3363   1D78 30 04                jr nc,unmkBlackEp
3364   1D7A C6 0F                add a,15            ; a3=16...
3365   1D7C 18 06                jr unmkEpS
3366   1D7E             unmkBlackEp:         
3367   1D7E C6 1F                add a,31            ; a6=40...
3368   1D80 18 02                jr unmkEpS         
3369   1D82 3E FF       unmkEp0: ld a,$ff
3370   1D84 32 83 01    unmkEpS: ld (ENPSQ),a      ; restore ENPSQ
3371   1D87 78                   ld a,b
3372   1D88 CB 3F                srl a
3373   1D8A CB 3F                srl a
3374   1D8C CB 3F                srl a    ; 4 shifts
3375   1D8E CB 3F                srl a
3376   1D90 32 82 01             ld (CASTLES),a    ; restore castling info    
3377   1D93 C1                   pop bc
3378   1D94 E1                   pop hl
3379   1D95 C9                   ret
3380   1D96             
3381   1D96             ; Get captured piece from list and put back
3382   1D96             UnMKCapturedPiece:                      
3383   1D96             
3384   1D96 D5                   push de
3385   1D97 11 D5 1B             ld de, UnMakeList
3386   1D9A             UnMKloop1:        
3387   1D9A 1A                   ld a,(de)
3388   1D9B FE 20                cp ' '
3389   1D9D 28 07                jr z,UnMKblankL1
3390   1D9F FE 00                cp 0
3391   1DA1 28 03                jr z,UnMKblankL1
3392   1DA3 13                   inc de
3393   1DA4 18 F4                jr UnMKloop1
3394   1DA6             UnMKblankL1:
3395   1DA6 1B                   dec de
3396   1DA7 1A                   ld a,(de)       ; should be a previous MakeMove
3397   1DA8 F5                   push af
3398   1DA9 3E 20                ld a,' '
3399   1DAB 12                   ld (de),a       ; clear this
3400   1DAC F1                   pop af
3401   1DAD D1                   pop de
3402   1DAE 77                   ld (hl),a       ; place back captured piece   
3403   1DAF C9                   ret     
3404   1DB0                                                                   
3405   1DB0             ; castling moves, should move rook back too                 
3406   1DB0             UnMKcastles:
3407   1DB0 E5                   push hl
3408   1DB1 79                   ld a,c
3409   1DB2 FE 06                cp 6         ; g1?
3410   1DB4 20 12                jr nz,UnMKNoG1
3411   1DB6 3E 05                ld a, 5      ; rook on f1
3412   1DB8 CD D1 19             call MM_hl
3413   1DBB CD DB 19             call MM_0    ; empty square now
3414   1DBE 3E 07                ld a, 7      ; h1
3415   1DC0 CD D1 19             call MM_hl
3416   1DC3 3E 52                ld a,'R'
3417   1DC5 77                   ld (hl),a
3418   1DC6 18 42                jr UnMKoverC         
3419   1DC8             UnMKNoG1:
3420   1DC8 FE 02                cp 2         ; c1?
3421   1DCA 20 12                jr nz,UnMKNoC1
3422   1DCC 3E 03                ld a, 3      ; rook on d1
3423   1DCE CD D1 19             call MM_hl
3424   1DD1 CD DB 19             call MM_0    ; empty square now
3425   1DD4 3E 00                ld a, 0      ; a1
3426   1DD6 CD D1 19             call MM_hl
3427   1DD9 3E 52                ld a,'R'
3428   1DDB 77                   ld (hl),a
3429   1DDC 18 2C                jr UnMKoverC
3430   1DDE             UnMKNoC1:
3431   1DDE FE 3E                cp 62        ; g8?
3432   1DE0 20 12                jr nz,UnMKNoG8
3433   1DE2 3E 3D                ld a, 61     ; rook on f8
3434   1DE4 CD D1 19             call MM_hl
3435   1DE7 CD DB 19             call MM_0    ; empty square now
3436   1DEA 3E 3F                ld a, 63     ; h8
3437   1DEC CD D1 19             call MM_hl
3438   1DEF 3E 72                ld a,'r'
3439   1DF1 77                   ld (hl),a
3440   1DF2 18 16                jr UnMKoverC
3441   1DF4             UnMKNoG8:
3442   1DF4 FE 3A                cp 58        ; c8?
3443   1DF6 20 12                jr nz,UnMKoverC
3444   1DF8 3E 3B                ld a, 59     ; rook on d8
3445   1DFA CD D1 19             call MM_hl
3446   1DFD CD DB 19             call MM_0    ; empty square now
3447   1E00 3E 38                ld a, 56     ; a8
3448   1E02 CD D1 19             call MM_hl
3449   1E05 3E 72                ld a,'r'
3450   1E07 77                   ld (hl),a
3451   1E08 18 00                jr UnMKoverC
3452   1E0A             UnMKoverC:
3453   1E0A E1                   pop hl
3454   1E0B C9                   ret
3455   1E0C             
3456   1E0C             ; promoted pieces
3457   1E0C             UnMKPromotion:
3458   1E0C E5                   push hl
3459   1E0D 3E 07                ld a,7
3460   1E0F B9                   cp c
3461   1E10 38 04                jr c,UnMKwhitePw
3462   1E12 3E 70                ld a,'p'
3463   1E14 18 02                jr UnMKPw
3464   1E16             UnMKwhitePw:
3465   1E16 3E 50                ld a,'P'
3466   1E18 57          UnMKPw:  ld d,a
3467   1E19 3A F5 0A             ld a,(SQi)
3468   1E1C CD D1 19             call MM_hl         
3469   1E1F 72                   ld (hl),d
3470   1E20 E1                   pop hl
3471   1E21 C9                   ret
3472   1E22                       
3473   1E22             ; en-passant capture         
3474   1E22             UnMKEnPass:
3475   1E22 E5                   push hl
3476   1E23 7A                   ld a,d
3477   1E24 FE 50                cp 'P'
3478   1E26 20 0C                jr nz,UnMKPcBEnp         
3479   1E28 3A F6 0A             ld a,(SQt)
3480   1E2B D6 08                sub 8
3481   1E2D CD D1 19             call MM_hl
3482   1E30 36 70                ld (hl),'p'
3483   1E32 18 0A                jr UnMKEnp1
3484   1E34             UnMKPcBEnp:
3485   1E34 3A F6 0A             ld a,(SQt)
3486   1E37 C6 08                add a,8
3487   1E39 CD D1 19             call MM_hl
3488   1E3C 36 50                ld (hl),'P'
3489   1E3E             UnMKEnp1:
3490   1E3E E1                   pop hl
3491   1E3F C9                   ret
3492   1E40                              
3493   1E40             ;END
3494   1E40                   
3495   1E40             ;BEGIN of ========== DEBUG tool
3496   1E40             
3497   1E40             ; Put call DEBUGs in ASM to see that I got here
3498   1E40                      
3499   1E40 44 45 42 55 debugstr: .byte "DEBUG!$", 0  ; outputs this when reaches
3499   1E44 47 21 24 00 
3500   1E48             
3501   1E48             DEBUGs:
3502   1E48             
3503   1E48 D5                   push de
3504   1E49 11 40 1E             ld de, debugstr
3505   1E4C CD 66 30             call PrintString
3506   1E4F D1                   pop de
3507   1E50 C9                   ret            
3508   1E51             
3509   1E51 44 45 42 55         .byte "DEBUGZ",0    ; put in code to find via debugger
3509   1E55 47 5A 00 
3510   1E58             ;END
3511   1E58             
3512   1E58             ;BEGIN of ========== KING CHECKMATE DETECTION
3513   1E58             ;;
3514   1E58             ; It verifies check+ moves of the list for possible movement.
3515   1E58             ; Makes it slower, anyway correct for complete notation.
3516   1E58             ; Sets bit-7 for checkmate moves.
3517   1E58             ;
3518   1E58             LookForCheckmates:
3519   1E58             
3520   1E58 3A F7 0A             ld a, (MateDetect)
3521   1E5B FE 00                cp 0
3522   1E5D 20 6F                jr nz, CKMEnd
3523   1E5F                              
3524   1E5F DD 21 92 04          ld ix, NEXT_MVCNT
3525   1E63 DD 46 00             ld b,(ix)
3526   1E66 DD 21 93 04          ld ix, NEXT_MOVES
3527   1E6A 78                   ld a, b
3528   1E6B FE 00                cp 0
3529   1E6D 28 5F                jr z,CKMEnd
3530   1E6F                      
3531   1E6F             CKMToLoop:
3532   1E6F DD 23                inc ix        ; piece
3533   1E71 DD 23                inc ix        ; from
3534   1E73 DD 23                inc ix        ; to
3535   1E75 DD 7E 00             ld a,(ix)     ; flags
3536   1E78 CB 77                bit 6,a
3537   1E7A 28 4E                jr z, CKMnoCheck
3538   1E7C DD 2B                dec ix
3539   1E7E DD 2B                dec ix
3540   1E80 DD 7E 00             ld a,(ix)
3541   1E83 32 F5 0A             ld (SQi),a
3542   1E86 DD 23                inc ix
3543   1E88 DD 7E 00             ld a,(ix)
3544   1E8B 32 F6 0A             ld (SQt),a
3545   1E8E DD 23                inc ix
3546   1E90 DD 7E 00             ld a,(ix)     ; flags
3547   1E93 CB 4F                bit 1,a       
3548   1E95 28 0C                jr z, CKMnoPromo
3549   1E97 DD 7E 00             ld a,(ix)     ; flags again       
3550   1E9A CB 3F                srl a
3551   1E9C CB 3F                srl a
3552   1E9E E6 03                and 3
3553   1EA0 3C                   inc a
3554   1EA1 18 02                jr CKMpcProm
3555   1EA3             CKMnoPromo:
3556   1EA3 3E 00                ld a,0
3557   1EA5             CKMpcProm:         
3558   1EA5 32 F8 10             ld (PromoPcId),a
3559   1EA8 CD 07 19             call MakeMove  ; make this move again
3560   1EAB                      
3561   1EAB 3E 01                ld a,1
3562   1EAD 32 F7 0A             ld (MateDetect),a            
3563   1EB0 CD F8 0A             call GenMoves  ; finds any legal move
3564   1EB3                      
3565   1EB3 CD DE 1C             call UnMakeMove  ; unmake
3566   1EB6                      
3567   1EB6 3A F7 0A             ld a,(MateDetect)
3568   1EB9 FE 02                cp 2           ; is there any?
3569   1EBB 28 08                jr z, CKMnoMate
3570   1EBD                      
3571   1EBD DD 7E 00             ld a,(ix)     ; flags again
3572   1EC0 CB FF                set 7,a       ; bit 7 - checkmate
3573   1EC2 DD 77 00             ld (ix),a     ; save flag   
3574   1EC5                      
3575   1EC5             CKMnoMate:
3576   1EC5 3E 00                ld a,0
3577   1EC7 32 F7 0A             ld (MateDetect),a
3578   1ECA                                                                                                                             
3579   1ECA             CKMnoCheck:
3580   1ECA DD 23                inc ix
3581   1ECC 10 A1                djnz CKMToLoop
3582   1ECE             
3583   1ECE             CKMEnd:                           
3584   1ECE C9                   ret
3585   1ECF                      
3586   1ECF             ;END 
3587   1ECF             
3588   1ECF             
3589   1ECF             
3590   1ECF                                
3591   1ECF             ;BEGIN of ========== COUNTER for large loop of 65536 maximum value
3592   1ECF             ;
3593   1ECF             ; just imitates 2byte integer in 8-bit registers
3594   1ECF             
3595   1ECF 00          Il:      .byte 0
3596   1ED0 00          Ih:      .byte 0
3597   1ED1             
3598   1ED1             
3599   1ED1 32 D0 1E    LD_Ix:   ld (Ih),a  ; sets a-reg x 256 value to counter
3600   1ED4 3E 00                ld a,0
3601   1ED6 32 CF 1E             ld (Il),a
3602   1ED9 C9                   ret
3603   1EDA             
3604   1EDA C5          DEC_I:   push bc
3605   1EDB 3A CF 1E             ld a,(Il)
3606   1EDE 4F                   ld c,a
3607   1EDF 3A D0 1E             ld a,(Ih)
3608   1EE2 47                   ld b,a
3609   1EE3 0B                   dec bc
3610   1EE4 79                   ld a,c
3611   1EE5 32 CF 1E             ld (Il),a
3612   1EE8 78                   ld a,b
3613   1EE9 32 D0 1E             ld (Ih),a
3614   1EEC 3E 00                ld a,0
3615   1EEE B8                   cp b
3616   1EEF 20 06                jr nz, IsNo0_I
3617   1EF1 B9                   cp c
3618   1EF2 20 03                jr nz, IsNo0_I
3619   1EF4 37                   scf       ; sets CF on empty counter
3620   1EF5 18 02                jr Is0ret
3621   1EF7 37          IsNo0_I: scf
3622   1EF8 3F                   ccf
3623   1EF9 C1          Is0ret:  pop bc
3624   1EFA C9                   ret
3625   1EFB             ;END
3626   1EFB             
3627   1EFB                   
3628   1EFB             ;        
3629   1EFB             ; INCLUDES        
3630   1EFB             ;        
3631   1EFB             
3632   1EFB                       #include "ChessUI.ASM"     ; USER interface and grahics
0001+  1EFB             ;=======================================
0002+  1EFB             ;
0003+  1EFB             ; Graphics part of chess program ChessY2K
0004+  1EFB             ;
0005+  1EFB             ;=======================================
0006+  1EFB             ;
0007+  1EFB             ; USER INTERFACE
0008+  1EFB             ; screen, vdp, keyboard controls
0009+  1EFB             ;
0010+  1EFB             ; Uses VRAM even too much for chess needs.
0011+  1EFB             ; Will be good for presentation recording.
0012+  1EFB             ;
0013+  1EFB             ;---------------------------------------
0014+  1EFB             
0015+  1EFB             ;
0016+  1EFB             ; Defines labels to access datas after loading.
0017+  1EFB             ; This was genereated by "export" operator of tasm
0018+  1EFB             ; in ChessPI.ASM
0019+  1EFB             ; REPLACE THESE AFTER EACH RECOMPILE OF CHESSPI
0020+  1EFB             
0021+  1EFB             dtBBB            .EQU  $8001
0022+  1EFB             dtBBW            .EQU  $8159
0023+  1EFB             dtBKB            .EQU  $82b1
0024+  1EFB             dtBKW            .EQU  $8409
0025+  1EFB             dtBNB            .EQU  $8561
0026+  1EFB             dtBNW            .EQU  $86b9
0027+  1EFB             dtBPB            .EQU  $8811
0028+  1EFB             dtBPW            .EQU  $8969
0029+  1EFB             dtBQB            .EQU  $8ac1
0030+  1EFB             dtBQW            .EQU  $8c19
0031+  1EFB             dtBRB            .EQU  $8d71
0032+  1EFB             dtBRW            .EQU  $8ec9
0033+  1EFB             dtWBB            .EQU  $9021
0034+  1EFB             dtWBW            .EQU  $9179
0035+  1EFB             dtWKB            .EQU  $92d1
0036+  1EFB             dtWKW            .EQU  $9429
0037+  1EFB             dtWNB            .EQU  $9581
0038+  1EFB             dtWNW            .EQU  $96d9
0039+  1EFB             dtWPB            .EQU  $9831
0040+  1EFB             dtWPW            .EQU  $9989
0041+  1EFB             dtWQB            .EQU  $9ae1
0042+  1EFB             dtWQW            .EQU  $9c39
0043+  1EFB             dtWRB            .EQU  $9d91
0044+  1EFB             dtWRW            .EQU  $9ee9
0045+  1EFB             dtSQB            .EQU  $a041
0046+  1EFB             dtSQW            .EQU  $a199
0047+  1EFB             dtFRDN           .EQU  $a2f1
0048+  1EFB             dtFRLF           .EQU  $a63f
0049+  1EFB             dtFRRT           .EQU  $a98d
0050+  1EFB             dtFRUP           .EQU  $acdb
0051+  1EFB             dtWhiteToMove    .EQU  $b029
0052+  1EFB             dtWhiteNotToMove .EQU  $b091
0053+  1EFB             dtBlackToMove    .EQU  $b0f9
0054+  1EFB             dtBlackNotToMove .EQU  $b161
0055+  1EFB             dtWP             .EQU  $b1c9
0056+  1EFB             dtBP             .EQU  $b321
0057+  1EFB             dtWN             .EQU  $b479
0058+  1EFB             dtBN             .EQU  $b5d1
0059+  1EFB             dtWB             .EQU  $b729
0060+  1EFB             dtBB             .EQU  $b881
0061+  1EFB             dtWR             .EQU  $b9d9
0062+  1EFB             dtBR             .EQU  $bb31
0063+  1EFB             dtWQ             .EQU  $bc89
0064+  1EFB             dtBQ             .EQU  $bde3
0065+  1EFB             dtWK             .EQU  $bf3b
0066+  1EFB             dtBK             .EQU  $c093
0067+  1EFB             dtMSXlogo        .EQU  $c1eb
0068+  1EFB             
0069+  1EFB             
0070+  1EFB 00          Stylo:    .byte 0   ; set as configuration flags:
0071+  1EFC                                 ; 0-bit to use cursor 
0072+  1EFC                                 ; 1-bit allow drag and move pieces
0073+  1EFC                                 ; 2-bit set up pieces mode
0074+  1EFC             
0075+  1EFC 0C          CursorSq: .byte 12         ; square of cursor, on init=E2
0076+  1EFD FF          DragSq:   .byte $ff        ; drag at square
0077+  1EFE 00          RplyMs:   .byte 0          ; position in MOVE_str for replayer
0078+  1EFF             
0079+  1EFF 00          Grph_Exit: .byte 0        ; 1 on ESC exit 
0080+  1F00             
0081+  1F00             PiecesIX:
0082+  1F00 9F A1 47 A0         .word dtSQW+6, dtSQB+6
0083+  1F04 8F 99 37 98         .word dtWPW+6, dtWPB+6, dtWNW+6, dtWNB+6, dtWBW+6, dtWBB+6
0083+  1F08 DF 96 87 95 
0083+  1F0C 7F 91 27 90 
0084+  1F10 EF 9E 97 9D         .word dtWRW+6, dtWRB+6, dtWQW+6, dtWQB+6, dtWKW+6, dtWKB+6
0084+  1F14 3F 9C E7 9A 
0084+  1F18 2F 94 D7 92 
0085+  1F1C 6F 89 17 88         .word dtBPW+6, dtBPB+6, dtBNW+6, dtBNB+6, dtBBW+6, dtBBB+6
0085+  1F20 BF 86 67 85 
0085+  1F24 5F 81 07 80 
0086+  1F28 CF 8E 77 8D         .word dtBRW+6, dtBRB+6, dtBQW+6, dtBQB+6, dtBKW+6, dtBKB+6         
0086+  1F2C 1F 8C C7 8A 
0086+  1F30 0F 84 B7 82 
0087+  1F34             
0088+  1F34             
0089+  1F34             
0090+  1F34             VRAMcopy:       ; for each piece, to know that was copied to VRAM
0091+  1F34 00 00 00 00         .word 0,0,0,0,0,0,0,0,0,0,0,0,0
0091+  1F38 00 00 00 00 
0091+  1F3C 00 00 00 00 
0091+  1F40 00 00 00 00 
0091+  1F44 00 00 00 00 
0091+  1F48 00 00 00 00 
0091+  1F4C 00 00 
0092+  1F4E             VRAMcpXY:       ; for each piece, holds HL (X,Y coord.)
0093+  1F4E 00 00 00 00         .word 0,0,0,0,0,0,0,0,0,0,0,0,0 
0093+  1F52 00 00 00 00 
0093+  1F56 00 00 00 00 
0093+  1F5A 00 00 00 00 
0093+  1F5E 00 00 00 00 
0093+  1F62 00 00 00 00 
0093+  1F66 00 00 
0094+  1F68 00 00 00 00         .word 0,0,0,0,0,0,0,0,0,0,0,0,0
0094+  1F6C 00 00 00 00 
0094+  1F70 00 00 00 00 
0094+  1F74 00 00 00 00 
0094+  1F78 00 00 00 00 
0094+  1F7C 00 00 00 00 
0094+  1F80 00 00 
0095+  1F82             
0096+  1F82 00          VRAMcirc: .byte 0 ; to know that sign copied to VRAM
0097+  1F83             
0098+  1F83                             ; the same for masks of black and white pieces
0099+  1F83                             ; Masks are used when piece is moving.
0100+  1F83                             ; Simple square redraw is used after animation is over.
0101+  1F83             PiecesMskIX:
0102+  1F83 CF B1 7F B4         .word dtWP+6, dtWN+6, dtWB+6, dtWR+6, dtWQ+6, dtWK+6
0102+  1F87 2F B7 DF B9 
0102+  1F8B 8F BC 41 BF 
0103+  1F8F 27 B3 D7 B5         .word dtBP+6, dtBN+6, dtBB+6, dtBR+6, dtBQ+6, dtBK+6
0103+  1F93 87 B8 37 BB 
0103+  1F97 E9 BD 99 C0 
0104+  1F9B 00 00 00 00 VRAMcpMsk:    .word 0,0,0,0,0,0
0104+  1F9F 00 00 00 00 
0104+  1FA3 00 00 00 00 
0105+  1FA7 00 00 00 00 VRAMcpMskXY:  .word 0,0,0,0,0,0,0,0,0,0,0,0  
0105+  1FAB 00 00 00 00 
0105+  1FAF 00 00 00 00 
0105+  1FB3 00 00 00 00 
0105+  1FB7 00 00 00 00 
0105+  1FBB 00 00 00 00 
0106+  1FBF             
0107+  1FBF 2F B0 67 B1 CircIX: .word dtWhiteToMove+6, dtBlackNotToMove+6, dtWhiteNotToMove+6, dtBlackToMove+6
0107+  1FC3 97 B0 FF B0 
0108+  1FC7                                                                                                                                                                                                                    
0109+  1FC7             GraphicsS:
0110+  1FC7                      
0111+  1FC7                      ; loads datas of graphics in memory from file
0112+  1FC7 CD 6D 2D             call ChessY2K_GraphDatas_load
0113+  1FCA                         
0114+  1FCA 3E 0C                ld a,12
0115+  1FCC 32 FC 1E             ld (CursorSq),a           ; cursor on E2
0116+  1FCF 3E FF                ld a,$ff
0117+  1FD1 32 FD 1E             ld (DragSq),a             ; no drag
0118+  1FD4 3E 00                ld a,0
0119+  1FD6 32 FF 1E             ld (Grph_Exit),a          ; starting...
0120+  1FD9 32 FE 1E             ld (RplyMs),a            ; set replayer position to 0  
0121+  1FDC                      
0122+  1FDC CD 4A 21             call ClearLastFEN         ; for setup position clear previous one
0123+  1FDF CD 97 2F             call SetScreen5By30h      ; set Screen 5 by using BIOS
0124+  1FE2 CD 9E 2F             call DisableScreenBy30h   ; do not display
0125+  1FE5 CD BD 30             call Copy_VdpRegs         ; save VDP regs
0126+  1FE8 CD 05 30             call VDPfaster            ; optimize VDP, sprites off
0127+  1FEB                      
0128+  1FEB 21 89 2D             ld hl, tbPalettes         ;
0129+  1FEE CD D1 2F             call SetPaletteByTable    ; defines 16colors
0130+  1FF1 CD 47 20             call SetGraphics0         ; most graphics inits
0131+  1FF4 CD BC 27             call PutMSXlogo           ; put MSX lable on screen
0132+  1FF7 CD 1C 29             call PutToMove            ; draws and saves rounded-sign which side to move
0133+  1FFA                                                ;  (and saves to VRAM too)
0134+  1FFA                         
0135+  1FFA                      ;1.draw just squares
0136+  1FFA CD F6 27             call PutFrame             ; puts frame for board
0137+  1FFD CD 15 21             call Draw0Board           ; just draw empty board without pieces
0138+  2000                      
0139+  2000                      ;2 create copy of pictures in VRAM      
0140+  2000 CD 05 21             call SetPMapFEN           ; sets special board for saving at XY in VRAM to know later
0141+  2003 CD 73 24             call DrawBoard            ; draws complete board with pieces and saves bitmaps
0142+  2006 CD 15 21             call Draw0Board           ; just draw empty board to overwrite glitches
0143+  2009 CD F6 27             call PutFrame             ; redraw frame - with no defects
0144+  200C             
0145+  200C                      ;3 set chess position to play from
0146+  200C CD 36 21             call SetFENbyMode         ; set position according mode
0147+  200F CD 73 24             call DrawBoard            ; now uses saved pieces
0148+  2012 CD 1C 29             call PutToMove            ; redraw using saved
0149+  2015                      
0150+  2015 3E 00                ld a,0
0151+  2017 CD FE 30             call SetPage              ; Page to display
0152+  201A CD A3 2F             call EnableScreenBy30h    ; display on
0153+  201D                      
0154+  201D CD 10 2A             call DrawCursor           ; Draws a rectangle of cursor on square
0155+  2020 CD F8 0A             call GenMoves             ; And generate first moves too.
0156+  2023                      
0157+  2023 CD 1B 30             call InkeyKeyBy30h      ; keypress detect
0158+  2026 32 80 2A             ld (PreKeyWas),a         ; saves last key
0159+  2029             
0160+  2029             LOOP_GRAPHICS:
0161+  2029 CD 1B 30             call InkeyKeyBy30h        ; keypress detect
0162+  202C FE 00                cp 0
0163+  202E 28 03                jr z, no_key_pressed
0164+  2030             
0165+  2030 CD 81 2A             call Cursor_Key_Controls  ; keyboard, cursor by arrow-keys
0166+  2033             no_key_pressed:
0167+  2033                             
0168+  2033 CD 21 23             call ANIMATION            ; process animations, if there should be
0169+  2036             
0170+  2036 3A FF 1E             ld a,(Grph_Exit)
0171+  2039 FE 00                cp 0                      ; Exit on ESC 
0172+  203B 28 EC                jr z,LOOP_GRAPHICS                                                                    
0173+  203D                                                         
0174+  203D CD EC 32             call RestoreColors
0175+  2040 CD D4 30             call Rest_VdpRegs         ; restore VDP regs
0176+  2043 CD 29 30             call SetScreen0By30h      ; set Screen 0
0177+  2046                      
0178+  2046 C9                   ret
0179+  2047                      
0180+  2047             ; set page 0, color 0, vdp for drawing
0181+  2047             
0182+  2047             SetGraphics0:
0183+  2047 F5                   push af
0184+  2048 E5                   push hl
0185+  2049                      
0186+  2049 3E 00                ld a,0
0187+  204B CD FC 2F             call SetBackgrColor       ; sets color by number
0188+  204E 3E 00                ld a,0
0189+  2050 CD FE 30             call SetPage              ; Page to display
0190+  2053                               
0191+  2053 3E 00                ld a,0
0192+  2055 21 00 00             ld hl,0
0193+  2058 CD 11 31             call Set_Vdp_Write        ; gona send to vdp
0194+  205B                      
0195+  205B E1                   pop hl
0196+  205C F1                   pop af
0197+  205D C9                   ret 
0198+  205E             
0199+  205E 38 2F 38 2F emptyFEN:    .byte "8/8/8/8/8/8/8/8 w - - 0 1",0
0199+  2062 38 2F 38 2F 
0199+  2066 38 2F 38 2F 
0199+  206A 38 2F 38 20 
0199+  206E 77 20 2D 20 
0199+  2072 2D 20 30 20 
0199+  2076 31 00 
0200+  2078 38 2F 50 50 piecemapFEN: .byte "8/PPpp4/NNnn4/BBbb4/RRrr4/QQqq4/KKkk4/8 w - - 0 1",0
0200+  207C 70 70 34 2F 
0200+  2080 4E 4E 6E 6E 
0200+  2084 34 2F 42 42 
0200+  2088 62 62 34 2F 
0200+  208C 52 52 72 72 
0200+  2090 34 2F 51 51 
0200+  2094 71 71 34 2F 
0200+  2098 4B 4B 6B 6B 
0200+  209C 34 2F 38 20 
0200+  20A0 77 20 2D 20 
0200+  20A4 2D 20 30 20 
0200+  20A8 31 00 
0201+  20AA 24          wasSetUpFEN: .byte "$"
0202+  20AB                          .ds 90
0203+  2105             
0204+  2105             SetPMapFEN:                        ; set special FEN for piece bitmaps
0205+  2105 F5                   push af
0206+  2106 DD E5                push ix
0207+  2108 3E 01                ld a,1
0208+  210A DD 21 78 20          ld ix, piecemapFEN
0209+  210E CD 98 12             call SetFEN
0210+  2111 DD E1                pop ix
0211+  2113 F1                   pop af
0212+  2114 C9                   ret
0213+  2115                     
0214+  2115             Draw0Board:                        ; draws an empty board without pieces 
0215+  2115 F5                   push af
0216+  2116 DD E5                push ix               
0217+  2118 CD 2C 21             call SetEmptyFEN         ; set empty board      
0218+  211B 3E 01                ld a,1
0219+  211D 32 89 24             ld (DrItFl),a
0220+  2120 CD 73 24             call DrawBoard            ; just draw empty board without pieces
0221+  2123 3E 00                ld a,0
0222+  2125 32 89 24             ld (DrItFl),a
0223+  2128 DD E1                pop ix
0224+  212A F1                   pop af 
0225+  212B C9                   ret
0226+  212C                      
0227+  212C             SetEmptyFEN:                 ; this sets an empty board position
0228+  212C 3E 01                ld a,1
0229+  212E DD 21 5E 20          ld ix, emptyFEN
0230+  2132 CD 98 12             call SetFEN         
0231+  2135 C9                   ret
0232+  2136                      
0233+  2136             SetFENbyMode:                ; sets position by mode
0234+  2136 F5                   push af 
0235+  2137 3A FB 1E             ld a,(Stylo)    
0236+  213A                               
0237+  213A CB 57                bit 2,a
0238+  213C 28 05                jr z, SetStartFEN
0239+  213E             
0240+  213E CD 2C 21             call SetEmptyFEN    ; set empty board
0241+  2141 18 05                jr SetFByMover
0242+  2143             
0243+  2143             SetStartFEN:         
0244+  2143 3E 00                ld a,0              ; set default position
0245+  2145 CD 98 12             call SetFEN
0246+  2148             SetFByMover:
0247+  2148 F1                   pop af
0248+  2149 C9                   ret
0249+  214A                      
0250+  214A             ClearLastFEN:
0251+  214A F5                   push af
0252+  214B D5                   push de
0253+  214C 11 AA 20             ld de,wasSetUpFEN
0254+  214F 3E 24                ld a,'$'
0255+  2151 12                   ld (de),a
0256+  2152 D1                   pop de
0257+  2153 F1                   pop af
0258+  2154 C9                   ret
0259+  2155             
0260+  2155                      
0261+  2155             ;-----------------------------------------------------
0262+  2155             ;
0263+  2155             ; Chess move by cursor and space
0264+  2155             ;
0265+  2155             ; Validates move, moves piece on board and screen.
0266+  2155             ; SQi - from square
0267+  2155             ; SQt - to square
0268+  2155             ; PromoPcId - id of piece to promote = 4-queen,3-rook,2-bishop,1-knight, 0-no promotion
0269+  2155             
0270+  2155             Chess_Move_Cursor:
0271+  2155 F5                   push af
0272+  2156 3A BB 22             ld a,(Move_sq_f)
0273+  2159 32 F5 0A             ld (SQi),a
0274+  215C 3A BC 22             ld a,(Move_sq_t)
0275+  215F 32 F6 0A             ld (SQt),a
0276+  2162 3E 00                ld a,0
0277+  2164 32 F8 10             ld (PromoPcId),a
0278+  2167 3E 00                ld a,0
0279+  2169 32 CE 22             ld (AnimUnMk),a
0280+  216C CD CF 22             call setAnimation        ; animate it and make move
0281+  216F             NotValidChMv:         
0282+  216F F1                   pop af
0283+  2170 C9                   ret
0284+  2171                      
0285+  2171             Chess_Move_Real:
0286+  2171 CD 07 19             call MakeMove            ; Goes when animation is over
0287+  2174 CD CF 21             call AfterChessMovement
0288+  2177 C9                   ret
0289+  2178             
0290+  2178             ;--------------------------------------------------------
0291+  2178             ;
0292+  2178             ; Undo chess animated chess move
0293+  2178             ;
0294+  2178             Chess_UnMake_Move_U:
0295+  2178 F5                   push af
0296+  2179 C5                   push bc
0297+  217A D5                   push de
0298+  217B E5                   push hl
0299+  217C                                                                                                            
0300+  217C 21 73 06             ld hl, MOVE_CNT
0301+  217F 4E                   ld c,(hl)
0302+  2180 21 74 06             ld hl, MOVE_HIST
0303+  2183 79                   ld a, c
0304+  2184 FE 00                cp 0
0305+  2186 28 3B                jr z, Unmake_end_action
0306+  2188 06 00                ld b,0
0307+  218A             
0308+  218A 0D                   dec c
0309+  218B 09                   add hl,bc
0310+  218C 09                   add hl,bc
0311+  218D 09                   add hl,bc
0312+  218E 09                   add hl,bc
0313+  218F                      
0314+  218F 7E                   ld a,(hl)        ; from
0315+  2190 32 BC 22             ld (Move_sq_t),a ; move backward animation
0316+  2193 57                   ld d,a
0317+  2194 23                   inc hl
0318+  2195 7E                   ld a,(hl)        ; to    
0319+  2196 32 BB 22             ld (Move_sq_f),a
0320+  2199 5F                   ld e,a
0321+  219A 23                   inc hl
0322+  219B 7E                   ld a,(hl)        ; flags
0323+  219C                      
0324+  219C 0E 00                ld c,0         
0325+  219E CB 6F                bit 5,a      ; if en-passant capture
0326+  21A0 28 09                jr z,NoEnPassUnmakeMove
0327+  21A2                      
0328+  21A2 7B                   ld a,e
0329+  21A3 E6 07                and 7
0330+  21A5 4F                   ld c,a          ;X of en-passant square
0331+  21A6 7A                   ld a,d
0332+  21A7 E6 F8                and %11111000   ;Y of en-passant square
0333+  21A9 B1                   or c
0334+  21AA 4F                   ld c,a
0335+  21AB             NoEnPassUnmakeMove:
0336+  21AB 79                   ld a,c
0337+  21AC 32 C9 22             ld (Move_Enp),a ; save en-p.square for animation    
0338+  21AF                                        
0339+  21AF 7E                   ld a, (hl)   ; flags                
0340+  21B0 CB 67                bit 4,a      ; if castling
0341+  21B2 28 07                jr z,UnmakeNoCastling
0342+  21B4                      
0343+  21B4 0E 01                ld c,1
0344+  21B6 EB                   ex de,hl
0345+  21B7 CD 79 22             call SetCastlesForLater
0346+  21BA EB                   ex de,hl             
0347+  21BB                               
0348+  21BB             UnmakeNoCastling:
0349+  21BB 3E 01                ld a,1
0350+  21BD 32 CE 22             ld (AnimUnMk),a
0351+  21C0 CD CF 22             call setAnimation        ; animate it and unmake move
0352+  21C3                      
0353+  21C3             Unmake_end_action:
0354+  21C3 E1                   pop hl
0355+  21C4 D1                   pop de
0356+  21C5 C1                   pop bc
0357+  21C6 F1                   pop af
0358+  21C7 C9                   ret
0359+  21C8             
0360+  21C8             ; Does actual unmake on chess board
0361+  21C8             Chess_Unmake_Move_Real:
0362+  21C8 CD DE 1C             call UnMakeMove            ; Goes when animation is over
0363+  21CB CD CF 21             call AfterChessMovement
0364+  21CE C9                   ret                                                                       
0365+  21CF             
0366+  21CF             ;
0367+  21CF             ; Action right after chess make/unmake move
0368+  21CF             ; Redraws 2 squares after movement
0369+  21CF             ; Regenerates next moves
0370+  21CF             ;
0371+  21CF             AfterChessMovement:
0372+  21CF F5                   push af
0373+  21D0 C5                   push bc
0374+  21D1 3A BB 22             ld a,(Move_sq_f)
0375+  21D4 4F                   ld c,a             
0376+  21D5 CD 8A 24             call DrawSquare
0377+  21D8 3A BC 22             ld a,(Move_sq_t)
0378+  21DB 4F                   ld c,a             
0379+  21DC CD 8A 24             call DrawSquare
0380+  21DF CD 10 2A             call DrawCursor
0381+  21E2 C1                   pop bc
0382+  21E3 F1                   pop af
0383+  21E4 CD F8 0A             call GenMoves  ; And generate next moves too
0384+  21E7 CD 1C 29             call PutToMove ; redraws which side to move
0385+  21EA C9                   ret
0386+  21EB                      
0387+  21EB             ;--------------------------------------------------------
0388+  21EB             ;
0389+  21EB             ; Drag and move validation
0390+  21EB             ; Parameter: reg-a  0 - for drag, 1 - for move
0391+  21EB             ;
0392+  21EB             IsValidDragMove:
0393+  21EB             
0394+  21EB C5                   push bc
0395+  21EC D5                   push de
0396+  21ED E5                   push hl
0397+  21EE DD E5                push ix
0398+  21F0                      
0399+  21F0 57                   ld d,a   ;save usage
0400+  21F1 1E 00                ld e,0   ; flag that found
0401+  21F3                                                                                   
0402+  21F3 DD 21 92 04          ld ix, NEXT_MVCNT
0403+  21F7 DD 46 00             ld b,(ix)
0404+  21FA DD 21 93 04          ld ix, NEXT_MOVES
0405+  21FE 78                   ld a, b
0406+  21FF FE 00                cp 0
0407+  2201 28 6F                jr z, ValidLookExit
0408+  2203             
0409+  2203 3A FD 1E             ld a,(DragSq)
0410+  2206 67                   ld h,a
0411+  2207 3A FC 1E             ld a,(CursorSq)
0412+  220A 6F                   ld l,a
0413+  220B             
0414+  220B             isValidLoop:
0415+  220B             
0416+  220B DD 7E 00             ld a, (ix)   ; notated piece
0417+  220E DD 23                inc ix
0418+  2210 DD 7E 00             ld a, (ix)   ; from square
0419+  2213 32 F5 0A             ld (SQi),a        
0420+  2216 DD 23                inc ix               
0421+  2218 DD 7E 00             ld a, (ix)   ; to square
0422+  221B 32 F6 0A             ld (SQt),a
0423+  221E DD 23                inc ix   
0424+  2220 DD 7E 00             ld a, (ix)   ; flags and promoted piece
0425+  2223 0E 00                ld c,0
0426+  2225 CB 4F                bit 1,a      ; if promotion
0427+  2227 28 02                jr z,ValidNoPromo
0428+  2229 0E 04                ld c,4       ; then queen
0429+  222B             ValidNoPromo:
0430+  222B 79                   ld a,c
0431+  222C 32 F8 10             ld (PromoPcId),a
0432+  222F                             
0433+  222F 7A                   ld a,d
0434+  2230 FE 00                cp 0
0435+  2232 28 30                jr z,isValidDrag
0436+  2234                      
0437+  2234 3A F5 0A             ld a,(SQi)      ; verify movement
0438+  2237 BC                   cp h
0439+  2238 20 34                jr nz, ValidNotThisMove
0440+  223A                              
0441+  223A 3A F6 0A             ld a,(SQt)
0442+  223D BD                   cp l
0443+  223E 20 2E                jr nz, ValidNotThisMove
0444+  2240             
0445+  2240 DD 7E 00             ld a, (ix)   ; flags                
0446+  2243 0E 00                ld c,0         
0447+  2245 CB 6F                bit 5,a      ; if en-passant capture
0448+  2247 28 09                jr z,ValidNoEnPassMove
0449+  2249                      
0450+  2249 7D                   ld a,l
0451+  224A E6 07                and 7
0452+  224C 4F                   ld c,a          ;X of en-passant square
0453+  224D 7C                   ld a,h
0454+  224E E6 F8                and %11111000   ;Y of en-passant square
0455+  2250 B1                   or c 
0456+  2251 4F                   ld c,a
0457+  2252             ValidNoEnPassMove:
0458+  2252 79                   ld a,c
0459+  2253 32 C9 22             ld (Move_Enp),a ; save en-p.square for animation    
0460+  2256                                        
0461+  2256 DD 7E 00             ld a, (ix)   ; flags                
0462+  2259 CB 67                bit 4,a      ; if castling
0463+  225B 28 05                jr z,ValidNoCastling
0464+  225D                      
0465+  225D 0E 00                ld c,0
0466+  225F CD 79 22             call SetCastlesForLater
0467+  2262                               
0468+  2262             ValidNoCastling:
0469+  2262 18 06                jr ValidIsThis
0470+  2264                      
0471+  2264             isValidDrag:             ; verify drag
0472+  2264 3A F5 0A             ld a,(SQi)
0473+  2267 BD                   cp l
0474+  2268 20 04                jr nz, ValidNotThisMove
0475+  226A                      
0476+  226A             ValidIsThis:       ; ok, this move        
0477+  226A 1E 01                ld e,1
0478+  226C 18 04                jr ValidLookExit
0479+  226E                      
0480+  226E             ValidNotThisMove:
0481+  226E DD 23                inc ix        
0482+  2270 10 99                djnz isValidLoop
0483+  2272                               
0484+  2272             ValidLookExit:
0485+  2272 7B                   ld a,e
0486+  2273 DD E1                pop ix
0487+  2275 E1                   pop hl
0488+  2276 D1                   pop de
0489+  2277 C1                   pop bc
0490+  2278 C9                   ret
0491+  2279             
0492+  2279             ; save castling rook info for animation later
0493+  2279             ; set before reg-c  = 0 for makemove, 1 for unmake move               
0494+  2279             SetCastlesForLater:
0495+  2279 7D                   ld a,l       ; square to
0496+  227A FE 06                cp 6
0497+  227C 28 0E                jr z,thisValidE1G1 ; e1g1
0498+  227E FE 02                cp 2
0499+  2280 28 0F                jr z,thisValidE1C1 ; e1c1
0500+  2282 FE 3E                cp 62
0501+  2284 28 10                jr z,thisValidE8G8 ; e8g8
0502+  2286 FE 3A                cp 58
0503+  2288 28 11                jr z,thisValidE8C8 ; e8c8
0504+  228A 18 2E                jr ValidCstlNot
0505+  228C             thisValidE1G1:
0506+  228C 21 07 05             ld hl,$0507      ; h1f1
0507+  228F 18 0D                jr ValidSetCastles         
0508+  2291             thisValidE1C1:
0509+  2291 21 00 03             ld hl,$0300      ; a1c1
0510+  2294 18 08                jr ValidSetCastles         
0511+  2296             thisValidE8G8:
0512+  2296 21 3F 3D             ld hl,$3D3F      ; h8f8
0513+  2299 18 03                jr ValidSetCastles         
0514+  229B             thisValidE8C8:
0515+  229B 21 38 3B             ld hl,$3B38      ; a8c8
0516+  229E             ValidSetCastles:
0517+  229E 79                   ld a,c
0518+  229F FE 00                cp 0
0519+  22A1 20 0A                jr nz, unMakeCastlesCase
0520+  22A3 7D                   ld a,l
0521+  22A4 32 CB 22             ld (MvC_sq_f2),a
0522+  22A7 7C                   ld a,h
0523+  22A8 32 CC 22             ld (MvC_sq_t2),a
0524+  22AB 18 08                jr ValidSaveCstl
0525+  22AD             unMakeCastlesCase:
0526+  22AD 7C                   ld a,h
0527+  22AE 32 CB 22             ld (MvC_sq_f2),a
0528+  22B1 7D                   ld a,l
0529+  22B2 32 CC 22             ld (MvC_sq_t2),a
0530+  22B5             ValidSaveCstl:         
0531+  22B5 3E 01                ld a,1
0532+  22B7 32 CA 22             ld (Move_Cstl),a ; save for animation    
0533+  22BA             ValidCstlNot:
0534+  22BA C9                   ret
0535+  22BB                      
0536+  22BB             ;----------------------------------------------------|
0537+  22BB             ;
0538+  22BB             ;  This draws moving piece.
0539+  22BB             ;  Should be on timer interrupt.
0540+  22BB             ;  Anyway doesnt matter on emulators.  
0541+  22BB             ;  Uses lots of VRAM (video memory), just because
0542+  22BB             ;  it is best MSX has and can manage fast.
0543+  22BB             ;
0544+  22BB             
0545+  22BB 00          Move_sq_f: .byte 0   ; from square
0546+  22BC 00          Move_sq_t: .byte 0   ; to square
0547+  22BD 00          Move_X_f:  .byte 0   ; from X on screen
0548+  22BE 00          Move_Y_f:  .byte 0   ; Y
0549+  22BF 00          Move_X_t:  .byte 0   ; to X
0550+  22C0 00          Move_Y_t:  .byte 0   ; to Y
0551+  22C1 00          Move_X:    .byte 0   ; current X 
0552+  22C2 00          Move_Y:    .byte 0   ; current Y
0553+  22C3 00          Move_DX:   .byte 0   ; dx in dots (kinda y=a*x+c in asm)
0554+  22C4 00          Move_DXn:  .byte 0   ; to 0-right, 1-left
0555+  22C5 00          Move_DY:   .byte 0   ; dy in dots
0556+  22C6 00          Move_DYn:  .byte 0   ; to 0-down, 1-up
0557+  22C7             
0558+  22C7 00          MovePc_f:  .byte 0   ; holds piece on square from (as we remove while animating)
0559+  22C8 00          MovePc_t:  .byte 0   ; holds piece on square to
0560+  22C9             
0561+  22C9 00          Move_Enp:  .byte 0   ; square if en-passant capturing
0562+  22CA             
0563+  22CA 00          Move_Cstl: .byte 0   ; 1 if castling king (to start for rook after)
0564+  22CB 00          MvC_sq_f2: .byte 0   ; for rook movement squares from->to
0565+  22CC 00          MvC_sq_t2: .byte 0   ;
0566+  22CD 00          AnimI:     .byte 0   ; counter 0..25
0567+  22CE 00          AnimUnMk:  .byte 0   ; 1 if UnMake case
0568+  22CF             
0569+  22CF             setAnimation:           ; provide square numbers
0570+  22CF F5                       push af
0571+  22D0 C5                       push bc
0572+  22D1 D5                       push de
0573+  22D2 E5                       push hl
0574+  22D3                          
0575+  22D3 A8                       xor b    ; b=0
0576+  22D4 3A BB 22                 ld a,(Move_sq_f)            
0577+  22D7 CD 9F 23                 call ObtainHLboardBySq
0578+  22DA 56                       ld d,(hl)
0579+  22DB 70                       ld (hl),b
0580+  22DC 4F                       ld c,a
0581+  22DD CD 8A 24                 call DrawSquare          ; now empty while moving
0582+  22E0 CD C7 26                 call GetHLbySquare       ; set X,Y
0583+  22E3 7A                       ld a,d
0584+  22E4 32 C7 22                 ld (MovePc_f),a
0585+  22E7 7C                       ld a,h
0586+  22E8 32 BD 22                 ld (Move_X_f),a          ; from
0587+  22EB 32 C1 22                 ld (Move_X),a            ; now X
0588+  22EE 7D                       ld a,l
0589+  22EF 32 BE 22                 ld (Move_Y_f),a
0590+  22F2 32 C2 22                 ld (Move_Y),a            ; now Y
0591+  22F5                          
0592+  22F5 A8                       xor b
0593+  22F6 3A BC 22                 ld a,(Move_sq_t)
0594+  22F9 CD 9F 23                 call ObtainHLboardBySq
0595+  22FC 56                       ld d,(hl)
0596+  22FD 70                       ld (hl),b
0597+  22FE 4F                       ld c,a
0598+  22FF CD 8A 24                 call DrawSquare          ; now empty while moving                         
0599+  2302 CD C7 26                 call GetHLbySquare       ; set X,Y
0600+  2305 7A                       ld a,d
0601+  2306 32 C8 22                 ld (MovePc_t),a
0602+  2309 7C                       ld a,h
0603+  230A 32 BF 22                 ld (Move_X_t),a          ; to
0604+  230D 7D                       ld a,l
0605+  230E 32 C0 22                 ld (Move_Y_t),a
0606+  2311                          
0607+  2311 3E 19                    ld a,25                  ;25ticks
0608+  2313 32 CD 22                 ld (AnimI),a             ;counter
0609+  2316                          
0610+  2316 CD AB 23                 call AnimGetDXDY         ; calculate dx,dy
0611+  2319                                      
0612+  2319 CD 24 25                 call Save26squaresVRAM   ; saving path of piece to draw without defects
0613+  231C                          
0614+  231C E1                       pop hl
0615+  231D D1                       pop de
0616+  231E C1                       pop bc
0617+  231F F1                       pop af
0618+  2320 C9                       ret            
0619+  2321             
0620+  2321             ANIMATION:
0621+  2321 F5                       push af
0622+  2322 3A CD 22                 ld a,(AnimI)
0623+  2325 FE 00                    cp 0
0624+  2327 28 74                    jr z, AnimNONE ;if No animation
0625+  2329                          
0626+  2329 C5                       push bc
0627+  232A D5                       push de
0628+  232B E5                       push hl
0629+  232C                          
0630+  232C CD 92 25                 call RestoreIsquareFromVRAM ;prepares and draws animation square
0631+  232F CD 3C 24                 call GetNewAnimXY ; next X,Y
0632+  2332                                       
0633+  2332 3A CD 22                 ld a,(AnimI)
0634+  2335 3D                       dec a
0635+  2336 32 CD 22                 ld (AnimI),a
0636+  2339 FE 00                    cp 0
0637+  233B 20 5D                    jr nz, AnimTickOver  ;On counter=0 animation is over
0638+  233D                          
0639+  233D CD 92 25                 call RestoreIsquareFromVRAM ;restore last
0640+  2340                          
0641+  2340 3A C7 22                 ld a,(MovePc_f)
0642+  2343 4F                       ld c,a
0643+  2344 3A BB 22                 ld a,(Move_sq_f)
0644+  2347 CD 9F 23                 call ObtainHLboardBySq
0645+  234A 71                       ld (hl),c
0646+  234B                          
0647+  234B 3A C8 22                 ld a,(MovePc_t)
0648+  234E 4F                       ld c,a
0649+  234F 3A BC 22                 ld a,(Move_sq_t)
0650+  2352 CD 9F 23                 call ObtainHLboardBySq
0651+  2355 71                       ld (hl),c
0652+  2356             
0653+  2356 3A CA 22                 ld a,(Move_Cstl)
0654+  2359                          
0655+  2359 FE 02                    cp 2
0656+  235B 28 0C                    jr z,wasCastleAnim
0657+  235D                                      
0658+  235D 3A CE 22                 ld a,(AnimUnMk)
0659+  2360 FE 00                    cp 0
0660+  2362 20 0C                    jr nz,AnimUnMakeCase
0661+  2364                                                                 
0662+  2364 CD 71 21                 call Chess_Move_Real          ; does actual chess movements
0663+  2367 18 0A                    jr Anim_enp_too
0664+  2369                          
0665+  2369             wasCastleAnim:
0666+  2369 3E 00                    ld a,0
0667+  236B 32 CA 22                 ld (Move_Cstl),a              ; after castling rook has made its move
0668+  236E 18 2A                    jr AnimTickOver
0669+  2370             AnimUnMakeCase:
0670+  2370 CD C8 21                 call Chess_Unmake_Move_Real   ; does actual chess undo movements
0671+  2373             Anim_enp_too:          
0672+  2373 3A C9 22                 ld a,(Move_Enp)
0673+  2376 FE 00                    cp 0
0674+  2378 28 06                    jr z,AnimNoEnpRedraw
0675+  237A C5                       push bc
0676+  237B 4F                       ld c,a
0677+  237C CD 8A 24                 call DrawSquare      ; remove en-passant piece visually
0678+  237F C1                       pop bc             
0679+  2380             AnimNoEnpRedraw:
0680+  2380             
0681+  2380             setCastleAnim:
0682+  2380 3A CA 22                 ld a,(Move_Cstl)
0683+  2383 FE 00                    cp 0
0684+  2385 28 13                    jr z,AnimTickOver
0685+  2387 3C                       inc a            
0686+  2388 32 CA 22                 ld (Move_Cstl),a
0687+  238B 3A CB 22                 ld a,(MvC_sq_f2)
0688+  238E 32 BB 22                 ld (Move_sq_f),a
0689+  2391 3A CC 22                 ld a,(MvC_sq_t2)
0690+  2394 32 BC 22                 ld (Move_sq_t),a
0691+  2397 CD CF 22                 call setAnimation  ; set new animation for rook now
0692+  239A                          
0693+  239A                     
0694+  239A             AnimTickOver:
0695+  239A E1                       pop hl             
0696+  239B D1                       pop de
0697+  239C C1                       pop bc
0698+  239D F1          AnimNONE:    pop af
0699+  239E C9                       ret                              
0700+  239F                          
0701+  239F             ;---------------------------------------------
0702+  239F             ;determine HL by square number in a-reg
0703+  239F             ObtainHLboardBySq:           
0704+  239F F5                       push af
0705+  23A0 C5                       push bc
0706+  23A1 21 40 01                 ld hl,BOARD
0707+  23A4 4F                       ld c,a
0708+  23A5 06 00                    ld b,0
0709+  23A7 09                       add hl,bc
0710+  23A8 C1                       pop bc
0711+  23A9 F1                       pop af
0712+  23AA C9                       ret
0713+  23AB                          
0714+  23AB             ;---------------------------------------------
0715+  23AB             ; determine DX,DY step for animated piece                                                                     
0716+  23AB             AnimGetDXDY:
0717+  23AB             
0718+  23AB 3A BD 22                 ld a,(Move_X_f)
0719+  23AE 47                       ld b,a             
0720+  23AF 3A BF 22                 ld a,(Move_X_t)
0721+  23B2 B8                       cp b
0722+  23B3 28 2E                    jr z,AnimDX0
0723+  23B5 38 16                    jr c,decAnimDX ;if toX<fromX
0724+  23B7                                                                             
0725+  23B7 3A BB 22                 ld a,(Move_sq_f)
0726+  23BA E6 07                    and 7
0727+  23BC 4F                       ld c,a
0728+  23BD 3A BC 22                 ld a,(Move_sq_t)
0729+  23C0 E6 07                    and 7
0730+  23C2 91                       sub c            ; a = dx
0731+  23C3 32 C3 22                 ld (Move_DX),a
0732+  23C6 3E 00                    ld a,0
0733+  23C8 32 C4 22                 ld (Move_DXn),a
0734+  23CB 18 1E                    jr AnimGetDY
0735+  23CD             decAnimDX:               
0736+  23CD 3A BC 22                 ld a,(Move_sq_t)
0737+  23D0 E6 07                    and 7
0738+  23D2 4F                       ld c,a
0739+  23D3 3A BB 22                 ld a,(Move_sq_f)
0740+  23D6 E6 07                    and 7
0741+  23D8 91                       sub c            ; a = -dx
0742+  23D9 32 C3 22                 ld (Move_DX),a
0743+  23DC 3E 01                    ld a,1
0744+  23DE 32 C4 22                 ld (Move_DXn),a
0745+  23E1 18 08                    jr AnimGetDY           
0746+  23E3             AnimDX0:
0747+  23E3 3E 00                    ld a,0
0748+  23E5 32 C3 22                 ld (Move_DX),a
0749+  23E8 32 C4 22                 ld (Move_DXn),a
0750+  23EB             AnimGetDY:             
0751+  23EB 3A BE 22                 ld a,(Move_Y_f)
0752+  23EE 47                       ld b,a             
0753+  23EF 3A C0 22                 ld a,(Move_Y_t)
0754+  23F2 B8                       cp b
0755+  23F3 28 3E                    jr z,AnimDY0
0756+  23F5 38 1E                    jr c,decAnimDY ;if toY<fromY
0757+  23F7                          
0758+  23F7 3A BB 22                 ld a,(Move_sq_f)
0759+  23FA CB 3F                    srl a
0760+  23FC CB 3F                    srl a
0761+  23FE CB 3F                    srl a
0762+  2400 4F                       ld c,a
0763+  2401 3A BC 22                 ld a,(Move_sq_t)
0764+  2404 CB 3F                    srl a
0765+  2406 CB 3F                    srl a
0766+  2408 CB 3F                    srl a
0767+  240A 91                       sub c            ; a = -dy
0768+  240B 32 C5 22                 ld (Move_DY),a
0769+  240E 3E 01                    ld a,1
0770+  2410 32 C6 22                 ld (Move_DYn),a
0771+  2413 18 26                    jr AnimGetDXover            
0772+  2415                          
0773+  2415             decAnimDY:
0774+  2415 3A BC 22                 ld a,(Move_sq_t)
0775+  2418 CB 3F                    srl a
0776+  241A CB 3F                    srl a
0777+  241C CB 3F                    srl a
0778+  241E 4F                       ld c,a
0779+  241F 3A BB 22                 ld a,(Move_sq_f)
0780+  2422 CB 3F                    srl a
0781+  2424 CB 3F                    srl a
0782+  2426 CB 3F                    srl a
0783+  2428 91                       sub c            ; a = dy
0784+  2429 32 C5 22                 ld (Move_DY),a
0785+  242C 3E 00                    ld a,0
0786+  242E 32 C6 22                 ld (Move_DYn),a
0787+  2431 18 08                    jr AnimGetDXover
0788+  2433             AnimDY0:
0789+  2433 3E 00                    ld a,0
0790+  2435 32 C5 22                 ld (Move_DY),a
0791+  2438 32 C6 22                 ld (Move_DYn),a
0792+  243B                          
0793+  243B             AnimGetDXover:
0794+  243B C9                       ret
0795+  243C             
0796+  243C             
0797+  243C             ;---------------------------------------------
0798+  243C             ;
0799+  243C             ; Sets new X,Y on animation tick
0800+  243C             ;
0801+  243C             GetNewAnimXY:
0802+  243C F5                       push af
0803+  243D C5                       push bc
0804+  243E D5                       push de
0805+  243F                          
0806+  243F 3A C1 22                 ld a,(Move_X)
0807+  2442 57                       ld d,a
0808+  2443 3A C2 22                 ld a,(Move_Y)
0809+  2446 5F                       ld e,a
0810+  2447                                           ; determine new X
0811+  2447 3A C3 22                 ld a,(Move_DX)
0812+  244A 47                       ld b,a           ; save dx
0813+  244B 3A C4 22                 ld a,(Move_DXn)
0814+  244E FE 01                    cp 1
0815+  2450 28 04                    jr z,decAnimXmv
0816+  2452 7A                       ld a,d
0817+  2453 80                       add a,b          ; new X=X+dx
0818+  2454 18 02                    jr newXforAnim
0819+  2456             decAnimXmv:               
0820+  2456 7A                       ld a,d
0821+  2457 90                       sub b            ; new X=X-dx            
0822+  2458             newXforAnim:             
0823+  2458 32 C1 22                 ld (Move_X),a
0824+  245B                                           ; determine new Y
0825+  245B                                           
0826+  245B 3A C5 22                 ld a,(Move_DY)
0827+  245E 47                       ld b,a           ; save dy
0828+  245F 3A C6 22                 ld a,(Move_DYn)
0829+  2462 FE 01                    cp 1
0830+  2464 28 04                    jr z,decAnimYmv
0831+  2466 7B                       ld a,e
0832+  2467 80                       add a,b          ; new Y=Y+dy
0833+  2468 18 02                    jr newYforAnim                              
0834+  246A             decAnimYmv:               
0835+  246A 7B                       ld a,e
0836+  246B 90                       sub b            ; new Y=Y-dy 
0837+  246C             newYforAnim:
0838+  246C 32 C2 22                 ld (Move_Y),a
0839+  246F D1                       pop de
0840+  2470 C1                       pop bc
0841+  2471 F1                       pop af
0842+  2472 C9                       ret
0843+  2473                         
0844+  2473             ;----------------------------------------------------|
0845+  2473             ;
0846+  2473             ;  Draws board on screen.
0847+  2473             ;  
0848+  2473             ;
0849+  2473             DrawBoard:
0850+  2473 F5                   push af
0851+  2474 C5                   push bc
0852+  2475 CD DF 14             call SetSqScan          ; draw order A8,...,H8,A7...,A1,...,H1
0853+  2478 06 40                ld b,64
0854+  247A             DrawBoScan:
0855+  247A CD E8 14             call ScanSqNxt
0856+  247D CD 0E 15             call GetScanSQ
0857+  2480 4F                   ld c,a                  ; current square
0858+  2481 CD 8A 24             call DrawSquare
0859+  2484 10 F4                djnz DrawBoScan        ; scan all squares
0860+  2486 C1                   pop bc
0861+  2487 F1                   pop af
0862+  2488 C9                   ret
0863+  2489             
0864+  2489             ;
0865+  2489             ;  Draws piece or just empty square by 
0866+  2489             ;       square in C-reg [0..63]
0867+  2489             ;
0868+  2489 00          DrItFl: .byte 0     ;should draw anyway flag
0869+  248A             
0870+  248A             DrawSquare:
0871+  248A F5                   push af
0872+  248B C5                   push bc
0873+  248C D5                   push de
0874+  248D E5                   push hl
0875+  248E DD E5                push ix
0876+  2490 06 00                ld b,0
0877+  2492 21 40 01             ld hl,BOARD
0878+  2495 09                   add hl,bc
0879+  2496 7E                   ld a,(hl)
0880+  2497 FE 00                cp 0
0881+  2499 20 02                jr nz, notE0_
0882+  249B 3E 20                ld a,' '
0883+  249D CD C7 26    notE0_:  call GetHLbySquare       ; set X,Y
0884+  24A0 CD F4 26             call GetWhiteSqFlagInE   ; and determine E flag     
0885+  24A3 CD 06 27             call GetPieceIdx    ; convert to index from pn..QK
0886+  24A6 4F                   ld c,a              ; c=index
0887+  24A7 EB                   ex de,hl            ; de = hl
0888+  24A8                              
0889+  24A8 3A 89 24             ld a,(DrItFl)
0890+  24AB FE 01                cp 1
0891+  24AD 28 0B                jr z,pc2VRAM1       ; should draw anyway     
0892+  24AF                      
0893+  24AF 21 34 1F             ld hl,VRAMcopy
0894+  24B2 06 00                ld b,0
0895+  24B4 09                   add hl,bc         
0896+  24B5 7E                   ld a,(hl)       
0897+  24B6 FE 01                cp 1
0898+  24B8 28 28                jr z,pc2VRAM2       ; if saved before, just copy
0899+  24BA                                          ; else create bitmap
0900+  24BA             pc2VRAM1:                                       
0901+  24BA                      ;DRAW and SAVE a copy                
0902+  24BA 3E 01                ld a,1
0903+  24BC 77                   ld (hl),a           ; bitmap saved flag
0904+  24BD EB                   ex de,hl            ; hl = X,Y
0905+  24BE 79                   ld a,c              ; index of piece or square
0906+  24BF CD 2C 27             call GetPieceIX     ; get ix-address
0907+  24C2 11 1A 1A             ld de,$1A1A         ;26x26
0908+  24C5 CD 47 31             call HMMC           ;copy RAM -> VRAM
0909+  24C8                      
0910+  24C8 CD 62 27             call SaveMaskToo    ; save MASK on first init
0911+  24CB                      
0912+  24CB 3A 89 24             ld a,(DrItFl)
0913+  24CE FE 01                cp 1
0914+  24D0 28 4B                jr z,overDrawSqPc   ; if draws empty board 
0915+  24D2                      
0916+  24D2 EB                   ex de,hl            ; de = hl
0917+  24D3                      
0918+  24D3 21 4E 1F             ld hl,VRAMcpXY      ; save X,Y for piece index
0919+  24D6 06 00                ld b,0
0920+  24D8 09                   add hl,bc
0921+  24D9 09                   add hl,bc         
0922+  24DA 72                   ld (hl),d           ;save X
0923+  24DB 23                   inc hl
0924+  24DC 73                   ld (hl),e           ;save Y
0925+  24DD                      
0926+  24DD CD 95 26             call COPY2VRAMoutside
0927+  24E0                       
0928+  24E0 18 3B                jr overDrawSqPc
0929+  24E2                          
0930+  24E2             pc2VRAM2:         
0931+  24E2                      ;COPY piece back to square
0932+  24E2                      
0933+  24E2 21 4E 1F             ld hl,VRAMcpXY      ; get X,Y by piece index
0934+  24E5 06 00                ld b,0
0935+  24E7 09                   add hl,bc
0936+  24E8 09                   add hl,bc         
0937+  24E9 7E                   ld a,(hl)           ;saved X
0938+  24EA 32 5C 33             ld (HC_p+0),a       ;X
0939+  24ED 23                   inc hl
0940+  24EE 7E                   ld a,(hl)           ;saved Y
0941+  24EF 32 5E 33             ld (HC_p+2),a       ;Y
0942+  24F2             
0943+  24F2 7A                   ld a,d
0944+  24F3 32 60 33             ld (HC_p+4),a       ;to X   
0945+  24F6 7B                   ld a,e
0946+  24F7 32 62 33             ld (HC_p+6),a       ;to Y
0947+  24FA 3E 19                ld a,$19
0948+  24FC 32 64 33             ld (HC_p+8),a       ;25
0949+  24FF 32 66 33             ld (HC_p+10),a      ;25
0950+  2502 AF                   xor a
0951+  2503 32 5D 33             ld (HC_p+1),a        
0952+  2506 32 61 33             ld (HC_p+5),a       ;X
0953+  2509 32 63 33             ld (HC_p+7),a       ;Y
0954+  250C 32 65 33             ld (HC_p+9),a       ;dots
0955+  250F 32 67 33             ld (HC_p+11),a      ;dots
0956+  2512 32 68 33             ld (HC_p+12),a      ;DIX/DIY
0957+  2515 3E 01                ld a,%00000001
0958+  2517 32 5F 33             ld (HC_p+3),a       ;256+Y
0959+  251A CD 69 33             call HMMMf          ;copy VRAM -> VRAM to visible area        
0960+  251D             
0961+  251D             overDrawSqPc:         
0962+  251D DD E1                pop ix
0963+  251F E1                   pop hl
0964+  2520 D1                   pop de
0965+  2521 C1                   pop bc
0966+  2522 F1                   pop af
0967+  2523 C9                   ret
0968+  2524                      
0969+  2524             ;-------------------------------------------------
0970+  2524             ;
0971+  2524             ;
0972+  2524             ; Saving 26 squares in VRAM as background for
0973+  2524             ;      moving piece all way long
0974+  2524             ;
0975+  2524             Save26squaresVRAM:
0976+  2524 F5                   push af
0977+  2525 C5                   push bc
0978+  2526 D5                   push de
0979+  2527                      
0980+  2527 3A C1 22             ld a,(Move_X)
0981+  252A 57                   ld d,a
0982+  252B 3A C2 22             ld a,(Move_Y)
0983+  252E 5F                   ld e,a
0984+  252F D5                   push de             ; save X,Y                            
0985+  2530                      
0986+  2530 06 1A                ld b,26
0987+  2532 11 00 00             ld de,0
0988+  2535             Loop26squares:
0989+  2535 F3                   di                 
0990+  2536 3A C1 22             ld a,(Move_X)       ;X
0991+  2539 D6 04                sub 4               ;X-4   reserve
0992+  253B 32 5C 33             ld (HC_p+0),a
0993+  253E 3A C2 22             ld a,(Move_Y)       ;Y
0994+  2541 D6 04                sub 4               ;Y-4
0995+  2543 32 5E 33             ld (HC_p+2),a
0996+  2546                      
0997+  2546 CD 3C 24             call GetNewAnimXY   ; new X,Y
0998+  2549                               
0999+  2549 7A                   ld a,d
1000+  254A 32 60 33             ld (HC_p+4),a       ;to X
1001+  254D 7B                   ld a,e
1002+  254E 32 62 33             ld (HC_p+6),a       ;to Y (+next byte)   put in columns
1003+  2551 3E 20                ld a,$20
1004+  2553 32 64 33             ld (HC_p+8),a       ;32
1005+  2556 32 66 33             ld (HC_p+10),a      ;32
1006+  2559 AF                   xor a         
1007+  255A 32 5D 33             ld (HC_p+1),a       ;X
1008+  255D 32 5F 33             ld (HC_p+3),a       ;Y
1009+  2560 32 61 33             ld (HC_p+5),a       ;
1010+  2563 32 65 33             ld (HC_p+9),a       ;dots
1011+  2566 32 67 33             ld (HC_p+11),a      ;dots
1012+  2569 32 68 33             ld (HC_p+12),a      ;DIX/DIY
1013+  256C 3E 03                ld a,%00000011
1014+  256E 32 63 33             ld (HC_p+7),a       ; 512+Y down
1015+  2571 CD 69 33             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1016+  2574                      
1017+  2574 3E 20                ld a,$20
1018+  2576 83                   add a,e
1019+  2577 5F                   ld e,a
1020+  2578 FE C0                cp $20*6
1021+  257A 20 07                jr nz,L26clmnNxt
1022+  257C 1E 00                ld e,0             ; next column
1023+  257E 3E 20                ld a,$20
1024+  2580 82                   add a,d
1025+  2581 57                   ld d,a
1026+  2582 FB                   ei
1027+  2583             L26clmnNxt:
1028+  2583 10 B0                djnz Loop26squares     
1029+  2585                      
1030+  2585 D1                   pop de             ; restore X,Y
1031+  2586 7A                   ld a,d
1032+  2587 32 C1 22             ld (Move_X),a
1033+  258A 7B                   ld a,e
1034+  258B 32 C2 22             ld (Move_Y),a
1035+  258E                     
1036+  258E D1                   pop de
1037+  258F C1                   pop bc
1038+  2590 F1                   pop af
1039+  2591 C9                   ret
1040+  2592             
1041+  2592             ;
1042+  2592             ; This: 1) copies background (1..26 saved before) to VRAM-holder
1043+  2592             ;       2) copies mask of piece logically to VRAM-holder
1044+  2592             ;       3) copies holder to board on display
1045+  2592             ;
1046+  2592             
1047+  2592             
1048+  2592             RestoreIsquareFromVRAM:
1049+  2592 F5                   push af
1050+  2593 C5                   push bc
1051+  2594 D5                   push de
1052+  2595                      
1053+  2595 3A CD 22             ld a,(AnimI)
1054+  2598 47                   ld b,a
1055+  2599 3E 19                ld a,25
1056+  259B 90                   sub b
1057+  259C                      
1058+  259C 47                   ld b,a              ; counter I = 0..25
1059+  259D 11 00 00             ld de,0  
1060+  25A0 FE 00                cp 0
1061+  25A2 28 10                jr z,L2_26theSq
1062+  25A4             Loop26SqToFindXY:
1063+  25A4             
1064+  25A4 3E 20                ld a,$20
1065+  25A6 83                   add a,e
1066+  25A7 5F                   ld e,a
1067+  25A8 FE C0                cp $20*6
1068+  25AA 20 06                jr nz,L2_26clmnNxt
1069+  25AC 1E 00                ld e,0             ; next column
1070+  25AE 3E 20                ld a,$20
1071+  25B0 82                   add a,d
1072+  25B1 57                   ld d,a
1073+  25B2             L2_26clmnNxt:
1074+  25B2 10 F0                djnz Loop26SqToFindXY
1075+  25B4             L2_26theSq:                             
1076+  25B4 CD C1 25             call Back2Holder     ; put backgroound in holder
1077+  25B7                      
1078+  25B7 CD FB 25             call DrawAnimPiece   ; draws animation piece to holder (mask with transp.)
1079+  25BA                      
1080+  25BA CD 55 26             call Holder2Screen   ; put holder on board in right place
1081+  25BD             
1082+  25BD D1                   pop de
1083+  25BE C1                   pop bc
1084+  25BF F1                   pop af
1085+  25C0 C9                   ret
1086+  25C1             
1087+  25C1             ;----------------------------------
1088+  25C1             ; Puts background in holder
1089+  25C1             
1090+  25C1             Back2Holder:
1091+  25C1 F3                   di
1092+  25C2 7A                   ld a,d
1093+  25C3 32 5C 33             ld (HC_p+0),a
1094+  25C6 7B                   ld a,e
1095+  25C7 32 5E 33             ld (HC_p+2),a
1096+  25CA 3E DF                ld a,255-$20
1097+  25CC 32 60 33             ld (HC_p+4),a       ;to X
1098+  25CF 3E B1                ld a,209-$20
1099+  25D1 32 62 33             ld (HC_p+6),a       ;to Y (+next byte) in column
1100+  25D4 3E 20                ld a,$20
1101+  25D6 32 64 33             ld (HC_p+8),a       ;32
1102+  25D9 32 66 33             ld (HC_p+10),a      ;32
1103+  25DC AF                   xor a         
1104+  25DD 32 5D 33             ld (HC_p+1),a       ;X
1105+  25E0 32 61 33             ld (HC_p+5),a       ;
1106+  25E3 32 65 33             ld (HC_p+9),a       ;dots
1107+  25E6 32 67 33             ld (HC_p+11),a      ;dots
1108+  25E9 32 68 33             ld (HC_p+12),a      ;DIX/DIY
1109+  25EC 3E 01                ld a,%00000001
1110+  25EE 32 63 33             ld (HC_p+7),a       ; 256+Y down
1111+  25F1 3E 03                ld a,%00000011
1112+  25F3 32 5F 33             ld (HC_p+3),a       ; 512+Y down
1113+  25F6 CD 69 33             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1114+  25F9 FB                   ei
1115+  25FA C9                   ret
1116+  25FB                               
1117+  25FB             ;------------------------------------------------------
1118+  25FB             ;
1119+  25FB             ; Prepares mask of piece in VRAM holder on background
1120+  25FB             ;
1121+  25FB             ;                  
1122+  25FB             DrawAnimPiece:
1123+  25FB                                       
1124+  25FB                          ;COPY mask of piece (logical VRAM->VRAM)
1125+  25FB F3                       di        
1126+  25FC 3A C7 22                 ld a,(MovePc_f)
1127+  25FF FE 00                    cp 0
1128+  2601 20 03                    jr nz,DrawAnimNormPiece
1129+  2603 3A C8 22                 ld a,(MovePc_t)        ;castling rook moving
1130+  2606             DrawAnimNormPiece:             
1131+  2606 1E 00                    ld e,0
1132+  2608 CD 06 27                 call GetPieceIdx       ;get index of piece
1133+  260B CB 3F                    srl a
1134+  260D 3D                       dec a
1135+  260E 4F                       ld c,a
1136+  260F 21 A7 1F                 ld hl,VRAMcpMskXY      ; get X,Y by piece index             
1137+  2612 06 00                    ld b,0
1138+  2614 09                       add hl,bc              ; offset
1139+  2615 09                       add hl,bc
1140+  2616                                                
1141+  2616 7E                       ld a,(hl)           ;saved X
1142+  2617 32 94 33                 ld (LM_p+0),a       ;X
1143+  261A 23                       inc hl
1144+  261B 7E                       ld a,(hl)           ;saved Y        
1145+  261C 32 96 33                 ld (LM_p+2),a       ;Y
1146+  261F             
1147+  261F                          ;ld a,(Move_X)
1148+  261F 3E E3                    ld a,255-$20+4
1149+  2621 32 98 33                 ld (LM_p+4),a       ;to X   
1150+  2624                          ;ld a,(Move_Y)
1151+  2624 3E B5                    ld a,209-$20+4
1152+  2626 32 9A 33                 ld (LM_p+6),a       ;to Y
1153+  2629 3E 19                    ld a,$19
1154+  262B 32 9C 33                 ld (LM_p+8),a       ;25
1155+  262E 32 9E 33                 ld (LM_p+10),a      ;25
1156+  2631 AF                       xor a
1157+  2632 32 95 33                 ld (LM_p+1),a
1158+  2635                          ;ld (LM_p+7),a       
1159+  2635 32 99 33                 ld (LM_p+5),a       ;Y
1160+  2638 32 9D 33                 ld (LM_p+9),a       ;dots
1161+  263B 32 9F 33                 ld (LM_p+11),a      ;dots
1162+  263E 32 A0 33                 ld (LM_p+12),a      ;DIX/DIY
1163+  2641 3E 01                    ld a,%00000001
1164+  2643 32 97 33                 ld (LM_p+3),a       ;256+Y
1165+  2646 3E 01                    ld a,%00000001
1166+  2648 32 9B 33                 ld (LM_p+7),a       ;256+Y
1167+  264B 3E 08                    ld a,%00001000      ;TIMP copy
1168+  264D 32 A1 33                 ld (LM_p+13),a      ;logical
1169+  2650 CD A2 33                 call LMMMf          ;copy VRAM -> VRAM without transparent color
1170+  2653                                              ;to visible area
1171+  2653 FB                       ei                                 
1172+  2654 C9                       ret
1173+  2655             
1174+  2655             ;----------------------------------
1175+  2655             ; Puts holder on board
1176+  2655             
1177+  2655             Holder2Screen:                             ; draw holder to screen with piece
1178+  2655 F3                   di
1179+  2656 3E DF                ld a,255-$20                
1180+  2658 32 5C 33             ld (HC_p+0),a
1181+  265B 3E B1                ld a,209-$20
1182+  265D 32 5E 33             ld (HC_p+2),a
1183+  2660 3A C1 22             ld a,(Move_X)
1184+  2663 D6 04                sub 4               ;X-4
1185+  2665 32 60 33             ld (HC_p+4),a       ;to X
1186+  2668 3A C2 22             ld a,(Move_Y)
1187+  266B D6 04                sub 4               ;Y-4
1188+  266D 32 62 33             ld (HC_p+6),a       ;to Y (+next byte)
1189+  2670 3E 20                ld a,$20
1190+  2672 32 64 33             ld (HC_p+8),a       ;32
1191+  2675 32 66 33             ld (HC_p+10),a      ;32
1192+  2678 AF                   xor a         
1193+  2679 32 5D 33             ld (HC_p+1),a       ;X
1194+  267C 32 61 33             ld (HC_p+5),a       ;
1195+  267F 32 63 33             ld (HC_p+7),a       ;         
1196+  2682 32 65 33             ld (HC_p+9),a       ;dots
1197+  2685 32 67 33             ld (HC_p+11),a      ;dots
1198+  2688 32 68 33             ld (HC_p+12),a      ;DIX/DIY
1199+  268B 3E 01                ld a,%00000001
1200+  268D 32 5F 33             ld (HC_p+3),a       ;from holder 256+Y down
1201+  2690 CD 69 33             call HMMMf          ;copy VRAM -> VRAM
1202+  2693 FB                   ei
1203+  2694 C9                   ret
1204+  2695                                                
1205+  2695             ;-------------------------------------------------
1206+  2695             ;
1207+  2695             ;BOARD copying to third screen
1208+  2695             ; Fast but takes much VRAM.
1209+  2695             ; Not used but working. It is sick to use VRAM like this.
1210+  2695             ;-------------------------------------------------
1211+  2695             COPY2VRAMoutside:
1212+  2695 7A                   ld a,d              ;X
1213+  2696 32 5C 33             ld (HC_p+0),a
1214+  2699 32 60 33             ld (HC_p+4),a       ;to X
1215+  269C 7B                   ld a,e              ;Y
1216+  269D 32 5E 33             ld (HC_p+2),a
1217+  26A0 32 62 33             ld (HC_p+6),a       ;to Y (+next byte)
1218+  26A3 3E 19                ld a,$19
1219+  26A5 32 64 33             ld (HC_p+8),a       ;25
1220+  26A8 32 66 33             ld (HC_p+10),a      ;25
1221+  26AB AF                   xor a         
1222+  26AC 32 5D 33             ld (HC_p+1),a       ;X
1223+  26AF 32 5F 33             ld (HC_p+3),a       ;Y
1224+  26B2 32 61 33             ld (HC_p+5),a       ;
1225+  26B5 32 65 33             ld (HC_p+9),a       ;dots
1226+  26B8 32 67 33             ld (HC_p+11),a      ;dots
1227+  26BB 32 68 33             ld (HC_p+12),a      ;DIX/DIY
1228+  26BE 3E 01                ld a,%00000001
1229+  26C0 32 63 33             ld (HC_p+7),a       ; 256+Y down
1230+  26C3 CD 69 33             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1231+  26C6 C9                   ret
1232+  26C7                       
1233+  26C7             ; calculates HL screen coordinates X,Y by square number
1234+  26C7             ; provide square in c-reg
1235+  26C7             GetHLbySquare:
1236+  26C7 F5                   push af
1237+  26C8 C5                   push bc
1238+  26C9 D5                   push de
1239+  26CA 21 B4 05             ld hl,$05D2-$0005-$0019
1240+  26CD 79                   ld a,c
1241+  26CE E6 07                and 7
1242+  26D0                           ; X- a..h of table
1243+  26D0                      ;cp 2
1244+  26D0                      ;jp c,GetHLx_
1245+  26D0                      ;push bc
1246+  26D0                      ;ld bc,$0100
1247+  26D0                      ;add hl,bc      ; one pixel visal correction to the right
1248+  26D0                      ;pop bc
1249+  26D0             GetHLx_:         
1250+  26D0 11 00 19             ld de,$1900
1251+  26D3             GetHLbySqX:
1252+  26D3 FE 00                cp 0
1253+  26D5 28 04                jr z,GetHLokSqX
1254+  26D7 19                   add hl,de
1255+  26D8 3D                   dec a
1256+  26D9 18 F8                jr GetHLbySqX        
1257+  26DB             GetHLokSqX:
1258+  26DB 79                   ld a,c
1259+  26DC CB 3F                srl a
1260+  26DE CB 3F                srl a
1261+  26E0 CB 3F                srl a
1262+  26E2                           ; Y- 1..8 of table
1263+  26E2 11 19 00             ld de,$0019
1264+  26E5             GetHLbySqY:
1265+  26E5 FE 00                cp 0
1266+  26E7 28 07                jr z,GetHLokSqY
1267+  26E9 37                   scf
1268+  26EA 3F                   ccf
1269+  26EB ED 52                sbc hl,de
1270+  26ED 3D                   dec a
1271+  26EE 18 F5                jr GetHLbySqY        
1272+  26F0             GetHLokSqY:
1273+  26F0 D1                   pop de
1274+  26F1 C1                   pop bc
1275+  26F2 F1                   pop af
1276+  26F3 C9                   ret
1277+  26F4                      
1278+  26F4             ; calculates white square in e-reg flag by square number (a-reg)
1279+  26F4             GetWhiteSqFlagInE:
1280+  26F4 F5                   push af
1281+  26F5 79                   ld a,c
1282+  26F6 E6 07                and 7
1283+  26F8 5F                   ld e,a    ; X- a..h of table
1284+  26F9                      
1285+  26F9 79                   ld a,c
1286+  26FA CB 3F                srl a
1287+  26FC CB 3F                srl a
1288+  26FE CB 3F                srl a
1289+  2700                                ; Y- 1..8 of table
1290+  2700 83                   add a,e
1291+  2701 E6 01                and 1     ;mod2
1292+  2703 5F                   ld e,a    ; contains flag
1293+  2704 F1                   pop af
1294+  2705 C9                   ret
1295+  2706                               
1296+  2706             ;----------------------------------------------------|
1297+  2706                      ; locates index in array of pieces datas
1298+  2706                      ; a-piece char of p..K
1299+  2706                      ; e - square is white flag
1300+  2706                      ; on return a contains index
1301+  2706                                             
1302+  2706             GetPieceIdx:
1303+  2706 C5                   push bc
1304+  2707 D5                   push de
1305+  2708 E5                   push hl
1306+  2709 21 1F 27             ld hl,pieceL
1307+  270C 06 0D                ld b,13
1308+  270E 16 00                ld d,0
1309+  2710             GetPcIxLoop:
1310+  2710 BE                   cp (hl)
1311+  2711 28 04                jr z,GetPcIx1
1312+  2713 23                   inc hl
1313+  2714 14                   inc d
1314+  2715 10 F9                djnz GetPcIxLoop               
1315+  2717             GetPcIx1:
1316+  2717 CB 22                sla d  ; x2
1317+  2719 7B                   ld a,e ;black or white square?; 
1318+  271A 82                   add a,d
1319+  271B E1                   pop hl
1320+  271C D1                   pop de
1321+  271D C1                   pop bc
1322+  271E C9                   ret        
1323+  271F             
1324+  271F 20 50 4E 42 pieceL:  .byte " PNBRQKpnbrqk"
1324+  2723 52 51 4B 70 
1324+  2727 6E 62 72 71 
1324+  272B 6B 
1325+  272C             
1326+  272C                      ;and position IX after
1327+  272C             GetPieceIX:
1328+  272C C5                   push bc
1329+  272D E5                   push hl
1330+  272E 06 00                ld b,0
1331+  2730 4F                   ld c,a
1332+  2731 CB 21                sla c    ; offset
1333+  2733 DD 21 00 1F          ld ix, PiecesIX
1334+  2737 DD 09                add ix,bc
1335+  2739 DD 6E 00             ld l,(ix)
1336+  273C DD 23                inc ix
1337+  273E DD 66 00             ld h,(ix)
1338+  2741 E5                   push hl
1339+  2742 DD E1                pop ix   ;now IX contains address
1340+  2744 E1                   pop hl
1341+  2745 C1                   pop bc
1342+  2746 C9                   ret
1343+  2747             
1344+  2747                      ;to determine IX for mask
1345+  2747             GetPieceMskIX:
1346+  2747 C5                   push bc
1347+  2748 E5                   push hl
1348+  2749 06 00                ld b,0
1349+  274B 4F                   ld c,a
1350+  274C CB 21                sla c
1351+  274E DD 21 83 1F          ld ix, PiecesMskIX     ; offset of masks
1352+  2752 DD 09                add ix,bc
1353+  2754 DD 6E 00             ld l,(ix)
1354+  2757 DD 23                inc ix
1355+  2759 DD 66 00             ld h,(ix)
1356+  275C E5                   push hl
1357+  275D DD E1                pop ix   ;now IX contains address
1358+  275F E1                   pop hl
1359+  2760 C1                   pop bc
1360+  2761 C9                   ret
1361+  2762             
1362+  2762             ; This copie mask of piece to VRAM
1363+  2762             SaveMaskToo:
1364+  2762 F5                   push af         ; and save the mask of piece too - to see it moving after
1365+  2763 C5                   push bc
1366+  2764 D5                   push de
1367+  2765 E5                   push hl
1368+  2766 DD E5                push ix
1369+  2768 79                   ld a,c
1370+  2769 FE 02                cp 2
1371+  276B 38 47                jr c, pcMsk2VRAMno
1372+  276D CB 3F                srl a
1373+  276F 3D                   dec a           ; a = index PpNn....Kk      
1374+  2770 4F                   ld c,a
1375+  2771 06 00                ld b,0
1376+  2773 21 9B 1F             ld hl,VRAMcpMsk
1377+  2776 09                   add hl,bc       ; hl contains flag if piece has been saved to VRAM
1378+  2777 7E                   ld a,(hl)
1379+  2778 FE 01                cp 1
1380+  277A 28 38                jr z,pcMsk2VRAMno
1381+  277C 3E 01                ld a,1
1382+  277E 77                   ld (hl),a       ; now will be saved
1383+  277F 79                   ld a,c
1384+  2780 CD 47 27             call GetPieceMskIX  ; get ix-address for mask
1385+  2783 11 1A 1A             ld de,$1A1A         ;26x26
1386+  2786 26 7B                ld h,$10 + $19*3
1387+  2788 2E 10                ld l,$10
1388+  278A 79                   ld a,c
1389+  278B FE 06                cp 6                ;for PNBRQK 0..5
1390+  278D 38 07                jr c,pcMskSetY
1391+  278F 7C                   ld a,h
1392+  2790 C6 19                add a,$19           ; set next column for black pieces
1393+  2792 67                   ld h,a
1394+  2793 79                   ld a,c
1395+  2794 D6 06                sub 6
1396+  2796             pcMskSetY:         
1397+  2796 FE 00                cp 0
1398+  2798 28 09                jr z,pcMskGoodY
1399+  279A 3D                   dec a
1400+  279B F5                   push af
1401+  279C 7D                   ld a,l
1402+  279D C6 19                add a,$19
1403+  279F 6F                   ld l,a
1404+  27A0 F1                   pop af
1405+  27A1 18 F3                jr pcMskSetY
1406+  27A3             pcMskGoodY:
1407+  27A3 CD 47 31             call HMMC           ;copy mask RAM -> VRAM                  
1408+  27A6             
1409+  27A6 EB                   ex de,hl            ; de = hl
1410+  27A7 21 A7 1F             ld hl,VRAMcpMskXY   ; save X,Y for mask of piece index
1411+  27AA 06 00                ld b,0
1412+  27AC 09                   add hl,bc
1413+  27AD 09                   add hl,bc         
1414+  27AE 72                   ld (hl),d           ;save X
1415+  27AF 23                   inc hl
1416+  27B0 73                   ld (hl),e           ;save Y
1417+  27B1                      
1418+  27B1 CD 95 26             call COPY2VRAMoutside
1419+  27B4                      
1420+  27B4             pcMsk2VRAMno:        
1421+  27B4 DD E1                pop ix
1422+  27B6 E1                   pop hl
1423+  27B7 D1                   pop de
1424+  27B8 C1                   pop bc
1425+  27B9 F1                   pop af
1426+  27BA C9                   ret
1427+  27BB             
1428+  27BB 00          VRAM_msx .byte 0  ; flag that VRAM contains it
1429+  27BC             
1430+  27BC             ; Puts MSX logo on screen
1431+  27BC             PutMSXlogo:
1432+  27BC F5                   push af
1433+  27BD C5                   push bc
1434+  27BE D5                   push de
1435+  27BF E5                   push hl
1436+  27C0 DD E5                push ix
1437+  27C2                      
1438+  27C2 3A BB 27             ld a,(VRAM_msx)
1439+  27C5 FE 00                cp 0
1440+  27C7 20 1A                jr nz,PutMSXlog_Copy
1441+  27C9                              
1442+  27C9 26 DD                ld h,255-$22
1443+  27CB 2E AF                ld l,209-$22
1444+  27CD 11 0C 1E             ld de,$1E0C
1445+  27D0 DD 21 F1 C1          ld ix, dtMSXlogo+6     ; top
1446+  27D4 CD 47 31             call HMMC              ;copy RAM -> VRAM
1447+  27D7 0E 00                ld c,0
1448+  27D9 CD 86 28             call COPY_frames2VRAM_outside ;the same as for frame  
1449+  27DC                      
1450+  27DC 3E 01                ld a,1
1451+  27DE 32 BB 27             ld (VRAM_msx),a
1452+  27E1 18 0C                jr PutMSXex
1453+  27E3                               
1454+  27E3             PutMSXlog_Copy:
1455+  27E3 26 DD                ld h,255-$22
1456+  27E5 2E AF                ld l,209-$22
1457+  27E7 11 0C 1E             ld de,$1E0C            ; copy from VRAM outside > VRAM on screen
1458+  27EA 0E 00                ld c,0
1459+  27EC CD D1 28             call COPY_frames_fromVRAM
1460+  27EF                      
1461+  27EF             PutMSXex:                                                                                                                                                        
1462+  27EF DD E1                pop ix
1463+  27F1 E1                   pop hl
1464+  27F2 D1                   pop de
1465+  27F3 C1                   pop bc        
1466+  27F4 F1                   pop af
1467+  27F5 C9                   ret                  
1468+  27F6             
1469+  27F6                      
1470+  27F6             ; Puts frame for chess board
1471+  27F6             PutFrame:
1472+  27F6 F5                   push af
1473+  27F7 C5                   push bc
1474+  27F8 D5                   push de
1475+  27F9 E5                   push hl
1476+  27FA DD E5                push ix
1477+  27FC 3A 85 28             ld a,(VRAM_frame)
1478+  27FF FE 00                cp 0
1479+  2801 20 4F                jr nz,CopyFramesFromVRAM
1480+  2803                                ; DRAW and SAVE
1481+  2803 21 00 00             ld hl,0
1482+  2806 11 08 D2             ld de,$D208
1483+  2809 DD 21 E1 AC          ld ix, dtFRUP+6     ; top
1484+  280D CD 47 31             call HMMC           ;copy RAM -> VRAM
1485+  2810 0E 01                ld c,1
1486+  2812 CD 86 28             call COPY_frames2VRAM_outside
1487+  2815             
1488+  2815 21 00 00             ld hl,0
1489+  2818 11 D2 08             ld de,$08D2
1490+  281B DD 21 45 A6          ld ix, dtFRLF+6     ; left
1491+  281F CD 47 31             call HMMC           ;copy RAM -> VRAM
1492+  2822 0E 02                ld c,2
1493+  2824 CD 86 28             call COPY_frames2VRAM_outside
1494+  2827             
1495+  2827 21 00 CA             ld hl,$D200-$0800
1496+  282A 11 D2 08             ld de,$08D2
1497+  282D DD 21 93 A9          ld ix, dtFRRT+6     ; right
1498+  2831 CD 47 31             call HMMC           ;copy RAM -> VRAM
1499+  2834 0E 00                ld c,0
1500+  2836 CD 86 28             call COPY_frames2VRAM_outside
1501+  2839                      
1502+  2839 21 CA 00             ld hl,$00D2-$0008
1503+  283C 11 08 D2             ld de,$D208
1504+  283F DD 21 F7 A2          ld ix, dtFRDN+6     ; bottom
1505+  2843 CD 47 31             call HMMC           ;copy RAM -> VRAM
1506+  2846 0E 00                ld c,0
1507+  2848 CD 86 28             call COPY_frames2VRAM_outside
1508+  284B                      
1509+  284B 3E 01                ld a,1
1510+  284D 32 85 28             ld (VRAM_frame),a
1511+  2850                      
1512+  2850 18 2C                jr PutFramesEx
1513+  2852                      
1514+  2852             CopyFramesFromVRAM:
1515+  2852 21 00 00             ld hl,0
1516+  2855 11 08 D2             ld de,$D208         ; top
1517+  2858 0E 01                ld c,1         
1518+  285A CD D1 28             call COPY_frames_fromVRAM
1519+  285D             
1520+  285D 21 00 00             ld hl,0
1521+  2860 11 D2 08             ld de,$08D2         ; left 
1522+  2863 0E 02                ld c,2           
1523+  2865 CD D1 28             call COPY_frames_fromVRAM
1524+  2868             
1525+  2868 21 00 CA             ld hl,$D200-$0800
1526+  286B 11 D2 08             ld de,$08D2         ; right
1527+  286E 0E 00                ld c,0         
1528+  2870 CD D1 28             call COPY_frames_fromVRAM
1529+  2873                      
1530+  2873 21 CA 00             ld hl,$00D2-$0008
1531+  2876 11 08 D2             ld de,$D208         ; bottom
1532+  2879 0E 00                ld c,0         
1533+  287B CD D1 28             call COPY_frames_fromVRAM
1534+  287E             
1535+  287E             PutFramesEx:
1536+  287E DD E1                pop ix
1537+  2880 E1                   pop hl
1538+  2881 D1                   pop de
1539+  2882 C1                   pop bc
1540+  2883 F1                   pop af
1541+  2884 C9                   ret
1542+  2885             
1543+  2885 00          VRAM_frame:  .byte 0         ; 1 if frame saved to VRAM
1544+  2886             
1545+  2886             ; if c=0 then use XY of HL as it is
1546+  2886             ; if c=1 then upper border of frame
1547+  2886             ; if c=2 then left border of frame
1548+  2886             COPY_frames2VRAM_outside:     ;SAVES FRAME
1549+  2886 F5                   push af
1550+  2887 E5                   push hl
1551+  2888 7C                   ld a,h
1552+  2889 32 5C 33             ld (HC_p+0),a       ;X = H
1553+  288C 7D                   ld a,l            
1554+  288D 32 5E 33             ld (HC_p+2),a       ;Y = L
1555+  2890 7A                   ld a,d
1556+  2891 32 64 33             ld (HC_p+8),a       ;D width
1557+  2894 7B                   ld a,e
1558+  2895 32 66 33             ld (HC_p+10),a      ;E height
1559+  2898 AF                   xor a        
1560+  2899 32 5D 33             ld (HC_p+1),a       ;X
1561+  289C 32 5F 33             ld (HC_p+3),a       ;Y
1562+  289F 32 61 33             ld (HC_p+5),a       ;
1563+  28A2 32 65 33             ld (HC_p+9),a       ;dots
1564+  28A5 32 67 33             ld (HC_p+11),a      ;dots
1565+  28A8 32 68 33             ld (HC_p+12),a      ;DIX/DIY
1566+  28AB 3E 03                ld a,%00000011
1567+  28AD 32 63 33             ld (HC_p+7),a       ; 512+Y down
1568+  28B0                      
1569+  28B0 79                   ld a,c
1570+  28B1 FE 01                cp 1
1571+  28B3 28 06                jr z,CPYfrUP
1572+  28B5 FE 02                cp 2
1573+  28B7 28 07                jr z,CPYfrLF
1574+  28B9 18 08                jr CPY_asItIs        
1575+  28BB             CPYfrUP:
1576+  28BB 21 D4 00             ld hl,$00D2+$0002
1577+  28BE 18 03                jr CPY_asItIs
1578+  28C0             CPYfrLF:
1579+  28C0 21 00 D4             ld hl,$D200+$0200
1580+  28C3             
1581+  28C3             CPY_asItIs:
1582+  28C3 7C                   ld a,h
1583+  28C4 32 60 33             ld (HC_p+4),a       ;to X
1584+  28C7 7D                   ld a,l
1585+  28C8 32 62 33             ld (HC_p+6),a       ;to Y (+next 2 bits)
1586+  28CB E1                   pop hl
1587+  28CC CD 69 33             call HMMMf          ;copy VRAM -> VRAM outside visible screen
1588+  28CF F1                   pop af
1589+  28D0 C9                   ret
1590+  28D1                      
1591+  28D1             COPY_frames_fromVRAM:        ;Copies back FRAME from VRAM
1592+  28D1 F5                   push af
1593+  28D2 E5                   push hl
1594+  28D3 7C                   ld a,h
1595+  28D4 32 60 33             ld (HC_p+4),a       ;to X
1596+  28D7 7D                   ld a,l            
1597+  28D8 32 62 33             ld (HC_p+6),a       ;to Y (+next 2 bits)
1598+  28DB 7A                   ld a,d
1599+  28DC 32 64 33             ld (HC_p+8),a       ;D width
1600+  28DF 7B                   ld a,e
1601+  28E0 32 66 33             ld (HC_p+10),a      ;E height
1602+  28E3 AF                   xor a        
1603+  28E4 32 5D 33             ld (HC_p+1),a       ;X
1604+  28E7 32 63 33             ld (HC_p+7),a       ;to Y
1605+  28EA 32 61 33             ld (HC_p+5),a       ;
1606+  28ED 32 65 33             ld (HC_p+9),a       ;dots
1607+  28F0 32 67 33             ld (HC_p+11),a      ;dots
1608+  28F3 32 68 33             ld (HC_p+12),a      ;DIX/DIY
1609+  28F6 3E 03                ld a,%00000011
1610+  28F8 32 5F 33             ld (HC_p+3),a       ; 512+Y down
1611+  28FB                      
1612+  28FB 79                   ld a,c
1613+  28FC FE 01                cp 1
1614+  28FE 28 06                jr z,BCPYfrUP
1615+  2900 FE 02                cp 2
1616+  2902 28 07                jr z,BCPYfrLF
1617+  2904 18 08                jr BCPY_asItIs        
1618+  2906             BCPYfrUP:
1619+  2906 21 D4 00             ld hl,$00D2+$0002
1620+  2909 18 03                jr BCPY_asItIs
1621+  290B             BCPYfrLF:
1622+  290B 21 00 D4             ld hl,$D200+$0200
1623+  290E             
1624+  290E             BCPY_asItIs:
1625+  290E 7C                   ld a,h
1626+  290F 32 5C 33             ld (HC_p+0),a       ;X = H
1627+  2912 7D                   ld a,l
1628+  2913 32 5E 33             ld (HC_p+2),a       ;Y = L
1629+  2916 E1                   pop hl
1630+  2917 CD 69 33             call HMMMf          ;copy VRAM outside visible screen -> VRAM
1631+  291A F1                   pop af
1632+  291B C9                   ret
1633+  291C             
1634+  291C                             
1635+  291C                      
1636+  291C             ; Puts rounded identification about side to move
1637+  291C             
1638+  291C             PutToMove:
1639+  291C F5                   push af
1640+  291D C5                   push bc
1641+  291E D5                   push de
1642+  291F E5                   push hl
1643+  2920 DD E5                push ix
1644+  2922                      
1645+  2922 DD 21 BF 1F          ld ix,CircIX
1646+  2926                               
1647+  2926 3A 82 1F             ld a,(VRAMcirc)
1648+  2929 FE 00                cp 0
1649+  292B 20 30                jr nz,circ2VRAM2
1650+  292D                                                  
1651+  292D                      ;DRAW and SAVE a copy                
1652+  292D 3E 01                ld a,1
1653+  292F 32 82 1F             ld (VRAMcirc),a     ; bitmap saved flag
1654+  2932                      
1655+  2932 06 00                ld b,0       ; loop 4 bitmaps
1656+  2934 26 00                ld h,0       ; X
1657+  2936             Save2VRAMsgnLoop:
1658+  2936 C5                   push bc
1659+  2937                      
1660+  2937 DD E5                push ix            ; table of bitmaps
1661+  2939 CD 97 29             call GetIXfrom4tb  ; ix - address in VRAM for current bitmap
1662+  293C                      
1663+  293C 2E C3                ld l,209-$E    ; hl = X,Y
1664+  293E                      
1665+  293E EB                   ex de,hl       ; de = hl
1666+  293F CD 95 26             call COPY2VRAMoutside  ; copy blank to put sign on it with transp.logical                 
1667+  2942 EB                   ex de,hl                          
1668+  2943                                                          
1669+  2943 11 0E 0E             ld de,$0E0E    ; 14x14
1670+  2946 CD 47 31             call HMMC      ;copy RAM -> VRAM
1671+  2949                 
1672+  2949 CD A5 29             call SgCopy2VRAMtrsp  ;copies 13x13 (w/o transparent)
1673+  294C                      
1674+  294C DD E1                pop ix
1675+  294E DD 23                inc ix
1676+  2950 DD 23                inc ix
1677+  2952                      
1678+  2952 7C                   ld a,h
1679+  2953 C6 0E                add a,$E       ; X=X+14
1680+  2955 67                   ld h,a
1681+  2956                      
1682+  2956 C1                   pop bc
1683+  2957 04                   inc b
1684+  2958 78                   ld a,b
1685+  2959 FE 04                cp 4
1686+  295B 20 D9                jr nz,Save2VRAMsgnLoop       
1687+  295D                        
1688+  295D             circ2VRAM2:         
1689+  295D                      ;COPY sign from VRAM which side to move
1690+  295D                      
1691+  295D 26 00                ld h,0                  ;from X for case "white to move" (bitmaps are placed horizontally)
1692+  295F 2E C3                ld l,209-$E             ;from Y
1693+  2961                      
1694+  2961 3A 81 01             ld a,(SIDE)
1695+  2964 FE 00                cp 0
1696+  2966 28 0A                jr z,SgWhite2Move
1697+  2968 DD 23                inc ix
1698+  296A DD 23                inc ix
1699+  296C DD 23                inc ix
1700+  296E DD 23                inc ix   ;will use two bitmaps at addr+4 
1701+  2970 26 1C                ld h,$E+$E              ;from X for case "black to move"            
1702+  2972             SgWhite2Move:
1703+  2972                      
1704+  2972 DD E5                push ix                 ; table of bitmaps
1705+  2974 CD 97 29             call GetIXfrom4tb       ; ix - address in VRAM for current bitmap of white side
1706+  2977                      
1707+  2977 16 D2                ld d,204+6
1708+  2979 1E C2                ld e,204-10
1709+  297B                      
1710+  297B CD DC 29             call SgCopy2Board  ;white sign
1711+  297E                      
1712+  297E DD E1                pop ix ; restore table of bitmaps
1713+  2980 DD 23                inc ix
1714+  2982 DD 23                inc ix ; to next bitmap pointer
1715+  2984             
1716+  2984 CD 97 29             call GetIXfrom4tb  ; ix - address in VRAM for current bitmap of black side
1717+  2987                      
1718+  2987 7C                   ld a,h
1719+  2988 C6 0E                add a,$E       ; X=X+14
1720+  298A 67                   ld h,a
1721+  298B                      
1722+  298B 1E 08                ld e,8
1723+  298D CD DC 29             call SgCopy2Board  ;black sign
1724+  2990                      
1725+  2990 DD E1                pop ix
1726+  2992 E1                   pop hl
1727+  2993 D1                   pop de
1728+  2994 C1                   pop bc
1729+  2995 F1                   pop af
1730+  2996 C9                   ret
1731+  2997             
1732+  2997             GetIXfrom4tb:
1733+  2997 D5                   push de
1734+  2998 DD 5E 00             ld e,(ix)
1735+  299B DD 23                inc ix
1736+  299D DD 56 00             ld d,(ix)
1737+  29A0                               
1738+  29A0 D5                   push de
1739+  29A1 DD E1                pop ix         ; ix - address in VRAM
1740+  29A3 D1                   pop de
1741+  29A4 C9                   ret
1742+  29A5             
1743+  29A5             ;Copy with logical transparent
1744+  29A5             SgCopy2VRAMtrsp: 
1745+  29A5                      
1746+  29A5 7C                   ld a,h              ;X
1747+  29A6 32 94 33             ld (LM_p+0),a       ;
1748+  29A9 32 98 33             ld (LM_p+4),a       ;to X          
1749+  29AC 7D                   ld a,l              ;Y
1750+  29AD 32 96 33             ld (LM_p+2),a       ;
1751+  29B0 32 9A 33             ld (LM_p+6),a       ;to Y         
1752+  29B3 3E 0E                ld a,$E
1753+  29B5 32 9C 33             ld (LM_p+8),a       ;14
1754+  29B8 32 9E 33             ld (LM_p+10),a      ;14
1755+  29BB AF                   xor a
1756+  29BC 32 95 33             ld (LM_p+1),a
1757+  29BF 32 99 33             ld (LM_p+5),a       ;
1758+  29C2 32 97 33             ld (LM_p+3),a       ;            
1759+  29C5 32 9D 33             ld (LM_p+9),a       ;dots
1760+  29C8 32 9F 33             ld (LM_p+11),a      ;dots
1761+  29CB 32 A0 33             ld (LM_p+12),a      ;DIX/DIY
1762+  29CE 3E 01                ld a,%00000001
1763+  29D0 32 9B 33             ld (LM_p+7),a       ;256+Y
1764+  29D3 3E 08                ld a,%00001000      ;TIMP copy
1765+  29D5 32 A1 33             ld (LM_p+13),a      ;logical
1766+  29D8 CD A2 33             call LMMMf          ;copy VRAM -> VRAM without transparent color
1767+  29DB C9                   ret                 ;to invisible area          
1768+  29DC                      
1769+  29DC             SgCopy2Board:
1770+  29DC             
1771+  29DC 7C                   ld a,h              ;saved X
1772+  29DD 32 5C 33             ld (HC_p+0),a       ;X
1773+  29E0 7D                   ld a,l              ;saved Y                      
1774+  29E1 32 5E 33             ld (HC_p+2),a       ;Y
1775+  29E4 7A                   ld a,d         
1776+  29E5 32 60 33             ld (HC_p+4),a       ;to X
1777+  29E8 7B                   ld a,e         
1778+  29E9 32 62 33             ld (HC_p+6),a       ;to Y (+next 2 bits)
1779+  29EC 3E 0E                ld a,$E
1780+  29EE 32 64 33             ld (HC_p+8),a       ;14
1781+  29F1 32 66 33             ld (HC_p+10),a      ;14
1782+  29F4 AF                   xor a        
1783+  29F5 32 5D 33             ld (HC_p+1),a       ;X
1784+  29F8 32 63 33             ld (HC_p+7),a       ;to Y
1785+  29FB 32 61 33             ld (HC_p+5),a       ;
1786+  29FE 32 65 33             ld (HC_p+9),a       ;dots
1787+  2A01 32 67 33             ld (HC_p+11),a      ;dots
1788+  2A04 32 68 33             ld (HC_p+12),a      ;DIX/DIY
1789+  2A07 3E 01                ld a,%00000001
1790+  2A09 32 5F 33             ld (HC_p+3),a       ; 256+Y
1791+  2A0C CD 69 33             call HMMMf          ;copy VRAM outside visible screen -> VRAM on board                         
1792+  2A0F C9                   ret
1793+  2A10             
1794+  2A10             
1795+  2A10             ;----------------------------------------------------|
1796+  2A10             DrawCursor:              ; Draws cursor (UserControl)
1797+  2A10 F5                   push af
1798+  2A11 3A FB 1E             ld a,(Stylo)
1799+  2A14 CB 47                bit 0,a
1800+  2A16 28 3C                jr z,noCursors
1801+  2A18             
1802+  2A18 C5                   push bc
1803+  2A19 D5                   push de
1804+  2A1A E5                   push hl
1805+  2A1B                      
1806+  2A1B 3A FD 1E             ld a,(DragSq)
1807+  2A1E FE FF                cp $ff
1808+  2A20 28 16                jr z,DrawCursorOnly
1809+  2A22             
1810+  2A22 4F                   ld c,a             ; Draw DragSquare too
1811+  2A23 CD C7 26             call GetHLbySquare ; Get X,Y
1812+  2A26                           
1813+  2A26 06 0E                ld b,$E            ; color
1814+  2A28 0E 16                ld c,$16           ; length of lines
1815+  2A2A CD 56 2A             call CursRectDraw  ; line
1816+  2A2D                      
1817+  2A2D 01 01 01             ld bc,$0101
1818+  2A30 09                   add hl,bc          ; shift 1 dot right down
1819+  2A31             
1820+  2A31 06 0E                ld b,$E            ; color
1821+  2A33 0E 14                ld c,$14           ; double-line
1822+  2A35 CD 56 2A             call CursRectDraw
1823+  2A38                      
1824+  2A38             DrawCursorOnly:         
1825+  2A38 3A FC 1E             ld a,(CursorSq)
1826+  2A3B 4F                   ld c,a
1827+  2A3C CD C7 26             call GetHLbySquare ; Get X,Y
1828+  2A3F                           
1829+  2A3F 06 0F                ld b,$F            ; color
1830+  2A41 0E 16                ld c,$16           ; length of lines
1831+  2A43 CD 56 2A             call CursRectDraw  ; line
1832+  2A46                      
1833+  2A46 01 01 01             ld bc,$0101
1834+  2A49 09                   add hl,bc          ; shift 1 dot right down
1835+  2A4A             
1836+  2A4A 06 0F                ld b,$F            ; color
1837+  2A4C 0E 14                ld c,$14           ; double-line
1838+  2A4E CD 56 2A             call CursRectDraw
1839+  2A51                      
1840+  2A51 E1                   pop hl         
1841+  2A52 D1                   pop de
1842+  2A53 C1                   pop bc
1843+  2A54             noCursors:         
1844+  2A54 F1                   pop af
1845+  2A55 C9                   ret
1846+  2A56             
1847+  2A56             CursRectDraw:               ; rectangle with length provided in c, color in b        
1848+  2A56 7C                   ld a,h
1849+  2A57 81                   add a,c
1850+  2A58 57                   ld d,a             ; X+25
1851+  2A59 5D                   ld e,l             ; Y
1852+  2A5A 3E 00                ld a,0             ; just overwrite
1853+  2A5C CD F5 32             call LINE          ; Line 1
1854+  2A5F 62                   ld h,d
1855+  2A60 7B                   ld a,e
1856+  2A61 81                   add a,c
1857+  2A62 3C                   inc a
1858+  2A63 3C                   inc a
1859+  2A64 5F                   ld e,a
1860+  2A65 3E 00                ld a,0             ; just overwrite
1861+  2A67 CD F5 32             call LINE          ; Line 2
1862+  2A6A 6B                   ld l,e
1863+  2A6B 7A                   ld a,d
1864+  2A6C 91                   sub c
1865+  2A6D 57                   ld d,a
1866+  2A6E 3E 00                ld a,0             ; just overwrite
1867+  2A70 CD F5 32             call LINE          ; Line 3
1868+  2A73 62                   ld h,d
1869+  2A74 7B                   ld a,e
1870+  2A75 91                   sub c
1871+  2A76 3D                   dec a
1872+  2A77 3D                   dec a
1873+  2A78 5F                   ld e,a
1874+  2A79 3E 00                ld a,0             ; just overwrite
1875+  2A7B CD F5 32             call LINE          ; Line 4
1876+  2A7E 6B                   ld l,e             ; hl now the same        
1877+  2A7F C9                   ret
1878+  2A80             
1879+  2A80             ;------------------------------------------------------
1880+  2A80             ; KEY & CURSOR CONTROLLER
1881+  2A80             ;
1882+  2A80             ; a-reg contains ASCII code of last key pressed
1883+  2A80             ; Arrows controls for cursor.
1884+  2A80             ; Can't go outside board,
1885+  2A80             ; Can't go twice (avoid fast emulator speed)
1886+  2A80             ;
1887+  2A80             
1888+  2A80 00          PreKeyWas:  .byte 0
1889+  2A81             
1890+  2A81             Cursor_Key_Controls:
1891+  2A81             
1892+  2A81 F5                   push af
1893+  2A82 C5                   push bc
1894+  2A83                      
1895+  2A83 FE 7A                cp 'z'             ; If Z was pressed, double action
1896+  2A85 20 0C                jr nz, CkeyIf_z
1897+  2A87             CkeyZ:         
1898+  2A87                                         ; use the same key that was before
1899+  2A87 3A 80 2A             ld a,(PreKeyWas)
1900+  2A8A 4F                   ld c,a
1901+  2A8B 3E 00                ld a,0
1902+  2A8D 32 80 2A             ld (PreKeyWas),a
1903+  2A90 79                   ld a,c
1904+  2A91 18 1B                jr CkeyWhatKeyCode         
1905+  2A93             CkeyIf_z:
1906+  2A93 FE 5A                cp 'Z'
1907+  2A95 28 F0                jr z, CkeyZ
1908+  2A97 FE 2F                cp '/'
1909+  2A99 28 EC                jr z, CkeyZ
1910+  2A9B FE 7E                cp '~'
1911+  2A9D 28 E8                jr z, CkeyZ
1912+  2A9F FE 7C                cp '|'
1913+  2AA1 28 E4                jr z, CkeyZ     ; bunch of the same keys
1914+  2AA3             CkeyNormal:
1915+  2AA3                 
1916+  2AA3 4F                   ld c,a
1917+  2AA4 3A 80 2A             ld a,(PreKeyWas)
1918+  2AA7 B9                   cp c
1919+  2AA8 28 36                jr z,CkeyNo       ; the same, emulator may be too fast
1920+  2AAA 79                   ld a,c
1921+  2AAB 32 80 2A             ld (PreKeyWas),a  ; key now
1922+  2AAE                      
1923+  2AAE             CkeyWhatKeyCode:
1924+  2AAE FE 1B                cp 27
1925+  2AB0 20 07                jr nz, CkeyIf_space
1926+  2AB2                      
1927+  2AB2~            #ifdef PGN_COMPILE
1928+  2AB2~                    ; no exit because too heavy memory usage to continue after
1929+  2AB2             #else       
1930+  2AB2                      
1931+  2AB2 3E 01                ld a,1                     ; Exit on ESC
1932+  2AB4 32 FF 1E             ld (Grph_Exit),a
1933+  2AB7             #endif         
1934+  2AB7 18 27                jr CkeyNo
1935+  2AB9                               
1936+  2AB9             CkeyIf_space:                  
1937+  2AB9 FE 20                cp 32
1938+  2ABB 20 05                jr nz, CkeyIfEnter
1939+  2ABD             CkeySpace:                         ; SPACE pressed
1940+  2ABD CD E3 2A             call CKeySpacePressed
1941+  2AC0 18 1E                jr CkeyNo
1942+  2AC2                      
1943+  2AC2             CkeyIfEnter:
1944+  2AC2 FE 0D                cp 13
1945+  2AC4 28 F7                jr z, CkeySpace           ; the same as space
1946+  2AC6                       ;and process other key controls
1947+  2AC6                                               
1948+  2AC6 CD 3F 2B             call IfCursorKeys       ; process if cursor key has been pressed
1949+  2AC9             CKeyPsetup:
1950+  2AC9 CD A6 2B             call IfPieceSetupKeys   ; process if setup of pieces key has been pressed
1951+  2ACC                      
1952+  2ACC              
1953+  2ACC FE 75                cp 'u'             ; If U was pressed, try undomove
1954+  2ACE 20 0C                jr nz, CkeyIf_u
1955+  2AD0             CkeyU:         
1956+  2AD0                                         ; use the same key that was before
1957+  2AD0             
1958+  2AD0~            #ifdef PGN_COMPILE
1959+  2AD0~            
1960+  2AD0~                     call DO_Replay_UnmakeMove   ; unmake last move in replay
1961+  2AD0             #else
1962+  2AD0 3A FB 1E             ld a,(Stylo)
1963+  2AD3 CB 47                bit 0,a
1964+  2AD5 28 09                jr z,CkeyNo        ; if cursor allowed
1965+  2AD7 CD 78 21             call Chess_UnMake_Move_U    ; unmake last move
1966+  2ADA             #endif
1967+  2ADA 18 04                jr CkeyNo
1968+  2ADC             CkeyIf_u:
1969+  2ADC FE 55                cp 'U'
1970+  2ADE 28 F0                jr z, CkeyU
1971+  2AE0                      
1972+  2AE0             CkeyIfNoU:
1973+  2AE0             
1974+  2AE0             CkeyNo:
1975+  2AE0 C1                   pop bc
1976+  2AE1 F1                   pop af
1977+  2AE2 C9                   ret 
1978+  2AE3             
1979+  2AE3                     
1980+  2AE3             ;-------------------- If space key pressed -the long one
1981+  2AE3             CKeySpacePressed:         
1982+  2AE3 F5                   push af
1983+  2AE4 3A FB 1E             ld a,(Stylo)
1984+  2AE7                      
1985+  2AE7~            #ifdef PGN_COMPILE 
1986+  2AE7~                     
1987+  2AE7~                     call DO_Replay_Move            ; if REPLAY mode
1988+  2AE7~            
1989+  2AE7             #else         
1990+  2AE7                      
1991+  2AE7 CB 47                bit 0,a                   ; if cursor is not allowed 
1992+  2AE9 28 4F                jr z,CSpcOver
1993+  2AEB                               
1994+  2AEB CB 57                bit 2,a                   ; if setup of pieces then empty square
1995+  2AED 28 07                jr z,CSpcNPS
1996+  2AEF 3E 20                ld a,' '
1997+  2AF1 CD A6 2B             call IfPieceSetupKeys     ; process if setup of pieces key has been pressed
1998+  2AF4 18 44                jr CSpcOver
1999+  2AF6             CSpcNPS:         
2000+  2AF6 CB 4F                bit 1,a                   ; if can not drag and move pieces 
2001+  2AF8 28 40                jr z,CSpcOver
2002+  2AFA             
2003+  2AFA 3A CD 22             ld a,(AnimI)
2004+  2AFD FE 00                cp 0
2005+  2AFF 20 39                jr nz,CSpcOver            ; animation process right now
2006+  2B01 3A FD 1E             ld a,(DragSq)
2007+  2B04 FE FF                cp $ff
2008+  2B06 20 16                jr nz, CDragWas
2009+  2B08             CSpcDragz:         
2010+  2B08 3E 00                ld a,0
2011+  2B0A CD EB 21             call IsValidDragMove
2012+  2B0D FE 00                cp 0
2013+  2B0F 28 29                jr z, CSpcOver           ; if drag not valid
2014+  2B11                               
2015+  2B11 3A FC 1E             ld a,(CursorSq)
2016+  2B14 32 FD 1E             ld (DragSq),a
2017+  2B17 18 21                jr CSpcOver
2018+  2B19                      
2019+  2B19             CSpcTryDrag:
2020+  2B19 CD 73 24             call DrawBoard       ; redraw all
2021+  2B1C 18 EA                jr CSpcDragz        
2022+  2B1E                      
2023+  2B1E             CDragWas:
2024+  2B1E 32 BB 22             ld (Move_sq_f),a
2025+  2B21 3E 01                ld a,1
2026+  2B23 CD EB 21             call IsValidDragMove
2027+  2B26 F5                   push af
2028+  2B27 3E FF                ld a,$ff
2029+  2B29 32 FD 1E             ld (DragSq),a
2030+  2B2C F1                   pop af
2031+  2B2D FE 00                cp 0
2032+  2B2F 28 E8                jr z, CSpcTryDrag      ; if move not valid
2033+  2B31             
2034+  2B31 3A FC 1E             ld a,(CursorSq)
2035+  2B34 32 BC 22             ld (Move_sq_t),a
2036+  2B37                      
2037+  2B37 CD 55 21             call Chess_Move_Cursor          ; this will set animation and do the move
2038+  2B3A             CSpcOver:
2039+  2B3A CD 10 2A             call DrawCursor
2040+  2B3D                      
2041+  2B3D             #endif         
2042+  2B3D F1                   pop af
2043+  2B3E C9                   ret         
2044+  2B3F                      
2045+  2B3F             ;---------------------------------
2046+  2B3F             ; If cursor arrow keys pressed
2047+  2B3F             ;
2048+  2B3F             IfCursorKeys:
2049+  2B3F             
2050+  2B3F F5                   push af     
2051+  2B40 FE 1D                cp 29
2052+  2B42 20 17                jr nz, CkeyIfCurs2
2053+  2B44                                                ; LEFT pressed                                 
2054+  2B44 3A FC 1E             ld a,(CursorSq)
2055+  2B47 4F                   ld c,a                                   
2056+  2B48 E6 07                and 7
2057+  2B4A FE 00                cp 0
2058+  2B4C 28 56                jr z,CkeyCKexit
2059+  2B4E 79                   ld a,c
2060+  2B4F CD 8A 24             call DrawSquare
2061+  2B52 3D                   dec a
2062+  2B53                      
2063+  2B53             CKeyCursMv:
2064+  2B53 32 FC 1E             ld (CursorSq),a
2065+  2B56 CD 10 2A             call DrawCursor
2066+  2B59 18 49                jr CkeyCKexit
2067+  2B5B             
2068+  2B5B             CkeyIfCurs2:  
2069+  2B5B FE 1C                cp 28
2070+  2B5D 20 11                jr nz, CkeyIfCurs3                                       
2071+  2B5F                                                ; RIGHT pressed                                      
2072+  2B5F 3A FC 1E             ld a,(CursorSq)
2073+  2B62 4F                   ld c,a         
2074+  2B63 E6 07                and 7
2075+  2B65 FE 07                cp 7
2076+  2B67 28 3B                jr z,CkeyCKexit
2077+  2B69 79                   ld a,c
2078+  2B6A CD 8A 24             call DrawSquare
2079+  2B6D 3C                   inc a         
2080+  2B6E 18 E3                jr CKeyCursMv
2081+  2B70             
2082+  2B70                                                                                                                           
2083+  2B70             CkeyIfCurs3:
2084+  2B70 FE 1E                cp 30
2085+  2B72 20 16                jr nz, CkeyIfCurs4                                       
2086+  2B74                                                ; UP pressed                                   
2087+  2B74 3A FC 1E             ld a,(CursorSq)
2088+  2B77 4F                   ld c,a                                           
2089+  2B78 CB 3F                srl a
2090+  2B7A CB 3F                srl a
2091+  2B7C CB 3F                srl a
2092+  2B7E FE 07                cp 7
2093+  2B80 28 22                jr z,CkeyCKexit
2094+  2B82 79                   ld a,c
2095+  2B83 CD 8A 24             call DrawSquare
2096+  2B86 C6 08                add a,8                 
2097+  2B88 18 C9                jr CKeyCursMv
2098+  2B8A                                                 
2099+  2B8A             CkeyIfCurs4:
2100+  2B8A FE 1F                cp 31
2101+  2B8C 20 16                jr nz, CkeyCKexit                                      
2102+  2B8E                                                ; DOWN pressed                                   
2103+  2B8E 3A FC 1E             ld a,(CursorSq)
2104+  2B91 4F                   ld c,a                                           
2105+  2B92 CB 3F                srl a
2106+  2B94 CB 3F                srl a
2107+  2B96 CB 3F                srl a
2108+  2B98 FE 00                cp 0
2109+  2B9A 28 08                jr z,CkeyCKexit
2110+  2B9C 79                   ld a,c
2111+  2B9D CD 8A 24             call DrawSquare
2112+  2BA0 D6 08                sub 8        
2113+  2BA2 18 AF                jr CKeyCursMv
2114+  2BA4                      
2115+  2BA4             CkeyCKexit:
2116+  2BA4 F1                   pop af         
2117+  2BA5 C9                   ret
2118+  2BA6             
2119+  2BA6             ;---------------------------------
2120+  2BA6             ; If piece keys PNBRQK pressed
2121+  2BA6             ;
2122+  2BA6             IfPieceSetupKeys:
2123+  2BA6 F5                   push af
2124+  2BA7 C5                   push bc
2125+  2BA8 D5                   push de
2126+  2BA9 E5                   push hl
2127+  2BAA 47                   ld b,a   ;save code
2128+  2BAB FE 50                cp 'P'
2129+  2BAD 28 32                jr z,CsetupWP
2130+  2BAF FE 4E                cp 'N'
2131+  2BB1 28 3B                jr z,CsetupWN
2132+  2BB3 FE 42                cp 'B'
2133+  2BB5 28 37                jr z,CsetupWB
2134+  2BB7 FE 52                cp 'R'
2135+  2BB9 28 33                jr z,CsetupWR
2136+  2BBB FE 51                cp 'Q'
2137+  2BBD 28 2F                jr z,CsetupWQ
2138+  2BBF FE 4B                cp 'K'
2139+  2BC1 28 2D                jr z,CsetupWK
2140+  2BC3 FE 70                cp 'p'
2141+  2BC5 28 1A                jr z,CsetupBP
2142+  2BC7 FE 6E                cp 'n'
2143+  2BC9 28 23                jr z,CsetupBN
2144+  2BCB FE 62                cp 'b'
2145+  2BCD 28 1F                jr z,CsetupBB
2146+  2BCF FE 72                cp 'r'
2147+  2BD1 28 1B                jr z,CsetupBR
2148+  2BD3 FE 71                cp 'q'
2149+  2BD5 28 17                jr z,CsetupBQ
2150+  2BD7 FE 6B                cp 'k'
2151+  2BD9 28 21                jr z,CsetupBK
2152+  2BDB FE 20                cp ' '
2153+  2BDD 28 2B                jr z,CsetupBlank
2154+  2BDF 18 27                jr CsetupDoNothing
2155+  2BE1             CsetupWP:
2156+  2BE1             CsetupBP:
2157+  2BE1 3A FC 1E             ld a,(CursorSq)
2158+  2BE4 FE 08                cp 8
2159+  2BE6 38 7C                jr c,CsetupKexit
2160+  2BE8 FE 38                cp 56
2161+  2BEA 30 78                jr nc,CsetupKexit
2162+  2BEC 18 1E                jr Csetup2        
2163+  2BEE             CsetupWN:
2164+  2BEE             CsetupWB:
2165+  2BEE             CsetupWR:
2166+  2BEE             CsetupWQ:
2167+  2BEE             CsetupBN:
2168+  2BEE             CsetupBB:
2169+  2BEE             CsetupBR:
2170+  2BEE             CsetupBQ:
2171+  2BEE 18 1C                jr Csetup2
2172+  2BF0             CsetupWK:
2173+  2BF0 3A 84 01             ld a,(WKSQ)
2174+  2BF3 FE FF                cp $ff
2175+  2BF5 28 03                jr z,Csu2WK
2176+  2BF7 CD 69 2C             call CsuKRmv    ; White king not here anymore
2177+  2BFA 18 10       Csu2WK:  jr Csetup2
2178+  2BFC             
2179+  2BFC             
2180+  2BFC             CsetupBK:
2181+  2BFC 3A 85 01             ld a,(BKSQ)
2182+  2BFF FE FF                cp $ff
2183+  2C01 28 03                jr z,Csu2BK
2184+  2C03 CD 69 2C             call CsuKRmv    ; Black king not here anymore
2185+  2C06 18 04       Csu2BK:  jr Csetup2
2186+  2C08                      
2187+  2C08             CsetupDoNothing:
2188+  2C08 18 5A                jr CsetupKexit  ; exit
2189+  2C0A             
2190+  2C0A 06 00       CsetupBlank: ld b,0 ; will be empty square
2191+  2C0C             
2192+  2C0C             Csetup2:               ;puts new piece on board or clears square
2193+  2C0C 3A FC 1E             ld a,(CursorSq)
2194+  2C0F CD 9F 23             call ObtainHLboardBySq
2195+  2C12 4F                   ld c,a
2196+  2C13 3A 84 01             ld a,(WKSQ)
2197+  2C16 B9                   cp c
2198+  2C17 20 07                jr nz,CsuNoOverWK
2199+  2C19 3E FF                ld a,$ff
2200+  2C1B 32 84 01             ld (WKSQ),a
2201+  2C1E 18 0B                jr CsuOverK       
2202+  2C20             CsuNoOverWK:       
2203+  2C20 3A 85 01             ld a,(BKSQ)
2204+  2C23 B9                   cp c
2205+  2C24 20 05                jr nz,CsuOverK
2206+  2C26 3E FF                ld a,$ff
2207+  2C28 32 85 01             ld (BKSQ),a
2208+  2C2B             
2209+  2C2B             CsuOverK:     
2210+  2C2B 78                   ld a,b
2211+  2C2C FE 4B                cp 'K'
2212+  2C2E 20 06                jr nz, CsuNoWKnwpos
2213+  2C30 79                   ld a,c
2214+  2C31 32 84 01             ld (WKSQ),a
2215+  2C34 18 08                jr CsuOverK2
2216+  2C36             CsuNoWKnwpos:
2217+  2C36 FE 6B                cp 'k'
2218+  2C38 20 04                jr nz, CsuOverK2
2219+  2C3A 79                   ld a,c
2220+  2C3B 32 85 01             ld (BKSQ),a
2221+  2C3E             CsuOverK2:
2222+  2C3E 78                   ld a,b
2223+  2C3F 70                   ld (hl),b          ; new piece or empty square here
2224+  2C40 FE 00                cp 0
2225+  2C42 28 0D                jr z,CsuNSd
2226+  2C44 FE 5A                cp 'Z'
2227+  2C46 30 04                jr nc,CsetupBlackPc
2228+  2C48 3E 00                ld a,0
2229+  2C4A 18 02                jr CsuSDm
2230+  2C4C             CsetupBlackPc:         
2231+  2C4C 3E 01                ld a,1
2232+  2C4E 32 81 01    CsuSDm:  ld (SIDE),a
2233+  2C51 CD 1C 29    CsuNSd:  call PutToMove
2234+  2C54 79                   ld a,c        
2235+  2C55 CD 8A 24             call DrawSquare
2236+  2C58 CD 7B 2C             call RecalcCastles ;what castlings are possible?
2237+  2C5B CD 10 2A             call DrawCursor
2238+  2C5E 11 AA 20             ld de,wasSetUpFEN
2239+  2C61 CD 5C 13             call GetFEN        ;keeps actual FEN for position
2240+  2C64             CsetupKexit:
2241+  2C64 E1                   pop hl         
2242+  2C65 D1                   pop de
2243+  2C66 C1                   pop bc
2244+  2C67 F1                   pop af
2245+  2C68 C9                   ret
2246+  2C69             
2247+  2C69             ; this is used for kings to remove them from board
2248+  2C69 F5          CsuKRmv: push af
2249+  2C6A C5                   push bc
2250+  2C6B E5                   push hl
2251+  2C6C 4F                   ld c,a
2252+  2C6D CD 9F 23             call ObtainHLboardBySq
2253+  2C70 3E 00                ld a,0
2254+  2C72 77                   ld (hl),a
2255+  2C73 79                   ld a,c
2256+  2C74 CD 8A 24             call DrawSquare ; empty square now         
2257+  2C77 E1                   pop hl
2258+  2C78 C1                   pop bc
2259+  2C79 F1                   pop af
2260+  2C7A C9                   ret
2261+  2C7B             ;
2262+  2C7B             ; this calculates maximum possible castling and sets flags
2263+  2C7B             ; otherwise movements may not work normally
2264+  2C7B             ; 
2265+  2C7B             RecalcCastles:
2266+  2C7B F5                   push af
2267+  2C7C F5                   push af
2268+  2C7D E5                   push hl
2269+  2C7E 06 00                ld b,0         ; new flags for castlings
2270+  2C80 3A 84 01             ld a,(WKSQ)
2271+  2C83 FE 04                cp 4
2272+  2C85 20 18                jr nz,RclcBlack
2273+  2C87 3E 07                ld a,7
2274+  2C89 CD 9F 23             call ObtainHLboardBySq
2275+  2C8C 7E                   ld a,(hl)
2276+  2C8D FE 52                cp 'R'
2277+  2C8F 20 02                jr nz,RclnWr1
2278+  2C91 CB C0                set 0,b
2279+  2C93 3E 00       RclnWr1: ld a,0
2280+  2C95 CD 9F 23             call ObtainHLboardBySq
2281+  2C98 7E                   ld a,(hl)
2282+  2C99 FE 52                cp 'R'
2283+  2C9B 20 02                jr nz,RclcBlack
2284+  2C9D CB C8                set 1,b
2285+  2C9F             RclcBlack:
2286+  2C9F 3A 85 01             ld a,(BKSQ)
2287+  2CA2 FE 3C                cp 60
2288+  2CA4 20 18                jr nz,RclcOver
2289+  2CA6 3E 3F                ld a,63
2290+  2CA8 CD 9F 23             call ObtainHLboardBySq
2291+  2CAB 7E                   ld a,(hl)
2292+  2CAC FE 72                cp 'r'
2293+  2CAE 20 02                jr nz,RclnBr1
2294+  2CB0 CB D0                set 2,b
2295+  2CB2 3E 38       RclnBr1: ld a,56
2296+  2CB4 CD 9F 23             call ObtainHLboardBySq
2297+  2CB7 7E                   ld a,(hl)
2298+  2CB8 FE 72                cp 'r'
2299+  2CBA 20 02                jr nz,RclcOver
2300+  2CBC CB D8                set 3,b
2301+  2CBE             RclcOver:
2302+  2CBE 78                   ld a,b
2303+  2CBF 32 82 01             ld (CASTLES),a
2304+  2CC2 E1                   pop hl
2305+  2CC3 C1                   pop bc
2306+  2CC4 F1                   pop af
2307+  2CC5 C9                   ret                                                                                                                                                      
2308+  2CC6             
2309+  2CC6             
2310+  2CC6             ;---------------------------------
2311+  2CC6             ; Redraw squares around.
2312+  2CC6             ; Intended for large cursor
2313+  2CC6             ; Not used, as DrawCursor does the same.
2314+  2CC6             ;---------------------------------
2315+  2CC6 2D 09 2D 08 _AsqDirc: .byte '-',9,'-',8,'-',7,'-',1,'=',0,'+',1,'+',7,'+',8,'+',9
2315+  2CCA 2D 07 2D 01 
2315+  2CCE 3D 00 2B 01 
2315+  2CD2 2B 07 2B 08 
2315+  2CD6 2B 09 
2316+  2CD8             
2317+  2CD8             RedrawSquaresAround:
2318+  2CD8             
2319+  2CD8 F5                   push af
2320+  2CD9 C5                   push bc
2321+  2CDA D5                   push de
2322+  2CDB E5                   push hl
2323+  2CDC 21 C6 2C             ld hl,_AsqDirc
2324+  2CDF 06 09                ld b,9
2325+  2CE1 4F                   ld c,a
2326+  2CE2             ArndSqScan
2327+  2CE2 7E                   ld a,(hl)
2328+  2CE3 23                   inc hl
2329+  2CE4 FE 2D                cp '-'
2330+  2CE6 28 08                jr z,ArndSqDec
2331+  2CE8 7E                   ld a,(hl)
2332+  2CE9 81                   add a,c
2333+  2CEA FE 3F                cp 63
2334+  2CEC 38 0A                jr c,ArndSqNo
2335+  2CEE 18 05                jr ArndSqYes                 
2336+  2CF0             ArndSqDec:         
2337+  2CF0 56                   ld d,(hl)
2338+  2CF1 79                   ld a,c
2339+  2CF2 92                   sub d
2340+  2CF3 38 03                jr c,ArndSqNo
2341+  2CF5             ArndSqYes:         
2342+  2CF5 CD 8A 24             call DrawSquare   ; if square on board then redraw
2343+  2CF8             ArndSqNo:
2344+  2CF8 79                   ld a,c
2345+  2CF9 23                   inc hl
2346+  2CFA 10 E6                djnz ArndSqScan
2347+  2CFC E1                   pop hl
2348+  2CFD D1                   pop de
2349+  2CFE C1                   pop bc
2350+  2CFF F1                   pop af
2351+  2D00 C9                   ret
2352+  2D01             
2353+  2D01                      
2354+  2D01             ;-----------------------------------------------------------
2355+  2D01             ;
2356+  2D01             ; Process replay of one move
2357+  2D01             ;
2358+  2D01             ;-----------------------------------------------------------
2359+  2D01             DO_Replay_Move:
2360+  2D01 F5                   push af
2361+  2D02 C5                   push bc
2362+  2D03 D5                   push de
2363+  2D04 E5                   push hl
2364+  2D05                               
2365+  2D05 11 C2 39             ld de, MOVE_str
2366+  2D08 3A FE 1E             ld a,(RplyMs)
2367+  2D0B 47                   ld b,a
2368+  2D0C FE 00                cp 0
2369+  2D0E 28 1A                jr z,RplyTo0
2370+  2D10             RplyLoopMv:
2371+  2D10 13                   inc de
2372+  2D11 13                   inc de
2373+  2D12 13                   inc de
2374+  2D13 13                   inc de
2375+  2D14 1A                   ld a,(de)
2376+  2D15 FE 20                cp 32
2377+  2D17 28 01                jr z,RplyNskp1
2378+  2D19 13                   inc de          ;skip promotion
2379+  2D1A             RplyNskp1:
2380+  2D1A 13                   inc de         
2381+  2D1B 1A                   ld a,(de)
2382+  2D1C FE 20                cp 32
2383+  2D1E 28 1D                jr z,RplyNoMv
2384+  2D20 FE 00                cp 0
2385+  2D22 28 19                jr z,RplyNoMv
2386+  2D24 FE 24                cp '$'
2387+  2D26 28 15                jr z,RplyNoMv
2388+  2D28             
2389+  2D28 10 E6                djnz RplyLoopMv
2390+  2D2A             RplyTo0:
2391+  2D2A CD 98 0A             call MbyStrMove           ; move
2392+  2D2D CD 73 24             call DrawBoard            ; no animation, sorry
2393+  2D30 CD 1C 29             call PutToMove
2394+  2D33 CD 74 0A             call GenMovesAndString    ;GenMoves
2395+  2D36                      
2396+  2D36 3A FE 1E             ld a,(RplyMs)
2397+  2D39 3C                   inc a
2398+  2D3A 32 FE 1E             ld (RplyMs),a
2399+  2D3D             RplyNoMv:
2400+  2D3D E1                   pop hl       
2401+  2D3E D1                   pop de
2402+  2D3F C1                   pop bc
2403+  2D40 F1                   pop af
2404+  2D41 C9                   ret
2405+  2D42             
2406+  2D42                     
2407+  2D42             DO_Replay_UnmakeMove:
2408+  2D42 F5                   push af
2409+  2D43 3A FE 1E             ld a,(RplyMs)
2410+  2D46 FE 00                cp 0
2411+  2D48 28 13                jr z,RplyUMKret
2412+  2D4A CD DE 1C             call UnMakeMove
2413+  2D4D CD 73 24             call DrawBoard            ; no animation, sorry
2414+  2D50 CD 1C 29             call PutToMove
2415+  2D53 CD F8 0A             call GenMoves
2416+  2D56 3A FE 1E             ld a,(RplyMs)
2417+  2D59 3D                   dec a
2418+  2D5A 32 FE 1E             ld (RplyMs),a
2419+  2D5D             RplyUMKret:
2420+  2D5D F1                   pop af
2421+  2D5E C9                   ret
2422+  2D5F                               
2423+  2D5F             
2424+  2D5F 00          Loaded2VRAM: .byte 0       ; pre-loading of datas from file just once,
2425+  2D60                                        ; after the VRAM memory could be used only.
2426+  2D60                                        
2427+  2D60             Chess_GraphDatas_address:   .equ $8000         ; address where to load module
2428+  2D60             
2429+  2D60             Chess_GraphDatas_filename:
2430+  2D60 00 43 48 45            .byte 0, "CHESSPI CO2",0            ; name of file
2430+  2D64 53 53 50 49 
2430+  2D68 20 43 4F 32 
2430+  2D6C 00 
2431+  2D6D             
2432+  2D6D             ChessY2K_GraphDatas_load:
2433+  2D6D F5                      push af
2434+  2D6E 3A 5F 2D                ld a,(Loaded2VRAM)
2435+  2D71                         
2436+  2D71 FE 00                   cp 0
2437+  2D73 20 12                   jr nz,GraphDatas_ok
2438+  2D75             
2439+  2D75 E5                      push hl
2440+  2D76 D5                      push de
2441+  2D77 21 60 2D                ld hl,Chess_GraphDatas_filename
2442+  2D7A 11 00 80                ld de,Chess_GraphDatas_address
2443+  2D7D CD CE 33                call diskload                     ; loads datas
2444+  2D80 D1                      pop de
2445+  2D81 E1                      pop hl
2446+  2D82                         
2447+  2D82 3E 01                   ld a,1
2448+  2D84 32 5F 2D                ld (Loaded2VRAM),a                ; VRAM ok
2449+  2D87             GraphDatas_ok:
2450+  2D87 F1                      pop af
2451+  2D88 C9                      ret
2452+  2D89             
2453+  2D89                         ;                                                                               
2454+  2D89                         ; Data files for pieces Colour of piece (B or W) 
2455+  2D89                         ;   + Name of piece ("KQRBNP" or empty square)
2456+  2D89                         ;   + colour of square under (read black bishop on black square)
2457+  2D89             
2458+  2D89             tbPalettes:
2459+  2D89                         ;table of colours Nr,R,G,B
2460+  2D89                         ;  thanks to bmp2msx software (http://www.imasy.or.jp/~hra/)
2461+  2D89 00 06 06 05         .byte $0,6,6,5
2462+  2D8D 01 05 03 02         .byte $1,5,3,2
2463+  2D91 02 00 00 00         .byte $2,0,0,0
2464+  2D95 03 07 07 06         .byte $3,7,7,6
2465+  2D99 04 05 04 03         .byte $4,5,4,3
2466+  2D9D 05 05 05 05         .byte $5,5,5,5
2467+  2DA1 06 06 06 06         .byte $6,6,6,6
2468+  2DA5 07 03 02 02         .byte $7,3,2,2
2469+  2DA9 08 03 03 03         .byte $8,3,3,3
2470+  2DAD 09 06 05 04         .byte $9,6,5,4
2471+  2DB1 0A 04 04 03         .byte $A,4,4,3
2472+  2DB5 0B 01 01 01         .byte $B,1,1,1
2473+  2DB9 0C 02 01 01         .byte $C,2,1,1
2474+  2DBD 0D 06 05 06         .byte $D,6,5,6
2475+  2DC1 0E 01 01 02         .byte $E,1,1,2
2476+  2DC5 0F 01 02 01         .byte $F,1,2,1
2477+  2DC9                     3633   2DC9                       #include "ChessMN.ASM"     ; MENU choices
0001+  2DC9             ;=======================================
0002+  2DC9             ;
0003+  2DC9             ; MAIN loop and MENU for ChessY2K
0004+  2DC9             ;
0005+  2DC9             ;=======================================
0006+  2DC9             
0007+  2DC9 00          _menuI:     .byte 0   ;Current menu item to choose
0008+  2DCA 00          _exitMn:    .byte 0   ;internal to know that exit 
0009+  2DCB             
0010+  2DCB             ChessMN:
0011+  2DCB                     
0012+  2DCB             MAINLOOP:
0013+  2DCB 3E 00                ld a,0
0014+  2DCD 32 C9 2D             ld (_menuI),a
0015+  2DD0 CD 15 2E             call MainMenu
0016+  2DD3                               
0017+  2DD3 3A C9 2D             ld a,(_menuI)
0018+  2DD6 FE 00                cp 0
0019+  2DD8 20 02                jr nz, ItemNo0
0020+  2DDA 18 38                jr EXIT_ALL        
0021+  2DDC             ItemNo0:
0022+  2DDC FE 01                cp 1
0023+  2DDE 20 09                jr nz, ItemNo1
0024+  2DE0                      
0025+  2DE0 3A C2 39             ld a,(MOVE_str)
0026+  2DE3 FE 00                cp 0
0027+  2DE5 28 28                jr z,LoopM
0028+  2DE7                      
0029+  2DE7~            #ifdef PGN_COMPILE 
0030+  2DE7~                    
0031+  2DE7~                     ld a,%00000000         ; no cursor,can't dragmove, just replaymoves
0032+  2DE7~                     ld (Stylo),a 
0033+  2DE7~            
0034+  2DE7~                     call GraphicsS         ; user interface for chess program
0035+  2DE7~                     
0036+  2DE7~                     ld a,0
0037+  2DE7~                     ld (Stylo),a
0038+  2DE7             #endif                   
0039+  2DE7 18 26                jr LoopM
0040+  2DE9             ItemNo1:      
0041+  2DE9 FE 02                cp 2
0042+  2DEB 20 0F                jr nz, ItemNo2
0043+  2DED             
0044+  2DED 3E 03                ld a,%00000011         ; cursor,can dragmove
0045+  2DEF 32 FB 1E             ld (Stylo),a 
0046+  2DF2                      
0047+  2DF2 CD C7 1F             call GraphicsS         ; user interface for chess program
0048+  2DF5                      
0049+  2DF5 3E 00                ld a,0
0050+  2DF7 32 FB 1E             ld (Stylo),a 
0051+  2DFA             
0052+  2DFA 18 13                jr LoopM
0053+  2DFC             
0054+  2DFC             ItemNo2:
0055+  2DFC FE 03                cp 3
0056+  2DFE 20 0F                jr nz, ItemNo3
0057+  2E00             
0058+  2E00 3E 05                ld a,%00000101         ; cursor,can setup pieces
0059+  2E02 32 FB 1E             ld (Stylo),a 
0060+  2E05                      
0061+  2E05 CD C7 1F             call GraphicsS         ; user interface for chess program
0062+  2E08                      
0063+  2E08 3E 00                ld a,0
0064+  2E0A 32 FB 1E             ld (Stylo),a 
0065+  2E0D             
0066+  2E0D 18 00                jr LoopM
0067+  2E0F                     
0068+  2E0F             ItemNo3:         
0069+  2E0F             LoopM:   
0070+  2E0F             
0071+  2E0F CD E6 0A             call UndoAllMoves   ; good refresh
0072+  2E12                      
0073+  2E12 18 B7                jr MAINLOOP
0074+  2E14                           
0075+  2E14                      
0076+  2E14             EXIT_ALL:
0077+  2E14             
0078+  2E14 C9                   ret
0079+  2E15                      
0080+  2E15             
0081+  2E15             MainMenu:
0082+  2E15                         
0083+  2E15 CD 35 30                call ClearScreenBy30h
0084+  2E18 CD 7C 2F                call LastFENwasSet        ; to know FEN set up
0085+  2E1B 21 89 2D                ld hl, tbPalettes         ; in datas of ChessUI  
0086+  2E1E CD D1 2F                call SetPaletteByTable    ; defines 16colors                 
0087+  2E21                                                    
0088+  2E21 3E 00                   ld a,0
0089+  2E23 32 CA 2D                ld (_exitMn),a
0090+  2E26 3E 01                   ld a,1
0091+  2E28                                                 
0092+  2E28~            #ifdef PGN_COMPILE                       
0093+  2E28             #else
0094+  2E28 3C                      inc a                    ; can not access first choice
0095+  2E29             #endif            
0096+  2E29 32 C9 2D                ld (_menuI),a
0097+  2E2C                         
0098+  2E2C CD 1B 30                call InkeyKeyBy30h      ; keypress detect
0099+  2E2F 32 3C 2F                ld (_keymnbf),a         ; saves last key
0100+  2E32                                     
0101+  2E32             MENULOOP:                           ; Loop till ESC pressed
0102+  2E32 CD 60 2E                call DrawChoices
0103+  2E35 CD 1B 30                call InkeyKeyBy30h      ; keypress detect
0104+  2E38                         
0105+  2E38                         ;cp 27
0106+  2E38                         ;jr z,EscEXIT
0107+  2E38                         
0108+  2E38 CD 3D 2F                call MenuKeyPress       ; Selection or other item
0109+  2E3B 18 0A                   jr Menu2loop
0110+  2E3D             
0111+  2E3D             EscEXIT:
0112+  2E3D 3E 00                   ld a,0            
0113+  2E3F 32 C9 2D                ld (_menuI),a           ; nothing selected
0114+  2E42 3E 01                   ld a,1            
0115+  2E44 32 CA 2D                ld (_exitMn),a
0116+  2E47             Menu2loop:            
0117+  2E47                                                 
0118+  2E47 3A CA 2D                ld a,(_exitMn)
0119+  2E4A FE 00                   cp 0
0120+  2E4C 28 E4                   jr z, MENULOOP
0121+  2E4E                         
0122+  2E4E 21 01 01                ld hl,$0101             ; locate left upper corner
0123+  2E51 CD 57 30                call LocatePosBy30h
0124+  2E54 3E 01                   ld a,1                  ; display cursor
0125+  2E56 32 A9 FC                ld (CSRSW),a
0126+  2E59 CD 35 30                call ClearScreenBy30h   ; and clear the screen
0127+  2E5C CD EC 32                call RestoreColors      ; restores default MSX colors
0128+  2E5F                                                  
0129+  2E5F C9                      ret
0130+  2E60             
0131+  2E60             ;------------- draws menu items
0132+  2E60             DrawChoices:
0133+  2E60 F5                      push af
0134+  2E61 C5                      push bc
0135+  2E62 D5                      push de
0136+  2E63 E5                      push hl
0137+  2E64                         
0138+  2E64                         ;ld a,2
0139+  2E64                         ;ld (FORCLR),a           ; set color black
0140+  2E64                         ;call SetColorBy30h
0141+  2E64                     
0142+  2E64 21 05 04                ld hl,$0405
0143+  2E67 CD 57 30                call LocatePosBy30h
0144+  2E6A             
0145+  2E6A 11 B2 2E                ld de, MNheader
0146+  2E6D                         
0147+  2E6D 3E 00                   ld a,0                  ; do not display cursor
0148+  2E6F 32 A9 FC                ld (CSRSW),a
0149+  2E72                          
0150+  2E72 CD 66 30                call PrintString
0151+  2E75                         
0152+  2E75 2E 07                   ld l,7 ; row
0153+  2E77 06 00                   ld b,0 ; 3 choices
0154+  2E79 11 D2 2E                ld de, MNchoices
0155+  2E7C             MNchScan:   
0156+  2E7C 04                      inc b          
0157+  2E7D 2C                      inc l  ; next row
0158+  2E7E 26 04                   ld h,4 ; col
0159+  2E80             
0160+  2E80 CD 57 30                call LocatePosBy30h
0161+  2E83                      
0162+  2E83 CD 66 30                call PrintString
0163+  2E86                   
0164+  2E86 E5                      push hl
0165+  2E87 EB                      ex de,hl    ; hl = de
0166+  2E88 C5                      push bc
0167+  2E89 01 20 00                ld bc,32
0168+  2E8C 09                      add hl,bc
0169+  2E8D C1                      pop bc
0170+  2E8E EB                      ex de,hl    ; de = hl+32 now
0171+  2E8F E1                      pop hl
0172+  2E90                         
0173+  2E90 D5                      push de
0174+  2E91 26 01                   ld h,1 ; col
0175+  2E93 CD 57 30                call LocatePosBy30h            
0176+  2E96 3A C9 2D                ld a,(_menuI)
0177+  2E99 B8                      cp b
0178+  2E9A 20 05                   jr nz,MNchNotI
0179+  2E9C 11 32 2F                ld de,MnSelector    ; selector char
0180+  2E9F 18 03                   jr MNchSelI
0181+  2EA1 11 37 2F    MNchNotI:   ld de,MnSpace        ;space
0182+  2EA4 CD 66 30    MNchSelI:   call PrintString
0183+  2EA7 D1                      pop de
0184+  2EA8                                                 
0185+  2EA8 3E 03                   ld a,MNitems
0186+  2EAA B8                      cp b           
0187+  2EAB 20 CF                   jr nz,MNchScan          
0188+  2EAD                         
0189+  2EAD E1                      pop hl
0190+  2EAE D1                      pop de
0191+  2EAF C1                      pop bc
0192+  2EB0 F1                      pop af
0193+  2EB1 C9                      ret
0194+  2EB2                         
0195+  2EB2             
0196+  2EB2 4D 53 58 20 MNheader:   .byte "MSX chessY2K project          $",0
0196+  2EB6 63 68 65 73 
0196+  2EBA 73 59 32 4B 
0196+  2EBE 20 70 72 6F 
0196+  2EC2 6A 65 63 74 
0196+  2EC6 20 20 20 20 
0196+  2ECA 20 20 20 20 
0196+  2ECE 20 20 24 00 
0197+  2ED2             
0198+  2ED2             
0199+  2ED2~            #ifdef PGN_COMPILE
0200+  2ED2~            
0201+  2ED2~            MNitems:    .equ 1
0202+  2ED2~            MNchoices:
0203+  2ED2~                        .byte "Replay chess game from PGN    $",0
0204+  2ED2~                        
0205+  2ED2             #else
0206+  2ED2             
0207+  2ED2             MNitems:    .equ 3
0208+  2ED2             MNchoices:
0209+  2ED2 52 65 70 6C             .byte "Replay PGN (other module)     $",0
0209+  2ED6 61 79 20 50 
0209+  2EDA 47 4E 20 28 
0209+  2EDE 6F 74 68 65 
0209+  2EE2 72 20 6D 6F 
0209+  2EE6 64 75 6C 65 
0209+  2EEA 29 20 20 20 
0209+  2EEE 20 20 24 00 
0210+  2EF2 4D 6F 76 65             .byte "Move pieces by using cursor   $",0
0210+  2EF6 20 70 69 65 
0210+  2EFA 63 65 73 20 
0210+  2EFE 62 79 20 75 
0210+  2F02 73 69 6E 67 
0210+  2F06 20 63 75 72 
0210+  2F0A 73 6F 72 20 
0210+  2F0E 20 20 24 00 
0211+  2F12 53 65 74 20             .byte "Set positon for diagram       $",0
0211+  2F16 70 6F 73 69 
0211+  2F1A 74 6F 6E 20 
0211+  2F1E 66 6F 72 20 
0211+  2F22 64 69 61 67 
0211+  2F26 72 61 6D 20 
0211+  2F2A 20 20 20 20 
0211+  2F2E 20 20 24 00 
0212+  2F32             #endif
0213+  2F32             
0214+  2F32 2D 3E 20 24 MnSelector: .byte "-> $",0
0214+  2F36 00 
0215+  2F37 20 20 20 24 MnSpace:    .byte "   $",0
0215+  2F3B 00 
0216+  2F3C             
0217+  2F3C 00          _keymnbf:   .byte 0  ; key pressed before
0218+  2F3D             
0219+  2F3D             ; this checks which key as been pressed
0220+  2F3D             MenuKeyPress:
0221+  2F3D F5                      push af
0222+  2F3E C5                      push bc
0223+  2F3F                         
0224+  2F3F FE 00                   cp 0
0225+  2F41 28 36                   jr z,MNnoAct
0226+  2F43                         
0227+  2F43 47                      ld b,a
0228+  2F44 3A 3C 2F                ld a,(_keymnbf)
0229+  2F47 B8                      cp b
0230+  2F48 28 2F                   jr z, MNnoAct
0231+  2F4A 78                      ld a,b
0232+  2F4B 32 3C 2F                ld (_keymnbf),a
0233+  2F4E                         
0234+  2F4E FE 20                   cp 32
0235+  2F50 20 11                   jr nz,MNnoSpace
0236+  2F52             MNspaceKey:
0237+  2F52             
0238+  2F52 3A C9 2D                ld a,(_menuI)
0239+  2F55 FE 01                   cp 1
0240+  2F57 20 03                   jr nz,noPGNsub
0241+  2F59             
0242+  2F59                         ; submenu of PGN files
0243+  2F59 CD 96 2F                call ChessY2K_pgn_module
0244+  2F5C                         
0245+  2F5C                         ;jr MNnoAct
0246+  2F5C             
0247+  2F5C 3E 01       noPGNsub:   ld a,1
0248+  2F5E 32 CA 2D                ld (_exitMn),a     ; Item has been selected, exit menu and DO action
0249+  2F61 18 16                   jr MNnoAct             
0250+  2F63 FE 0D       MNnoSpace:  cp 13
0251+  2F65 20 02                   jr nz,MNnoEnter
0252+  2F67 18 E9                   jr MNspaceKey
0253+  2F69             MNnoEnter:
0254+  2F69 3A C9 2D                ld a,(_menuI)
0255+  2F6C FE 03                   cp MNitems
0256+  2F6E 28 03                   jr z, MNitemNxt0
0257+  2F70 3C                      inc a ; next item                     
0258+  2F71 18 03                   jr MNitemNxt1            
0259+  2F73 3E 01       MNitemNxt0: ld a,1 
0260+  2F75             
0261+  2F75~            #ifdef PGN_COMPILE                       
0262+  2F75             #else
0263+  2F75 3C                      inc a                    ; can not access first choice
0264+  2F76                                                  ; (1st reserved for other module)
0265+  2F76             #endif
0266+  2F76             
0267+  2F76 32 C9 2D    MNitemNxt1: ld (_menuI),a
0268+  2F79                         
0269+  2F79             MNnoAct:            
0270+  2F79 C1                      pop bc
0271+  2F7A F1                      pop af
0272+  2F7B C9                      ret
0273+  2F7C             
0274+  2F7C             ;
0275+  2F7C             ; This outputs FEN for last position set up
0276+  2F7C             ;           
0277+  2F7C             LastFENwasSet:
0278+  2F7C 21 12 01                ld hl,$0112
0279+  2F7F CD 57 30                call LocatePosBy30h
0280+  2F82 11 AA 20                ld de,wasSetUpFEN
0281+  2F85 CD 66 30                call PrintString   ; print out FEN
0282+  2F88 C9                      ret
0283+  2F89             
0284+  2F89             ;This module has been separated to avoid 
0285+  2F89             ; internal problems
0286+  2F89             ;              
0287+  2F89             Chess_PG_module_address:   .equ $8000         ; address where to load module
0288+  2F89             Chess_PG_module_filename:
0289+  2F89 00 43 48 45            .byte 0, "CHESSPG CO2",0           ; name of module file
0289+  2F8D 53 53 50 47 
0289+  2F91 20 43 4F 32 
0289+  2F95 00 
0290+  2F96                   
0291+  2F96             ChessY2K_pgn_module:
0292+  2F96~            #ifdef PGN_COMPILE
0293+  2F96~                        push de
0294+  2F96~                        push hl
0295+  2F96~                        ld hl,Chess_PG_module_filename
0296+  2F96~                        ld de,Chess_PG_module_address
0297+  2F96~                        call diskload                     ; loads module
0298+  2F96~                        call Chess_PG_module_address      ; starts main sub-procedure
0299+  2F96~                        pop hl
0300+  2F96~                        pop de
0301+  2F96             #endif             
0302+  2F96 C9                      ret
0303+  2F97             
0304+  2F97                     3634   2F97             
3635   2F97                       #include "VDPs.ASM"        ; VDP video functions
0001+  2F97             ;=======================================
0002+  2F97             ;
0003+  2F97             ; VDP functions
0004+  2F97             ;
0005+  2F97             ;=======================================
0006+  2F97             
0007+  2F97             ; Provides:
0008+  2F97             ;----------------------------------------------------------------------
0009+  2F97             ; (1) Just working LAME part for Hello World of MSX VDP
0010+  2F97             ;         (put pixels on screen)
0011+  2F97             ;----------------------------------------------------------------------
0012+  2F97             ;
0013+  2F97             ; These functions provide MSX2 drawing from .COM module.
0014+  2F97             ; LAME part can put pixels and that's all.
0015+  2F97             ; Screen is 212 lines x 128 bytes per line of 2-pixels.
0016+  2F97             ;
0017+  2F97             ; In reality, prepare to spend days on MSX-hardcore:
0018+  2F97             ; manuals, forums, not-working samples, no-hello-worlds, etc. 
0019+  2F97             ; .BIN loaded from BASIC is not the same as .COM
0020+  2F97             ; 64kb-s is less then Bios+DOS+BASIC+programs+etc. require -
0021+  2F97             ; so it crashes silently by rewriting in the same memory addresses.
0022+  2F97             ; Lots of functions described by techies just crash the emulator. 
0023+  2F97             ; BASIC is for drawings!, not assembler.
0024+  2F97             ; And video memory should be used as much possible (page 0-3, not LAME!),
0025+  2F97             ; because MSX has lots of video memory compared to programmable RAM.
0026+  2F97             ;
0027+  2F97             ; Hello world .com that puts 2-pixels in left upper and right lower corner.
0028+  2F97             ; 
0029+  2F97             ;   org $100
0030+  2F97             ;   call SetScreen5By30h
0031+  2F97             ;   ld de,0
0032+  2F97             ;   call LocateHL_byXY_inDE
0033+  2F97             ;   ld a,$77
0034+  2F97             ;   call VDPdraw2pixels    
0035+  2F97             ;   ld d,127
0036+  2F97             ;   ld e,211
0037+  2F97             ;   call LocateHL_byXY_inDE
0038+  2F97             ;   ld a,$88
0039+  2F97             ;   call VDPdraw2pixels
0040+  2F97             ;   call PressKeyBy30h
0041+  2F97             ;   call SetScreen0By30h
0042+  2F97             ;   ret
0043+  2F97             ;         
0044+  2F97             
0045+  2F97             
0046+  2F97             SetScreen5By30h:
0047+  2F97 3E 05                ld    a,$05      ; Screen 5      
0048+  2F99 F7                   rst   30h
0049+  2F9A 80                   .byte $80        ; BIOS slot (when nothing is loaded)  
0050+  2F9B 5F 00                .word $005f      ; CHGMOD CALL 5Fh
0051+  2F9D C9                   ret
0052+  2F9E                      
0053+  2F9E             DisableScreenBy30h:       ; Before...
0054+  2F9E F7                   rst   30h
0055+  2F9F 80                   .byte $80        
0056+  2FA0 41 00                .word $0041      ; Disables screen display      
0057+  2FA2 C9                   ret
0058+  2FA3                      
0059+  2FA3             EnableScreenBy30h:        ; When drawings are finished... 
0060+  2FA3 F7                   rst   30h
0061+  2FA4 80                   .byte $80               
0062+  2FA5 44 00                .word $0044      ; Enables screen display  
0063+  2FA7 C9                   ret
0064+  2FA8             
0065+  2FA8             LocateHL_byXY_inDE:       ; Procedure calculates hl offset and sets VDP for writing
0066+  2FA8 F3                   di
0067+  2FA9 F5                   push af
0068+  2FAA C5                   push bc
0069+  2FAB D5                   push de
0070+  2FAC E5                   push hl
0071+  2FAD DD E5                push ix
0072+  2FAF 6A                   ld l,d           ; regs d=x[0..127]
0073+  2FB0 7B                   ld a,e           ;      e=y[0..211]
0074+  2FB1 11 00 00             ld de,0
0075+  2FB4 CB 47                bit 0,a
0076+  2FB6 28 02                jr z,no2add128bits
0077+  2FB8 1E 80                ld e,$80
0078+  2FBA             no2add128bits:
0079+  2FBA 1F                   rra
0080+  2FBB 67                   ld h,a
0081+  2FBC 19                   add hl,de
0082+  2FBD AF                   xor a 
0083+  2FBE CD C9 2F             call SetVDPwriteBy30h  ; now will write at this position
0084+  2FC1 DD E1                pop ix
0085+  2FC3 E1                   pop hl
0086+  2FC4 D1                   pop de
0087+  2FC5 C1                   pop bc
0088+  2FC6 F1                   pop af
0089+  2FC7 FB                   ei
0090+  2FC8 C9                   ret                                          
0091+  2FC9                                       ; This prepares for "pixeling"
0092+  2FC9             SetVDPwriteBy30h:         ; hl,contains initial address
0093+  2FC9 F7                   rst   30h
0094+  2FCA 80                   .byte $80 
0095+  2FCB 71 01                .word $0171      ; NSTWRT Sets up the VDP for writing wit full VRAM address
0096+  2FCD C9                   ret         
0097+  2FCE             
0098+  2FCE             VDPdraw2pixels:           ; Put 2 pixels by sending one byte with 2 colour Nr. (bits 0-3,4-7)
0099+  2FCE D3 98                out ($98),a      ; send this sequently
0100+  2FD0 C9                   ret
0101+  2FD1                      
0102+  2FD1                              
0103+  2FD1             SetPaletteByTable:        ; Sets colors by given RGB-table in HL-reg
0104+  2FD1 F5                   push af         
0105+  2FD2 C5                   push bc
0106+  2FD3 E5                   push hl
0107+  2FD4 06 10                ld b,$10             ; 16 colours
0108+  2FD6             SPcoLoop:
0109+  2FD6 F3                   di
0110+  2FD7 7E                   ld   a,(hl)
0111+  2FD8 23                   inc  hl
0112+  2FD9 D3 99                out  ($99),a          ; colour Nr.
0113+  2FDB 3E 90                ld   a, 128+16
0114+  2FDD D3 99                out  ($99),a         
0115+  2FDF 7E                   ld   a,(hl)            ; red
0116+  2FE0 23                   inc  hl
0117+  2FE1 23                   inc  hl
0118+  2FE2 CB 27                sla  a
0119+  2FE4 CB 27                sla  a
0120+  2FE6 CB 27                sla  a
0121+  2FE8 CB 27                sla  a                 ; bits 4-7
0122+  2FEA 4F                   ld   c,a
0123+  2FEB 7E                   ld   a,(hl)            ; blue bits 0-3
0124+  2FEC 2B                   dec  hl
0125+  2FED B1                   or   c
0126+  2FEE D3 9A                out  ($9A),a 
0127+  2FF0 7E                   ld   a,(hl)            ; green bits 0-3
0128+  2FF1 23                   inc  hl
0129+  2FF2 23                   inc  hl
0130+  2FF3 D3 9A                out  ($9A),a
0131+  2FF5 FB                   ei 
0132+  2FF6 10 DE                djnz SPcoLoop
0133+  2FF8 E1                   pop  hl         
0134+  2FF9 C1                   pop  bc
0135+  2FFA F1                   pop  af 
0136+  2FFB C9                   ret
0137+  2FFC                      
0138+  2FFC             SetBackgrColor:               ; Sets background color by A=Nr.              
0139+  2FFC F3                   di
0140+  2FFD D3 99                out  ($99),a        ; a=[0..15]
0141+  2FFF 3E 87                ld   a,128+7
0142+  3001 D3 99                out  ($99),a        
0143+  3003 FB                   ei
0144+  3004 C9                   ret
0145+  3005             
0146+  3005             VDPfaster:                   ; working with memory only, no sprite collisions and other things slowing down VDP
0147+  3005 F5                   push af
0148+  3006 F3                   di
0149+  3007 3E 0A                ld   a, %00001010 ; sprites off (bit1), VRAM quantity (bit3)- Affects how VDP performs refresh on DRAM chips   
0150+  3009 D3 99                out  ($99),a
0151+  300B 3E 88                ld   a, 128+8     
0152+  300D D3 99                out  ($99),a
0153+  300F FB                   ei
0154+  3010 F1                   pop af
0155+  3011 C9                   ret
0156+  3012                                                                                                                      
0157+  3012             PressKeyBy30h:               ; wait for keypress
0158+  3012 F7                   rst   30h
0159+  3013 80                   .byte $80 
0160+  3014 9F 00                .word $009f
0161+  3016             ClearKeyBy30h:
0162+  3016 F7                   rst   30h
0163+  3017 80                   .byte $80 
0164+  3018 56 01                .word $0156         ; clear key buffer after             
0165+  301A C9                   ret
0166+  301B             
0167+  301B             InkeyKeyBy30h:               ; detects if there is a keypress
0168+  301B F7                   rst   30h
0169+  301C 80                   .byte $80 
0170+  301D 9C 00                .word $009c
0171+  301F 28 05                jr z,InkeyK_none
0172+  3021 CD 12 30             call PressKeyBy30h  ; if is then detects code
0173+  3024 18 02                jr InkeyK_ret
0174+  3026             InkeyK_none:
0175+  3026 3E 00                ld a,0
0176+  3028             InkeyK_ret:         
0177+  3028 C9                   ret
0178+  3029                                                 
0179+  3029             SetScreen0By30h:             ; set back screen0
0180+  3029 3E 00                ld    a,0      
0181+  302B F7                   rst   30h
0182+  302C 80                   .byte $80
0183+  302D 5F 00                .word $005f
0184+  302F C9                   ret
0185+  3030                      
0186+  3030             SetScreenABy30h:             ; set screen by A-reg
0187+  3030 F7                   rst   30h
0188+  3031 80                   .byte $80
0189+  3032 5F 00                .word $005f
0190+  3034 C9                   ret 
0191+  3035                      
0192+  3035             ClearScreenBy30h:            ; clears screen
0193+  3035 F5                   push af
0194+  3036 C5                   push bc
0195+  3037 D5                   push de
0196+  3038 AF                   xor a          
0197+  3039 F7                   rst   30h
0198+  303A 80                   .byte $80
0199+  303B C3 00                .word $00c3
0200+  303D D1                   pop de
0201+  303E C1                   pop bc
0202+  303F F1                   pop af
0203+  3040 C9                   ret
0204+  3041                      
0205+  3041             LINL40: .equ $F3AE
0206+  3041                             
0207+  3041             SetMode80:
0208+  3041 F5                  push af
0209+  3042 3E 50               ld a,80
0210+  3044 32 AE F3            ld (LINL40),a    ;width 80
0211+  3047 CD 29 30            call SetScreen0By30h
0212+  304A F1                  pop af
0213+  304B C9                  ret
0214+  304C             SetMode40:
0215+  304C F5                  push af
0216+  304D 3E 28               ld a,40
0217+  304F 32 AE F3            ld (LINL40),a    ;width 40
0218+  3052 CD 29 30            call SetScreen0By30h
0219+  3055 F1                  pop af
0220+  3056 C9                  ret 
0221+  3057                              
0222+  3057             LocatePosBy30h:              ; Locate at position H (column) L (row) on screen
0223+  3057 F7                   rst   30h
0224+  3058 80                   .byte $80
0225+  3059 C6 00                .word $00c6
0226+  305B C9                   ret
0227+  305C             PutCharBy30h:                ; Put char reg-a = ascii code      
0228+  305C F7                   rst   30h
0229+  305D 80                   .byte $80
0230+  305E A2 00                .word $00a2
0231+  3060 C9                   ret
0232+  3061             PrintLineBy30h:
0233+  3061 F7                   rst   30h
0234+  3062 80                   .byte $80
0235+  3063 A2 00                .word $00a2
0236+  3065 C9                   ret
0237+  3066             
0238+  3066             CALL_5:   .equ $F37D         ;output string to screen
0239+  3066             ; prints string that ends with $
0240+  3066             ; de-reg points to string in address
0241+  3066             ; 
0242+  3066             PrintString:
0243+  3066 F5                   push af
0244+  3067 C5                   push bc
0245+  3068 D5                   push de
0246+  3069 E5                   push hl
0247+  306A DD E5                push ix
0248+  306C FD E5                push iy
0249+  306E 0E 09                ld c, 9       ; function for CALL 5
0250+  3070 CD 7D F3             call CALL_5   ; MSX printing
0251+  3073 FD E1                pop iy
0252+  3075 DD E1                pop ix
0253+  3077 E1                   pop hl
0254+  3078 D1                   pop de
0255+  3079 C1                   pop bc
0256+  307A F1                   pop af
0257+  307B C9                   ret
0258+  307C                                      
0259+  307C                      
0260+  307C             FORCLR:  .equ  $F3E9         ; foreground color 
0261+  307C             BAKCLR:  .equ  $F3EA         ; background color
0262+  307C             BDRCLR:  .equ  $F3EB         ; bordercolor
0263+  307C             SetColorBy30h:
0264+  307C F7                   rst   30h           ; set color scheme by using FORCLR,BAKCLR,BDRCLR
0265+  307D 80                   .byte $80
0266+  307E 62 00                .word $0062
0267+  3080 C9                   ret
0268+  3081                      
0269+  3081             CSRSW:   .equ $FCA9         ; to set cursor display switch (0-not to show)        
0270+  3081             CSTYLE:  .equ $FCAA         ; to set cursor style (0-full,2-underline)
0271+  3081                 
0272+  3081                             
0273+  3081                      
0274+  3081             ;--------------------------------------
0275+  3081             ; (2) ADVANCED functions, if You love VDP
0276+  3081             ;
0277+  3081             ; Use of pages,
0278+  3081             ; buffered copy of RAM->VRAM, RAM->RAM
0279+  3081             ;--------------------------------------
0280+  3081             ;
0281+  3081             ;
0282+  3081             ; Check if a v9958 is available (if so, return nz)
0283+  3081             ; Initialize address (v9958)
0284+  3081             ; (MSX+,MSXturboR video chip)
0285+  3081             ;
0286+  3081 00          v9958:        .byte      0             ;>1 = v9958 present
0287+  3082             
0288+  3082 F3          v9958_Check:  di                       ;Test for v9958
0289+  3083 3E 01                     ld    a,1                ;Set s$1
0290+  3085 D3 99                     out   ($99),a
0291+  3087 3E 8F                     ld    a,15+128
0292+  3089 D3 99                     out   ($99),a
0293+  308B 1A                        ld    a,(de)             ;Waste some time...
0294+  308C DB 99                     in    a,($99)
0295+  308E F5                        push  af
0296+  308F 3E 00                     ld    a,0
0297+  3091 D3 99                     out   ($99),a
0298+  3093 3E 8F                     ld    a,15+128
0299+  3095 D3 99                     out   ($99),a            ;Set s$0
0300+  3097 FB                        ei
0301+  3098 F1                        pop   af
0302+  3099 E6 3C                     and   %00111100          ;v9938? RET with Z
0303+  309B 32 81 30                  ld    (v9958),a
0304+  309E C9                        ret
0305+  309F             
0306+  309F             ;-----------------------------------------
0307+  309F             ;         
0308+  309F             ; These routines are the know-how scripts
0309+  309F             ; by VDP profies. In fact, dont use without
0310+  309F             ; knowing what is all about. Read manuals.
0311+  309F             ;
0312+  309F             ;-----------------------------------------
0313+  309F             
0314+  309F 00 00 00 00 VDP: .word  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0314+  30A3 00 00 00 00 
0314+  30A7 00 00 00 00 
0314+  30AB 00 00 00 00 
0314+  30AF 00 00 00 00 
0314+  30B3 00 00 00 00 
0314+  30B7 00 00 00 00 
0314+  30BB 00 00 
0315+  30BD             
0316+  30BD             ;
0317+  30BD             ;Copy the VDP-registers' settings to array VDP.
0318+  30BD             ;Afterwards, read the VDP-registers with LD A,(VDP + r)
0319+  30BD             ;(this should be placed at the start of a program)
0320+  30BD             ;
0321+  30BD 21 9F 30    Copy_VdpRegs: ld      hl,VDP+0
0322+  30C0 11 9F 30                  ld      de,VDP+0
0323+  30C3 01 08 00                  ld      bc,8
0324+  30C6 ED B0                     ldir
0325+  30C8 21 A7 30                  ld      hl,VDP+8
0326+  30CB 11 A7 30                  ld      de,VDP+8
0327+  30CE 01 11 00                  ld      bc,17
0328+  30D1 ED B0                     ldir
0329+  30D3 C9                        ret
0330+  30D4             
0331+  30D4             
0332+  30D4             ;
0333+  30D4             ;Restore the VDP-registers' settings.
0334+  30D4             ;(this should be placed at the end of a program)
0335+  30D4             ;
0336+  30D4 01 00 08    Rest_VdpRegs: ld      bc,$0800
0337+  30D7 21 9F 30                  ld      hl,VDP+0
0338+  30DA CD EC 30                  call    Rest_VdpSub
0339+  30DD 01 08 10                  ld      bc,$1008
0340+  30E0 21 A7 30                  ld      hl,VDP+8
0341+  30E3 CD EC 30                  call    Rest_VdpSub
0342+  30E6 01 19 03                  ld      bc,$0319
0343+  30E9 21 FB 30                  ld      hl,Vdp3zero    ;a jp Restore_Vdp_Sub is implied
0344+  30EC 7E          Rest_VdpSub:  ld      a,(hl)
0345+  30ED 23                        inc     hl
0346+  30EE F3                        di
0347+  30EF D3 99                     out     ($99),a
0348+  30F1 79                        ld      a,c
0349+  30F2 F6 80                     or      128
0350+  30F4 FB                        ei
0351+  30F5 D3 99                     out     ($99),a
0352+  30F7 0C                        inc     c
0353+  30F8 10 F2                     djnz    Rest_VdpSub
0354+  30FA C9                        ret
0355+  30FB             
0356+  30FB 00 00 00    Vdp3zero:    .byte      0,0,0
0357+  30FE             
0358+  30FE             
0359+  30FE             ;
0360+  30FE             ;Set page = A [0..3] in screen 5.
0361+  30FE             ;
0362+  30FE             SetPage:
0363+  30FE 87                  add     a,a ;x32
0364+  30FF 87                  add     a,a
0365+  3100 87                  add     a,a
0366+  3101 87                  add     a,a
0367+  3102 87                  add     a,a
0368+  3103 C6 1F               add     a,31
0369+  3105 32 A1 30            ld      (VDP+2),a
0370+  3108 F3                  di
0371+  3109 D3 99               out     ($99),a
0372+  310B 3E 82               ld      a,2+128
0373+  310D FB                  ei
0374+  310E D3 99               out     ($99),a
0375+  3110 C9                  ret
0376+  3111                     
0377+  3111             ;
0378+  3111             ;Set VDP port $98 to start writing at address AHL (17-bit)
0379+  3111             ;
0380+  3111             ;
0381+  3111             ; Left upper corner of each pages:
0382+  3111             ;   0 -> A=0,HL=$0000
0383+  3111             ;   1 -> A=0,HL=$8000
0384+  3111             ;   2 -> A=1,HL=$0000
0385+  3111             ;   3 -> A=1,HL=$8000
0386+  3111             ;
0387+  3111             
0388+  3111             
0389+  3111             Set_Vdp_Write:           ; A(1bit),HL(16bits) input
0390+  3111                     
0391+  3111 CB 04               rlc   h
0392+  3113 17                  rla
0393+  3114 CB 04               rlc   h
0394+  3116 17                  rla
0395+  3117 CB 3C               srl   h
0396+  3119 CB 3C               srl   h
0397+  311B F3                  di
0398+  311C D3 99               out   ($99),a
0399+  311E 3E 8E               ld    a,14+128
0400+  3120 D3 99               out   ($99),a
0401+  3122 7D                  ld    a,l
0402+  3123 00                  nop
0403+  3124 D3 99               out   ($99),a
0404+  3126 7C                  ld    a,h
0405+  3127 F6 40               or    64
0406+  3129 FB                  ei
0407+  312A D3 99               out   ($99),a
0408+  312C C9                  ret
0409+  312D             
0410+  312D             ;
0411+  312D             ;Set VDP port $98 to start reading at address AHL (17-bit)
0412+  312D             ;
0413+  312D             SetVdp_Read:
0414+  312D CB 04               rlc     h
0415+  312F 17                  rla
0416+  3130 CB 04               rlc     h
0417+  3132 17                  rla
0418+  3133 CB 3C               srl     h
0419+  3135 CB 3C               srl     h
0420+  3137 F3                  di
0421+  3138 D3 99               out     ($99),a       ;set bits 15-17
0422+  313A 3E 8E               ld      a,128+14
0423+  313C D3 99               out     ($99),a
0424+  313E 7D                  ld      a,l           ;set bits 0-7
0425+  313F 00                  nop
0426+  3140 D3 99               out     ($99),a
0427+  3142 7C                  ld      a,h           ;set bits 8-14
0428+  3143 FB                  ei                    ; + read access
0429+  3144 D3 99               out     ($99),a
0430+  3146 C9                  ret
0431+  3147                     
0432+  3147             ;****************************************************************
0433+  3147             ; HMMC (High speed move CPU to VRAM)
0434+  3147             ; Screen size 256x212 dots, each byte is color Nr. for 2-pixels 
0435+  3147             ;
0436+  3147             ; Copies data from memory to block in VRAM
0437+  3147             ; The same as in basic COPY file.pic TO (x,y)-(x+D-1,y+E-1)
0438+  3147             ;
0439+  3147             ; RAM [IX] => VRAM (H,L)-(+D,+E)
0440+  3147             ;
0441+  3147             ; set ix = memory address of data to write to VRAM
0442+  3147             ; set h,l,d,e for rectangle to put in
0443+  3147             ; D,E mod 2 = 0 !
0444+  3147             ;****************************************************************
0445+  3147             
0446+  3147             HMMC:  
0447+  3147 F3                   di
0448+  3148 F5                   push af
0449+  3149 C5                   push bc
0450+  314A E5                   push hl
0451+  314B DD E5                push ix      
0452+  314D 3E 00                ld a,0         
0453+  314F CD B4 31             call hmmc_wait_VDP
0454+  3152 3E 24                ld a,36         ;command register R#36
0455+  3154 D3 99                out ($99),a
0456+  3156 3E 91                ld a,128+17     ;VDP(17)<=36
0457+  3158 D3 99                out ($99),a
0458+  315A AF                   xor a           ;ld a,0
0459+  315B 0E 9B                ld c,$9b
0460+  315D ED 61                out (c),h       ;X
0461+  315F ED 79                out (c),a
0462+  3161 ED 69                out (c),l       ;Y
0463+  3163 ED 79                out (c),a
0464+  3165 ED 51                out (c),d       ;DX in dots
0465+  3167 ED 79                out (c),a       ;
0466+  3169 ED 59                out (c),e       ;DY in dots
0467+  316B ED 79                out (c),a       ;
0468+  316D                         
0469+  316D DD 66 00             ld h,(ix)       ;first byte of data
0470+  3170 ED 61                out (c),h       
0471+  3172             
0472+  3172 ED 79                out (c),a       ;DIX and DIY = 0     
0473+  3174 3E F0                ld a,%11110000
0474+  3176 ED 79                out (c),a      ; command to do it
0475+  3178 3E AC                ld a,128+44
0476+  317A D3 99                out ($99),a
0477+  317C 3E 91                ld a,128+17
0478+  317E D3 99                out ($99),a    ; VDP(17)<=44                        
0479+  3180             hmmc_Loop:
0480+  3180 3E 02                ld a,2
0481+  3182 CD A2 31             call hmmc_Status
0482+  3185 CB 7F                bit 7,a        ; TR? transferring?
0483+  3187 28 F7                jr z, hmmc_Loop
0484+  3189 CB 47                bit 0,a        ; CE? is over?
0485+  318B 28 09                jr z, hmmc_exit                       
0486+  318D DD 23                inc ix
0487+  318F DD 7E 00             ld a,(ix)
0488+  3192 D3 9B                out ($9b),a
0489+  3194 18 EA                jr hmmc_Loop                                                      
0490+  3196             hmmc_exit:
0491+  3196 3E 00                ld a,0
0492+  3198 CD A2 31             call hmmc_Status
0493+  319B DD E1                pop ix
0494+  319D E1                   pop hl
0495+  319E C1                   pop bc
0496+  319F F1                   pop af
0497+  31A0 FB                   ei
0498+  31A1 C9                   ret                                                                                                                                                                                                                  
0499+  31A2                                                                                                                                                                                                                                                                                         
0500+  31A2             hmmc_Status:
0501+  31A2 D3 99                out ($99),a
0502+  31A4 3E 8F                ld a,$8f
0503+  31A6 D3 99                out ($99),a
0504+  31A8 DB 99                in a,($99)
0505+  31AA F5                   push af
0506+  31AB AF                   xor a
0507+  31AC D3 99                out ($99),a
0508+  31AE 3E 8F                ld a,$8f
0509+  31B0 D3 99                out ($99),a
0510+  31B2 F1                   pop af
0511+  31B3 C9                   ret
0512+  31B4             hmmc_wait_VDP:
0513+  31B4 3E 02                ld a,2
0514+  31B6 CD A2 31             call hmmc_Status
0515+  31B9 E6 01                and 1
0516+  31BB 20 F7                jr nz,hmmc_wait_VDP
0517+  31BD AF                   xor a
0518+  31BE CD A2 31             call hmmc_Status
0519+  31C1 C9                   ret
0520+  31C2             
0521+  31C2             ;****************************************************************
0522+  31C2             ;  HMMM (High speed move VRAM to VRAM)
0523+  31C2             ;        to use, set H, L, D, E, B, C and go
0524+  31C2             ;        VRAM (H,L)-(+D,+E) ---> VRAM (B,C)
0525+  31C2             ; DE is difference -not absolute values
0526+  31C2             ; byte DIX,DIY=0, explained:
0527+  31C2             ; The 0 copies the block starting from the upper left, the 1 from right/bottom.
0528+  31C2             ; what's the difference? when copying overlapping source/destination
0529+  31C2             ; (a scroller for example)
0530+  31C2             ; when scrolling from right to left DIX/DIY can both be 0
0531+  31C2             ;  but copying from left to right DIX must be 1. just figure it out...
0532+  31C2             ; Then give coord.positive from right upper corner to left.
0533+  31C2             ;****************************************************************
0534+  31C2             
0535+  31C2             HMMM:
0536+  31C2 F3                   di
0537+  31C3 F5                   push af
0538+  31C4 C5                   push bc              
0539+  31C5 CD FE 31             call VDPready
0540+  31C8 3E 20                ld  a,32
0541+  31CA D3 99                out ($99),a
0542+  31CC 3E 91                ld  a,128+17
0543+  31CE D3 99                out ($99),a     ;R#17 := 32
0544+  31D0 D5                   push de
0545+  31D1 C5                   push bc
0546+  31D2 AF                   xor a           ;ld a,0
0547+  31D3 D1                   pop de          ;de = bc now
0548+  31D4 0E 9B                ld c,$9b
0549+  31D6 ED 61                out (c),h       ;X from
0550+  31D8 ED 79                out (c),a
0551+  31DA ED 69                out (c),l       ;Y from
0552+  31DC ED 79                out (c),a
0553+  31DE ED 51                out (c),d       ;X to
0554+  31E0 ED 79                out (c),a       ;
0555+  31E2 ED 59                out (c),e       ;Y to
0556+  31E4 ED 79                out (c),a
0557+  31E6 D1                   pop de          ;de = de now
0558+  31E7 ED 51                out (c),d       ;DX in dots
0559+  31E9 ED 79                out (c),a       ;
0560+  31EB ED 59                out (c),e       ;DY in dots
0561+  31ED ED 79                out (c),a       ;
0562+  31EF ED 79                out (c),a       ;dummy
0563+  31F1 ED 79                out (c),a       ;DIX and DIY = 0
0564+  31F3 3E D0                ld  a,%11010000 ;HMMM command
0565+  31F5 ED 79                out (c),a       ;do it
0566+  31F7 CD FE 31             call VDPready
0567+  31FA C1                   pop bc
0568+  31FB F1                   pop af
0569+  31FC FB                   ei
0570+  31FD C9                   ret
0571+  31FE                                             
0572+  31FE             VDPready:
0573+  31FE 3E 02               ld   a,2
0574+  3200 F3                  di
0575+  3201 D3 99               out  ($99),a          ;select status register 2
0576+  3203 3E 8F               ld   a,128+15
0577+  3205 D3 99               out  ($99),a
0578+  3207 DB 99               in   a,($99)
0579+  3209 1F                  rra
0580+  320A 3E 00               ld   a,0
0581+  320C D3 99               out  ($99),a
0582+  320E 3E 8F               ld   a,128+15
0583+  3210 D3 99               out  ($99),a
0584+  3212 FB                  ei
0585+  3213 38 E9               jr   c,VDPready    ;wait till previous VDP execution is over (CE)
0586+  3215 C9                  ret
0587+  3216             
0588+  3216             ;
0589+  3216             ; Sets display mode to width 80
0590+  3216             ; Use then SetScreen0By30h to set back width 40
0591+  3216             ;
0592+  3216             VDPsetMode80:        
0593+  3216             
0594+  3216 F3                  di
0595+  3217 3E 04               ld   a,%00000100
0596+  3219 D3 99               out  ($99),a
0597+  321B 3E 80               ld   a,128+0
0598+  321D D3 99               out  ($99),a
0599+  321F 3E 70               ld   a,%01110000
0600+  3221 D3 99               out  ($99),a
0601+  3223 3E 81               ld   a,128+1
0602+  3225 D3 99               out  ($99),a
0603+  3227 AF                  xor a
0604+  3228 D3 99               out  ($99),a
0605+  322A 3E 88               ld   a,128+8
0606+  322C D3 99               out  ($99),a
0607+  322E AF                  xor a
0608+  322F D3 99               out  ($99),a
0609+  3231 3E 89               ld   a,128+9
0610+  3233 D3 99               out  ($99),a
0611+  3235 FB                  ei
0612+  3236 C9                  ret
0613+  3237                                                     
0614+  3237             ;        
0615+  3237             ;Disable the screen.
0616+  3237             ;
0617+  3237             Disable_Scr:
0618+  3237 3A A0 30            ld      a,(VDP+1)
0619+  323A E6 BF               and     %10111111
0620+  323C 32 A0 30            ld      (VDP+1),a
0621+  323F F3                  di
0622+  3240 D3 99               out     ($99),a
0623+  3242 3E 81               ld      a,128+1
0624+  3244 FB                  ei
0625+  3245 D3 99               out     ($99),a
0626+  3247 C9                  ret
0627+  3248             
0628+  3248             ;
0629+  3248             ;Enable the screen.
0630+  3248             ;
0631+  3248             Enable_Scr:
0632+  3248 3A A0 30            ld      a,(VDP+1)
0633+  324B F6 40               or      %01000000
0634+  324D 32 A0 30            ld      (VDP+1),a
0635+  3250 F3                  di
0636+  3251 D3 99               out     ($99),a
0637+  3253 3E 81               ld      a,128+1
0638+  3255 FB                  ei
0639+  3256 D3 99               out     ($99),a
0640+  3258 C9                  ret
0641+  3259             
0642+  3259             ;
0643+  3259             ;Enable the sprites.
0644+  3259             ;
0645+  3259 3A A7 30    Sprites_On:   ld      a,(VDP+8)
0646+  325C E6 FD                     and     %11111101
0647+  325E 32 A7 30                  ld      (VDP+8),a
0648+  3261 F3                        di
0649+  3262 D3 99                     out     ($99),a
0650+  3264 3E 88                     ld      a,8+128
0651+  3266 FB                        ei
0652+  3267 D3 99                     out     ($99),a
0653+  3269 C9                        ret
0654+  326A             
0655+  326A             ;
0656+  326A             ;Disable the sprites.
0657+  326A             ;
0658+  326A 3A A7 30    Sprites_Off:  ld      a,(VDP+8)
0659+  326D F6 02                     or      %00000010
0660+  326F 32 A7 30                  ld      (VDP+8),a
0661+  3272 F3                        di
0662+  3273 D3 99                     out     ($99),a
0663+  3275 3E 88                     ld      a,8+128
0664+  3277 FB                        ei
0665+  3278 D3 99                     out     ($99),a
0666+  327A C9                        ret
0667+  327B             ;
0668+  327B             ; set 16x16 sprites
0669+  327B             ;         
0670+  327B             VDPsprites16x16:
0671+  327B 3A A0 30                  ld      a,(VDP+1)
0672+  327E F6 02                     or      %00000010
0673+  3280 32 A0 30                  ld      (VDP+1),a
0674+  3283 F3                        di
0675+  3284 D3 99                     out     ($99),a
0676+  3286 3E 81                     ld      a,1+128
0677+  3288 FB                        ei
0678+  3289 D3 99                     out     ($99),a
0679+  328B C9                        ret
0680+  328C             
0681+  328C 00 00 00 00 ColPal_:    .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 
0681+  3290 00 00 00 00 
0681+  3294 00 00 00 00 
0681+  3298 00 00 00 00 
0681+  329C 00 00 00 00 
0681+  32A0 00 00 00 00 
0681+  32A4 00 00 00 00 
0681+  32A8 00 00 00 00 
0682+  32AC             
0683+  32AC             Color16defaultPalettes:
0684+  32AC                         ;table of colours Nr,R,G,B
0685+  32AC 00 00 00 00         .byte $0,0,0,0
0686+  32B0 01 00 00 00         .byte $1,0,0,0
0687+  32B4 02 01 06 01         .byte $2,1,6,1
0688+  32B8 03 03 07 03         .byte $3,3,7,3
0689+  32BC 04 01 01 07         .byte $4,1,1,7
0690+  32C0 05 02 03 07         .byte $5,2,3,7
0691+  32C4 06 05 01 01         .byte $6,5,1,1
0692+  32C8 07 02 06 07         .byte $7,2,6,7
0693+  32CC 08 07 01 01         .byte $8,7,1,1
0694+  32D0 09 07 03 03         .byte $9,7,3,3
0695+  32D4 0A 06 06 01         .byte $A,6,6,1
0696+  32D8 0B 06 06 04         .byte $B,6,6,4
0697+  32DC 0C 01 04 01         .byte $C,1,4,1
0698+  32E0 0D 06 02 05         .byte $D,6,2,5
0699+  32E4 0E 05 05 05         .byte $E,5,5,5
0700+  32E8 0F 07 07 07         .byte $F,7,7,7
0701+  32EC                     
0702+  32EC             ;Restores default MSX color palettes
0703+  32EC             RestoreColors:
0704+  32EC E5                       push hl
0705+  32ED 21 AC 32                 ld hl, Color16defaultPalettes 
0706+  32F0 CD D1 2F                 call SetPaletteByTable    ; defines 16colors
0707+  32F3 E1                       pop hl
0708+  32F4 C9                       ret
0709+  32F5             
0710+  32F5             ;****************************************************************
0711+  32F5             ; draws LINE 
0712+  32F5             ;        to use, set H, L, D, E, B, A and go
0713+  32F5             ;        draw LINE (H,L)-(D,E) with color B, log-op A
0714+  32F5             ; H,L,D,E absolute values
0715+  32F5             ;****************************************************************
0716+  32F5             
0717+  32F5             LINE:
0718+  32F5 F3                   di
0719+  32F6 F5                   push af
0720+  32F7 C5                   push bc
0721+  32F8 D5                   push de
0722+  32F9 E5                   push hl
0723+  32FA                      
0724+  32FA F5                   push af          ;save LOGICAL OPERATION
0725+  32FB C5                   push bc          ;save COLOR            
0726+  32FC CD FE 31             call VDPready
0727+  32FF 3E 24                ld  a,36
0728+  3301 D3 99                out ($99),a
0729+  3303 3E 91                ld  a,128+17
0730+  3305 D3 99                out ($99),a     ;R#17 := 36
0731+  3307 AF                   xor a           ;ld a,0
0732+  3308 0E 9B                ld c,$9b
0733+  330A ED 61                out (c),h       ;X from
0734+  330C ED 79                out (c),a
0735+  330E ED 69                out (c),l       ;Y from
0736+  3310 ED 79                out (c),a
0737+  3312              
0738+  3312 7C                   ld a,h          ;make DX and DIX
0739+  3313 92                   sub d
0740+  3314 16 04                ld  d,%00000100
0741+  3316 30 04                jr nc,gLINE1
0742+  3318 16 00                ld  d,%00000000
0743+  331A ED 44                neg
0744+  331C 67          gLINE1:  ld h,a          ;H := DX , D := DIX
0745+  331D 7D                   ld a,l          ;make DY and DIY
0746+  331E 93                   sub e
0747+  331F 1E 08                ld  e,%00001000
0748+  3321 30 04                jr nc,gLINE2
0749+  3323 1E 00                ld  e,%00000000
0750+  3325 ED 44                neg
0751+  3327 6F          gLINE2:  ld l,a          ;L := DY , E := DIY
0752+  3328 BC                   cp h            ;make Maj and Min
0753+  3329 38 0D                jr c,gLINE3
0754+  332B AF                   xor a
0755+  332C ED 69                out (c),l           ;long side
0756+  332E ED 79                out (c),a
0757+  3330 ED 61                out (c),h           ;short side
0758+  3332 ED 79                out (c),a
0759+  3334 3E 01                ld  a,%00000001     ;MAJ := 1
0760+  3336 18 0B                jr gLINE4
0761+  3338             
0762+  3338 AF          gLINE3:  xor a
0763+  3339 ED 61                out (c),h           ;NX
0764+  333B ED 79                out (c),a
0765+  333D ED 69                out (c),l           ;NY
0766+  333F ED 79                out (c),a
0767+  3341 3E 00                ld  a,%00000000     ;MAJ := 0
0768+  3343             
0769+  3343 B2          gLINE4:  or d
0770+  3344 B3                   or e           ;A := DIX , DIY , MAJ
0771+  3345 E1                   pop hl         ;H := COLOR
0772+  3346 ED 61                out (c),h
0773+  3348 ED 79                out (c),a
0774+  334A F1                   pop af         ;A := LOGICAL OPERATION
0775+  334B F6 70                or  %01110000
0776+  334D ED 79                out (c),a
0777+  334F 3E 8F                ld  a,$8F
0778+  3351 ED 79                out (c),a
0779+  3353                      
0780+  3353 CD FE 31             call VDPready
0781+  3356 E1                   pop hl         
0782+  3357 D1                   pop de         
0783+  3358 C1                   pop bc
0784+  3359 F1                   pop af
0785+  335A FB                   ei
0786+  335B C9                   ret
0787+  335C              
0788+  335C             
0789+  335C             ;***************************************************************************
0790+  335C             ;  HMMM with 2byte addressing (far copy), for not simplest case
0791+  335C             ;  word size parameters for H, L, D, E, B, C, DIX/DIY byte
0792+  335C             ;***************************************************************************
0793+  335C             
0794+  335C 00 00 00 00 HC_p     .word 0,0,0,0,0,0
0794+  3360 00 00 00 00 
0794+  3364 00 00 00 00 
0795+  3368 00                   .byte 0    ;DIX,DIY, just =0
0796+  3369             
0797+  3369             HMMMf:
0798+  3369 F3                   di
0799+  336A F5                   push af
0800+  336B C5                   push bc
0801+  336C D5                   push de
0802+  336D E5                   push hl
0803+  336E                              
0804+  336E CD FE 31             call VDPready
0805+  3371 3E 20                ld  a,32
0806+  3373 D3 99                out ($99),a
0807+  3375 3E 91                ld  a,128+17
0808+  3377 D3 99                out ($99),a     ;R#17 := 32
0809+  3379 21 5C 33             ld hl,HC_p
0810+  337C 0E 9B                ld c,$9b
0811+  337E 06 0C                ld b,12         ;6x2bytes
0812+  3380 ED B3                otir
0813+  3382 AF                   xor a     
0814+  3383 ED 79                out (c),a       ;dummy
0815+  3385 ED A3                outi            ;DIX and DIY
0816+  3387 3E D0                ld  a,%11010000 ;HMMM command
0817+  3389 ED 79                out (c),a       ;do it
0818+  338B CD FE 31             call VDPready
0819+  338E E1                   pop hl
0820+  338F D1                   pop de
0821+  3390 C1                   pop bc
0822+  3391 F1                   pop af
0823+  3392 FB                   ei
0824+  3393 C9                   ret
0825+  3394             
0826+  3394             ;***************************************************************************
0827+  3394             ;  LMMM with 2byte addressing (far copy), for not simplest case
0828+  3394             ;  VRAM (H,L)-(D,E) ---> VRAM (B,C)  with logical operation 
0829+  3394             ;  word size parameters for H, L, D, E, B, C, DIX/DIY byte, Logical_A byte
0830+  3394             ;***************************************************************************
0831+  3394             
0832+  3394 00 00 00 00 LM_p     .word 0,0,0,0,0,0
0832+  3398 00 00 00 00 
0832+  339C 00 00 00 00 
0833+  33A0 00                   .byte 0    ;DIX,DIY, just =0
0834+  33A1 00                   .byte 0    ;LOGICAL IMP=0 (just copy), TIMP bit3=1 copy no transparents
0835+  33A2             LMMMf:
0836+  33A2 F3                   di
0837+  33A3 F5                   push af
0838+  33A4 C5                   push bc
0839+  33A5 D5                   push de
0840+  33A6 E5                   push hl
0841+  33A7                              
0842+  33A7 CD FE 31             call VDPready
0843+  33AA 3E 20                ld  a,32
0844+  33AC D3 99                out ($99),a
0845+  33AE 3E 91                ld  a,128+17
0846+  33B0 D3 99                out ($99),a     ;R#17 := 32
0847+  33B2 21 94 33             ld hl,LM_p
0848+  33B5 0E 9B                ld c,$9b
0849+  33B7 06 0C                ld b,12         ;6x2bytes
0850+  33B9 ED B3                otir
0851+  33BB AF                   xor a     
0852+  33BC ED 79                out (c),a       ;dummy
0853+  33BE ED A3                outi            ;DIX and DIY
0854+  33C0 7E                   ld a,(hl)       ; +logical
0855+  33C1 F6 90                or %10010000    ;LMMM command
0856+  33C3 ED 79                out (c),a       ;do it
0857+  33C5 CD FE 31             call VDPready
0858+  33C8 E1                   pop hl
0859+  33C9 D1                   pop de
0860+  33CA C1                   pop bc
0861+  33CB F1                   pop af
0862+  33CC FB                   ei
0863+  33CD C9                   ret
3636   33CE                       #include "DISKs.ASM"       ; disk function diskload
0001+  33CE             ;=======================================
0002+  33CE             ;
0003+  33CE             ; Disk functions (working)
0004+  33CE             ;
0005+  33CE             ;     diskload - to load small file into memory knowing that it works
0006+  33CE             ;     readFF - buffered reading of 255 bytes of file into memory
0007+  33CE             ;                (safe diskload for larger file)
0008+  33CE             ;     dirload - to load directory structure into memory as string
0009+  33CE             
0010+  33CE             ;=======================================
0011+  33CE             ;
0012+  33CE             ; Usage1:
0013+  33CE             ;        ld hl,filename_
0014+  33CE             ;        ld de,$2000
0015+  33CE             ;        call diskload
0016+  33CE             ;filename_:
0017+  33CE             ;        .byte 0,"myfile  com",0  
0018+  33CE             ;
0019+  33CE             ; (use exact file name space!)
0020+  33CE             ;
0021+  33CE             ;
0022+  33CE             ; Usage2:
0023+  33CE             ;        ld hl,filename_
0024+  33CE             ;scanfile_:
0025+  33CE             ;        call readFF
0026+  33CE             ;        cp 0
0027+  33CE             ;        jr z,scanover_
0028+  33CE             ;        ld b,a
0029+  33CE             ;        push de
0030+  33CE             ;scanrecord_:
0031+  33CE             ;        ld a,(de)   ;byte is here
0032+  33CE             ;        inc de
0033+  33CE             ;        djnz scanrecord_
0034+  33CE             ;        pop de
0035+  33CE             ;        jr scanfile_
0036+  33CE             ;scanover_: 
0037+  33CE             ;
0038+  33CE             ;
0039+  33CE             ; Usage3:
0040+  33CE             ;        ld hl,willcard_
0041+  33CE             ;        ld de,$2000
0042+  33CE             ;        call dirload 
0043+  33CE             ;willcard_:
0044+  33CE             ;        .byte 0,"??????? COM",0  ;
0045+  33CE             ;     
0046+  33CE             ;    
0047+  33CE             f_setdma:     .equ     26
0048+  33CE             f_read:       .equ     39
0049+  33CE             f_open:       .equ     15
0050+  33CE             f_close:      .equ     16
0051+  33CE             
0052+  33CE             f_search1     .equ     $11
0053+  33CE             f_search2     .equ     $12
0054+  33CE             
0055+  33CE             f_bdos:       .equ     $F37D   ; Call $5
0056+  33CE             
0057+  33CE             
0058+  33CE             ; load file in address de
0059+  33CE             diskload:
0060+  33CE F5                  push af
0061+  33CF C5                  push bc
0062+  33D0 D5                  push de
0063+  33D1 E5                  push hl
0064+  33D2 DD E5               push ix
0065+  33D4 FD E5               push iy
0066+  33D6                     
0067+  33D6 3E 01               ld a,1
0068+  33D8 32 F5 33            ld (loadflag),a
0069+  33DB                     
0070+  33DB D5                  push de
0071+  33DC CD FF 34            call f_setfcb
0072+  33DF CD 16 35            call f_openf
0073+  33E2 2A 58 35            ld hl,(f_bleng)
0074+  33E5 D1                  pop de
0075+  33E6 CD 2C 35            call f_loadf
0076+  33E9 CD 3F 35            call f_closef
0077+  33EC                     
0078+  33EC FD E1               pop iy
0079+  33EE DD E1               pop ix
0080+  33F0 E1                  pop hl
0081+  33F1 D1                  pop de
0082+  33F2 C1                  pop bc
0083+  33F3 F1                  pop af
0084+  33F4 C9                  ret
0085+  33F5                     
0086+  33F5 01          loadflag: .byte   1   ; should be 0 on return if loaded
0087+  33F6             
0088+  33F6 00          stop_rdFF .byte   0   ; set 1 to stop reading
0089+  33F7             ; scan file, buffer in address de
0090+  33F7             readFF:
0091+  33F7 C5                  push bc
0092+  33F8 D5                  push de
0093+  33F9 E5                  push hl
0094+  33FA DD E5               push ix
0095+  33FC FD E5               push iy
0096+  33FE                     
0097+  33FE 3A 52 34            ld a,(rd_opn)
0098+  3401 FE 00               cp 0
0099+  3403 20 08               jr nz,rd_overOpnFile
0100+  3405                     
0101+  3405 D5                  push de
0102+  3406 CD FF 34            call f_setfcb
0103+  3409 CD 16 35            call f_openf
0104+  340C D1                  pop de
0105+  340D                 
0106+  340D             rd_overOpnFile:
0107+  340D             
0108+  340D 3E 00               ld a,0
0109+  340F 32 57 35            ld (f_groot+1),a
0110+  3412 67                  ld h,a
0111+  3413 3E 01               ld a,$1   ; read 255 bytes only
0112+  3415 32 56 35            ld (f_groot),a
0113+  3418 2E FF               ld l,$ff
0114+  341A                     
0115+  341A 3A 52 34            ld a,(rd_opn)
0116+  341D FE 00               cp 0
0117+  341F 20 08               jr nz,rd_over2
0118+  3421 32 F6 33            ld (stop_rdFF),a                        
0119+  3424 CD 2C 35            call f_loadf
0120+  3427 18 0D               jr rd_over3
0121+  3429             rd_over2:
0122+  3429 3A F6 33            ld a,(stop_rdFF)
0123+  342C FE 00               cp 0
0124+  342E 20 10               jr nz,rd_StopRd
0125+  3430 11 48 35            ld de,f_fcb
0126+  3433 CD 36 35            call f_rdit
0127+  3436             rd_over3:
0128+  3436 3E 01               ld a,1
0129+  3438 32 52 34            ld (rd_opn),a
0130+  343B                     
0131+  343B 7D                  ld a,l
0132+  343C FE 00               cp 0
0133+  343E 20 0A               jr nz,rd_outExit
0134+  3440             rd_StopRd:
0135+  3440 CD 3F 35            call f_closef
0136+  3443 3E 00               ld a,0
0137+  3445 32 52 34            ld (rd_opn),a
0138+  3448 FE 00               cp 0
0139+  344A                           
0140+  344A             rd_outExit:        
0141+  344A FD E1               pop iy
0142+  344C DD E1               pop ix
0143+  344E E1                  pop hl
0144+  344F D1                  pop de
0145+  3450 C1                  pop bc
0146+  3451 C9                  ret
0147+  3452             
0148+  3452 00          rd_opn: .byte 0
0149+  3453                  
0150+  3453             ;
0151+  3453             ; searches directory files
0152+  3453             ;   that match hl willcard
0153+  3453             ;   and stores result in address de
0154+  3453             ;
0155+  3453             ; separator ","
0156+  3453             ; ends with "$"
0157+  3453             ;
0158+  3453             ;  So, print the directory structure after by simple:
0159+  3453             ;         ld c, 9
0160+  3453             ;         call 5
0161+  3453             ;
0162+  3453 00          f_found .byte 0   ; counter of files found
0163+  3454             
0164+  3454             dirload:
0165+  3454 F5                  push af
0166+  3455 C5                  push bc
0167+  3456 D5                  push de
0168+  3457 E5                  push hl
0169+  3458 DD E5               push ix
0170+  345A FD E5               push iy
0171+  345C                     
0172+  345C 3E 00               ld      a,0
0173+  345E 32 53 34            ld      (f_found),a
0174+  3461                     
0175+  3461 CD E7 34            call    f_sv_save ; save de
0176+  3464                     
0177+  3464 CD FF 34            call    f_setfcb
0178+  3467 2A 58 35            ld      hl,(f_bleng)
0179+  346A             
0180+  346A E5                  push    hl
0181+  346B 11 BF 34            ld      de,f_dma                                                                                                                                                                                          
0182+  346E 0E 1A               ld      c,f_setdma
0183+  3470 CD 7D F3            call    f_bdos
0184+  3473 11 48 35            ld      de,f_fcb
0185+  3476 E1                  pop     hl                
0186+  3477                     
0187+  3477 0E 11               ld      c,f_search1  ; first search
0188+  3479 CD 7D F3            call    f_bdos
0189+  347C                     
0190+  347C             f_loopDirList:
0191+  347C             
0192+  347C FE 00               cp 0
0193+  347E 20 28               jr nz,  f_errDirList
0194+  3480                     
0195+  3480                     ;----- save in list --|
0196+  3480 F5                  push    af
0197+  3481 C5                  push    bc
0198+  3482 D5                  push    de
0199+  3483 E5                  push    hl
0200+  3484                     
0201+  3484 3A 53 34            ld      a,(f_found)
0202+  3487 3C                  inc     a
0203+  3488 32 53 34            ld      (f_found),a
0204+  348B                             
0205+  348B CD F2 34            call    f_sv_rest ; restore de
0206+  348E                             
0207+  348E FD E5               push    iy
0208+  3490 E1                  pop     hl   ; where file name is in DMA
0209+  3491 01 0B 00            ld      bc,11
0210+  3494 ED B0               ldir         ; write 11 chars of filename
0211+  3496                     
0212+  3496 3E 2C               ld      a,','    ; separator
0213+  3498 12                  ld      (de),a
0214+  3499 13                  inc     de
0215+  349A             
0216+  349A CD E7 34            call    f_sv_save ; save new de
0217+  349D                     
0218+  349D E1                  pop     hl
0219+  349E D1                  pop     de
0220+  349F C1                  pop     bc
0221+  34A0 F1                  pop     af
0222+  34A1                     ;---------------------|
0223+  34A1                     
0224+  34A1 0E 12               ld      c,f_search2  ; continue searching
0225+  34A3 CD 7D F3            call    f_bdos
0226+  34A6                     
0227+  34A6 18 D4               jr      f_loopDirList
0228+  34A8                     
0229+  34A8             f_errDirList:
0230+  34A8             
0231+  34A8 CD F2 34            call    f_sv_rest ; restore de
0232+  34AB             
0233+  34AB 3A 53 34            ld      a,(f_found)
0234+  34AE FE 00               cp      0
0235+  34B0 28 01               jr      z, f_fxqx
0236+  34B2 1B                  dec     de
0237+  34B3 3E 24       f_fxqx: ld      a,'$'     ; it's over, put $
0238+  34B5 12                  ld      (de),a
0239+  34B6                     
0240+  34B6 FD E1               pop iy
0241+  34B8 DD E1               pop ix
0242+  34BA E1                  pop hl
0243+  34BB D1                  pop de
0244+  34BC C1                  pop bc
0245+  34BD F1                  pop af
0246+  34BE C9                  ret
0247+  34BF             
0248+  34BF             f_dma:  .ds 40      ; to store searching results (a copy of fcb)
0249+  34E7             
0250+  34E7             ; need this crap because it uses all registers
0251+  34E7             f_sv_save:
0252+  34E7 F5                  push af
0253+  34E8 7A                  ld a,d
0254+  34E9 32 FD 34            ld (f_sv_w+0),a        
0255+  34EC 7B                  ld a,e
0256+  34ED 32 FE 34            ld (f_sv_w+1),a
0257+  34F0 F1                  pop af
0258+  34F1 C9                  ret
0259+  34F2             f_sv_rest:
0260+  34F2 F5                  push af
0261+  34F3 3A FD 34            ld a,(f_sv_w+0)
0262+  34F6 57                  ld d,a        
0263+  34F7 3A FE 34            ld a,(f_sv_w+1)
0264+  34FA 5F                  ld e,a        
0265+  34FB F1                  pop af
0266+  34FC C9                  ret
0267+  34FD             
0268+  34FD 00 00       f_sv_w: .word 0
0269+  34FF                                
0270+  34FF             f_setfcb:
0271+  34FF E5                    push hl
0272+  3500 21 48 35              ld hl,f_fcb+0
0273+  3503 11 49 35              ld de,f_fcb+1
0274+  3506 01 24 00              ld bc,36
0275+  3509 70                    ld (hl),b
0276+  350A ED B0                 ldir
0277+  350C E1                    pop hl
0278+  350D 11 48 35              ld de,f_fcb
0279+  3510 01 0C 00              ld bc,12
0280+  3513 ED B0                 ldir
0281+  3515 C9                    ret
0282+  3516             
0283+  3516 11 48 35    f_openf:  ld      de,f_fcb
0284+  3519 0E 0F                 ld      c,f_open
0285+  351B CD 7D F3              call    f_bdos
0286+  351E 21 01 00              ld      hl,1
0287+  3521 22 56 35              ld      (f_groot),hl
0288+  3524 2B                    dec     hl
0289+  3525 22 69 35              ld      (f_blok),hl
0290+  3528 22 6B 35              ld      (f_blok+2),hl
0291+  352B C9                    ret
0292+  352C                                 
0293+  352C E5          f_loadf:  push    hl
0294+  352D 0E 1A                 ld      c,f_setdma
0295+  352F CD 7D F3              call    f_bdos
0296+  3532 11 48 35              ld      de,f_fcb
0297+  3535 E1                    pop     hl
0298+  3536 0E 27       f_rdit:   ld      c,f_read
0299+  3538 CD 7D F3              call    f_bdos    
0300+  353B 32 F5 33              ld      (loadflag),a  ;sets 0 if ok, 1 if can not load
0301+  353E C9                    ret
0302+  353F 11 48 35    f_closef: ld      de,f_fcb
0303+  3542 0E 10                 ld      c,f_close
0304+  3544 CD 7D F3              call    f_bdos
0305+  3547 C9                    ret
0306+  3548             
0307+  3548             
0308+  3548             ; Good tutorial on MSX files at
0309+  3548             ; http://fms.komkon.org/MSX/Handbook/th-3.txt
0310+  3548             
0311+  3548 00          f_fcb:    .byte    0
0312+  3549 3F 3F 3F 3F           .byte    "???????????"   ;11 chars          
0312+  354D 3F 3F 3F 3F 
0312+  3551 3F 3F 3F 
0313+  3554 00 00                 .word    0
0314+  3556 00 00       f_groot:  .word    0
0315+  3558 00 00       f_bleng:  .word    0
0316+  355A 00 00 00 00           .byte    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0316+  355E 00 00 00 00 
0316+  3562 00 00 00 00 
0316+  3566 00 00 00 
0317+  3569 00 00       f_blok:   .word    0
0318+  356B 00 00                 .word    0
0319+  356D             
0320+  356D                                     3637   356D                       #include "String.ASM"      ; most common string functions
0001+  356D             ;-------------------------------------
0002+  356D             ;
0003+  356D             ; Most common String functions (MSX asm)
0004+  356D             ; String can be 256 characters long maximum
0005+  356D             ; 
0006+  356D             ;
0007+  356D             ; String ends with 0, 
0008+  356D             ;  should be reserved bytes if string becomes longer,
0009+  356D             ;   of course.
0010+  356D             ;
0011+  356D             ;-------------------------------------
0012+  356D             ; 
0013+  356D             
0014+  356D             ; returns length of DE string in A, also sets Z
0015+  356D             Str_Len:
0016+  356D C5                  push bc
0017+  356E D5                  push de
0018+  356F 0E 00               ld c,0
0019+  3571             Str_LnScn:        
0020+  3571 1A                  ld a,(de)
0021+  3572 FE 00               cp 0
0022+  3574 28 04               jr z,Str_LnEx
0023+  3576 13                  inc de
0024+  3577 0C                  inc c
0025+  3578 18 F7               jr Str_LnScn
0026+  357A             Str_LnEx:
0027+  357A 79                  ld a,c
0028+  357B D1                  pop de        
0029+  357C C1                  pop bc
0030+  357D FE 00               cp 0
0031+  357F C9                  ret
0032+  3580                     
0033+  3580             ; set empty string
0034+  3580             Str_Clear:
0035+  3580 F5                  push af
0036+  3581 3E 00               ld a,0
0037+  3583 12                  ld (de),a
0038+  3584 F1                  pop af
0039+  3585 C9                  ret
0040+  3586             
0041+  3586             
0042+  3586             
0043+  3586             ; Cuts string of DE at length=A [0..254]
0044+  3586             ;     (label+nn  is much faster)
0045+  3586             ;
0046+  3586             Str_Cut:
0047+  3586 F5                   push af
0048+  3587 C5                   push bc
0049+  3588 E5                   push hl
0050+  3589 06 00                ld b,0
0051+  358B 4F                   ld c,a
0052+  358C D5                   push de
0053+  358D E1                   pop hl
0054+  358E 09                   add hl,bc
0055+  358F 3E 00                ld a,0
0056+  3591 77                   ld (hl),a
0057+  3592 E1                   pop hl
0058+  3593 C1                   pop bc
0059+  3594 F1                   pop af
0060+  3595 C9                   ret
0061+  3596                      
0062+  3596             ; compares string of DE with string of IX
0063+  3596             ; Returns: A=0 - strings are equal
0064+  3596             ;          A=1 - IX string starts with DE str.
0065+  3596             ;          A=2 - not equal
0066+  3596             ; 
0067+  3596             Str_Compare:
0068+  3596 C5                   push bc
0069+  3597 D5                   push de
0070+  3598 DD E5                push ix
0071+  359A             Str_compScn:         
0072+  359A DD 7E 00             ld a,(ix)
0073+  359D FE 00                cp 0
0074+  359F 28 0E                jr z,Str_compL0   
0075+  35A1 47                   ld b,a
0076+  35A2 1A                   ld a,(de)
0077+  35A3 FE 00                cp 0
0078+  35A5 28 17                jr z,Str_compN1
0079+  35A7 B8                   cp b
0080+  35A8 20 10                jr nz,Str_compNEq
0081+  35AA 13                   inc de
0082+  35AB DD 23                inc ix
0083+  35AD 18 EB                jr Str_compScn
0084+  35AF             Str_compL0:
0085+  35AF 1A                   ld a,(de)
0086+  35B0 FE 00                cp 0
0087+  35B2 28 02                jr z,Str_compEq
0088+  35B4 18 04                jr Str_compNEq
0089+  35B6             Str_compEq:
0090+  35B6 3E 00                ld a,0
0091+  35B8 18 06                jr Str_compEx
0092+  35BA             Str_compNEq:
0093+  35BA 3E 02                ld a,2
0094+  35BC 18 02                jr Str_compEx         
0095+  35BE             Str_compN1:
0096+  35BE 3E 01                ld a,1
0097+  35C0             Str_compEx:
0098+  35C0 DD E1                pop ix
0099+  35C2 D1                   pop de
0100+  35C3 C1                   pop bc
0101+  35C4 C9                   ret
0102+  35C5             
0103+  35C5             ; Copies string DE to IX
0104+  35C5             Str_Copy:
0105+  35C5 F5                   push af
0106+  35C6 D5                   push de
0107+  35C7 DD E5                push ix
0108+  35C9             Str_CpyScn:
0109+  35C9 1A                   ld a,(de)
0110+  35CA DD 77 00             ld (ix),a
0111+  35CD FE 00                cp 0
0112+  35CF 28 05                jr z,StrCpyEx
0113+  35D1 13                   inc de
0114+  35D2 DD 23                inc ix
0115+  35D4 18 F3                jr Str_CpyScn
0116+  35D6             StrCpyEx:                  
0117+  35D6 DD E1                pop ix
0118+  35D8 D1                   pop de
0119+  35D9 F1                   pop af
0120+  35DA C9                   ret
0121+  35DB             
0122+  35DB             ; Converts string DE to UpperCase
0123+  35DB             Str_Upper:
0124+  35DB F5                   push af
0125+  35DC D5                   push de
0126+  35DD             Str_UppScn:
0127+  35DD 1A                   ld a,(de)
0128+  35DE FE 00                cp 0
0129+  35E0 28 0E                jr z,Str_UppEx
0130+  35E2 FE 61                cp 'a'
0131+  35E4 38 07                jr c,Str_UppNCnv
0132+  35E6 FE 7A                cp 'z'
0133+  35E8 30 03                jr nc,Str_UppNCnv
0134+  35EA D6 20                sub 32
0135+  35EC 12                   ld (de),a
0136+  35ED             Str_UppNCnv:
0137+  35ED 13                   inc de         
0138+  35EE 18 ED                jr Str_UppScn
0139+  35F0             Str_UppEx:         
0140+  35F0 D1                   pop de
0141+  35F1 F1                   pop af
0142+  35F2 C9                   ret
0143+  35F3             
0144+  35F3             ; Converts string DE to LowerCase
0145+  35F3             Str_Lower:
0146+  35F3 F5                   push af
0147+  35F4 D5                   push de
0148+  35F5             Str_LwrScn:
0149+  35F5 1A                   ld a,(de)
0150+  35F6 FE 00                cp 0
0151+  35F8 28 0E                jr z,Str_LwrEx
0152+  35FA FE 41                cp 'A'
0153+  35FC 38 07                jr c,Str_LwrNCnv
0154+  35FE FE 5A                cp 'Z'
0155+  3600 30 03                jr nc,Str_LwrNCnv
0156+  3602 C6 20                add a,32
0157+  3604 12                   ld (de),a
0158+  3605             Str_LwrNCnv:
0159+  3605 13                   inc de         
0160+  3606 18 ED                jr Str_LwrScn
0161+  3608             Str_LwrEx:         
0162+  3608 D1                   pop de
0163+  3609 F1                   pop af
0164+  360A C9                   ret
0165+  360B             
0166+  360B             ; Finds string DE in string IX first 254 bytes
0167+  360B             ; On return: A=position, starting from 0
0168+  360B             ; If not found then A=$ff                 
0169+  360B             Str_IndexOf:
0170+  360B C5                   push bc
0171+  360C D5                   push de
0172+  360D DD E5                push ix
0173+  360F             
0174+  360F 06 00                ld b,0
0175+  3611             Str_InxScn:
0176+  3611 DD 7E 00             ld a,(ix)
0177+  3614 FE 00                cp 0
0178+  3616 20 04                jr nz,Str_InxCompr
0179+  3618 3E FF                ld a,$ff
0180+  361A 18 12                jr Str_InxEx
0181+  361C             Str_InxCompr:
0182+  361C CD 96 35             call Str_Compare
0183+  361F FE 02                cp 2
0184+  3621 20 0A                jr nz,Str_InxFound
0185+  3623 04                   inc b
0186+  3624 3E FF                ld a,$ff
0187+  3626 B8                   cp b
0188+  3627 28 05                jr z,Str_InxEx
0189+  3629 DD 23                inc ix
0190+  362B 18 E4                jr Str_InxScn
0191+  362D             Str_InxFound:
0192+  362D 78                   ld a,b 
0193+  362E             Str_InxEx:                  
0194+  362E DD E1                pop ix
0195+  3630 D1                   pop de
0196+  3631 C1                   pop bc
0197+  3632 C9                   ret
0198+  3633             
0199+  3633             ;returns a=0 and Z flag set if string IX contains substring DE
0200+  3633             ; (length not limited)
0201+  3633             Str_Contains:
0202+  3633 DD E5                push ix
0203+  3635             Str_Contai_Scn:
0204+  3635 DD 7E 00             ld a,(ix)
0205+  3638 FE 00                cp 0
0206+  363A 20 04                jr nz,Str_Contai_Cont
0207+  363C 3E 02                ld a,2
0208+  363E 18 0D                jr Str_Contai_ex
0209+  3640             Str_Contai_Cont:      
0210+  3640 CD 96 35             call Str_Compare
0211+  3643 FE 02                cp 2
0212+  3645 20 04                jr nz,Str_Contai_found
0213+  3647 DD 23                inc ix
0214+  3649 18 EA                jr Str_Contai_Scn
0215+  364B             Str_Contai_found:
0216+  364B 3E 00                ld a,0
0217+  364D             Str_Contai_ex:          
0218+  364D DD E1                pop ix
0219+  364F FE 00                cp 0
0220+  3651 C9                   ret
0221+  3652             
0222+  3652             ;
0223+  3652             ; Places substring of IX into DE
0224+  3652             ; c=starting char in IX, b-length in chars
0225+  3652             ;
0226+  3652             Str_Substr:
0227+  3652 F5                   push af
0228+  3653 C5                   push bc
0229+  3654 D5                   push de
0230+  3655 E5                   push hl       
0231+  3656             
0232+  3656 DD E5                push ix
0233+  3658 E1                   pop hl
0234+  3659 79                   ld a,c
0235+  365A FE 00                cp 0
0236+  365C 28 05                jr z,Str_SubAt0
0237+  365E C5                   push bc
0238+  365F 06 00                ld b,0
0239+  3661 09                   add hl,bc   ; offset
0240+  3662 C1                   pop bc
0241+  3663             Str_SubAt0:         
0242+  3663 48                   ld c,b
0243+  3664 06 00                ld b,0
0244+  3666 ED B0                ldir        ; copy bc bytes from HL to DE addrs.
0245+  3668 3E 00                ld a,0
0246+  366A 12                   ld (de),a
0247+  366B                      
0248+  366B E1                   pop hl
0249+  366C D1                   pop de
0250+  366D C1                   pop bc
0251+  366E F1                   pop af
0252+  366F C9                   ret
0253+  3670             
0254+  3670             ;
0255+  3670             ; Removes left spaces for string in DE
0256+  3670             ;
0257+  3670             Str_Ltrim:
0258+  3670 F5                   push af
0259+  3671 C5                   push bc
0260+  3672 D5                   push de
0261+  3673 DD E5                push ix
0262+  3675                      
0263+  3675 D5                   push de
0264+  3676 DD E1                pop ix
0265+  3678 0E 00                ld c,0
0266+  367A             Str_LtrScn:         
0267+  367A 1A                   ld a,(de)
0268+  367B FE 20                cp 32
0269+  367D 20 05                jr nz,Str_LtrNS
0270+  367F 13                   inc de
0271+  3680 0E 01                ld c,1
0272+  3682 18 F6                jr Str_LtrScn
0273+  3684             Str_LtrNS:
0274+  3684 79                   ld a,c
0275+  3685 FE 00                cp 0
0276+  3687 28 03                jr z,Str_LtrEx
0277+  3689 CD C5 35             call Str_Copy
0278+  368C             Str_LtrEx:
0279+  368C DD E1                pop ix
0280+  368E D1                   pop de
0281+  368F C1                   pop bc
0282+  3690 F1                   pop af
0283+  3691 C9                   ret
0284+  3692                      
0285+  3692             ;
0286+  3692             ; Removes right spaces for string in DE
0287+  3692             ;
0288+  3692             Str_Rtrim:
0289+  3692 F5                   push af
0290+  3693 D5                   push de         
0291+  3694 1A                   ld a,(de)
0292+  3695 FE 00                cp 0
0293+  3697 28 12                jr z,Str_RtrEx
0294+  3699             Str_RtrRscn:
0295+  3699 13                   inc de        
0296+  369A 1A                   ld a,(de)
0297+  369B FE 00                cp 0
0298+  369D 28 02                jr z,Str_Rtr1
0299+  369F 18 F8                jr Str_RtrRscn
0300+  36A1             Str_Rtr1:
0301+  36A1 1B                   dec de
0302+  36A2 FE 20                cp 32
0303+  36A4 20 05                jr nz,Str_RtrEx
0304+  36A6 3E 00                ld a,0
0305+  36A8 12                   ld (de),a
0306+  36A9 18 F6                jr Str_Rtr1
0307+  36AB             Str_RtrEx:
0308+  36AB D1                   pop de
0309+  36AC F1                   pop af
0310+  36AD C9                   ret
0311+  36AE             
0312+  36AE             ; both trims
0313+  36AE             Str_Alltrim:
0314+  36AE CD 92 36             call Str_Rtrim
0315+  36B1 CD 70 36             call Str_Ltrim
0316+  36B4 C9                   ret
0317+  36B5             
0318+  36B5             ;
0319+  36B5             ; Adds DE string at the end of IX string
0320+  36B5             ;
0321+  36B5             Str_Append:
0322+  36B5 F5                   push af
0323+  36B6 DD E5                push ix         
0324+  36B8 DD 7E 00             ld a,(ix)
0325+  36BB FE 00                cp 0
0326+  36BD 28 0B                jr z,Str_App1
0327+  36BF             Str_AppRscn:
0328+  36BF DD 23                inc ix        
0329+  36C1 DD 7E 00             ld a,(ix)
0330+  36C4 FE 00                cp 0
0331+  36C6 28 02                jr z,Str_App1
0332+  36C8 18 F5                jr Str_AppRscn
0333+  36CA             Str_App1:
0334+  36CA CD C5 35             call Str_Copy
0335+  36CD DD E1                pop ix
0336+  36CF F1                   pop af
0337+  36D0 C9                   ret
0338+  36D1             
0339+  36D1             ;
0340+  36D1             ; Replaces all DE substrings in IX string with HL string
0341+  36D1             ;
0342+  36D1             Str_Replace:
0343+  36D1 F5                   push af
0344+  36D2 C5                   push bc
0345+  36D3 E5                   push hl
0346+  36D4 DD E5                push ix
0347+  36D6                      
0348+  36D6 CD 6D 35             call Str_Len
0349+  36D9 4F                   ld c,a           ;c=Len(de-string)
0350+  36DA FE 00                cp 0
0351+  36DC 28 47                jr z,Str_ReplNo
0352+  36DE             Str_ReplLoop:        
0353+  36DE CD 0B 36             call Str_IndexOf
0354+  36E1 FE FF                cp $ff
0355+  36E3 28 40                jr z,Str_ReplNo
0356+  36E5                      
0357+  36E5 D5                   push de
0358+  36E6 47                   ld b,a
0359+  36E7 11 2B 37             ld de,Str_buf_
0360+  36EA                      
0361+  36EA DD E5                push ix
0362+  36EC             Str_ReplIy0:                   ; copy till substr...
0363+  36EC DD 7E 00             ld a,(ix)
0364+  36EF 12                   ld (de),a
0365+  36F0 78                   ld a,b
0366+  36F1 FE 00                cp 0
0367+  36F3 28 06                jr z,Str_ReplIx0
0368+  36F5 DD 23                inc ix
0369+  36F7 13                   inc de
0370+  36F8 05                   dec b
0371+  36F9 18 F1                jr Str_ReplIy0
0372+  36FB             Str_ReplIx0:
0373+  36FB             
0374+  36FB E5                   push hl
0375+  36FC             Str_ReplIy1:                   ; copy new substring...         
0376+  36FC 7E                   ld a,(hl)
0377+  36FD 12                   ld (de),a
0378+  36FE FE 00                cp 0
0379+  3700 28 04                jr z,Str_ReplHl0
0380+  3702 23                   inc hl
0381+  3703 13                   inc de
0382+  3704 18 F6                jr Str_ReplIy1
0383+  3706             Str_ReplHl0:
0384+  3706 E1                   pop hl
0385+  3707                      
0386+  3707 79                   ld a,c
0387+  3708             Str_ReplSkp1:         
0388+  3708 DD 23                inc ix                 ; skip substr
0389+  370A 3D                   dec a
0390+  370B 20 FB                jr nz,Str_ReplSkp1
0391+  370D             Str_ReplIy3:                    ; copy all string after...
0392+  370D DD 7E 00             ld a,(ix)
0393+  3710 12                   ld (de),a
0394+  3711 FE 00                cp 0
0395+  3713 28 05                jr z,Str_ReplIx3
0396+  3715 DD 23                inc ix
0397+  3717 13                   inc de
0398+  3718 18 F3                jr Str_ReplIy3
0399+  371A             Str_ReplIx3:
0400+  371A DD E1                pop ix
0401+  371C                      
0402+  371C 11 2B 37             ld de,Str_buf_
0403+  371F CD C5 35             call Str_Copy        ; copy new string to IX 
0404+  3722             
0405+  3722 D1                   pop de
0406+  3723 18 B9                jr Str_ReplLoop        ; to replace all occurrances
0407+  3725             Str_ReplNo:         
0408+  3725 DD E1                pop ix
0409+  3727 E1                   pop hl
0410+  3728 C1                   pop bc
0411+  3729 F1                   pop af
0412+  372A C9                   ret
0413+  372B                      
0414+  372B             Str_buf_ .ds $100
0415+  382B 00                   .byte 0
0416+  382C             
0417+  382C             
0418+  382C             ;
0419+  382C             ; This truncates DE string where new line (ascii 10 or 13)
0420+  382C             ; If string is longer 254 chars then truncates at space char.
0421+  382C             ; Sets IX as pointer to next line starting character
0422+  382C             ; This supposed to get safe-as-much-possible string opeations.
0423+  382C             
0424+  382C             Str_Line:
0425+  382C F5                   push af
0426+  382D C5                   push bc
0427+  382E D5                   push de
0428+  382F             
0429+  382F 01 00 00             ld bc,0
0430+  3832             Str_Ln_Scn:
0431+  3832 1A                   ld a,(de)       ; find end of line
0432+  3833 FE 00                cp 0
0433+  3835 28 28                jr z,Str_Ln_q1
0434+  3837 FE 0D                cp 13
0435+  3839 28 24                jr z,Str_Ln_q1
0436+  383B FE 0A                cp 10
0437+  383D 28 20                jr z,Str_Ln_q1
0438+  383F 13                   inc de
0439+  3840 0C                   inc c
0440+  3841 3E FF                ld a,$ff         ; reached 255?         
0441+  3843 B9                   cp c
0442+  3844 20 EC                jr nz, Str_Ln_Scn
0443+  3846                      
0444+  3846             Str_Ln_fSpc:         
0445+  3846                                        
0446+  3846 1A                   ld a,(de)         ; if string too long then finds space near 254th position
0447+  3847 FE 20                cp ' '
0448+  3849 28 14                jr z,Str_Ln_q1    ; use this position and truncate string
0449+  384B 1B                   dec de
0450+  384C 0D                   dec c
0451+  384D 20 F7                jr nz,Str_Ln_fSpc
0452+  384F                                 
0453+  384F             Str_Ln_cL:
0454+  384F 1A                   ld a,(de)          ; if cant find space then just searches for line end
0455+  3850 FE 00                cp 0               ; to obtain new IX anyway
0456+  3852 28 0B                jr z,Str_Ln_q1
0457+  3854 FE 0D                cp 13
0458+  3856 28 07                jr z,Str_Ln_q1
0459+  3858 FE 0A                cp 10
0460+  385A 28 03                jr z,Str_Ln_q1
0461+  385C 13                   inc de
0462+  385D 18 F0                jr Str_Ln_cL
0463+  385F                      
0464+  385F             Str_Ln_q1:
0465+  385F 3E 00                ld a,0          ; set to 0 till next line
0466+  3861 12                   ld (de),a
0467+  3862 13                   inc de
0468+  3863 1A                   ld a,(de)
0469+  3864 FE 00                cp 0          
0470+  3866 28 F7                jr z,Str_Ln_q1
0471+  3868 FE 0D                cp 13
0472+  386A 28 F3                jr z,Str_Ln_q1
0473+  386C FE 0A                cp 10
0474+  386E 28 EF                jr z,Str_Ln_q1
0475+  3870                      
0476+  3870 D5                   push de
0477+  3871 DD E1                pop ix
0478+  3873                     
0479+  3873 D1                   pop de
0480+  3874 C1                   pop bc
0481+  3875 F1                   pop af
0482+  3876 C9                   ret
0483+  3877             
0484+  3877             ;
0485+  3877             ; This removes all non-character symbols and sets TABs as 3 spaces
0486+  3877             ; of string in DE.  Use after Str_Line not to lose line feeds.
0487+  3877             ;                  
0488+  3877             Str_CharsOnly:
0489+  3877             
0490+  3877 F5                   push af
0491+  3878 D5                   push de
0492+  3879 DD E5                push ix
0493+  387B D5                   push de
0494+  387C D5                   push de
0495+  387D DD E1                pop ix
0496+  387F 11 2B 37             ld de,Str_buf_
0497+  3882             Str_CharsO_loop:
0498+  3882 DD 7E 00             ld a,(ix)
0499+  3885 FE 00                cp 0
0500+  3887 28 1A                jr z, Str_CharsO_Ex
0501+  3889 FE 09                cp 9
0502+  388B 20 0C                jr nz, Str_CharsO_nTb
0503+  388D 3E 20                ld a,' '
0504+  388F 12                   ld (de),a
0505+  3890 13                   inc de
0506+  3891 12                   ld (de),a
0507+  3892 13                   inc de
0508+  3893             Str_CharsO_cpy:         
0509+  3893 12                   ld (de),a
0510+  3894 13                   inc de
0511+  3895 DD 23                inc ix
0512+  3897 18 E9                jr Str_CharsO_loop
0513+  3899             Str_CharsO_nTb:
0514+  3899 FE 20                cp ' '
0515+  389B 38 E5                jr c,Str_CharsO_loop
0516+  389D FE FF                cp $ff
0517+  389F 28 E1                jr z,Str_CharsO_loop
0518+  38A1 18 F0                jr Str_CharsO_cpy
0519+  38A3             Str_CharsO_Ex:
0520+  38A3 12                   ld (de),a
0521+  38A4 11 2B 37             ld de,Str_buf_
0522+  38A7 DD E1                pop ix
0523+  38A9 CD C5 35             call Str_Copy        ; copy new string to IX 
0524+  38AC DD E1                pop ix
0525+  38AE D1                   pop de
0526+  38AF F1                   pop af
0527+  38B0 C9                   ret
0528+  38B1             
0529+  38B1             ;
0530+  38B1             ; places value of integer in reg-a into DE string
0531+  38B1             ;
0532+  38B1             Str_itoa:
0533+  38B1 F5                   push af
0534+  38B2 C5                   push bc
0535+  38B3 D5                   push de
0536+  38B4 FE 00                cp 0
0537+  38B6 28 3E                jr z,Str_i2_0
0538+  38B8 FE C8                cp 200
0539+  38BA 30 26                jr nc,Str_i2a200
0540+  38BC FE 64                cp 100
0541+  38BE 30 2C                jr nc,Str_i2a100
0542+  38C0 FE 0A                cp 10
0543+  38C2 30 03                jr nc,Str_i2a10
0544+  38C4 4F                   ld c,a
0545+  38C5 18 11                jr Str_i2q
0546+  38C7             Str_i2a10:
0547+  38C7 06 00                ld b,0
0548+  38C9             Str_i2a_l_10:         
0549+  38C9 FE 0A                cp 10
0550+  38CB 38 05                jr c,Str_i2a1
0551+  38CD D6 0A                sub 10
0552+  38CF 04                   inc b
0553+  38D0 18 F7                jr Str_i2a_l_10
0554+  38D2             Str_i2a1:
0555+  38D2 4F                   ld c,a
0556+  38D3 3E 30                ld a,'0'
0557+  38D5 80                   add a,b
0558+  38D6 12                   ld (de),a
0559+  38D7 13                   inc de
0560+  38D8 3E 30       Str_i2q: ld a,'0'
0561+  38DA 81                   add a,c
0562+  38DB 12                   ld (de),a
0563+  38DC 13                   inc de
0564+  38DD 3E 00                ld a,0
0565+  38DF 12                   ld (de),a
0566+  38E0 18 18                jr Str_i2ex                  
0567+  38E2             Str_i2a200:
0568+  38E2 D6 C8                sub 200
0569+  38E4 4F                   ld c,a                 
0570+  38E5 3E 32                ld a,'2'
0571+  38E7 12                   ld (de),a
0572+  38E8 13                   inc de
0573+  38E9 79                   ld a,c         
0574+  38EA 18 DB                jr Str_i2a10
0575+  38EC             Str_i2a100:
0576+  38EC D6 64                sub 100
0577+  38EE 4F                   ld c,a         
0578+  38EF 3E 31                ld a,'1'
0579+  38F1 12                   ld (de),a
0580+  38F2 13                   inc de
0581+  38F3 79                   ld a,c
0582+  38F4 18 D1                jr Str_i2a10
0583+  38F6             Str_i2_0:
0584+  38F6 0E 00                ld c,0
0585+  38F8 18 DE                jr Str_i2q        
0586+  38FA             Str_i2ex:
0587+  38FA D1                   pop de
0588+  38FB C1                   pop bc
0589+  38FC F1                   pop af
0590+  38FD C9                   ret
0591+  38FE                      
0592+  38FE             ;
0593+  38FE             ; places integer value of DE string into reg-a
0594+  38FE             ;
0595+  38FE             Str_atoi:
0596+  38FE C5                   push bc
0597+  38FF D5                   push de
0598+  3900 E5                   push hl
0599+  3901                      
0600+  3901 EB                   ex de,hl ;hl=de
0601+  3902 11 00 00             ld de,0
0602+  3905 01 00 00             ld bc,0
0603+  3908             Str_a2iLoop:         
0604+  3908 7E                   ld a,(hl)
0605+  3909 23                   inc hl
0606+  390A FE 00                cp 0
0607+  390C 28 1A                jr z, Str_a2ex
0608+  390E FE 30                cp '0'
0609+  3910 38 16                jr c, Str_a2ex
0610+  3912 FE 3A                cp '9'+1
0611+  3914 30 12                jr nc, Str_a2ex
0612+  3916 18 00                jr Str_a2digit
0613+  3918             Str_a2digit:
0614+  3918 D6 30                sub '0'
0615+  391A 4F                   ld c,a
0616+  391B 78                   ld a,b
0617+  391C FE 00                cp 0
0618+  391E 28 0D                jr z,Str_a2ph1
0619+  3920 FE 01                cp 1
0620+  3922 28 0E                jr z,Str_a2ph2
0621+  3924 FE 02                cp 2
0622+  3926 28 0A                jr z,Str_a2ph2   ; the same method  *10+a
0623+  3928             Str_a2ex:               
0624+  3928 7A                   ld a,d          ; store to A
0625+  3929 18 17                jr Str_a2iEx         
0626+  392B             Str_a2Lp:
0627+  392B 18 DB                jr Str_a2iLoop
0628+  392D                      
0629+  392D             Str_a2ph1:
0630+  392D 51                   ld d,c  ; ones, save
0631+  392E 06 01                ld b,1
0632+  3930 18 F9                jr Str_a2Lp
0633+  3932             
0634+  3932             Str_a2ph2:
0635+  3932 7A                   ld a,d           ;d*10 = (d*8)+(d*2)
0636+  3933 CB 27                sla a   ; *2
0637+  3935                         
0638+  3935 CB 22                sla d
0639+  3937 CB 22                sla d
0640+  3939 CB 22                sla d   ;*8
0641+  393B 82                   add a,d  ;+ = become tens
0642+  393C 81                   add a,c  ; +ones
0643+  393D 57                   ld d,a   ;save
0644+  393E 06 02                ld b,2         
0645+  3940 18 E9                jr Str_a2Lp
0646+  3942                      
0647+  3942             Str_a2iEx:
0648+  3942 E1                   pop hl         
0649+  3943 D1                   pop de
0650+  3944 C1                   pop bc
0651+  3945 C9                   ret
0652+  3946             
0653+  3946             ; finds tags in string IX and copies substring between them to DE address
0654+  3946             ; tags are strings addressed by hl (as left tag) and iy (as right tag)
0655+  3946             ; for example: <div>substring between</div>
0656+  3946             ; Separators should be at least 1char.
0657+  3946             ; If can't find left tag till 254th position then returns empty string.
0658+  3946             ; If can't find right tag then truncates substring at 255th position anyway. 
0659+  3946             ;
0660+  3946             Str_TagSubstr:
0661+  3946 F5                   push af
0662+  3947 C5                   push bc
0663+  3948 D5                   push de
0664+  3949 E5                   push hl
0665+  394A DD E5                push ix
0666+  394C                      
0667+  394C D5                   push de
0668+  394D EB                   ex de,hl   ; de=hl (left tag)
0669+  394E 0E 00                ld c,0
0670+  3950             Str_TagScn:
0671+  3950 0C                   inc c
0672+  3951 3E FF                ld a,$ff
0673+  3953 B9                   cp c              ; if 255th reached
0674+  3954 28 15                jr z,Str_LTagNotFound
0675+  3956 CD 96 35             call Str_Compare
0676+  3959 DD 23                inc ix
0677+  395B FE 02                cp 2
0678+  395D 28 F1                jr z,Str_TagScn
0679+  395F CD 6D 35             call Str_Len ;calculates length of left tag
0680+  3962             Str_TagSkp1:
0681+  3962 FE 01                cp 1
0682+  3964 28 08                jr z,Str_TagBr1
0683+  3966 DD 23                inc ix
0684+  3968 3D                   dec a
0685+  3969 18 F7                jr Str_TagSkp1
0686+  396B                      
0687+  396B             Str_LTagNotFound:
0688+  396B E1                   pop hl   ; hl = de where to store substring 
0689+  396C 18 1A                jr Str_TagBr2
0690+  396E                      
0691+  396E             Str_TagBr1:                  
0692+  396E                      
0693+  396E FD E5                push iy
0694+  3970 D1                   pop de   ; de now = iy (right tag)
0695+  3971 E1                   pop hl   ; hl = de where to store substring
0696+  3972                      
0697+  3972 0E 00                ld c,0
0698+  3974             Str_TagSc2:
0699+  3974 CD 96 35             call Str_Compare
0700+  3977 FE 02                cp 2
0701+  3979 20 0D                jr nz,Str_TagBr2
0702+  397B                       
0703+  397B DD 7E 00             ld a,(ix)
0704+  397E 77                   ld (hl),a
0705+  397F 23                   inc hl
0706+  3980 DD 23                inc ix
0707+  3982 0C                   inc c
0708+  3983 3E FF                ld a,$ff
0709+  3985 B9                   cp c              ; if 255th reached
0710+  3986 20 EC                jr nz,Str_TagSc2
0711+  3988             Str_TagBr2:
0712+  3988 3E 00                ld a,0
0713+  398A 77                   ld (hl),a   ; end of new string
0714+  398B DD E1                pop ix
0715+  398D E1                   pop hl
0716+  398E D1                   pop de
0717+  398F C1                   pop bc
0718+  3990 F1                   pop af         
0719+  3991 C9                   ret
0720+  3992                                 
0721+  3992             
0722+  3992             ;
0723+  3992             ; Faster copy from IX to DE length of A
0724+  3992             ;  (ignores 0)
0725+  3992             ;
0726+  3992             
0727+  3992             Block_Copy_:
0728+  3992 FE 00                cp 0
0729+  3994 28 10                jr z,Block_CpyExit
0730+  3996 F5                   push af
0731+  3997 C5                   push bc
0732+  3998 D5                   push de
0733+  3999 E5                   push hl       
0734+  399A             
0735+  399A DD E5                push ix
0736+  399C E1                   pop hl
0737+  399D                      
0738+  399D 4F                   ld c,a
0739+  399E 06 00                ld b,0
0740+  39A0 ED B0                ldir        ; copy bc bytes from HL to DE addrs.
0741+  39A2                      
0742+  39A2 E1                   pop hl
0743+  39A3 D1                   pop de
0744+  39A4 C1                   pop bc
0745+  39A5 F1                   pop af
0746+  39A6             Block_CpyExit:         
0747+  39A6 C9                   ret
0748+  39A7                      
0749+  39A7             ; sets to 0 block in DE length of A
0750+  39A7             Block_Clear_:
0751+  39A7 FE 00                cp 0
0752+  39A9 28 15                jr z,Block_ClrExit
0753+  39AB F5                   push af
0754+  39AC C5                   push bc
0755+  39AD D5                   push de
0756+  39AE E5                   push hl       
0757+  39AF             
0758+  39AF 4F                   ld c,a
0759+  39B0 0D                   dec c
0760+  39B1                      
0761+  39B1 D5                   push de
0762+  39B2 E1                   pop hl
0763+  39B3                      
0764+  39B3 3A C1 39             ld a,(Block_ch0)
0765+  39B6 77                   ld (hl),a
0766+  39B7 13                   inc de
0767+  39B8                      
0768+  39B8 06 00                ld b,0
0769+  39BA ED B0                ldir        ; copy repeating 0 from HL to DE addrs.
0770+  39BC                              
0771+  39BC E1                   pop hl
0772+  39BD D1                   pop de
0773+  39BE C1                   pop bc
0774+  39BF F1                   pop af
0775+  39C0             Block_ClrExit:         
0776+  39C0 C9                   ret
0777+  39C1             
0778+  39C1 00          Block_ch0: .byte 0   ;uses this byte to set 0
0779+  39C2                                  ; (can set spaces or other)
0780+  39C2             
3638   39C2             
3639   39C2             JMP_0000: .equ $F3EF         ;good exit to DOS prompt for sure
3640   39C2             
3641   39C2             ; Container for UCI-string-of-moves in form "e2e4 e7e5 ... e1g1 ... b7b8q ... "
3642   39C2             ; (set before MOVE_byString usage)
3643   39C2 20 20 20 20 MOVE_str: .byte "                                                                "          
3643   39C6 20 20 20 20 
3643   39CA 20 20 20 20 
3643   39CE 20 20 20 20 
3643   39D2 20 20 20 20 
3643   39D6 20 20 20 20 
3643   39DA 20 20 20 20 
3643   39DE 20 20 20 20 
3643   39E2 20 20 20 20 
3643   39E6 20 20 20 20 
3643   39EA 20 20 20 20 
3643   39EE 20 20 20 20 
3643   39F2 20 20 20 20 
3643   39F6 20 20 20 20 
3643   39FA 20 20 20 20 
3643   39FE 20 20 20 20 
3644   3A02 20 20 20 20           .byte "                                                                " 
3644   3A06 20 20 20 20 
3644   3A0A 20 20 20 20 
3644   3A0E 20 20 20 20 
3644   3A12 20 20 20 20 
3644   3A16 20 20 20 20 
3644   3A1A 20 20 20 20 
3644   3A1E 20 20 20 20 
3644   3A22 20 20 20 20 
3644   3A26 20 20 20 20 
3644   3A2A 20 20 20 20 
3644   3A2E 20 20 20 20 
3644   3A32 20 20 20 20 
3644   3A36 20 20 20 20 
3644   3A3A 20 20 20 20 
3644   3A3E 20 20 20 20 
3645   3A42 20 20 20 20           .byte "                                                                "
3645   3A46 20 20 20 20 
3645   3A4A 20 20 20 20 
3645   3A4E 20 20 20 20 
3645   3A52 20 20 20 20 
3645   3A56 20 20 20 20 
3645   3A5A 20 20 20 20 
3645   3A5E 20 20 20 20 
3645   3A62 20 20 20 20 
3645   3A66 20 20 20 20 
3645   3A6A 20 20 20 20 
3645   3A6E 20 20 20 20 
3645   3A72 20 20 20 20 
3645   3A76 20 20 20 20 
3645   3A7A 20 20 20 20 
3645   3A7E 20 20 20 20 
3646   3A82 20 20 20 20           .byte "                                                                "
3646   3A86 20 20 20 20 
3646   3A8A 20 20 20 20 
3646   3A8E 20 20 20 20 
3646   3A92 20 20 20 20 
3646   3A96 20 20 20 20 
3646   3A9A 20 20 20 20 
3646   3A9E 20 20 20 20 
3646   3AA2 20 20 20 20 
3646   3AA6 20 20 20 20 
3646   3AAA 20 20 20 20 
3646   3AAE 20 20 20 20 
3646   3AB2 20 20 20 20 
3646   3AB6 20 20 20 20 
3646   3ABA 20 20 20 20 
3646   3ABE 20 20 20 20 
3647   3AC2                       .ds $700
3648   41C2                       ;2Kb of moves 
3649   41C2                                 
3650   41C2             ; Exporting addresses to include them in other modules 
3651   41C2             ;      (recognises as labels)
3652   41C2                       
3653   41C2                      .export startFEN
3654   41C2                      .export MOVE_str
3655   41C2                      .export BOARD
3656   41C2                      .export SIDE
3657   41C2                      .export CASTLES
3658   41C2                      .export ENPSQ
3659   41C2                      .export WKSQ
3660   41C2                      .export BKSQ
3661   41C2                      .export NEXT_MVSTR
3662   41C2                      .export NEXT_MVCNT
3663   41C2                      .export NEXT_MOVES
3664   41C2                      .export MOVE_CNT
3665   41C2                      .export MOVE_HIST
3666   41C2                      .export GenMovesAndString
3667   41C2                      .export MOVE_byString
3668   41C2                      .export MbyStrMove
3669   41C2                      .export UndoAllMoves
3670   41C2                      .export SQi
3671   41C2                      .export SQt
3672   41C2                      .export GenMoves
3673   41C2                      .export IsEmpty      
3674   41C2                      .export IsOccupied
3675   41C2                      .export IsWhite
3676   41C2                      .export IsBlack
3677   41C2                      .export CaptPiece
3678   41C2                      .export PromoPcId
3679   41C2                      .export CastlMove
3680   41C2                      .export MovesToStr
3681   41C2                      .export MovesOut
3682   41C2                      .export SetFEN
3683   41C2                      .export GetFEN
3684   41C2                      .export BoardOut
3685   41C2                      .export printBOARD        
3686   41C2                      .export ScanSqC
3687   41C2                      .export SetSqScan
3688   41C2                      .export ScanSqNxt
3689   41C2                      .export IsCheck  
3690   41C2                      .export MakeMove
3691   41C2                      .export Swap_Sides
3692   41C2                      .export UnMakeMove
3693   41C2                      .export DEBUGs
3694   41C2                      .export LD_Ix
3695   41C2                      .export DEC_I
3696   41C2                      
3697   41C2             endProgram:
3698   41C2             .end
3699   41C2             
3700   41C2             
tasm: Number of errors = 0
